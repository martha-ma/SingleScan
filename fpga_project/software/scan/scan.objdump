
scan.elf:     file format elf32-littlenios2
scan.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0001cd48 memsz 0x00023f38 flags rwx
    LOAD off    0x0001e000 vaddr 0x00081000 paddr 0x00081000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00081000  00081000  0001e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cd34  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000c240  0004cf78  0004cf78  0000df78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00003bb0  000591b8  000591b8  0001a1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000071f0  0005cd68  0005cd68  0001dd68  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00063f58  00063f58  0001e020  2**0
                  CONTENTS
  7 .epcs_flash   00000000  00081020  00081020  0001e020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001e020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000008d8  00000000  00000000  0001e048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000f59a  00000000  00000000  0001e920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004868  00000000  00000000  0002deba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000051cb  00000000  00000000  00032722  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002484  00000000  00000000  000378f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000038a4  00000000  00000000  00039d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000f46  00000000  00000000  0003d618  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0003e560  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000208  00000000  00000000  0003e580  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00041e1a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00041e1d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00041e22  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00041e23  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00041e24  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00041e28  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00041e2c  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00041e30  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00041e39  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00041e42  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  00041e4b  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001f  00000000  00000000  00041e51  2**0
                  CONTENTS, READONLY
 30 .jdi          0000629e  00000000  00000000  00041e70  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000a4c87  00000000  00000000  0004810e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00081000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
0004cf78 l    d  .rodata	00000000 .rodata
000591b8 l    d  .rwdata	00000000 .rwdata
0005cd68 l    d  .bss	00000000 .bss
00063f58 l    d  .onchip_memory	00000000 .onchip_memory
00081020 l    d  .epcs_flash	00000000 .epcs_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../scan_bsp//obj/HAL/src/crt0.o
0004027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 bsp.c
00000000 l    df *ABS*	00000000 device.c
00000000 l    df *ABS*	00000000 fpga2nios_protocol.c
00040ea4 l     F .text	00000134 hex2ascii
00000000 l    df *ABS*	00000000 iic.c
00041f30 l     F .text	000000ac write_byte
000421dc l     F .text	000000d0 read_byte
00041ac8 l     F .text	00000078 start
00041b40 l     F .text	00000090 stop
00041bd0 l     F .text	000000a8 wait_slave_ack
00041c78 l     F .text	00000098 master_send_ack
00041d10 l     F .text	00000098 no_ack
00041e6c l     F .text	000000c4 iic_read
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 nios2fpga_protocol.c
00042c88 l     F .text	00000078 check_sum
00000000 l    df *ABS*	00000000 pc2dev.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 region.c
00000000 l    df *ABS*	00000000 remote_update.c
00000000 l    df *ABS*	00000000 sick_protocol.c
00045e7c l     F .text	000000a8 string2hex
00045f24 l     F .text	000000c8 find_index
00000000 l    df *ABS*	00000000 socket.c
0005cd7a l     O .bss	00000002 local_port
00000000 l    df *ABS*	00000000 status_led.c
00000000 l    df *ABS*	00000000 tim561.c
00000000 l    df *ABS*	00000000 user_interrupt.c
00000000 l    df *ABS*	00000000 w5500.c
0005ce10 l     O .bss	00000010 SSIZE
0005ce20 l     O .bss	00000010 RSIZE
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00049834 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004999c l     F .text	00000034 alt_dev_reg
0005b624 l     O .rwdata	000000cc epcs_flash
0005b6f0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00049a88 l     F .text	00000034 alt_flash_device_register
00049b10 l     F .text	00000440 alt_epcs_flash_query
00049f50 l     F .text	000000ec alt_epcs_flash_memcmp
0004a328 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004acf4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0004af00 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004b538 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
0004b688 l     F .text	00000038 epcs_test_wip
0004b6c0 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0004bd94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0004bec0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004beec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004c1ec l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0004c32c l     F .text	0000003c alt_get_errno
0004c368 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0005c8f8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0005cd98 g     O .bss	00000004 alt_instruction_exception_handler
0004a29c g     F .text	0000008c alt_epcs_flash_get_info
00059ac8 g     O .rwdata	000004bd udp_reponse
00049920 g     F .text	0000007c alt_main
0005fc98 g     O .bss	00001fbc CycleData
00063e58 g     O .bss	00000100 alt_irq
000592e4 g     O .rwdata	0000000c iic
0004a854 g     F .text	0000005c altera_avalon_fifo_write_almostfull
000591b8 g       *ABS*	00000000 __flash_rwdata_start
000410c0 g     F .text	00000708 fpga2nios_parse
000433d8 g     F .text	00000164 write_laser_presdo
00040ca8 g     F .text	000001fc set_default
00046b4c g     F .text	00000080 close_socket
00059300 g     O .rwdata	00000014 nios2pc
00047134 g     F .text	000000a0 recv
00046c64 g     F .text	000002b0 connect
000487f4 g     F .text	0000005c setRTR
0004874c g     F .text	0000003c getSIPR
00045d54 g     F .text	00000098 image_read
0005cd68 g     O .bss	00000001 isTcpEstablished
000479f4 g     F .text	0000007c timer_initial
0004a5cc g     F .text	00000098 altera_avalon_fifo_init
0005cd78 g     O .bss	00000001 sMI_3E_flag
00047d5c g     F .text	00000078 SPI_I2S_ReceiveData
00045dec g     F .text	00000090 image_erase
0004a90c g     F .text	00000058 altera_avalon_fifo_write_fifo
00042d00 g     F .text	00000020 motor_init
00081000 g       *ABS*	00000000 __alt_mem_epcs_flash
00048ce8 g     F .text	00000130 recv_data_processing
00048560 g     F .text	0000003c getGWIP
0004c788 g     F .text	00000024 altera_nios2_gen2_irq_init
0004b6fc g     F .text	000000fc epcs_sector_erase
00081000 g     F .entry	0000001c __reset
0004aaa8 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00042f2c g     F .text	0000048c init_fpga_sys
00059f88 g     O .rwdata	000008f0 tim561_index
00040020 g       *ABS*	00000000 __flash_exceptions_start
0005b190 g     O .rwdata	00000010 sMI_0_3_F4724744_stop
0005cda4 g     O .bss	00000004 errno
00040c1c g     F .text	0000008c set_network
00045c5c g     F .text	000000f8 image_write
0005a878 g     O .rwdata	000008f0 tim561_respons
0005cd90 g     O .bss	00000004 alt_argv
00064d1c g       *ABS*	00000000 _gp
0004a798 g     F .text	00000060 altera_avalon_fifo_clear_event
0005c778 g     O .rwdata	00000180 alt_fd_list
00048650 g     F .text	00000048 setkeepalive
00042ebc g     F .text	00000070 set_laser_paramter
0004b940 g     F .text	0000006c epcs_write_status_register
000485d8 g     F .text	0000003c setSHAR
0004c08c g     F .text	00000090 alt_find_dev
00049024 g     F .text	00000148 memcpy
0004c2b0 g     F .text	0000007c alt_io_redirect
0004cf78 g       *ABS*	00000000 __DTOR_END__
00047dd4 g     F .text	0000008c IINCHIP_WRITE
000487c8 g     F .text	0000002c getIR
0004c150 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0004a434 g     F .text	00000100 alt_epcs_flash_write_block
00048850 g     F .text	00000040 setRCR
0004b0f8 g     F .text	0000021c altera_avalon_jtag_uart_read
000591b8 g     O .rwdata	0000012c SysPara
00048f68 g     F .text	00000064 .hidden __udivsi3
00063d54 g     O .bss	00000104 image
0004cb54 g     F .text	00000090 alt_icache_flush
00047470 g     F .text	0000048c recvfrom
0005b168 g     O .rwdata	00000028 sMI_2
0005b1b4 g     O .rwdata	0000038d sRI_15B_reply
000478fc g     F .text	00000038 power_led_light
00046984 g     F .text	000001c8 socket
0005cd50 g     O .rwdata	00000004 alt_max_fd
00047c58 g     F .text	00000030 IINCHIP_CSon
000467b4 g     F .text	000001d0 sick_pos_packet
0004a3bc g     F .text	00000078 alt_epcs_flash_erase_block
0005cd74 g     O .bss	00000004 Nios2FPGA_pck
0005d630 g     O .bss	00000021 ConfigMsg
0005cd60 g     O .rwdata	00000004 _global_impure_ptr
0004bc0c g     F .text	0000005c epcs_exit_4_bytes_mode
00063f58 g       *ABS*	00000000 __bss_end
00049744 g     F .text	000000f0 alt_iic_isr_register
0004c680 g     F .text	00000108 alt_tick
00046f7c g     F .text	000001b8 send
0005b544 g     O .rwdata	000000b3 sRI_1DC_reply
0004107c g     F .text	00000044 read_fpga_data
00048890 g     F .text	0000005c clearIR
000496f8 g     F .text	0000004c alt_ic_irq_enabled
000486d4 g     F .text	0000003c getSUBR
0004c5e4 g     F .text	0000009c alt_alarm_stop
0005cd88 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
0005c750 g     O .rwdata	00000028 alt_dev_null
0005dc28 g     O .bss	00000014 LaserDataQueue
00048ad4 g     F .text	000000e4 getSn_RX_RSR
0004188c g     F .text	0000008c process_ld_waring
00045660 g     F .text	00000078 queue_count
00041fdc g     F .text	00000200 write_page
0004bea0 g     F .text	00000020 alt_dcache_flush_all
0005cd84 g     O .bss	00000004 timer_isr_context
00048710 g     F .text	0000003c getSHAR
0004353c g     F .text	00000114 pc_data_to_fpga
0005b1a0 g     O .rwdata	00000014 sRI_E6_reply
0004a7f8 g     F .text	0000005c altera_avalon_fifo_write_ienable
0005cd68 g       *ABS*	00000000 __ram_rwdata_end
0005cd7c g     O .bss	00000008 led_time_flag
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
0004a708 g     F .text	0000002c altera_avalon_fifo_read_almostempty
0005cd48 g     O .rwdata	00000008 alt_dev_list
000591b8 g       *ABS*	00000000 __ram_rodata_end
0005d651 g     O .bss	00000021 RecvMsg
00048fcc g     F .text	00000058 .hidden __umodsi3
00047934 g     F .text	00000038 status_led_light
0004bac8 g     F .text	00000068 epcs_read_electronic_signature
00045994 g     F .text	0000008c read_from_rom
00040bd8 g     F .text	00000044 reboot
00063f58 g       *ABS*	00000000 end
00046f14 g     F .text	00000068 disconnect
000423d0 g     F .text	00000088 init_avalon_fifo
0004ac34 g     F .text	000000c0 altera_avalon_jtag_uart_init
00043650 g     F .text	000016c4 pc2dev_parse
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0004a734 g     F .text	0000003c altera_avalon_fifo_read_event
0004cf78 g       *ABS*	00000000 __CTOR_LIST__
0006d000 g       *ABS*	00000000 __alt_stack_pointer
0004b5b0 g     F .text	0000007c alt_avalon_timer_sc_init
00047fc8 g     F .text	00000174 wiz_read_buf
0004b314 g     F .text	00000224 altera_avalon_jtag_uart_write
000419cc g     F .text	000000fc process_sys_temp_waring
00042d20 g     F .text	00000114 nios2fpga_packet
0004a9d0 g     F .text	0000004c altera_avalon_fifo_read_fifo
00059314 g     O .rwdata	00000708 alarm_region
0004cdc4 g     F .text	00000180 __call_exitprocs
00040a8c g     F .text	000000f4 test
00041034 g     F .text	00000048 fpga_is_has_data
00040244 g     F .text	0000003c _start
0005cd9c g     O .bss	00000004 _alt_tick_rate
0004c7ac g     F .text	000001fc alt_avalon_spi_command
0005cda0 g     O .bss	00000004 _alt_nticks
0005dc3c g     O .bss	0000005c fpga2nios_data
00049a08 g     F .text	00000080 alt_sys_init
00045740 g     F .text	00000040 queue_is_empty
000455e4 g     F .text	0000007c queue_pop
0004ccac g     F .text	00000118 __register_exitproc
0005ce30 g     O .bss	00000800 buffer
00045a88 g     F .text	00000194 read_sys_para
00049408 g     F .text	000000d0 strncmp
00040b80 g     F .text	00000058 Reset_W5500
00048614 g     F .text	0000003c setSIPR
00045c1c g     F .text	00000040 rd_switch_io_value
0005cd2c g     O .rwdata	00000008 sMI_0_3_F4724744_start
00045fec g     F .text	000007c8 sick_protocol_process
0004afa0 g     F .text	00000068 altera_avalon_jtag_uart_close
0005cda8 g     O .bss	00000068 sys_warn
000591b8 g       *ABS*	00000000 __ram_rwdata_start
0004cf78 g       *ABS*	00000000 __ram_rodata_start
000471d4 g     F .text	0000029c sendto
0004b62c g     F .text	0000005c epcs_read_status_register
00040334 g     F .text	00000758 tim561_run
000433b8 g     F .text	00000020 close_peripheral_dev
0004aad0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004cab0 g     F .text	000000a4 alt_get_fd
00061c54 g     O .bss	00002100 send_buffer
00047bf8 g     F .text	00000030 watchdog_feed
0004bb30 g     F .text	00000080 epcs_read_device_id
0004cc30 g     F .text	0000007c memcmp
00046bcc g     F .text	00000098 listen
0004ab90 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00063f58 g       *ABS*	00000000 __alt_stack_base
0004abe0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0004a664 g     F .text	0000003c altera_avalon_fifo_read_status
000402c8 g     F .text	0000006c delay_us
0004aa7c g     F .text	0000002c altera_avalon_fifo_read_other_info
0004c9a8 g     F .text	00000108 alt_find_file
0004bf28 g     F .text	000000a4 alt_dev_llist_insert
00048698 g     F .text	0000003c getGAR
0004816c g     F .text	000003b8 sysinit
0005cd34 g     O .rwdata	00000008 alt_flash_dev_list
0005cd1c g     O .rwdata	00000008 txsize
0005cd68 g       *ABS*	00000000 __bss_start
00047e60 g     F .text	000000a4 IINCHIP_READ
0004916c g     F .text	00000128 memset
00042458 g     F .text	00000830 main
00040280 g     F .text	00000048 delay_ms
00045a20 g     F .text	00000068 save_sys_para
0005cd94 g     O .bss	00000004 alt_envp
000592f0 g     O .rwdata	00000010 pc2nios
00048970 g     F .text	00000040 getSn_IR
0004ab30 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004a770 g     F .text	00000028 altera_avalon_fifo_read_level
0005cd24 g     O .rwdata	00000008 rxsize
00045564 g     F .text	00000080 queue_push
00059ab8 g     O .rwdata	0000000d RSSI_Field_end
0005cd54 g     O .rwdata	00000004 alt_errno
00059a1c g     O .rwdata	0000006d frame_start
00048e70 g     F .text	00000084 .hidden __divsi3
0004cf78 g       *ABS*	00000000 __CTOR_END__
00048bb8 g     F .text	00000130 send_data_processing
00047a70 g     F .text	00000158 timer_isr_interrupt
0004a03c g     F .text	00000260 alt_epcs_flash_write
00049294 g     F .text	000000dc strcmp
000488ec g     F .text	00000084 setSn_MSS
0004cf78 g       *ABS*	00000000 __flash_rodata_start
0005cd6c g     O .bss	00000004 SysStatus
0004cf78 g       *ABS*	00000000 __DTOR_LIST__
000489b0 g     F .text	00000040 getSn_SR
0005d672 g     O .bss	000005b4 pub_buf
000499d0 g     F .text	00000038 alt_irq_init
0004c580 g     F .text	00000064 alt_release_fd
00045528 g     F .text	0000003c queue_clear
0004cbe4 g     F .text	00000014 atexit
000489f0 g     F .text	000000e4 getSn_TX_FSR
000456d8 g     F .text	00000068 queue_is_full
0005cd64 g     O .rwdata	00000004 _impure_ptr
0005cd8c g     O .bss	00000004 alt_argc
0004c02c g     F .text	00000060 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00047d00 g     F .text	0000005c IINCHIP_SpiSendData
00045844 g     F .text	00000150 save2fpga
000422ac g     F .text	00000124 iic_sequential_read
0005cd40 g     O .rwdata	00000008 alt_fs_list
0004813c g     F .text	00000030 iinchip_init
0005cd70 g     O .bss	00000001 isPowerUp
00045780 g     F .text	000000c4 save2rom
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004b7f8 g     F .text	000000f4 epcs_read_buffer
00049abc g     F .text	00000054 alt_epcs_flash_init
0004aa1c g     F .text	00000060 altera_avalon_fifo_write_other_info
00049594 g     F .text	00000050 alt_ic_isr_register
00041da8 g     F .text	000000c4 iic_write
00048788 g     F .text	00000040 setMR
0005cd68 g       *ABS*	00000000 _edata
00063f58 g       *ABS*	00000000 _end
000494d8 g     F .text	00000068 alt_flash_open_dev
00040244 g       *ABS*	00000000 __ram_exceptions_end
0004b008 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00048e18 g     F .text	00000058 setSn_IR
0004966c g     F .text	0000008c alt_ic_irq_disable
0004bbb0 g     F .text	0000005c epcs_enter_4_bytes_mode
0004cbf8 g     F .text	00000038 exit
000417c8 g     F .text	000000c4 process_motor_waring
00049540 g     F .text	00000054 alt_flash_close_dev
00048ef4 g     F .text	00000074 .hidden __modsi3
0004859c g     F .text	0000003c setSUBR
0004a6a0 g     F .text	0000003c altera_avalon_fifo_read_ienable
0006d000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0005b5f8 g     O .rwdata	0000002c sMI_reply
0004cf44 g     F .text	00000034 _exit
0004bc68 g     F .text	0000012c alt_alarm_start
00041918 g     F .text	000000b4 process_window_dust_waring
00047cc4 g     F .text	0000003c getIINCHIP_TxMAX
0004a6dc g     F .text	0000002c altera_avalon_fifo_read_almostfull
00049370 g     F .text	00000098 strlen
0004b8ec g     F .text	00000054 epcs_write_enable
0004c42c g     F .text	00000154 open
0004a964 g     F .text	0000006c altera_avalon_read_fifo
0005dc98 g     O .bss	00002000 LaserData
00042e34 g     F .text	00000088 write_data_to_fpga
00044d14 g     F .text	00000788 pc2dev_packet
0004c11c g     F .text	00000034 alt_icache_flush_all
0005cd3c g     O .rwdata	00000004 alt_priority_mask
00047c28 g     F .text	00000030 IINCHIP_CSoff
00047bc8 g     F .text	00000030 watchdog_init
00047f04 g     F .text	000000c4 wiz_write_buf
000495e4 g     F .text	00000088 alt_ic_irq_enable
0004796c g     F .text	00000088 find_index_old
00047c88 g     F .text	0000003c getIINCHIP_RxMAX
00048524 g     F .text	0000003c setGAR
0004a534 g     F .text	00000098 alt_epcs_flash_read
0004a8b0 g     F .text	0000005c altera_avalon_fifo_write_almostempty
0005cd58 g     O .rwdata	00000008 alt_alarm_list
00040fd8 g     F .text	0000005c big_swap_little
0004bfcc g     F .text	00000060 _do_ctors
00059a8c g     O .rwdata	0000002a RSSI_Field_start
0004bdd0 g     F .text	000000d0 close
0004549c g     F .text	0000008c queue_init
0004989c g     F .text	00000084 alt_load
0004b9ac g     F .text	0000011c epcs_write_buffer



Disassembly of section .entry:

00081000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   81000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   81004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   81008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8100c:	00bffd16 	blt	zero,r2,81004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   81010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   81014:	08409114 	ori	at,at,580
    jmp r1
   81018:	0800683a 	jmp	at
   8101c:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	008001b4 	movhi	r2,6
   40140:	108f9604 	addi	r2,r2,15960
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	008001b4 	movhi	r2,6
   40158:	108f9604 	addi	r2,r2,15960
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_mem_epcs_flash+0xfffbf12c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_mem_epcs_flash+0xfffbf120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a01f17 	ldw	r2,-32644(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a01f17 	ldw	r2,-32644(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40244:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40248:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
   4024c:	068001b4 	movhi	gp,6
    ori gp, gp, %lo(_gp)
   40250:	d6934714 	ori	gp,gp,19740
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40254:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40258:	10b35a14 	ori	r2,r2,52584

    movhi r3, %hi(__bss_end)
   4025c:	00c001b4 	movhi	r3,6
    ori r3, r3, %lo(__bss_end)
   40260:	18cfd614 	ori	r3,r3,16216

    beq r2, r3, 1f
   40264:	10c00326 	beq	r2,r3,40274 <_start+0x30>

0:
    stw zero, (r2)
   40268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40270:	10fffd36 	bltu	r2,r3,40268 <__alt_mem_epcs_flash+0xfffbf268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40274:	004989c0 	call	4989c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40278:	00499200 	call	49920 <alt_main>

0004027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4027c:	003fff06 	br	4027c <__alt_mem_epcs_flash+0xfffbf27c>

00040280 <delay_ms>:
                    .da_cycle_para9   = 76};

Sys_Status SysStatus;
// 500us宸﹀彸
void delay_ms(unsigned int d)
{
   40280:	defffd04 	addi	sp,sp,-12
   40284:	df000215 	stw	fp,8(sp)
   40288:	df000204 	addi	fp,sp,8
   4028c:	e13fff15 	stw	r4,-4(fp)
    int i = 0;
   40290:	e03ffe15 	stw	zero,-8(fp)
    while(i < d * 1000)
   40294:	00000306 	br	402a4 <delay_ms+0x24>
        i++;
   40298:	e0bffe17 	ldw	r2,-8(fp)
   4029c:	10800044 	addi	r2,r2,1
   402a0:	e0bffe15 	stw	r2,-8(fp)
Sys_Status SysStatus;
// 500us宸﹀彸
void delay_ms(unsigned int d)
{
    int i = 0;
    while(i < d * 1000)
   402a4:	e0bfff17 	ldw	r2,-4(fp)
   402a8:	1080fa24 	muli	r2,r2,1000
   402ac:	e0fffe17 	ldw	r3,-8(fp)
   402b0:	18bff936 	bltu	r3,r2,40298 <__alt_mem_epcs_flash+0xfffbf298>
        i++;
}
   402b4:	0001883a 	nop
   402b8:	e037883a 	mov	sp,fp
   402bc:	df000017 	ldw	fp,0(sp)
   402c0:	dec00104 	addi	sp,sp,4
   402c4:	f800283a 	ret

000402c8 <delay_us>:

// 1.4us宸﹀彸
void delay_us(unsigned int d)
{
   402c8:	defffc04 	addi	sp,sp,-16
   402cc:	df000315 	stw	fp,12(sp)
   402d0:	df000304 	addi	fp,sp,12
   402d4:	e13fff15 	stw	r4,-4(fp)
    int i = 0;
   402d8:	e03ffd15 	stw	zero,-12(fp)
    int j = 0;
   402dc:	e03ffe15 	stw	zero,-8(fp)
    for(i = 0; i < d; i++)
   402e0:	e03ffd15 	stw	zero,-12(fp)
   402e4:	00000b06 	br	40314 <delay_us+0x4c>
    {
        for(j = 0; j < 2; j++)
   402e8:	e03ffe15 	stw	zero,-8(fp)
   402ec:	00000306 	br	402fc <delay_us+0x34>
   402f0:	e0bffe17 	ldw	r2,-8(fp)
   402f4:	10800044 	addi	r2,r2,1
   402f8:	e0bffe15 	stw	r2,-8(fp)
   402fc:	e0bffe17 	ldw	r2,-8(fp)
   40300:	10800090 	cmplti	r2,r2,2
   40304:	103ffa1e 	bne	r2,zero,402f0 <__alt_mem_epcs_flash+0xfffbf2f0>
// 1.4us宸﹀彸
void delay_us(unsigned int d)
{
    int i = 0;
    int j = 0;
    for(i = 0; i < d; i++)
   40308:	e0bffd17 	ldw	r2,-12(fp)
   4030c:	10800044 	addi	r2,r2,1
   40310:	e0bffd15 	stw	r2,-12(fp)
   40314:	e0fffd17 	ldw	r3,-12(fp)
   40318:	e0bfff17 	ldw	r2,-4(fp)
   4031c:	18bff236 	bltu	r3,r2,402e8 <__alt_mem_epcs_flash+0xfffbf2e8>
        for(j = 0; j < 2; j++)
        {
            ;
        }
    }
}
   40320:	0001883a 	nop
   40324:	e037883a 	mov	sp,fp
   40328:	df000017 	ldw	fp,0(sp)
   4032c:	dec00104 	addi	sp,sp,4
   40330:	f800283a 	ret

00040334 <tim561_run>:

void tim561_run(void)
{
   40334:	defff804 	addi	sp,sp,-32
   40338:	dfc00715 	stw	ra,28(sp)
   4033c:	df000615 	stw	fp,24(sp)
   40340:	df000604 	addi	fp,sp,24
    uint8  boardcast_ip[4] = {255, 255, 255, 255};
   40344:	00bfffc4 	movi	r2,-1
   40348:	e0bffd45 	stb	r2,-11(fp)
   4034c:	00bfffc4 	movi	r2,-1
   40350:	e0bffd85 	stb	r2,-10(fp)
   40354:	00bfffc4 	movi	r2,-1
   40358:	e0bffdc5 	stb	r2,-9(fp)
   4035c:	00bfffc4 	movi	r2,-1
   40360:	e0bffe05 	stb	r2,-8(fp)
    uint16 local_port      = 30718;
   40364:	009dff84 	movi	r2,30718
   40368:	e0bffb8d 	sth	r2,-18(fp)
    uint8  remote_ip[4];
    uint16 remote_port;
    uint16 len = 0;
   4036c:	e03ffc0d 	sth	zero,-16(fp)
    uint8  status;
    uint8  socket0_error = 0;
   40370:	e03ffc85 	stb	zero,-14(fp)
    uint8  socket2_error = 0;
   40374:	e03ffb05 	stb	zero,-20(fp)
    uint8  socket0_close = 0;
   40378:	e03ffcc5 	stb	zero,-13(fp)
    uint8  socket2_close = 0;
   4037c:	e03ffb45 	stb	zero,-19(fp)
    status               = getSn_SR(SOCKET0);
   40380:	0009883a 	mov	r4,zero
   40384:	00489b00 	call	489b0 <getSn_SR>
   40388:	e0bffd05 	stb	r2,-12(fp)
    switch(status)
   4038c:	e0bffd03 	ldbu	r2,-12(fp)
   40390:	10c00768 	cmpgeui	r3,r2,29
   40394:	18005b1e 	bne	r3,zero,40504 <tim561_run+0x1d0>
   40398:	100690ba 	slli	r3,r2,2
   4039c:	00800134 	movhi	r2,4
   403a0:	1080ec04 	addi	r2,r2,944
   403a4:	1885883a 	add	r2,r3,r2
   403a8:	10800017 	ldw	r2,0(r2)
   403ac:	1000683a 	jmp	r2
   403b0:	000404b8 	rdprs	zero,zero,4114
   403b4:	00040504 	movi	zero,4116
   403b8:	00040504 	movi	zero,4116
   403bc:	00040504 	movi	zero,4116
   403c0:	00040504 	movi	zero,4116
   403c4:	00040504 	movi	zero,4116
   403c8:	00040504 	movi	zero,4116
   403cc:	00040504 	movi	zero,4116
   403d0:	00040504 	movi	zero,4116
   403d4:	00040504 	movi	zero,4116
   403d8:	00040504 	movi	zero,4116
   403dc:	00040504 	movi	zero,4116
   403e0:	00040504 	movi	zero,4116
   403e4:	00040504 	movi	zero,4116
   403e8:	00040504 	movi	zero,4116
   403ec:	00040504 	movi	zero,4116
   403f0:	00040504 	movi	zero,4116
   403f4:	000404f4 	movhi	zero,4115
   403f8:	00040504 	movi	zero,4116
   403fc:	00040424 	muli	zero,zero,4112
   40400:	0004050c 	andi	zero,zero,4116
   40404:	00040504 	movi	zero,4116
   40408:	0004050c 	andi	zero,zero,4116
   4040c:	00040430 	cmpltui	zero,zero,4112
   40410:	00040504 	movi	zero,4116
   40414:	00040504 	movi	zero,4116
   40418:	00040504 	movi	zero,4116
   4041c:	00040504 	movi	zero,4116
   40420:	000404a0 	cmpeqi	zero,zero,4114
    {
        case SOCK_INIT:
            listen(SOCKET0);
   40424:	0009883a 	mov	r4,zero
   40428:	0046bcc0 	call	46bcc <listen>
            break;
   4042c:	00003a06 	br	40518 <tim561_run+0x1e4>
        case SOCK_ESTABLISHED:
            if(getSn_IR(SOCKET0) & Sn_IR_CON)
   40430:	0009883a 	mov	r4,zero
   40434:	00489700 	call	48970 <getSn_IR>
   40438:	10803fcc 	andi	r2,r2,255
   4043c:	1080004c 	andi	r2,r2,1
   40440:	10000326 	beq	r2,zero,40450 <tim561_run+0x11c>
            {
                setSn_IR(SOCKET0, Sn_IR_CON);
   40444:	01400044 	movi	r5,1
   40448:	0009883a 	mov	r4,zero
   4044c:	0048e180 	call	48e18 <setSn_IR>
            }
            len = getSn_RX_RSR(SOCKET0);
   40450:	0009883a 	mov	r4,zero
   40454:	0048ad40 	call	48ad4 <getSn_RX_RSR>
   40458:	e0bffc0d 	sth	r2,-16(fp)
            if(len > 0)
   4045c:	e0bffc0b 	ldhu	r2,-16(fp)
   40460:	10000c26 	beq	r2,zero,40494 <tim561_run+0x160>
            {
                recv(SOCKET0, buffer, len);
   40464:	e0bffc0b 	ldhu	r2,-16(fp)
   40468:	100d883a 	mov	r6,r2
   4046c:	014001b4 	movhi	r5,6
   40470:	29738c04 	addi	r5,r5,-12752
   40474:	0009883a 	mov	r4,zero
   40478:	00471340 	call	47134 <recv>
                pc2dev_parse(SOCKET0, buffer, len);
   4047c:	e0bffc0b 	ldhu	r2,-16(fp)
   40480:	100d883a 	mov	r6,r2
   40484:	014001b4 	movhi	r5,6
   40488:	29738c04 	addi	r5,r5,-12752
   4048c:	0009883a 	mov	r4,zero
   40490:	00436500 	call	43650 <pc2dev_parse>
                // send(0, buffer, len);
            }
            isTcpEstablished = 1;
   40494:	00800044 	movi	r2,1
   40498:	d0a01305 	stb	r2,-32692(gp)
            break;
   4049c:	00001e06 	br	40518 <tim561_run+0x1e4>
        case SOCK_CLOSE_WAIT:
            socket0_close++;
   404a0:	e0bffcc3 	ldbu	r2,-13(fp)
   404a4:	10800044 	addi	r2,r2,1
   404a8:	e0bffcc5 	stb	r2,-13(fp)
            close_socket(SOCKET0);
   404ac:	0009883a 	mov	r4,zero
   404b0:	0046b4c0 	call	46b4c <close_socket>
            break;
   404b4:	00001806 	br	40518 <tim561_run+0x1e4>
        case SOCK_CLOSED:
            socket(SOCKET0, Sn_MR_TCP, 2111, Sn_MR_ND);
   404b8:	01c00804 	movi	r7,32
   404bc:	01820fc4 	movi	r6,2111
   404c0:	01400044 	movi	r5,1
   404c4:	0009883a 	mov	r4,zero
   404c8:	00469840 	call	46984 <socket>
            if(isTcpEstablished)
   404cc:	d0a01303 	ldbu	r2,-32692(gp)
   404d0:	10803fcc 	andi	r2,r2,255
   404d4:	10000f26 	beq	r2,zero,40514 <tim561_run+0x1e0>
            {
                Reset_W5500();
   404d8:	0040b800 	call	40b80 <Reset_W5500>
                delay_ms(500);
   404dc:	01007d04 	movi	r4,500
   404e0:	00402800 	call	40280 <delay_ms>
                set_default();  // 璁剧疆榛樿MAC銆両P銆丟W銆丼UB銆丏NS
   404e4:	0040ca80 	call	40ca8 <set_default>
                set_network();  // 閰嶇疆鍒濆鍖朓P淇℃伅骞舵墦鍗帮紝鍒濆鍖�8涓猄ocket
   404e8:	0040c1c0 	call	40c1c <set_network>
                isTcpEstablished = 0;
   404ec:	d0201305 	stb	zero,-32692(gp)
            }
            break;
   404f0:	00000806 	br	40514 <tim561_run+0x1e0>
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
        case 0x11:
            socket0_error++;
   404f4:	e0bffc83 	ldbu	r2,-14(fp)
   404f8:	10800044 	addi	r2,r2,1
   404fc:	e0bffc85 	stb	r2,-14(fp)
            break;
   40500:	00000506 	br	40518 <tim561_run+0x1e4>
        default:
            len = 0;
   40504:	e03ffc0d 	sth	zero,-16(fp)
            break;
   40508:	00000306 	br	40518 <tim561_run+0x1e4>
                isTcpEstablished = 0;
            }
            break;
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
   4050c:	0001883a 	nop
   40510:	00000106 	br	40518 <tim561_run+0x1e4>
                delay_ms(500);
                set_default();  // 璁剧疆榛樿MAC銆両P銆丟W銆丼UB銆丏NS
                set_network();  // 閰嶇疆鍒濆鍖朓P淇℃伅骞舵墦鍗帮紝鍒濆鍖�8涓猄ocket
                isTcpEstablished = 0;
            }
            break;
   40514:	0001883a 	nop
        default:
            len = 0;
            break;
    }

    status = getSn_SR(SOCKET1);
   40518:	01000044 	movi	r4,1
   4051c:	00489b00 	call	489b0 <getSn_SR>
   40520:	e0bffd05 	stb	r2,-12(fp)
    switch(status)
   40524:	e0bffd03 	ldbu	r2,-12(fp)
   40528:	10c00768 	cmpgeui	r3,r2,29
   4052c:	1800541e 	bne	r3,zero,40680 <tim561_run+0x34c>
   40530:	100690ba 	slli	r3,r2,2
   40534:	00800134 	movhi	r2,4
   40538:	10815204 	addi	r2,r2,1352
   4053c:	1885883a 	add	r2,r3,r2
   40540:	10800017 	ldw	r2,0(r2)
   40544:	1000683a 	jmp	r2
   40548:	00040648 	cmpgei	zero,zero,4121
   4054c:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40550:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40554:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40558:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   4055c:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40560:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40564:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40568:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   4056c:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40570:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40574:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40578:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   4057c:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40580:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40584:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40588:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   4058c:	00040670 	cmpltui	zero,zero,4121
   40590:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40594:	000405bc 	xorhi	zero,zero,4118
   40598:	00040688 	cmpgei	zero,zero,4122
   4059c:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   405a0:	00040688 	cmpgei	zero,zero,4122
   405a4:	000405c8 	cmpgei	zero,zero,4119
   405a8:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   405ac:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   405b0:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   405b4:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   405b8:	00040630 	cmpltui	zero,zero,4120
    {
        case SOCK_INIT:
            listen(SOCKET1);
   405bc:	01000044 	movi	r4,1
   405c0:	0046bcc0 	call	46bcc <listen>
            break;
   405c4:	00003506 	br	4069c <tim561_run+0x368>
        case SOCK_ESTABLISHED:
            if(getSn_IR(SOCKET1) & Sn_IR_CON)
   405c8:	01000044 	movi	r4,1
   405cc:	00489700 	call	48970 <getSn_IR>
   405d0:	10803fcc 	andi	r2,r2,255
   405d4:	1080004c 	andi	r2,r2,1
   405d8:	10000326 	beq	r2,zero,405e8 <tim561_run+0x2b4>
            {
                setSn_IR(SOCKET1, Sn_IR_CON);
   405dc:	01400044 	movi	r5,1
   405e0:	01000044 	movi	r4,1
   405e4:	0048e180 	call	48e18 <setSn_IR>
            }
            len = getSn_RX_RSR(SOCKET1);
   405e8:	01000044 	movi	r4,1
   405ec:	0048ad40 	call	48ad4 <getSn_RX_RSR>
   405f0:	e0bffc0d 	sth	r2,-16(fp)
            if(len > 0)
   405f4:	e0bffc0b 	ldhu	r2,-16(fp)
   405f8:	10002526 	beq	r2,zero,40690 <tim561_run+0x35c>
            {
                recv(SOCKET1, buffer, len);
   405fc:	e0bffc0b 	ldhu	r2,-16(fp)
   40600:	100d883a 	mov	r6,r2
   40604:	014001b4 	movhi	r5,6
   40608:	29738c04 	addi	r5,r5,-12752
   4060c:	01000044 	movi	r4,1
   40610:	00471340 	call	47134 <recv>
                pc2dev_parse(SOCKET1, buffer, len);
   40614:	e0bffc0b 	ldhu	r2,-16(fp)
   40618:	100d883a 	mov	r6,r2
   4061c:	014001b4 	movhi	r5,6
   40620:	29738c04 	addi	r5,r5,-12752
   40624:	01000044 	movi	r4,1
   40628:	00436500 	call	43650 <pc2dev_parse>
            }
            break;
   4062c:	00001806 	br	40690 <tim561_run+0x35c>
        case SOCK_CLOSE_WAIT:
            socket2_close++;
   40630:	e0bffb43 	ldbu	r2,-19(fp)
   40634:	10800044 	addi	r2,r2,1
   40638:	e0bffb45 	stb	r2,-19(fp)
            close_socket(SOCKET1);
   4063c:	01000044 	movi	r4,1
   40640:	0046b4c0 	call	46b4c <close_socket>
            break;
   40644:	00001506 	br	4069c <tim561_run+0x368>
        case SOCK_CLOSED:
            socket(SOCKET1, Sn_MR_TCP, 2111, Sn_MR_ND);
   40648:	01c00804 	movi	r7,32
   4064c:	01820fc4 	movi	r6,2111
   40650:	01400044 	movi	r5,1
   40654:	01000044 	movi	r4,1
   40658:	00469840 	call	46984 <socket>
            if(isTcpEstablished)
   4065c:	d0a01303 	ldbu	r2,-32692(gp)
   40660:	10803fcc 	andi	r2,r2,255
   40664:	10000c26 	beq	r2,zero,40698 <tim561_run+0x364>
            {
                // Reset_W5500();
                // delay_ms(500);
                // set_default();  // 璁剧疆榛樿MAC銆両P銆丟W銆丼UB銆丏NS
                // set_network();  // 閰嶇疆鍒濆鍖朓P淇℃伅骞舵墦鍗帮紝鍒濆鍖�8涓猄ocket
                isTcpEstablished = 0;
   40668:	d0201305 	stb	zero,-32692(gp)
            }
            break;
   4066c:	00000a06 	br	40698 <tim561_run+0x364>
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
        case 0x11:
            socket2_error++;
   40670:	e0bffb03 	ldbu	r2,-20(fp)
   40674:	10800044 	addi	r2,r2,1
   40678:	e0bffb05 	stb	r2,-20(fp)
            break;
   4067c:	00000706 	br	4069c <tim561_run+0x368>
        default:
            len = 0;
   40680:	e03ffc0d 	sth	zero,-16(fp)
            break;
   40684:	00000506 	br	4069c <tim561_run+0x368>
                isTcpEstablished = 0;
            }
            break;
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
   40688:	0001883a 	nop
   4068c:	00000306 	br	4069c <tim561_run+0x368>
            if(len > 0)
            {
                recv(SOCKET1, buffer, len);
                pc2dev_parse(SOCKET1, buffer, len);
            }
            break;
   40690:	0001883a 	nop
   40694:	00000106 	br	4069c <tim561_run+0x368>
                // delay_ms(500);
                // set_default();  // 璁剧疆榛樿MAC銆両P銆丟W銆丼UB銆丏NS
                // set_network();  // 閰嶇疆鍒濆鍖朓P淇℃伅骞舵墦鍗帮紝鍒濆鍖�8涓猄ocket
                isTcpEstablished = 0;
            }
            break;
   40698:	0001883a 	nop
        default:
            len = 0;
            break;
    }

    status = getSn_SR(SOCKET4);
   4069c:	01000104 	movi	r4,4
   406a0:	00489b00 	call	489b0 <getSn_SR>
   406a4:	e0bffd05 	stb	r2,-12(fp)
    switch(status)
   406a8:	e0bffd03 	ldbu	r2,-12(fp)
   406ac:	10c00768 	cmpgeui	r3,r2,29
   406b0:	1800501e 	bne	r3,zero,407f4 <tim561_run+0x4c0>
   406b4:	100690ba 	slli	r3,r2,2
   406b8:	00800134 	movhi	r2,4
   406bc:	1081b304 	addi	r2,r2,1740
   406c0:	1885883a 	add	r2,r3,r2
   406c4:	10800017 	ldw	r2,0(r2)
   406c8:	1000683a 	jmp	r2
   406cc:	000407cc 	andi	zero,zero,4127
   406d0:	000407f4 	movhi	zero,4127
   406d4:	000407f4 	movhi	zero,4127
   406d8:	000407f4 	movhi	zero,4127
   406dc:	000407f4 	movhi	zero,4127
   406e0:	000407f4 	movhi	zero,4127
   406e4:	000407f4 	movhi	zero,4127
   406e8:	000407f4 	movhi	zero,4127
   406ec:	000407f4 	movhi	zero,4127
   406f0:	000407f4 	movhi	zero,4127
   406f4:	000407f4 	movhi	zero,4127
   406f8:	000407f4 	movhi	zero,4127
   406fc:	000407f4 	movhi	zero,4127
   40700:	000407f4 	movhi	zero,4127
   40704:	000407f4 	movhi	zero,4127
   40708:	000407f4 	movhi	zero,4127
   4070c:	000407f4 	movhi	zero,4127
   40710:	000407e4 	muli	zero,zero,4127
   40714:	000407f4 	movhi	zero,4127
   40718:	00040740 	call	4074 <__alt_mem_onchip_memory-0x3bf8c>
   4071c:	000407fc 	xorhi	zero,zero,4127
   40720:	000407f4 	movhi	zero,4127
   40724:	000407fc 	xorhi	zero,zero,4127
   40728:	0004074c 	andi	zero,zero,4125
   4072c:	000407f4 	movhi	zero,4127
   40730:	000407f4 	movhi	zero,4127
   40734:	000407f4 	movhi	zero,4127
   40738:	000407f4 	movhi	zero,4127
   4073c:	000407b4 	movhi	zero,4126
    {
        case SOCK_INIT:
            listen(SOCKET4);
   40740:	01000104 	movi	r4,4
   40744:	0046bcc0 	call	46bcc <listen>
            break;
   40748:	00002f06 	br	40808 <tim561_run+0x4d4>
        case SOCK_ESTABLISHED:
            if(getSn_IR(SOCKET4) & Sn_IR_CON)
   4074c:	01000104 	movi	r4,4
   40750:	00489700 	call	48970 <getSn_IR>
   40754:	10803fcc 	andi	r2,r2,255
   40758:	1080004c 	andi	r2,r2,1
   4075c:	10000326 	beq	r2,zero,4076c <tim561_run+0x438>
            {
                setSn_IR(SOCKET4, Sn_IR_CON);
   40760:	01400044 	movi	r5,1
   40764:	01000104 	movi	r4,4
   40768:	0048e180 	call	48e18 <setSn_IR>
            }
            len = getSn_RX_RSR(SOCKET4);
   4076c:	01000104 	movi	r4,4
   40770:	0048ad40 	call	48ad4 <getSn_RX_RSR>
   40774:	e0bffc0d 	sth	r2,-16(fp)
            if(len > 0)
   40778:	e0bffc0b 	ldhu	r2,-16(fp)
   4077c:	10002126 	beq	r2,zero,40804 <tim561_run+0x4d0>
            {
                recv(SOCKET4, buffer, len);
   40780:	e0bffc0b 	ldhu	r2,-16(fp)
   40784:	100d883a 	mov	r6,r2
   40788:	014001b4 	movhi	r5,6
   4078c:	29738c04 	addi	r5,r5,-12752
   40790:	01000104 	movi	r4,4
   40794:	00471340 	call	47134 <recv>
                pc2dev_parse(SOCKET4, buffer, len);
   40798:	e0bffc0b 	ldhu	r2,-16(fp)
   4079c:	100d883a 	mov	r6,r2
   407a0:	014001b4 	movhi	r5,6
   407a4:	29738c04 	addi	r5,r5,-12752
   407a8:	01000104 	movi	r4,4
   407ac:	00436500 	call	43650 <pc2dev_parse>
                // send(0, buffer, len);
            }
            break;
   407b0:	00001406 	br	40804 <tim561_run+0x4d0>
        case SOCK_CLOSE_WAIT:
            socket2_close++;
   407b4:	e0bffb43 	ldbu	r2,-19(fp)
   407b8:	10800044 	addi	r2,r2,1
   407bc:	e0bffb45 	stb	r2,-19(fp)
            close_socket(SOCKET4);
   407c0:	01000104 	movi	r4,4
   407c4:	0046b4c0 	call	46b4c <close_socket>
            break;
   407c8:	00000f06 	br	40808 <tim561_run+0x4d4>
        case SOCK_CLOSED:
            socket(SOCKET4, Sn_MR_TCP, 2112, Sn_MR_ND);
   407cc:	01c00804 	movi	r7,32
   407d0:	01821004 	movi	r6,2112
   407d4:	01400044 	movi	r5,1
   407d8:	01000104 	movi	r4,4
   407dc:	00469840 	call	46984 <socket>
            break;
   407e0:	00000906 	br	40808 <tim561_run+0x4d4>
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
        case 0x11:
            socket2_error++;
   407e4:	e0bffb03 	ldbu	r2,-20(fp)
   407e8:	10800044 	addi	r2,r2,1
   407ec:	e0bffb05 	stb	r2,-20(fp)
            break;
   407f0:	00000506 	br	40808 <tim561_run+0x4d4>
        default:
            len = 0;
   407f4:	e03ffc0d 	sth	zero,-16(fp)
            break;
   407f8:	00000306 	br	40808 <tim561_run+0x4d4>
        case SOCK_CLOSED:
            socket(SOCKET4, Sn_MR_TCP, 2112, Sn_MR_ND);
            break;
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
   407fc:	0001883a 	nop
   40800:	00000106 	br	40808 <tim561_run+0x4d4>
            {
                recv(SOCKET4, buffer, len);
                pc2dev_parse(SOCKET4, buffer, len);
                // send(0, buffer, len);
            }
            break;
   40804:	0001883a 	nop
        default:
            len = 0;
            break;
    }

    status = getSn_SR(SOCKET5);
   40808:	01000144 	movi	r4,5
   4080c:	00489b00 	call	489b0 <getSn_SR>
   40810:	e0bffd05 	stb	r2,-12(fp)
    switch(status)
   40814:	e0bffd03 	ldbu	r2,-12(fp)
   40818:	10c00768 	cmpgeui	r3,r2,29
   4081c:	1800501e 	bne	r3,zero,40960 <tim561_run+0x62c>
   40820:	100690ba 	slli	r3,r2,2
   40824:	00800134 	movhi	r2,4
   40828:	10820e04 	addi	r2,r2,2104
   4082c:	1885883a 	add	r2,r3,r2
   40830:	10800017 	ldw	r2,0(r2)
   40834:	1000683a 	jmp	r2
   40838:	00040938 	rdprs	zero,zero,4132
   4083c:	00040960 	cmpeqi	zero,zero,4133
   40840:	00040960 	cmpeqi	zero,zero,4133
   40844:	00040960 	cmpeqi	zero,zero,4133
   40848:	00040960 	cmpeqi	zero,zero,4133
   4084c:	00040960 	cmpeqi	zero,zero,4133
   40850:	00040960 	cmpeqi	zero,zero,4133
   40854:	00040960 	cmpeqi	zero,zero,4133
   40858:	00040960 	cmpeqi	zero,zero,4133
   4085c:	00040960 	cmpeqi	zero,zero,4133
   40860:	00040960 	cmpeqi	zero,zero,4133
   40864:	00040960 	cmpeqi	zero,zero,4133
   40868:	00040960 	cmpeqi	zero,zero,4133
   4086c:	00040960 	cmpeqi	zero,zero,4133
   40870:	00040960 	cmpeqi	zero,zero,4133
   40874:	00040960 	cmpeqi	zero,zero,4133
   40878:	00040960 	cmpeqi	zero,zero,4133
   4087c:	00040950 	cmplti	zero,zero,4133
   40880:	00040960 	cmpeqi	zero,zero,4133
   40884:	000408ac 	andhi	zero,zero,4130
   40888:	00040968 	cmpgeui	zero,zero,4133
   4088c:	00040960 	cmpeqi	zero,zero,4133
   40890:	00040968 	cmpgeui	zero,zero,4133
   40894:	000408b8 	rdprs	zero,zero,4130
   40898:	00040960 	cmpeqi	zero,zero,4133
   4089c:	00040960 	cmpeqi	zero,zero,4133
   408a0:	00040960 	cmpeqi	zero,zero,4133
   408a4:	00040960 	cmpeqi	zero,zero,4133
   408a8:	00040920 	cmpeqi	zero,zero,4132
    {
        case SOCK_INIT:
            listen(SOCKET5);
   408ac:	01000144 	movi	r4,5
   408b0:	0046bcc0 	call	46bcc <listen>
            break;
   408b4:	00002f06 	br	40974 <tim561_run+0x640>
        case SOCK_ESTABLISHED:
            if(getSn_IR(SOCKET5) & Sn_IR_CON)
   408b8:	01000144 	movi	r4,5
   408bc:	00489700 	call	48970 <getSn_IR>
   408c0:	10803fcc 	andi	r2,r2,255
   408c4:	1080004c 	andi	r2,r2,1
   408c8:	10000326 	beq	r2,zero,408d8 <tim561_run+0x5a4>
            {
                setSn_IR(SOCKET5, Sn_IR_CON);
   408cc:	01400044 	movi	r5,1
   408d0:	01000144 	movi	r4,5
   408d4:	0048e180 	call	48e18 <setSn_IR>
            }

            len = getSn_RX_RSR(SOCKET5);
   408d8:	01000144 	movi	r4,5
   408dc:	0048ad40 	call	48ad4 <getSn_RX_RSR>
   408e0:	e0bffc0d 	sth	r2,-16(fp)
            if(len > 0)
   408e4:	e0bffc0b 	ldhu	r2,-16(fp)
   408e8:	10002126 	beq	r2,zero,40970 <tim561_run+0x63c>
            {
                recv(SOCKET5, buffer, len);
   408ec:	e0bffc0b 	ldhu	r2,-16(fp)
   408f0:	100d883a 	mov	r6,r2
   408f4:	014001b4 	movhi	r5,6
   408f8:	29738c04 	addi	r5,r5,-12752
   408fc:	01000144 	movi	r4,5
   40900:	00471340 	call	47134 <recv>
                pc2dev_parse(SOCKET5, buffer, len);
   40904:	e0bffc0b 	ldhu	r2,-16(fp)
   40908:	100d883a 	mov	r6,r2
   4090c:	014001b4 	movhi	r5,6
   40910:	29738c04 	addi	r5,r5,-12752
   40914:	01000144 	movi	r4,5
   40918:	00436500 	call	43650 <pc2dev_parse>
                // send(0, buffer, len);
            }
            break;
   4091c:	00001406 	br	40970 <tim561_run+0x63c>
        case SOCK_CLOSE_WAIT:
            socket2_close++;
   40920:	e0bffb43 	ldbu	r2,-19(fp)
   40924:	10800044 	addi	r2,r2,1
   40928:	e0bffb45 	stb	r2,-19(fp)
            close_socket(SOCKET5);
   4092c:	01000144 	movi	r4,5
   40930:	0046b4c0 	call	46b4c <close_socket>
            break;
   40934:	00000f06 	br	40974 <tim561_run+0x640>
        case SOCK_CLOSED:
            socket(SOCKET5, Sn_MR_TCP, 2112, Sn_MR_ND);
   40938:	01c00804 	movi	r7,32
   4093c:	01821004 	movi	r6,2112
   40940:	01400044 	movi	r5,1
   40944:	01000144 	movi	r4,5
   40948:	00469840 	call	46984 <socket>
            break;
   4094c:	00000906 	br	40974 <tim561_run+0x640>
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
        case 0x11:
            socket2_error++;
   40950:	e0bffb03 	ldbu	r2,-20(fp)
   40954:	10800044 	addi	r2,r2,1
   40958:	e0bffb05 	stb	r2,-20(fp)
            break;
   4095c:	00000506 	br	40974 <tim561_run+0x640>
        default:
            len = 0;
   40960:	e03ffc0d 	sth	zero,-16(fp)
            break;
   40964:	00000306 	br	40974 <tim561_run+0x640>
        case SOCK_CLOSED:
            socket(SOCKET5, Sn_MR_TCP, 2112, Sn_MR_ND);
            break;
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
   40968:	0001883a 	nop
   4096c:	00000106 	br	40974 <tim561_run+0x640>
            {
                recv(SOCKET5, buffer, len);
                pc2dev_parse(SOCKET5, buffer, len);
                // send(0, buffer, len);
            }
            break;
   40970:	0001883a 	nop
        default:
            len = 0;
            break;
    }

    switch(getSn_SR(SOCKET7))
   40974:	010001c4 	movi	r4,7
   40978:	00489b00 	call	489b0 <getSn_SR>
   4097c:	10803fcc 	andi	r2,r2,255
   40980:	10003426 	beq	r2,zero,40a54 <tim561_run+0x720>
   40984:	108008a0 	cmpeqi	r2,r2,34
   40988:	1000011e 	bne	r2,zero,40990 <tim561_run+0x65c>
            break;
        case SOCK_CLOSED:
            socket(SOCKET7, Sn_MR_UDP, local_port, 0);
            break;
    }
}
   4098c:	00003906 	br	40a74 <tim561_run+0x740>
    }

    switch(getSn_SR(SOCKET7))
    {
        case SOCK_UDP:  // Socket???????(??)??
            delay_ms(10);
   40990:	01000284 	movi	r4,10
   40994:	00402800 	call	40280 <delay_ms>
            if(getSn_IR(SOCKET7) & Sn_IR_RECV)
   40998:	010001c4 	movi	r4,7
   4099c:	00489700 	call	48970 <getSn_IR>
   409a0:	10803fcc 	andi	r2,r2,255
   409a4:	1080010c 	andi	r2,r2,4
   409a8:	10000326 	beq	r2,zero,409b8 <tim561_run+0x684>
            {
                setSn_IR(SOCKET7, Sn_IR_RECV);
   409ac:	01400104 	movi	r5,4
   409b0:	010001c4 	movi	r4,7
   409b4:	0048e180 	call	48e18 <setSn_IR>
            }

            if((len = getSn_RX_RSR(SOCKET7)) > 0)
   409b8:	010001c4 	movi	r4,7
   409bc:	0048ad40 	call	48ad4 <getSn_RX_RSR>
   409c0:	e0bffc0d 	sth	r2,-16(fp)
   409c4:	e0bffc0b 	ldhu	r2,-16(fp)
   409c8:	10002926 	beq	r2,zero,40a70 <tim561_run+0x73c>
            {
                memset(buffer, 0, len + 1);
   409cc:	e0bffc0b 	ldhu	r2,-16(fp)
   409d0:	10800044 	addi	r2,r2,1
   409d4:	100d883a 	mov	r6,r2
   409d8:	000b883a 	mov	r5,zero
   409dc:	010001b4 	movhi	r4,6
   409e0:	21338c04 	addi	r4,r4,-12752
   409e4:	004916c0 	call	4916c <memset>
                recvfrom(SOCKET7, buffer, len, remote_ip, &remote_port);
   409e8:	e0fffc0b 	ldhu	r3,-16(fp)
   409ec:	e13ffe44 	addi	r4,fp,-7
   409f0:	e0bfff84 	addi	r2,fp,-2
   409f4:	d8800015 	stw	r2,0(sp)
   409f8:	200f883a 	mov	r7,r4
   409fc:	180d883a 	mov	r6,r3
   40a00:	014001b4 	movhi	r5,6
   40a04:	29738c04 	addi	r5,r5,-12752
   40a08:	010001c4 	movi	r4,7
   40a0c:	00474700 	call	47470 <recvfrom>
                // sendto(1, buffer, len, remote_ip, remote_port);
                sendto(SOCKET7, udp_reponse, 1213, boardcast_ip, remote_port);
   40a10:	e0bfff8b 	ldhu	r2,-2(fp)
   40a14:	10bfffcc 	andi	r2,r2,65535
   40a18:	e0fffd44 	addi	r3,fp,-11
   40a1c:	d8800015 	stw	r2,0(sp)
   40a20:	180f883a 	mov	r7,r3
   40a24:	01812f44 	movi	r6,1213
   40a28:	014001b4 	movhi	r5,6
   40a2c:	2966b204 	addi	r5,r5,-25912
   40a30:	010001c4 	movi	r4,7
   40a34:	00471d40 	call	471d4 <sendto>
                alarm_region.change_region_flag = 0x01;
   40a38:	008001b4 	movhi	r2,6
   40a3c:	10a4c504 	addi	r2,r2,-27884
   40a40:	00c00044 	movi	r3,1
   40a44:	10c00085 	stb	r3,2(r2)
                isPowerUp                       = 0x01;
   40a48:	00800044 	movi	r2,1
   40a4c:	d0a01505 	stb	r2,-32684(gp)
            }
            break;
   40a50:	00000706 	br	40a70 <tim561_run+0x73c>
        case SOCK_CLOSED:
            socket(SOCKET7, Sn_MR_UDP, local_port, 0);
   40a54:	e0bffb8b 	ldhu	r2,-18(fp)
   40a58:	000f883a 	mov	r7,zero
   40a5c:	100d883a 	mov	r6,r2
   40a60:	01400084 	movi	r5,2
   40a64:	010001c4 	movi	r4,7
   40a68:	00469840 	call	46984 <socket>
            break;
   40a6c:	00000106 	br	40a74 <tim561_run+0x740>
                // sendto(1, buffer, len, remote_ip, remote_port);
                sendto(SOCKET7, udp_reponse, 1213, boardcast_ip, remote_port);
                alarm_region.change_region_flag = 0x01;
                isPowerUp                       = 0x01;
            }
            break;
   40a70:	0001883a 	nop
        case SOCK_CLOSED:
            socket(SOCKET7, Sn_MR_UDP, local_port, 0);
            break;
    }
}
   40a74:	0001883a 	nop
   40a78:	e037883a 	mov	sp,fp
   40a7c:	dfc00117 	ldw	ra,4(sp)
   40a80:	df000017 	ldw	fp,0(sp)
   40a84:	dec00204 	addi	sp,sp,8
   40a88:	f800283a 	ret

00040a8c <test>:

void test(void)
{
   40a8c:	defe6304 	addi	sp,sp,-1652
   40a90:	dfc19c15 	stw	ra,1648(sp)
   40a94:	df019b15 	stw	fp,1644(sp)
   40a98:	df019b04 	addi	fp,sp,1644
    IINCHIP_CSon();
   40a9c:	0047c580 	call	47c58 <IINCHIP_CSon>
    Reset_W5500();
   40aa0:	0040b800 	call	40b80 <Reset_W5500>
    delay_ms(500);
   40aa4:	01007d04 	movi	r4,500
   40aa8:	00402800 	call	40280 <delay_ms>
    int           time        = 1;
   40aac:	00800044 	movi	r2,1
   40ab0:	e0be6615 	stw	r2,-1640(fp)
    unsigned char data        = 0x1e;
   40ab4:	00800784 	movi	r2,30
   40ab8:	e0be6705 	stb	r2,-1636(fp)
    int           offset_addr = 4096;
   40abc:	00840004 	movi	r2,4096
   40ac0:	e0be6815 	stw	r2,-1632(fp)
    int           len         = TARGET_NUMBER * 2;
   40ac4:	00819584 	movi	r2,1622
   40ac8:	e0be6915 	stw	r2,-1628(fp)
    unsigned char buf[811 * 2];
    IOWR_ALTERA_AVALON_PIO_DATA(W5500_INT_BASE, 0x00);
   40acc:	0007883a 	mov	r3,zero
   40ad0:	00800234 	movhi	r2,8
   40ad4:	10886804 	addi	r2,r2,8608
   40ad8:	10c00035 	stwio	r3,0(r2)
    while(1)
    {
        if(time)
   40adc:	e0be6617 	ldw	r2,-1640(fp)
   40ae0:	10001c26 	beq	r2,zero,40b54 <test+0xc8>
        {
            for(int i = 0; i < 811 * 2; i++)
   40ae4:	e03e6515 	stw	zero,-1644(fp)
   40ae8:	00000806 	br	40b0c <test+0x80>
                buf[i] = data;
   40aec:	e0fe6a04 	addi	r3,fp,-1624
   40af0:	e0be6517 	ldw	r2,-1644(fp)
   40af4:	1885883a 	add	r2,r3,r2
   40af8:	e0fe6703 	ldbu	r3,-1636(fp)
   40afc:	10c00005 	stb	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(W5500_INT_BASE, 0x00);
    while(1)
    {
        if(time)
        {
            for(int i = 0; i < 811 * 2; i++)
   40b00:	e0be6517 	ldw	r2,-1644(fp)
   40b04:	10800044 	addi	r2,r2,1
   40b08:	e0be6515 	stw	r2,-1644(fp)
   40b0c:	e0be6517 	ldw	r2,-1644(fp)
   40b10:	10819590 	cmplti	r2,r2,1622
   40b14:	103ff51e 	bne	r2,zero,40aec <__alt_mem_epcs_flash+0xfffbfaec>
                buf[i] = data;
            iic.write_page(offset_addr, buf, len);
   40b18:	008001b4 	movhi	r2,6
   40b1c:	10a4b904 	addi	r2,r2,-27932
   40b20:	10800117 	ldw	r2,4(r2)
   40b24:	e13e6817 	ldw	r4,-1632(fp)
   40b28:	e0fe6917 	ldw	r3,-1628(fp)
   40b2c:	197fffcc 	andi	r5,r3,65535
   40b30:	e0fe6a04 	addi	r3,fp,-1624
   40b34:	280d883a 	mov	r6,r5
   40b38:	180b883a 	mov	r5,r3
   40b3c:	103ee83a 	callr	r2
            memset(buf, 0, TARGET_NUMBER * 2);
   40b40:	e0be6a04 	addi	r2,fp,-1624
   40b44:	01819584 	movi	r6,1622
   40b48:	000b883a 	mov	r5,zero
   40b4c:	1009883a 	mov	r4,r2
   40b50:	004916c0 	call	4916c <memset>
        }
        //		alarm_region.read_from_rom(&alarm_region, alarm_region.change_region_value * 3);
        iic_sequential_read(offset_addr, buf, len);
   40b54:	e0fe6817 	ldw	r3,-1632(fp)
   40b58:	e0be6917 	ldw	r2,-1628(fp)
   40b5c:	113fffcc 	andi	r4,r2,65535
   40b60:	e0be6a04 	addi	r2,fp,-1624
   40b64:	200d883a 	mov	r6,r4
   40b68:	100b883a 	mov	r5,r2
   40b6c:	1809883a 	mov	r4,r3
   40b70:	00422ac0 	call	422ac <iic_sequential_read>
        delay_us(1000);
   40b74:	0100fa04 	movi	r4,1000
   40b78:	00402c80 	call	402c8 <delay_us>
    }
   40b7c:	003fd706 	br	40adc <__alt_mem_epcs_flash+0xfffbfadc>

00040b80 <Reset_W5500>:

uint8 pub_buf[1460];


void Reset_W5500(void)
{
   40b80:	defffe04 	addi	sp,sp,-8
   40b84:	dfc00115 	stw	ra,4(sp)
   40b88:	df000015 	stw	fp,0(sp)
   40b8c:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DATA(W5500_RST_BASE, 0x00);
   40b90:	0007883a 	mov	r3,zero
   40b94:	00800234 	movhi	r2,8
   40b98:	10886c04 	addi	r2,r2,8624
   40b9c:	10c00035 	stwio	r3,0(r2)
    delay_ms(5);
   40ba0:	01000144 	movi	r4,5
   40ba4:	00402800 	call	40280 <delay_ms>
    IOWR_ALTERA_AVALON_PIO_DATA(W5500_RST_BASE, 0x01);
   40ba8:	00c00044 	movi	r3,1
   40bac:	00800234 	movhi	r2,8
   40bb0:	10886c04 	addi	r2,r2,8624
   40bb4:	10c00035 	stwio	r3,0(r2)
    delay_ms(5);
   40bb8:	01000144 	movi	r4,5
   40bbc:	00402800 	call	40280 <delay_ms>
}
   40bc0:	0001883a 	nop
   40bc4:	e037883a 	mov	sp,fp
   40bc8:	dfc00117 	ldw	ra,4(sp)
   40bcc:	df000017 	ldw	fp,0(sp)
   40bd0:	dec00204 	addi	sp,sp,8
   40bd4:	f800283a 	ret

00040bd8 <reboot>:
//reboot
void reboot(void)
{
   40bd8:	defffc04 	addi	sp,sp,-16
   40bdc:	dfc00315 	stw	ra,12(sp)
   40be0:	df000215 	stw	fp,8(sp)
   40be4:	df000204 	addi	fp,sp,8
    pFunction Jump_To_Application;
    uint32 JumpAddress;
    JumpAddress = *(unsigned int*) (0x00000004);
   40be8:	00800104 	movi	r2,4
   40bec:	10800017 	ldw	r2,0(r2)
   40bf0:	e0bffe15 	stw	r2,-8(fp)
    Jump_To_Application = (pFunction) JumpAddress;
   40bf4:	e0bffe17 	ldw	r2,-8(fp)
   40bf8:	e0bfff15 	stw	r2,-4(fp)
    Jump_To_Application();
   40bfc:	e0bfff17 	ldw	r2,-4(fp)
   40c00:	103ee83a 	callr	r2
}
   40c04:	0001883a 	nop
   40c08:	e037883a 	mov	sp,fp
   40c0c:	dfc00117 	ldw	ra,4(sp)
   40c10:	df000017 	ldw	fp,0(sp)
   40c14:	dec00204 	addi	sp,sp,8
   40c18:	f800283a 	ret

00040c1c <set_network>:

void set_network(void)                                                                                                          // 配置初始化IP信息并打印，初始化8个Socket
{
   40c1c:	defffd04 	addi	sp,sp,-12
   40c20:	dfc00215 	stw	ra,8(sp)
   40c24:	df000115 	stw	fp,4(sp)
   40c28:	df000104 	addi	fp,sp,4
    uint8 ip[4];
    setSHAR(ConfigMsg.mac);
   40c2c:	010001b4 	movhi	r4,6
   40c30:	21358d04 	addi	r4,r4,-10700
   40c34:	00485d80 	call	485d8 <setSHAR>
    setSUBR(ConfigMsg.sub);
   40c38:	010001b4 	movhi	r4,6
   40c3c:	21359004 	addi	r4,r4,-10688
   40c40:	004859c0 	call	4859c <setSUBR>
    setGAR(ConfigMsg.gw);
   40c44:	010001b4 	movhi	r4,6
   40c48:	21359104 	addi	r4,r4,-10684
   40c4c:	00485240 	call	48524 <setGAR>
    setSIPR(ConfigMsg.lip);
   40c50:	010001b4 	movhi	r4,6
   40c54:	21358f04 	addi	r4,r4,-10692
   40c58:	00486140 	call	48614 <setSIPR>

    sysinit(txsize, rxsize);                                                                                              // 初始化8个socket
   40c5c:	d1600204 	addi	r5,gp,-32760
   40c60:	d1200004 	addi	r4,gp,-32768
   40c64:	004816c0 	call	4816c <sysinit>

    setRTR(5000);                                                                                                                                         // 设置超时时间
   40c68:	0104e204 	movi	r4,5000
   40c6c:	00487f40 	call	487f4 <setRTR>
    setRCR(3);                                                                                                                                                    // 设置最大重新发送次数
   40c70:	010000c4 	movi	r4,3
   40c74:	00488500 	call	48850 <setRCR>

    getSIPR (ip);
   40c78:	e13fff04 	addi	r4,fp,-4
   40c7c:	004874c0 	call	4874c <getSIPR>
    getSUBR(ip);
   40c80:	e13fff04 	addi	r4,fp,-4
   40c84:	00486d40 	call	486d4 <getSUBR>
    getGAR(ip);
   40c88:	e13fff04 	addi	r4,fp,-4
   40c8c:	00486980 	call	48698 <getGAR>
}
   40c90:	0001883a 	nop
   40c94:	e037883a 	mov	sp,fp
   40c98:	dfc00117 	ldw	ra,4(sp)
   40c9c:	df000017 	ldw	fp,0(sp)
   40ca0:	dec00204 	addi	sp,sp,8
   40ca4:	f800283a 	ret

00040ca8 <set_default>:

void set_default(void)                                                                                                          // 设置默认MAC、IP、GW、SUB、DNS
{
   40ca8:	defff904 	addi	sp,sp,-28
   40cac:	df000615 	stw	fp,24(sp)
   40cb0:	df000604 	addi	fp,sp,24
    uint8 mac[6]={0x00,0x06,0x77,0x25,0x3D,0x28};
   40cb4:	e03ffa05 	stb	zero,-24(fp)
   40cb8:	00800184 	movi	r2,6
   40cbc:	e0bffa45 	stb	r2,-23(fp)
   40cc0:	00801dc4 	movi	r2,119
   40cc4:	e0bffa85 	stb	r2,-22(fp)
   40cc8:	00800944 	movi	r2,37
   40ccc:	e0bffac5 	stb	r2,-21(fp)
   40cd0:	00800f44 	movi	r2,61
   40cd4:	e0bffb05 	stb	r2,-20(fp)
   40cd8:	00800a04 	movi	r2,40
   40cdc:	e0bffb45 	stb	r2,-19(fp)
    uint8 lip[4]={192,168,0,1};
   40ce0:	00bff004 	movi	r2,-64
   40ce4:	e0bffb85 	stb	r2,-18(fp)
   40ce8:	00bfea04 	movi	r2,-88
   40cec:	e0bffbc5 	stb	r2,-17(fp)
   40cf0:	e03ffc05 	stb	zero,-16(fp)
   40cf4:	00800044 	movi	r2,1
   40cf8:	e0bffc45 	stb	r2,-15(fp)
    uint8 sub[4]={255,255,255,0};
   40cfc:	00bfffc4 	movi	r2,-1
   40d00:	e0bffc85 	stb	r2,-14(fp)
   40d04:	00bfffc4 	movi	r2,-1
   40d08:	e0bffcc5 	stb	r2,-13(fp)
   40d0c:	00bfffc4 	movi	r2,-1
   40d10:	e0bffd05 	stb	r2,-12(fp)
   40d14:	e03ffd45 	stb	zero,-11(fp)
    uint8 gw[4]={192,168,0,1};
   40d18:	00bff004 	movi	r2,-64
   40d1c:	e0bffd85 	stb	r2,-10(fp)
   40d20:	00bfea04 	movi	r2,-88
   40d24:	e0bffdc5 	stb	r2,-9(fp)
   40d28:	e03ffe05 	stb	zero,-8(fp)
   40d2c:	00800044 	movi	r2,1
   40d30:	e0bffe45 	stb	r2,-7(fp)
    uint8 dns[4]={8,8,8,8};
   40d34:	00800204 	movi	r2,8
   40d38:	e0bffe85 	stb	r2,-6(fp)
   40d3c:	00800204 	movi	r2,8
   40d40:	e0bffec5 	stb	r2,-5(fp)
   40d44:	00800204 	movi	r2,8
   40d48:	e0bfff05 	stb	r2,-4(fp)
   40d4c:	00800204 	movi	r2,8
   40d50:	e0bfff45 	stb	r2,-3(fp)
    memcpy(ConfigMsg.lip, lip, 4);
   40d54:	008001b4 	movhi	r2,6
   40d58:	10b58c04 	addi	r2,r2,-10704
   40d5c:	e0fffb83 	ldbu	r3,-18(fp)
   40d60:	10c00305 	stb	r3,12(r2)
   40d64:	e0fffbc3 	ldbu	r3,-17(fp)
   40d68:	10c00345 	stb	r3,13(r2)
   40d6c:	e0fffc03 	ldbu	r3,-16(fp)
   40d70:	10c00385 	stb	r3,14(r2)
   40d74:	e0fffc43 	ldbu	r3,-15(fp)
   40d78:	10c003c5 	stb	r3,15(r2)
    memcpy(ConfigMsg.sub, sub, 4);
   40d7c:	008001b4 	movhi	r2,6
   40d80:	10b58c04 	addi	r2,r2,-10704
   40d84:	e0fffc83 	ldbu	r3,-14(fp)
   40d88:	10c00405 	stb	r3,16(r2)
   40d8c:	e0fffcc3 	ldbu	r3,-13(fp)
   40d90:	10c00445 	stb	r3,17(r2)
   40d94:	e0fffd03 	ldbu	r3,-12(fp)
   40d98:	10c00485 	stb	r3,18(r2)
   40d9c:	e0fffd43 	ldbu	r3,-11(fp)
   40da0:	10c004c5 	stb	r3,19(r2)
    memcpy(ConfigMsg.gw,  gw, 4);
   40da4:	008001b4 	movhi	r2,6
   40da8:	10b58c04 	addi	r2,r2,-10704
   40dac:	e0fffd83 	ldbu	r3,-10(fp)
   40db0:	10c00505 	stb	r3,20(r2)
   40db4:	e0fffdc3 	ldbu	r3,-9(fp)
   40db8:	10c00545 	stb	r3,21(r2)
   40dbc:	e0fffe03 	ldbu	r3,-8(fp)
   40dc0:	10c00585 	stb	r3,22(r2)
   40dc4:	e0fffe43 	ldbu	r3,-7(fp)
   40dc8:	10c005c5 	stb	r3,23(r2)
    memcpy(ConfigMsg.mac, mac,6);
   40dcc:	008001b4 	movhi	r2,6
   40dd0:	10b58c04 	addi	r2,r2,-10704
   40dd4:	e0fffa03 	ldbu	r3,-24(fp)
   40dd8:	10c00105 	stb	r3,4(r2)
   40ddc:	e0fffa43 	ldbu	r3,-23(fp)
   40de0:	10c00145 	stb	r3,5(r2)
   40de4:	e0fffa83 	ldbu	r3,-22(fp)
   40de8:	10c00185 	stb	r3,6(r2)
   40dec:	e0fffac3 	ldbu	r3,-21(fp)
   40df0:	10c001c5 	stb	r3,7(r2)
   40df4:	e0fffb03 	ldbu	r3,-20(fp)
   40df8:	10c00205 	stb	r3,8(r2)
   40dfc:	e0fffb43 	ldbu	r3,-19(fp)
   40e00:	10c00245 	stb	r3,9(r2)
    memcpy(ConfigMsg.dns,dns,4);
   40e04:	008001b4 	movhi	r2,6
   40e08:	10b58c04 	addi	r2,r2,-10704
   40e0c:	e0fffe83 	ldbu	r3,-6(fp)
   40e10:	10c00605 	stb	r3,24(r2)
   40e14:	e0fffec3 	ldbu	r3,-5(fp)
   40e18:	10c00645 	stb	r3,25(r2)
   40e1c:	e0ffff03 	ldbu	r3,-4(fp)
   40e20:	10c00685 	stb	r3,26(r2)
   40e24:	e0ffff43 	ldbu	r3,-3(fp)
   40e28:	10c006c5 	stb	r3,27(r2)

    ConfigMsg.dhcp=0;
   40e2c:	008001b4 	movhi	r2,6
   40e30:	10b58c04 	addi	r2,r2,-10704
   40e34:	10000705 	stb	zero,28(r2)
    ConfigMsg.debug=1;
   40e38:	008001b4 	movhi	r2,6
   40e3c:	10b58c04 	addi	r2,r2,-10704
   40e40:	00c00044 	movi	r3,1
   40e44:	10c00745 	stb	r3,29(r2)
    ConfigMsg.fw_len=0;
   40e48:	008001b4 	movhi	r2,6
   40e4c:	10b58c04 	addi	r2,r2,-10704
   40e50:	10c00783 	ldbu	r3,30(r2)
   40e54:	1806703a 	and	r3,r3,zero
   40e58:	10c00785 	stb	r3,30(r2)
   40e5c:	10c007c3 	ldbu	r3,31(r2)
   40e60:	1806703a 	and	r3,r3,zero
   40e64:	10c007c5 	stb	r3,31(r2)

    ConfigMsg.state=NORMAL_STATE;
   40e68:	008001b4 	movhi	r2,6
   40e6c:	10b58c04 	addi	r2,r2,-10704
   40e70:	10000805 	stb	zero,32(r2)
    ConfigMsg.sw_ver[0]=FW_VER_HIGH;
   40e74:	008001b4 	movhi	r2,6
   40e78:	10b58c04 	addi	r2,r2,-10704
   40e7c:	00c00044 	movi	r3,1
   40e80:	10c00285 	stb	r3,10(r2)
    ConfigMsg.sw_ver[1]=FW_VER_LOW;
   40e84:	008001b4 	movhi	r2,6
   40e88:	10b58c04 	addi	r2,r2,-10704
   40e8c:	100002c5 	stb	zero,11(r2)

}
   40e90:	0001883a 	nop
   40e94:	e037883a 	mov	sp,fp
   40e98:	df000017 	ldw	fp,0(sp)
   40e9c:	dec00104 	addi	sp,sp,4
   40ea0:	f800283a 	ret

00040ea4 <hex2ascii>:
queue_item_t LaserData[2048];
Queue LaserDataQueue;


static inline unsigned int hex2ascii(unsigned int data)
{
   40ea4:	defffa04 	addi	sp,sp,-24
   40ea8:	df000515 	stw	fp,20(sp)
   40eac:	df000504 	addi	fp,sp,20
   40eb0:	e13fff15 	stw	r4,-4(fp)
    int tmp31_24 = ((data>>12)&0x0f);
   40eb4:	e0bfff17 	ldw	r2,-4(fp)
   40eb8:	1004d33a 	srli	r2,r2,12
   40ebc:	108003cc 	andi	r2,r2,15
   40ec0:	e0bffb15 	stw	r2,-20(fp)
    int tmp23_16 = ((data>> 8)&0x0f);
   40ec4:	e0bfff17 	ldw	r2,-4(fp)
   40ec8:	1004d23a 	srli	r2,r2,8
   40ecc:	108003cc 	andi	r2,r2,15
   40ed0:	e0bffc15 	stw	r2,-16(fp)
    int tmp15_08 = ((data>> 4)&0x0f);
   40ed4:	e0bfff17 	ldw	r2,-4(fp)
   40ed8:	1004d13a 	srli	r2,r2,4
   40edc:	108003cc 	andi	r2,r2,15
   40ee0:	e0bffd15 	stw	r2,-12(fp)
    int tmp07_00 = ((data>> 0)&0x0f);
   40ee4:	e0bfff17 	ldw	r2,-4(fp)
   40ee8:	108003cc 	andi	r2,r2,15
   40eec:	e0bffe15 	stw	r2,-8(fp)

    tmp31_24 =  ( (tmp31_24 >= 0) && (tmp31_24 <= 9) ) ? tmp31_24 + 0x30 : tmp31_24 + 0x37;
   40ef0:	e0bffb17 	ldw	r2,-20(fp)
   40ef4:	10000616 	blt	r2,zero,40f10 <hex2ascii+0x6c>
   40ef8:	e0bffb17 	ldw	r2,-20(fp)
   40efc:	10800288 	cmpgei	r2,r2,10
   40f00:	1000031e 	bne	r2,zero,40f10 <hex2ascii+0x6c>
   40f04:	e0bffb17 	ldw	r2,-20(fp)
   40f08:	10800c04 	addi	r2,r2,48
   40f0c:	00000206 	br	40f18 <hex2ascii+0x74>
   40f10:	e0bffb17 	ldw	r2,-20(fp)
   40f14:	10800dc4 	addi	r2,r2,55
   40f18:	e0bffb15 	stw	r2,-20(fp)
    tmp23_16 =  ( (tmp23_16 >= 0) && (tmp23_16 <= 9) ) ? tmp23_16 + 0x30 : tmp23_16 + 0x37;
   40f1c:	e0bffc17 	ldw	r2,-16(fp)
   40f20:	10000616 	blt	r2,zero,40f3c <hex2ascii+0x98>
   40f24:	e0bffc17 	ldw	r2,-16(fp)
   40f28:	10800288 	cmpgei	r2,r2,10
   40f2c:	1000031e 	bne	r2,zero,40f3c <hex2ascii+0x98>
   40f30:	e0bffc17 	ldw	r2,-16(fp)
   40f34:	10800c04 	addi	r2,r2,48
   40f38:	00000206 	br	40f44 <hex2ascii+0xa0>
   40f3c:	e0bffc17 	ldw	r2,-16(fp)
   40f40:	10800dc4 	addi	r2,r2,55
   40f44:	e0bffc15 	stw	r2,-16(fp)
    tmp15_08 =  ( (tmp15_08 >= 0) && (tmp15_08 <= 9) ) ? tmp15_08 + 0x30 : tmp15_08 + 0x37;
   40f48:	e0bffd17 	ldw	r2,-12(fp)
   40f4c:	10000616 	blt	r2,zero,40f68 <hex2ascii+0xc4>
   40f50:	e0bffd17 	ldw	r2,-12(fp)
   40f54:	10800288 	cmpgei	r2,r2,10
   40f58:	1000031e 	bne	r2,zero,40f68 <hex2ascii+0xc4>
   40f5c:	e0bffd17 	ldw	r2,-12(fp)
   40f60:	10800c04 	addi	r2,r2,48
   40f64:	00000206 	br	40f70 <hex2ascii+0xcc>
   40f68:	e0bffd17 	ldw	r2,-12(fp)
   40f6c:	10800dc4 	addi	r2,r2,55
   40f70:	e0bffd15 	stw	r2,-12(fp)
    tmp07_00 =  ( (tmp07_00 >= 0) && (tmp07_00 <= 9) ) ? tmp07_00 + 0x30 : tmp07_00 + 0x37;
   40f74:	e0bffe17 	ldw	r2,-8(fp)
   40f78:	10000616 	blt	r2,zero,40f94 <hex2ascii+0xf0>
   40f7c:	e0bffe17 	ldw	r2,-8(fp)
   40f80:	10800288 	cmpgei	r2,r2,10
   40f84:	1000031e 	bne	r2,zero,40f94 <hex2ascii+0xf0>
   40f88:	e0bffe17 	ldw	r2,-8(fp)
   40f8c:	10800c04 	addi	r2,r2,48
   40f90:	00000206 	br	40f9c <hex2ascii+0xf8>
   40f94:	e0bffe17 	ldw	r2,-8(fp)
   40f98:	10800dc4 	addi	r2,r2,55
   40f9c:	e0bffe15 	stw	r2,-8(fp)

    return (tmp31_24<<24) + (tmp23_16<<16) + (tmp15_08<<8) + (tmp07_00<<0);
   40fa0:	e0bffb17 	ldw	r2,-20(fp)
   40fa4:	1006963a 	slli	r3,r2,24
   40fa8:	e0bffc17 	ldw	r2,-16(fp)
   40fac:	1004943a 	slli	r2,r2,16
   40fb0:	1887883a 	add	r3,r3,r2
   40fb4:	e0bffd17 	ldw	r2,-12(fp)
   40fb8:	1004923a 	slli	r2,r2,8
   40fbc:	1887883a 	add	r3,r3,r2
   40fc0:	e0bffe17 	ldw	r2,-8(fp)
   40fc4:	1885883a 	add	r2,r3,r2
}
   40fc8:	e037883a 	mov	sp,fp
   40fcc:	df000017 	ldw	fp,0(sp)
   40fd0:	dec00104 	addi	sp,sp,4
   40fd4:	f800283a 	ret

00040fd8 <big_swap_little>:

unsigned int big_swap_little(unsigned int data)
{
   40fd8:	defffe04 	addi	sp,sp,-8
   40fdc:	df000115 	stw	fp,4(sp)
   40fe0:	df000104 	addi	fp,sp,4
   40fe4:	e13fff15 	stw	r4,-4(fp)
    data = ((data & 0xff) << 24) | ((data & 0xff00) << 8) | ((data & 0xff0000) >> 8) | ((data & 0xff000000) >> 24);
   40fe8:	e0bfff17 	ldw	r2,-4(fp)
   40fec:	1006963a 	slli	r3,r2,24
   40ff0:	e0bfff17 	ldw	r2,-4(fp)
   40ff4:	10bfc00c 	andi	r2,r2,65280
   40ff8:	1004923a 	slli	r2,r2,8
   40ffc:	1886b03a 	or	r3,r3,r2
   41000:	e0bfff17 	ldw	r2,-4(fp)
   41004:	10803fec 	andhi	r2,r2,255
   41008:	1004d23a 	srli	r2,r2,8
   4100c:	1886b03a 	or	r3,r3,r2
   41010:	e0bfff17 	ldw	r2,-4(fp)
   41014:	1004d63a 	srli	r2,r2,24
   41018:	1884b03a 	or	r2,r3,r2
   4101c:	e0bfff15 	stw	r2,-4(fp)
    return data;
   41020:	e0bfff17 	ldw	r2,-4(fp)
}
   41024:	e037883a 	mov	sp,fp
   41028:	df000017 	ldw	fp,0(sp)
   4102c:	dec00104 	addi	sp,sp,4
   41030:	f800283a 	ret

00041034 <fpga_is_has_data>:

bool fpga_is_has_data()
{
   41034:	defffd04 	addi	sp,sp,-12
   41038:	dfc00215 	stw	ra,8(sp)
   4103c:	df000115 	stw	fp,4(sp)
   41040:	df000104 	addi	fp,sp,4
    int num = altera_avalon_fifo_read_level(LASER_FIFO_IN_CSR_BASE);
   41044:	01000234 	movhi	r4,8
   41048:	21084804 	addi	r4,r4,8480
   4104c:	004a7700 	call	4a770 <altera_avalon_fifo_read_level>
   41050:	e0bfff15 	stw	r2,-4(fp)

    // fifo 空， empty = 1
    if(num > 0)
   41054:	e0bfff17 	ldw	r2,-4(fp)
   41058:	0080020e 	bge	zero,r2,41064 <fpga_is_has_data+0x30>
        return true;
   4105c:	00800044 	movi	r2,1
   41060:	00000106 	br	41068 <fpga_is_has_data+0x34>
    else
        return false;
   41064:	0005883a 	mov	r2,zero
}
   41068:	e037883a 	mov	sp,fp
   4106c:	dfc00117 	ldw	ra,4(sp)
   41070:	df000017 	ldw	fp,0(sp)
   41074:	dec00204 	addi	sp,sp,8
   41078:	f800283a 	ret

0004107c <read_fpga_data>:

// 从FIFO中读出一个数据
inline unsigned int read_fpga_data()
{
   4107c:	defffd04 	addi	sp,sp,-12
   41080:	dfc00215 	stw	ra,8(sp)
   41084:	df000115 	stw	fp,4(sp)
   41088:	df000104 	addi	fp,sp,4
    unsigned int data = altera_avalon_fifo_read_fifo(LASER_FIFO_OUT_BASE, LASER_FIFO_IN_CSR_BASE);
   4108c:	01400234 	movhi	r5,8
   41090:	29484804 	addi	r5,r5,8480
   41094:	01000234 	movhi	r4,8
   41098:	21087404 	addi	r4,r4,8656
   4109c:	004a9d00 	call	4a9d0 <altera_avalon_fifo_read_fifo>
   410a0:	e0bfff15 	stw	r2,-4(fp)
    return (data >> 16) + (data << 16);
   410a4:	e0bfff17 	ldw	r2,-4(fp)
   410a8:	1004143a 	roli	r2,r2,16
}
   410ac:	e037883a 	mov	sp,fp
   410b0:	dfc00117 	ldw	ra,4(sp)
   410b4:	df000017 	ldw	fp,0(sp)
   410b8:	dec00204 	addi	sp,sp,8
   410bc:	f800283a 	ret

000410c0 <fpga2nios_parse>:

int fpga2nios_parse()
{
   410c0:	defff604 	addi	sp,sp,-40
   410c4:	dfc00915 	stw	ra,36(sp)
   410c8:	df000815 	stw	fp,32(sp)
   410cc:	df000804 	addi	fp,sp,32
    unsigned int i;
    unsigned int num = 0;
   410d0:	e03ffa15 	stw	zero,-24(fp)
    unsigned int distance;
    unsigned int gray;
    char buf[10];

    {
        while(!queue_is_empty(&LaserDataQueue))
   410d4:	00000f06 	br	41114 <fpga2nios_parse+0x54>
        {
        	recv_data = queue_pop(&LaserDataQueue);
   410d8:	010001b4 	movhi	r4,6
   410dc:	21370a04 	addi	r4,r4,-9176
   410e0:	00455e40 	call	455e4 <queue_pop>
   410e4:	e0bff915 	stw	r2,-28(fp)
			if(recv_data >> 16 == FRAME_HEAD)
   410e8:	e0bff917 	ldw	r2,-28(fp)
   410ec:	1004d43a 	srli	r2,r2,16
   410f0:	10848d18 	cmpnei	r2,r2,4660
   410f4:	1000071e 	bne	r2,zero,41114 <fpga2nios_parse+0x54>
			{
				fpga2nios_data.frame_head = (recv_data >> 16) & 0xffff;
   410f8:	e0bff917 	ldw	r2,-28(fp)
   410fc:	1004d43a 	srli	r2,r2,16
   41100:	1007883a 	mov	r3,r2
   41104:	008001b4 	movhi	r2,6
   41108:	10b70f04 	addi	r2,r2,-9156
   4110c:	10c0000d 	sth	r3,0(r2)
				break;
   41110:	00000606 	br	4112c <fpga2nios_parse+0x6c>
    unsigned int distance;
    unsigned int gray;
    char buf[10];

    {
        while(!queue_is_empty(&LaserDataQueue))
   41114:	010001b4 	movhi	r4,6
   41118:	21370a04 	addi	r4,r4,-9176
   4111c:	00457400 	call	45740 <queue_is_empty>
   41120:	1080005c 	xori	r2,r2,1
   41124:	10803fcc 	andi	r2,r2,255
   41128:	103feb1e 	bne	r2,zero,410d8 <__alt_mem_epcs_flash+0xfffc00d8>
				fpga2nios_data.frame_head = (recv_data >> 16) & 0xffff;
				break;
			}
        }

        fpga2nios_data.command = recv_data & 0xffff;
   4112c:	e0bff917 	ldw	r2,-28(fp)
   41130:	1007883a 	mov	r3,r2
   41134:	008001b4 	movhi	r2,6
   41138:	10b70f04 	addi	r2,r2,-9156
   4113c:	10c0008d 	sth	r3,2(r2)
        fpga2nios_data.data_len = queue_pop(&LaserDataQueue);
   41140:	010001b4 	movhi	r4,6
   41144:	21370a04 	addi	r4,r4,-9176
   41148:	00455e40 	call	455e4 <queue_pop>
   4114c:	1007883a 	mov	r3,r2
   41150:	008001b4 	movhi	r2,6
   41154:	10b70f04 	addi	r2,r2,-9156
   41158:	10c00115 	stw	r3,4(r2)
        if(fpga2nios_data.command == DISTANCE_DATA)
   4115c:	008001b4 	movhi	r2,6
   41160:	10b70f04 	addi	r2,r2,-9156
   41164:	1080008b 	ldhu	r2,2(r2)
   41168:	10ffffcc 	andi	r3,r2,65535
   4116c:	00a800d4 	movui	r2,40963
   41170:	1880951e 	bne	r3,r2,413c8 <fpga2nios_parse+0x308>
        {
            CycleData.distance_len = 0;
   41174:	008001b4 	movhi	r2,6
   41178:	10bf2604 	addi	r2,r2,-872
   4117c:	10000115 	stw	zero,4(r2)
            CycleData.gray_len = 0;
   41180:	008001b4 	movhi	r2,6
   41184:	10bf2604 	addi	r2,r2,-872
   41188:	10000215 	stw	zero,8(r2)
            for(i = 0; i < fpga2nios_data.data_len; i++)
   4118c:	e03ff815 	stw	zero,-32(fp)
   41190:	00004a06 	br	412bc <fpga2nios_parse+0x1fc>
            {
                recv_data = queue_pop(&LaserDataQueue);
   41194:	010001b4 	movhi	r4,6
   41198:	21370a04 	addi	r4,r4,-9176
   4119c:	00455e40 	call	455e4 <queue_pop>
   411a0:	e0bff915 	stw	r2,-28(fp)
                distance = hex2ascii(recv_data);
   411a4:	e13ff917 	ldw	r4,-28(fp)
   411a8:	0040ea40 	call	40ea4 <hex2ascii>
   411ac:	e0bffb15 	stw	r2,-20(fp)

                buf[0] = 0x20;
   411b0:	00800804 	movi	r2,32
   411b4:	e0bffd05 	stb	r2,-12(fp)

                buf[1] = (distance >> 24) & 0xff;
   411b8:	e0bffb17 	ldw	r2,-20(fp)
   411bc:	1004d63a 	srli	r2,r2,24
   411c0:	e0bffd45 	stb	r2,-11(fp)
                buf[2] = (distance >> 16) & 0xff;
   411c4:	e0bffb17 	ldw	r2,-20(fp)
   411c8:	1004d43a 	srli	r2,r2,16
   411cc:	e0bffd85 	stb	r2,-10(fp)
                buf[3] = (distance >> 8) & 0xff;
   411d0:	e0bffb17 	ldw	r2,-20(fp)
   411d4:	1004d23a 	srli	r2,r2,8
   411d8:	e0bffdc5 	stb	r2,-9(fp)
                buf[4] = (distance >> 0) & 0xff;
   411dc:	e0bffb17 	ldw	r2,-20(fp)
   411e0:	e0bffe05 	stb	r2,-8(fp)
                num = 5;
   411e4:	00800144 	movi	r2,5
   411e8:	e0bffa15 	stw	r2,-24(fp)
                
                // num = hex2string(recv_data, buf);
                memcpy(CycleData.distance_data + CycleData.distance_len, buf, num);  // ascii码格式的  +距离数据              
   411ec:	008001b4 	movhi	r2,6
   411f0:	10bf2604 	addi	r2,r2,-872
   411f4:	10c00117 	ldw	r3,4(r2)
   411f8:	008001b4 	movhi	r2,6
   411fc:	10bf2904 	addi	r2,r2,-860
   41200:	1885883a 	add	r2,r3,r2
   41204:	e0fffd04 	addi	r3,fp,-12
   41208:	e1bffa17 	ldw	r6,-24(fp)
   4120c:	180b883a 	mov	r5,r3
   41210:	1009883a 	mov	r4,r2
   41214:	00490240 	call	49024 <memcpy>
                CycleData.distance_len += num;
   41218:	008001b4 	movhi	r2,6
   4121c:	10bf2604 	addi	r2,r2,-872
   41220:	10c00117 	ldw	r3,4(r2)
   41224:	e0bffa17 	ldw	r2,-24(fp)
   41228:	1887883a 	add	r3,r3,r2
   4122c:	008001b4 	movhi	r2,6
   41230:	10bf2604 	addi	r2,r2,-872
   41234:	10c00115 	stw	r3,4(r2)

                gray = hex2ascii((recv_data>>16) & 0xffff);
   41238:	e0bff917 	ldw	r2,-28(fp)
   4123c:	1004d43a 	srli	r2,r2,16
   41240:	1009883a 	mov	r4,r2
   41244:	0040ea40 	call	40ea4 <hex2ascii>
   41248:	e0bffc15 	stw	r2,-16(fp)
                buf[0] = 0x20;
   4124c:	00800804 	movi	r2,32
   41250:	e0bffd05 	stb	r2,-12(fp)
                buf[1] = (gray >> 8) & 0xff;
   41254:	e0bffc17 	ldw	r2,-16(fp)
   41258:	1004d23a 	srli	r2,r2,8
   4125c:	e0bffd45 	stb	r2,-11(fp)
                buf[2] = (gray >> 0) & 0xff;
   41260:	e0bffc17 	ldw	r2,-16(fp)
   41264:	e0bffd85 	stb	r2,-10(fp)
                memcpy(CycleData.gray_data + CycleData.gray_len, buf, 3);  
   41268:	008001b4 	movhi	r2,6
   4126c:	10bf2604 	addi	r2,r2,-872
   41270:	10c00217 	ldw	r3,8(r2)
   41274:	008001b4 	movhi	r2,6
   41278:	10831ec4 	addi	r2,r2,3195
   4127c:	1885883a 	add	r2,r3,r2
   41280:	e0fffd04 	addi	r3,fp,-12
   41284:	018000c4 	movi	r6,3
   41288:	180b883a 	mov	r5,r3
   4128c:	1009883a 	mov	r4,r2
   41290:	00490240 	call	49024 <memcpy>
                CycleData.gray_len += 3;
   41294:	008001b4 	movhi	r2,6
   41298:	10bf2604 	addi	r2,r2,-872
   4129c:	10800217 	ldw	r2,8(r2)
   412a0:	10c000c4 	addi	r3,r2,3
   412a4:	008001b4 	movhi	r2,6
   412a8:	10bf2604 	addi	r2,r2,-872
   412ac:	10c00215 	stw	r3,8(r2)
        fpga2nios_data.data_len = queue_pop(&LaserDataQueue);
        if(fpga2nios_data.command == DISTANCE_DATA)
        {
            CycleData.distance_len = 0;
            CycleData.gray_len = 0;
            for(i = 0; i < fpga2nios_data.data_len; i++)
   412b0:	e0bff817 	ldw	r2,-32(fp)
   412b4:	10800044 	addi	r2,r2,1
   412b8:	e0bff815 	stw	r2,-32(fp)
   412bc:	008001b4 	movhi	r2,6
   412c0:	10b70f04 	addi	r2,r2,-9156
   412c4:	10800117 	ldw	r2,4(r2)
   412c8:	e0fff817 	ldw	r3,-32(fp)
   412cc:	18bfb136 	bltu	r3,r2,41194 <__alt_mem_epcs_flash+0xfffc0194>
                buf[1] = (gray >> 8) & 0xff;
                buf[2] = (gray >> 0) & 0xff;
                memcpy(CycleData.gray_data + CycleData.gray_len, buf, 3);  
                CycleData.gray_len += 3;
            }
            recv_data = queue_pop(&LaserDataQueue);
   412d0:	010001b4 	movhi	r4,6
   412d4:	21370a04 	addi	r4,r4,-9176
   412d8:	00455e40 	call	455e4 <queue_pop>
   412dc:	e0bff915 	stw	r2,-28(fp)
            fpga2nios_data.checksum = recv_data;
   412e0:	008001b4 	movhi	r2,6
   412e4:	10b70f04 	addi	r2,r2,-9156
   412e8:	e0fff917 	ldw	r3,-28(fp)
   412ec:	10c01615 	stw	r3,88(r2)

            if((fpga2nios_data.checksum & 0xfffffff) == 0xeeeeeee)  // bit[27:0], bit[31:28]作为FPGA上传的区域报警标志
   412f0:	008001b4 	movhi	r2,6
   412f4:	10b70f04 	addi	r2,r2,-9156
   412f8:	10c01617 	ldw	r3,88(r2)
   412fc:	00840034 	movhi	r2,4096
   41300:	10bfffc4 	addi	r2,r2,-1
   41304:	1886703a 	and	r3,r3,r2
   41308:	0083bbf4 	movhi	r2,3823
   4130c:	10bbbb84 	addi	r2,r2,-4370
   41310:	18801c1e 	bne	r3,r2,41384 <fpga2nios_parse+0x2c4>
            {
                if(SysPara.board_type == 1)       // NPN型, 报警时FPGA IO输出0, 外部才能输出为高
   41314:	008001b4 	movhi	r2,6
   41318:	10a46e04 	addi	r2,r2,-28232
   4131c:	10802c17 	ldw	r2,176(r2)
   41320:	10800058 	cmpnei	r2,r2,1
   41324:	10000a1e 	bne	r2,zero,41350 <fpga2nios_parse+0x290>
                    sys_warn.region_alarm = ~(fpga2nios_data.checksum >> 28) & 0x07;
   41328:	008001b4 	movhi	r2,6
   4132c:	10b70f04 	addi	r2,r2,-9156
   41330:	10801617 	ldw	r2,88(r2)
   41334:	1004d73a 	srli	r2,r2,28
   41338:	0084303a 	nor	r2,zero,r2
   4133c:	10c001cc 	andi	r3,r2,7
   41340:	008001b4 	movhi	r2,6
   41344:	10b36a04 	addi	r2,r2,-12888
   41348:	10c00415 	stw	r3,16(r2)
   4134c:	00000806 	br	41370 <fpga2nios_parse+0x2b0>
                else
                    sys_warn.region_alarm = (fpga2nios_data.checksum >> 28) & 0x07;
   41350:	008001b4 	movhi	r2,6
   41354:	10b70f04 	addi	r2,r2,-9156
   41358:	10801617 	ldw	r2,88(r2)
   4135c:	1004d73a 	srli	r2,r2,28
   41360:	10c001cc 	andi	r3,r2,7
   41364:	008001b4 	movhi	r2,6
   41368:	10b36a04 	addi	r2,r2,-12888
   4136c:	10c00415 	stw	r3,16(r2)

                CycleData.pos_finish = true;
   41370:	008001b4 	movhi	r2,6
   41374:	10bf2604 	addi	r2,r2,-872
   41378:	00c00044 	movi	r3,1
   4137c:	10c00005 	stb	r3,0(r2)
   41380:	00000d06 	br	413b8 <fpga2nios_parse+0x2f8>
            }
            else
            {
                CycleData.pos_finish = false;
   41384:	008001b4 	movhi	r2,6
   41388:	10bf2604 	addi	r2,r2,-872
   4138c:	10000005 	stb	zero,0(r2)
                memset(CycleData.distance_data, 0, sizeof(CycleData.distance_data));
   41390:	0183f5c4 	movi	r6,4055
   41394:	000b883a 	mov	r5,zero
   41398:	010001b4 	movhi	r4,6
   4139c:	213f2904 	addi	r4,r4,-860
   413a0:	004916c0 	call	4916c <memset>
                memset(CycleData.gray_data, 0, sizeof(CycleData.gray_data));
   413a4:	0183f5c4 	movi	r6,4055
   413a8:	000b883a 	mov	r5,zero
   413ac:	010001b4 	movhi	r4,6
   413b0:	21031ec4 	addi	r4,r4,3195
   413b4:	004916c0 	call	4916c <memset>
            }
            queue_clear(&LaserDataQueue);
   413b8:	010001b4 	movhi	r4,6
   413bc:	21370a04 	addi	r4,r4,-9176
   413c0:	00455280 	call	45528 <queue_clear>
   413c4:	0000fa06 	br	417b0 <fpga2nios_parse+0x6f0>
        }
        else if(fpga2nios_data.command == UP_FPGA_STATUS)
   413c8:	008001b4 	movhi	r2,6
   413cc:	10b70f04 	addi	r2,r2,-9156
   413d0:	1080008b 	ldhu	r2,2(r2)
   413d4:	10ffffcc 	andi	r3,r2,65535
   413d8:	00b04014 	movui	r2,49408
   413dc:	1880f41e 	bne	r3,r2,417b0 <fpga2nios_parse+0x6f0>
        {
            sys_warn.len %= 5;
   413e0:	008001b4 	movhi	r2,6
   413e4:	10b36a04 	addi	r2,r2,-12888
   413e8:	10800517 	ldw	r2,20(r2)
   413ec:	01400144 	movi	r5,5
   413f0:	1009883a 	mov	r4,r2
   413f4:	0048fcc0 	call	48fcc <__umodsi3>
   413f8:	1007883a 	mov	r3,r2
   413fc:	008001b4 	movhi	r2,6
   41400:	10b36a04 	addi	r2,r2,-12888
   41404:	10c00515 	stw	r3,20(r2)
            // for(i = 0; i < fpga_data.data_len; i++)
            {
                recv_data = queue_pop(&LaserDataQueue);
   41408:	010001b4 	movhi	r4,6
   4140c:	21370a04 	addi	r4,r4,-9176
   41410:	00455e40 	call	455e4 <queue_pop>
   41414:	e0bff915 	stw	r2,-28(fp)
                // CycleData.fpga_status[i] = recv_data;
                if(sys_warn.motor_low_speed_alarm == 0x00)
   41418:	008001b4 	movhi	r2,6
   4141c:	10b36a04 	addi	r2,r2,-12888
   41420:	10800017 	ldw	r2,0(r2)
   41424:	10000b1e 	bne	r2,zero,41454 <fpga2nios_parse+0x394>
                    sys_warn.motor_cycle_cnt[sys_warn.len] = recv_data;
   41428:	008001b4 	movhi	r2,6
   4142c:	10b36a04 	addi	r2,r2,-12888
   41430:	10c00517 	ldw	r3,20(r2)
   41434:	008001b4 	movhi	r2,6
   41438:	10b36a04 	addi	r2,r2,-12888
   4143c:	18c00184 	addi	r3,r3,6
   41440:	18c7883a 	add	r3,r3,r3
   41444:	18c7883a 	add	r3,r3,r3
   41448:	10c5883a 	add	r2,r2,r3
   4144c:	e0fff917 	ldw	r3,-28(fp)
   41450:	10c00015 	stw	r3,0(r2)
                SysPara.motor_real_speed = recv_data;
   41454:	008001b4 	movhi	r2,6
   41458:	10a46e04 	addi	r2,r2,-28232
   4145c:	e0fff917 	ldw	r3,-28(fp)
   41460:	10c02115 	stw	r3,132(r2)

                recv_data = queue_pop(&LaserDataQueue);
   41464:	010001b4 	movhi	r4,6
   41468:	21370a04 	addi	r4,r4,-9176
   4146c:	00455e40 	call	455e4 <queue_pop>
   41470:	e0bff915 	stw	r2,-28(fp)
                SysPara.zero_value = recv_data & 0xffff;
   41474:	e0bff917 	ldw	r2,-28(fp)
   41478:	10ffffcc 	andi	r3,r2,65535
   4147c:	008001b4 	movhi	r2,6
   41480:	10a46e04 	addi	r2,r2,-28232
   41484:	10c01d15 	stw	r3,116(r2)

                recv_data = queue_pop(&LaserDataQueue);
   41488:	010001b4 	movhi	r4,6
   4148c:	21370a04 	addi	r4,r4,-9176
   41490:	00455e40 	call	455e4 <queue_pop>
   41494:	e0bff915 	stw	r2,-28(fp)
                if(sys_warn.window_dust_alarm == 0x00)
   41498:	008001b4 	movhi	r2,6
   4149c:	10b36a04 	addi	r2,r2,-12888
   414a0:	10800217 	ldw	r2,8(r2)
   414a4:	10000b1e 	bne	r2,zero,414d4 <fpga2nios_parse+0x414>
                    sys_warn.dust_cnt[sys_warn.len] = recv_data;
   414a8:	008001b4 	movhi	r2,6
   414ac:	10b36a04 	addi	r2,r2,-12888
   414b0:	10c00517 	ldw	r3,20(r2)
   414b4:	008001b4 	movhi	r2,6
   414b8:	10b36a04 	addi	r2,r2,-12888
   414bc:	18c00404 	addi	r3,r3,16
   414c0:	18c7883a 	add	r3,r3,r3
   414c4:	18c7883a 	add	r3,r3,r3
   414c8:	10c5883a 	add	r2,r2,r3
   414cc:	e0fff917 	ldw	r3,-28(fp)
   414d0:	10c00015 	stw	r3,0(r2)
                SysPara.placeholer1 = recv_data;
   414d4:	008001b4 	movhi	r2,6
   414d8:	10a46e04 	addi	r2,r2,-28232
   414dc:	e0fff917 	ldw	r3,-28(fp)
   414e0:	10c01315 	stw	r3,76(r2)

                recv_data = queue_pop(&LaserDataQueue); // 最高位作为上传状态
   414e4:	010001b4 	movhi	r4,6
   414e8:	21370a04 	addi	r4,r4,-9176
   414ec:	00455e40 	call	455e4 <queue_pop>
   414f0:	e0bff915 	stw	r2,-28(fp)
                if(sys_warn.temp_out_alarm == 0x00)
   414f4:	008001b4 	movhi	r2,6
   414f8:	10b36a04 	addi	r2,r2,-12888
   414fc:	10800317 	ldw	r2,12(r2)
   41500:	10000c1e 	bne	r2,zero,41534 <fpga2nios_parse+0x474>
                    sys_warn.temp_value[sys_warn.len] = recv_data & 0xffff;
   41504:	008001b4 	movhi	r2,6
   41508:	10b36a04 	addi	r2,r2,-12888
   4150c:	10c00517 	ldw	r3,20(r2)
   41510:	e0bff917 	ldw	r2,-28(fp)
   41514:	113fffcc 	andi	r4,r2,65535
   41518:	008001b4 	movhi	r2,6
   4151c:	10b36a04 	addi	r2,r2,-12888
   41520:	18c00544 	addi	r3,r3,21
   41524:	18c7883a 	add	r3,r3,r3
   41528:	18c7883a 	add	r3,r3,r3
   4152c:	10c5883a 	add	r2,r2,r3
   41530:	11000015 	stw	r4,0(r2)
                SysPara.sys_temp = recv_data & 0xffff;
   41534:	e0bff917 	ldw	r2,-28(fp)
   41538:	10ffffcc 	andi	r3,r2,65535
   4153c:	008001b4 	movhi	r2,6
   41540:	10a46e04 	addi	r2,r2,-28232
   41544:	10c01e15 	stw	r3,120(r2)
                SysPara.update_pos_flag = ((recv_data >> 31) & 0x01) ? true : false;
   41548:	e0bff917 	ldw	r2,-28(fp)
   4154c:	1004d7fa 	srli	r2,r2,31
   41550:	1007883a 	mov	r3,r2
   41554:	008001b4 	movhi	r2,6
   41558:	10a46e04 	addi	r2,r2,-28232
   4155c:	10c00005 	stb	r3,0(r2)
                

                SysPara.zero_pulse_width = queue_pop(&LaserDataQueue);
   41560:	010001b4 	movhi	r4,6
   41564:	21370a04 	addi	r4,r4,-9176
   41568:	00455e40 	call	455e4 <queue_pop>
   4156c:	1007883a 	mov	r3,r2
   41570:	008001b4 	movhi	r2,6
   41574:	10a46e04 	addi	r2,r2,-28232
   41578:	10c02d15 	stw	r3,180(r2)
                if(sys_warn.ld_not_work_alarm == 0x00)
   4157c:	008001b4 	movhi	r2,6
   41580:	10b36a04 	addi	r2,r2,-12888
   41584:	10800117 	ldw	r2,4(r2)
   41588:	10000d1e 	bne	r2,zero,415c0 <fpga2nios_parse+0x500>
                    sys_warn.zero_value[sys_warn.len] = SysPara.zero_pulse_width;
   4158c:	008001b4 	movhi	r2,6
   41590:	10b36a04 	addi	r2,r2,-12888
   41594:	10c00517 	ldw	r3,20(r2)
   41598:	008001b4 	movhi	r2,6
   4159c:	10a46e04 	addi	r2,r2,-28232
   415a0:	11002d17 	ldw	r4,180(r2)
   415a4:	008001b4 	movhi	r2,6
   415a8:	10b36a04 	addi	r2,r2,-12888
   415ac:	18c002c4 	addi	r3,r3,11
   415b0:	18c7883a 	add	r3,r3,r3
   415b4:	18c7883a 	add	r3,r3,r3
   415b8:	10c5883a 	add	r2,r2,r3
   415bc:	11000015 	stw	r4,0(r2)
            }
            sys_warn.len++;
   415c0:	008001b4 	movhi	r2,6
   415c4:	10b36a04 	addi	r2,r2,-12888
   415c8:	10800517 	ldw	r2,20(r2)
   415cc:	10c00044 	addi	r3,r2,1
   415d0:	008001b4 	movhi	r2,6
   415d4:	10b36a04 	addi	r2,r2,-12888
   415d8:	10c00515 	stw	r3,20(r2)
            recv_data = queue_pop(&LaserDataQueue);
   415dc:	010001b4 	movhi	r4,6
   415e0:	21370a04 	addi	r4,r4,-9176
   415e4:	00455e40 	call	455e4 <queue_pop>
   415e8:	e0bff915 	stw	r2,-28(fp)
            fpga2nios_data.checksum = recv_data;
   415ec:	008001b4 	movhi	r2,6
   415f0:	10b70f04 	addi	r2,r2,-9156
   415f4:	e0fff917 	ldw	r3,-28(fp)
   415f8:	10c01615 	stw	r3,88(r2)
            if(fpga2nios_data.checksum == 0xeeeeeeee)
   415fc:	008001b4 	movhi	r2,6
   41600:	10b70f04 	addi	r2,r2,-9156
   41604:	10c01617 	ldw	r3,88(r2)
   41608:	00bbbbf4 	movhi	r2,61167
   4160c:	10bbbb84 	addi	r2,r2,-4370
   41610:	1880111e 	bne	r3,r2,41658 <fpga2nios_parse+0x598>
            {
                if(sys_warn.len == 5)
   41614:	008001b4 	movhi	r2,6
   41618:	10b36a04 	addi	r2,r2,-12888
   4161c:	10800517 	ldw	r2,20(r2)
   41620:	10800158 	cmpnei	r2,r2,5
   41624:	10000c1e 	bne	r2,zero,41658 <fpga2nios_parse+0x598>
                {
                    process_motor_waring(&sys_warn);
   41628:	010001b4 	movhi	r4,6
   4162c:	21336a04 	addi	r4,r4,-12888
   41630:	00417c80 	call	417c8 <process_motor_waring>
                    process_ld_waring(&sys_warn);
   41634:	010001b4 	movhi	r4,6
   41638:	21336a04 	addi	r4,r4,-12888
   4163c:	004188c0 	call	4188c <process_ld_waring>
                    process_window_dust_waring(&sys_warn);
   41640:	010001b4 	movhi	r4,6
   41644:	21336a04 	addi	r4,r4,-12888
   41648:	00419180 	call	41918 <process_window_dust_waring>
                    process_sys_temp_waring(&sys_warn);
   4164c:	010001b4 	movhi	r4,6
   41650:	21336a04 	addi	r4,r4,-12888
   41654:	00419cc0 	call	419cc <process_sys_temp_waring>
                }
            }
            queue_clear(&LaserDataQueue);
   41658:	010001b4 	movhi	r4,6
   4165c:	21370a04 	addi	r4,r4,-9176
   41660:	00455280 	call	45528 <queue_clear>
            if(sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm | sys_warn.window_dust_alarm | sys_warn.temp_out_alarm)
   41664:	008001b4 	movhi	r2,6
   41668:	10b36a04 	addi	r2,r2,-12888
   4166c:	10c00017 	ldw	r3,0(r2)
   41670:	008001b4 	movhi	r2,6
   41674:	10b36a04 	addi	r2,r2,-12888
   41678:	10800117 	ldw	r2,4(r2)
   4167c:	1886b03a 	or	r3,r3,r2
   41680:	008001b4 	movhi	r2,6
   41684:	10b36a04 	addi	r2,r2,-12888
   41688:	10800217 	ldw	r2,8(r2)
   4168c:	1886b03a 	or	r3,r3,r2
   41690:	008001b4 	movhi	r2,6
   41694:	10b36a04 	addi	r2,r2,-12888
   41698:	10800317 	ldw	r2,12(r2)
   4169c:	1884b03a 	or	r2,r3,r2
   416a0:	10004326 	beq	r2,zero,417b0 <fpga2nios_parse+0x6f0>
            {
                send_buffer[0] = 0x12;
   416a4:	008001b4 	movhi	r2,6
   416a8:	10871504 	addi	r2,r2,7252
   416ac:	00c00484 	movi	r3,18
   416b0:	10c00005 	stb	r3,0(r2)
                send_buffer[1] = 0x34;
   416b4:	008001b4 	movhi	r2,6
   416b8:	10871504 	addi	r2,r2,7252
   416bc:	00c00d04 	movi	r3,52
   416c0:	10c00045 	stb	r3,1(r2)
                send_buffer[2] = (UP_FPGA_STATUS >> 8) & 0xff;
   416c4:	008001b4 	movhi	r2,6
   416c8:	10871504 	addi	r2,r2,7252
   416cc:	00fff044 	movi	r3,-63
   416d0:	10c00085 	stb	r3,2(r2)
                send_buffer[3] = (UP_FPGA_STATUS >> 0) & 0xff;
   416d4:	008001b4 	movhi	r2,6
   416d8:	10871504 	addi	r2,r2,7252
   416dc:	100000c5 	stb	zero,3(r2)

                send_buffer[4] = 0;
   416e0:	008001b4 	movhi	r2,6
   416e4:	10871504 	addi	r2,r2,7252
   416e8:	10000105 	stb	zero,4(r2)
                send_buffer[5] = 0;
   416ec:	008001b4 	movhi	r2,6
   416f0:	10871504 	addi	r2,r2,7252
   416f4:	10000145 	stb	zero,5(r2)
                send_buffer[6] = 0;
   416f8:	008001b4 	movhi	r2,6
   416fc:	10871504 	addi	r2,r2,7252
   41700:	10000185 	stb	zero,6(r2)
                send_buffer[7] = 16;
   41704:	008001b4 	movhi	r2,6
   41708:	10871504 	addi	r2,r2,7252
   4170c:	00c00404 	movi	r3,16
   41710:	10c001c5 	stb	r3,7(r2)
                memcpy(send_buffer + 8, (unsigned char *)&sys_warn, 16);
   41714:	008001b4 	movhi	r2,6
   41718:	10871704 	addi	r2,r2,7260
   4171c:	01800404 	movi	r6,16
   41720:	014001b4 	movhi	r5,6
   41724:	29736a04 	addi	r5,r5,-12888
   41728:	1009883a 	mov	r4,r2
   4172c:	00490240 	call	49024 <memcpy>
                send_buffer[24] = send_buffer[25] = send_buffer[26] = send_buffer[27] = 0xee;
   41730:	008001b4 	movhi	r2,6
   41734:	10871504 	addi	r2,r2,7252
   41738:	00fffb84 	movi	r3,-18
   4173c:	10c006c5 	stb	r3,27(r2)
   41740:	008001b4 	movhi	r2,6
   41744:	10871504 	addi	r2,r2,7252
   41748:	10c006c3 	ldbu	r3,27(r2)
   4174c:	008001b4 	movhi	r2,6
   41750:	10871504 	addi	r2,r2,7252
   41754:	10c00685 	stb	r3,26(r2)
   41758:	008001b4 	movhi	r2,6
   4175c:	10871504 	addi	r2,r2,7252
   41760:	10c00683 	ldbu	r3,26(r2)
   41764:	008001b4 	movhi	r2,6
   41768:	10871504 	addi	r2,r2,7252
   4176c:	10c00645 	stb	r3,25(r2)
   41770:	008001b4 	movhi	r2,6
   41774:	10871504 	addi	r2,r2,7252
   41778:	10c00643 	ldbu	r3,25(r2)
   4177c:	008001b4 	movhi	r2,6
   41780:	10871504 	addi	r2,r2,7252
   41784:	10c00605 	stb	r3,24(r2)

                send(SOCKET0, send_buffer, 28);
   41788:	01800704 	movi	r6,28
   4178c:	014001b4 	movhi	r5,6
   41790:	29471504 	addi	r5,r5,7252
   41794:	0009883a 	mov	r4,zero
   41798:	0046f7c0 	call	46f7c <send>
                send(SOCKET1, send_buffer, 28);
   4179c:	01800704 	movi	r6,28
   417a0:	014001b4 	movhi	r5,6
   417a4:	29471504 	addi	r5,r5,7252
   417a8:	01000044 	movi	r4,1
   417ac:	0046f7c0 	call	46f7c <send>
            }
        }
    }
    return -1;
   417b0:	00bfffc4 	movi	r2,-1
}
   417b4:	e037883a 	mov	sp,fp
   417b8:	dfc00117 	ldw	ra,4(sp)
   417bc:	df000017 	ldw	fp,0(sp)
   417c0:	dec00204 	addi	sp,sp,8
   417c4:	f800283a 	ret

000417c8 <process_motor_waring>:
 * @brief 连续5次检测电机计数值
 * 
 * @param data 
 */
void process_motor_waring(Sys_warn *data)
{
   417c8:	defffe04 	addi	sp,sp,-8
   417cc:	df000115 	stw	fp,4(sp)
   417d0:	df000104 	addi	fp,sp,4
   417d4:	e13fff15 	stw	r4,-4(fp)
    if(SysPara.motor_enable == ENABLE)
   417d8:	008001b4 	movhi	r2,6
   417dc:	10a46e04 	addi	r2,r2,-28232
   417e0:	10c00417 	ldw	r3,16(r2)
   417e4:	00844474 	movhi	r2,4369
   417e8:	10844444 	addi	r2,r2,4369
   417ec:	1880201e 	bne	r3,r2,41870 <process_motor_waring+0xa8>
    {
        if( 
                (data->motor_cycle_cnt[0] >= MOTOR_LOW_SPEED_VALUE) && 
   417f0:	e0bfff17 	ldw	r2,-4(fp)
   417f4:	10c00617 	ldw	r3,24(r2)
 */
void process_motor_waring(Sys_warn *data)
{
    if(SysPara.motor_enable == ENABLE)
    {
        if( 
   417f8:	00817db4 	movhi	r2,1526
   417fc:	10b83fc4 	addi	r2,r2,-7937
   41800:	10c0182e 	bgeu	r2,r3,41864 <process_motor_waring+0x9c>
                (data->motor_cycle_cnt[0] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[1] >= MOTOR_LOW_SPEED_VALUE) && 
   41804:	e0bfff17 	ldw	r2,-4(fp)
   41808:	10c00717 	ldw	r3,28(r2)
void process_motor_waring(Sys_warn *data)
{
    if(SysPara.motor_enable == ENABLE)
    {
        if( 
                (data->motor_cycle_cnt[0] >= MOTOR_LOW_SPEED_VALUE) && 
   4180c:	00817db4 	movhi	r2,1526
   41810:	10b83fc4 	addi	r2,r2,-7937
   41814:	10c0132e 	bgeu	r2,r3,41864 <process_motor_waring+0x9c>
                (data->motor_cycle_cnt[1] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[2] >= MOTOR_LOW_SPEED_VALUE) && 
   41818:	e0bfff17 	ldw	r2,-4(fp)
   4181c:	10c00817 	ldw	r3,32(r2)
{
    if(SysPara.motor_enable == ENABLE)
    {
        if( 
                (data->motor_cycle_cnt[0] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[1] >= MOTOR_LOW_SPEED_VALUE) && 
   41820:	00817db4 	movhi	r2,1526
   41824:	10b83fc4 	addi	r2,r2,-7937
   41828:	10c00e2e 	bgeu	r2,r3,41864 <process_motor_waring+0x9c>
                (data->motor_cycle_cnt[2] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[3] >= MOTOR_LOW_SPEED_VALUE) && 
   4182c:	e0bfff17 	ldw	r2,-4(fp)
   41830:	10c00917 	ldw	r3,36(r2)
    if(SysPara.motor_enable == ENABLE)
    {
        if( 
                (data->motor_cycle_cnt[0] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[1] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[2] >= MOTOR_LOW_SPEED_VALUE) && 
   41834:	00817db4 	movhi	r2,1526
   41838:	10b83fc4 	addi	r2,r2,-7937
   4183c:	10c0092e 	bgeu	r2,r3,41864 <process_motor_waring+0x9c>
                (data->motor_cycle_cnt[3] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[4] >= MOTOR_LOW_SPEED_VALUE)
   41840:	e0bfff17 	ldw	r2,-4(fp)
   41844:	10c00a17 	ldw	r3,40(r2)
    {
        if( 
                (data->motor_cycle_cnt[0] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[1] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[2] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[3] >= MOTOR_LOW_SPEED_VALUE) && 
   41848:	00817db4 	movhi	r2,1526
   4184c:	10b83fc4 	addi	r2,r2,-7937
   41850:	10c0042e 	bgeu	r2,r3,41864 <process_motor_waring+0x9c>
                (data->motor_cycle_cnt[4] >= MOTOR_LOW_SPEED_VALUE)
        )
            data->motor_low_speed_alarm = 0x01;
   41854:	e0bfff17 	ldw	r2,-4(fp)
   41858:	00c00044 	movi	r3,1
   4185c:	10c00015 	stw	r3,0(r2)
        else
            data->motor_low_speed_alarm = 0x00;
        }
    else
        data->motor_low_speed_alarm = 0x00;
}
   41860:	00000506 	br	41878 <process_motor_waring+0xb0>
                (data->motor_cycle_cnt[3] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[4] >= MOTOR_LOW_SPEED_VALUE)
        )
            data->motor_low_speed_alarm = 0x01;
        else
            data->motor_low_speed_alarm = 0x00;
   41864:	e0bfff17 	ldw	r2,-4(fp)
   41868:	10000015 	stw	zero,0(r2)
        }
    else
        data->motor_low_speed_alarm = 0x00;
}
   4186c:	00000206 	br	41878 <process_motor_waring+0xb0>
            data->motor_low_speed_alarm = 0x01;
        else
            data->motor_low_speed_alarm = 0x00;
        }
    else
        data->motor_low_speed_alarm = 0x00;
   41870:	e0bfff17 	ldw	r2,-4(fp)
   41874:	10000015 	stw	zero,0(r2)
}
   41878:	0001883a 	nop
   4187c:	e037883a 	mov	sp,fp
   41880:	df000017 	ldw	fp,0(sp)
   41884:	dec00104 	addi	sp,sp,4
   41888:	f800283a 	ret

0004188c <process_ld_waring>:
 * @brief 连续5次获得的零位距离值大于设定值，报警
 * 
 * @param data 
 */
void process_ld_waring(Sys_warn *data)
{
   4188c:	defffe04 	addi	sp,sp,-8
   41890:	df000115 	stw	fp,4(sp)
   41894:	df000104 	addi	fp,sp,4
   41898:	e13fff15 	stw	r4,-4(fp)
    if( 
            (data->zero_value[0] < LD_NO_WORK_VALUE) && 
   4189c:	e0bfff17 	ldw	r2,-4(fp)
   418a0:	10800b17 	ldw	r2,44(r2)
 * 
 * @param data 
 */
void process_ld_waring(Sys_warn *data)
{
    if( 
   418a4:	108001e8 	cmpgeui	r2,r2,7
   418a8:	1000141e 	bne	r2,zero,418fc <process_ld_waring+0x70>
            (data->zero_value[0] < LD_NO_WORK_VALUE) && 
            (data->zero_value[1] < LD_NO_WORK_VALUE) && 
   418ac:	e0bfff17 	ldw	r2,-4(fp)
   418b0:	10800c17 	ldw	r2,48(r2)
 * @param data 
 */
void process_ld_waring(Sys_warn *data)
{
    if( 
            (data->zero_value[0] < LD_NO_WORK_VALUE) && 
   418b4:	108001e8 	cmpgeui	r2,r2,7
   418b8:	1000101e 	bne	r2,zero,418fc <process_ld_waring+0x70>
            (data->zero_value[1] < LD_NO_WORK_VALUE) && 
            (data->zero_value[2] < LD_NO_WORK_VALUE) && 
   418bc:	e0bfff17 	ldw	r2,-4(fp)
   418c0:	10800d17 	ldw	r2,52(r2)
 */
void process_ld_waring(Sys_warn *data)
{
    if( 
            (data->zero_value[0] < LD_NO_WORK_VALUE) && 
            (data->zero_value[1] < LD_NO_WORK_VALUE) && 
   418c4:	108001e8 	cmpgeui	r2,r2,7
   418c8:	10000c1e 	bne	r2,zero,418fc <process_ld_waring+0x70>
            (data->zero_value[2] < LD_NO_WORK_VALUE) && 
            (data->zero_value[3] < LD_NO_WORK_VALUE) && 
   418cc:	e0bfff17 	ldw	r2,-4(fp)
   418d0:	10800e17 	ldw	r2,56(r2)
void process_ld_waring(Sys_warn *data)
{
    if( 
            (data->zero_value[0] < LD_NO_WORK_VALUE) && 
            (data->zero_value[1] < LD_NO_WORK_VALUE) && 
            (data->zero_value[2] < LD_NO_WORK_VALUE) && 
   418d4:	108001e8 	cmpgeui	r2,r2,7
   418d8:	1000081e 	bne	r2,zero,418fc <process_ld_waring+0x70>
            (data->zero_value[3] < LD_NO_WORK_VALUE) && 
            (data->zero_value[4] < LD_NO_WORK_VALUE)
   418dc:	e0bfff17 	ldw	r2,-4(fp)
   418e0:	10800f17 	ldw	r2,60(r2)
{
    if( 
            (data->zero_value[0] < LD_NO_WORK_VALUE) && 
            (data->zero_value[1] < LD_NO_WORK_VALUE) && 
            (data->zero_value[2] < LD_NO_WORK_VALUE) && 
            (data->zero_value[3] < LD_NO_WORK_VALUE) && 
   418e4:	108001e8 	cmpgeui	r2,r2,7
   418e8:	1000041e 	bne	r2,zero,418fc <process_ld_waring+0x70>
            (data->zero_value[4] < LD_NO_WORK_VALUE)
      )
        data->ld_not_work_alarm = 0x01;
   418ec:	e0bfff17 	ldw	r2,-4(fp)
   418f0:	00c00044 	movi	r3,1
   418f4:	10c00115 	stw	r3,4(r2)
   418f8:	00000206 	br	41904 <process_ld_waring+0x78>
    else
        data->ld_not_work_alarm = 0x00;
   418fc:	e0bfff17 	ldw	r2,-4(fp)
   41900:	10000115 	stw	zero,4(r2)
}
   41904:	0001883a 	nop
   41908:	e037883a 	mov	sp,fp
   4190c:	df000017 	ldw	fp,0(sp)
   41910:	dec00104 	addi	sp,sp,4
   41914:	f800283a 	ret

00041918 <process_window_dust_waring>:
 * @brief 连续5次的灰尘计数值大于设定值，报警
 * 
 * @param data 
 */
void process_window_dust_waring(Sys_warn *data)
{
   41918:	defffe04 	addi	sp,sp,-8
   4191c:	df000115 	stw	fp,4(sp)
   41920:	df000104 	addi	fp,sp,4
   41924:	e13fff15 	stw	r4,-4(fp)
    if( 
            (data->dust_cnt[0] > SysPara.dust_threshold) && 
   41928:	e0bfff17 	ldw	r2,-4(fp)
   4192c:	10c01017 	ldw	r3,64(r2)
   41930:	008001b4 	movhi	r2,6
   41934:	10a46e04 	addi	r2,r2,-28232
   41938:	10804917 	ldw	r2,292(r2)
 * 
 * @param data 
 */
void process_window_dust_waring(Sys_warn *data)
{
    if( 
   4193c:	10c01c2e 	bgeu	r2,r3,419b0 <process_window_dust_waring+0x98>
            (data->dust_cnt[0] > SysPara.dust_threshold) && 
            (data->dust_cnt[1] > SysPara.dust_threshold) && 
   41940:	e0bfff17 	ldw	r2,-4(fp)
   41944:	10c01117 	ldw	r3,68(r2)
   41948:	008001b4 	movhi	r2,6
   4194c:	10a46e04 	addi	r2,r2,-28232
   41950:	10804917 	ldw	r2,292(r2)
 * @param data 
 */
void process_window_dust_waring(Sys_warn *data)
{
    if( 
            (data->dust_cnt[0] > SysPara.dust_threshold) && 
   41954:	10c0162e 	bgeu	r2,r3,419b0 <process_window_dust_waring+0x98>
            (data->dust_cnt[1] > SysPara.dust_threshold) && 
            (data->dust_cnt[2] > SysPara.dust_threshold) && 
   41958:	e0bfff17 	ldw	r2,-4(fp)
   4195c:	10c01217 	ldw	r3,72(r2)
   41960:	008001b4 	movhi	r2,6
   41964:	10a46e04 	addi	r2,r2,-28232
   41968:	10804917 	ldw	r2,292(r2)
 */
void process_window_dust_waring(Sys_warn *data)
{
    if( 
            (data->dust_cnt[0] > SysPara.dust_threshold) && 
            (data->dust_cnt[1] > SysPara.dust_threshold) && 
   4196c:	10c0102e 	bgeu	r2,r3,419b0 <process_window_dust_waring+0x98>
            (data->dust_cnt[2] > SysPara.dust_threshold) && 
            (data->dust_cnt[3] > SysPara.dust_threshold) && 
   41970:	e0bfff17 	ldw	r2,-4(fp)
   41974:	10c01317 	ldw	r3,76(r2)
   41978:	008001b4 	movhi	r2,6
   4197c:	10a46e04 	addi	r2,r2,-28232
   41980:	10804917 	ldw	r2,292(r2)
void process_window_dust_waring(Sys_warn *data)
{
    if( 
            (data->dust_cnt[0] > SysPara.dust_threshold) && 
            (data->dust_cnt[1] > SysPara.dust_threshold) && 
            (data->dust_cnt[2] > SysPara.dust_threshold) && 
   41984:	10c00a2e 	bgeu	r2,r3,419b0 <process_window_dust_waring+0x98>
            (data->dust_cnt[3] > SysPara.dust_threshold) && 
            (data->dust_cnt[4] > SysPara.dust_threshold)
   41988:	e0bfff17 	ldw	r2,-4(fp)
   4198c:	10c01417 	ldw	r3,80(r2)
   41990:	008001b4 	movhi	r2,6
   41994:	10a46e04 	addi	r2,r2,-28232
   41998:	10804917 	ldw	r2,292(r2)
{
    if( 
            (data->dust_cnt[0] > SysPara.dust_threshold) && 
            (data->dust_cnt[1] > SysPara.dust_threshold) && 
            (data->dust_cnt[2] > SysPara.dust_threshold) && 
            (data->dust_cnt[3] > SysPara.dust_threshold) && 
   4199c:	10c0042e 	bgeu	r2,r3,419b0 <process_window_dust_waring+0x98>
            (data->dust_cnt[4] > SysPara.dust_threshold)
      )
        data->window_dust_alarm = 0x01;
   419a0:	e0bfff17 	ldw	r2,-4(fp)
   419a4:	00c00044 	movi	r3,1
   419a8:	10c00215 	stw	r3,8(r2)
   419ac:	00000206 	br	419b8 <process_window_dust_waring+0xa0>
    else
        data->window_dust_alarm = 0x00;
   419b0:	e0bfff17 	ldw	r2,-4(fp)
   419b4:	10000215 	stw	zero,8(r2)
}
   419b8:	0001883a 	nop
   419bc:	e037883a 	mov	sp,fp
   419c0:	df000017 	ldw	fp,0(sp)
   419c4:	dec00104 	addi	sp,sp,4
   419c8:	f800283a 	ret

000419cc <process_sys_temp_waring>:


void process_sys_temp_waring(Sys_warn *data)
{
   419cc:	defffc04 	addi	sp,sp,-16
   419d0:	df000315 	stw	fp,12(sp)
   419d4:	df000304 	addi	fp,sp,12
   419d8:	e13fff15 	stw	r4,-4(fp)
    int i;
    unsigned char sign_bit = 0;
   419dc:	e03ffe05 	stb	zero,-8(fp)

    for(i = 0; i < 5; i++)
   419e0:	e03ffd15 	stw	zero,-12(fp)
   419e4:	00003006 	br	41aa8 <process_sys_temp_waring+0xdc>
    {
        sign_bit = (data->temp_value[i] >> 13) & 0x01;
   419e8:	e0ffff17 	ldw	r3,-4(fp)
   419ec:	e0bffd17 	ldw	r2,-12(fp)
   419f0:	10800544 	addi	r2,r2,21
   419f4:	1085883a 	add	r2,r2,r2
   419f8:	1085883a 	add	r2,r2,r2
   419fc:	1885883a 	add	r2,r3,r2
   41a00:	10800017 	ldw	r2,0(r2)
   41a04:	1004d37a 	srli	r2,r2,13
   41a08:	1080004c 	andi	r2,r2,1
   41a0c:	e0bffe05 	stb	r2,-8(fp)
        if(sign_bit == 0)  // 温度是正值
   41a10:	e0bffe03 	ldbu	r2,-8(fp)
   41a14:	1000111e 	bne	r2,zero,41a5c <process_sys_temp_waring+0x90>
        {
            if((data->temp_value[i] & 0x00ff) > TEMP_OUT_VALUE)
   41a18:	e0ffff17 	ldw	r3,-4(fp)
   41a1c:	e0bffd17 	ldw	r2,-12(fp)
   41a20:	10800544 	addi	r2,r2,21
   41a24:	1085883a 	add	r2,r2,r2
   41a28:	1085883a 	add	r2,r2,r2
   41a2c:	1885883a 	add	r2,r3,r2
   41a30:	10800017 	ldw	r2,0(r2)
   41a34:	10803fcc 	andi	r2,r2,255
   41a38:	10801370 	cmpltui	r2,r2,77
   41a3c:	1000041e 	bne	r2,zero,41a50 <process_sys_temp_waring+0x84>
                data->temp_out_alarm = 0x01;
   41a40:	e0bfff17 	ldw	r2,-4(fp)
   41a44:	00c00044 	movi	r3,1
   41a48:	10c00315 	stw	r3,12(r2)
   41a4c:	00001306 	br	41a9c <process_sys_temp_waring+0xd0>
            else
                data->temp_out_alarm = 0x00;
   41a50:	e0bfff17 	ldw	r2,-4(fp)
   41a54:	10000315 	stw	zero,12(r2)
   41a58:	00001006 	br	41a9c <process_sys_temp_waring+0xd0>
        }
        else
        {
            if((data->temp_value[i] & 0x00ff) > 20)
   41a5c:	e0ffff17 	ldw	r3,-4(fp)
   41a60:	e0bffd17 	ldw	r2,-12(fp)
   41a64:	10800544 	addi	r2,r2,21
   41a68:	1085883a 	add	r2,r2,r2
   41a6c:	1085883a 	add	r2,r2,r2
   41a70:	1885883a 	add	r2,r3,r2
   41a74:	10800017 	ldw	r2,0(r2)
   41a78:	10803fcc 	andi	r2,r2,255
   41a7c:	10800570 	cmpltui	r2,r2,21
   41a80:	1000041e 	bne	r2,zero,41a94 <process_sys_temp_waring+0xc8>
                data->temp_out_alarm = 0x01;
   41a84:	e0bfff17 	ldw	r2,-4(fp)
   41a88:	00c00044 	movi	r3,1
   41a8c:	10c00315 	stw	r3,12(r2)
   41a90:	00000206 	br	41a9c <process_sys_temp_waring+0xd0>
            else
                data->temp_out_alarm = 0x00;
   41a94:	e0bfff17 	ldw	r2,-4(fp)
   41a98:	10000315 	stw	zero,12(r2)
void process_sys_temp_waring(Sys_warn *data)
{
    int i;
    unsigned char sign_bit = 0;

    for(i = 0; i < 5; i++)
   41a9c:	e0bffd17 	ldw	r2,-12(fp)
   41aa0:	10800044 	addi	r2,r2,1
   41aa4:	e0bffd15 	stw	r2,-12(fp)
   41aa8:	e0bffd17 	ldw	r2,-12(fp)
   41aac:	10800150 	cmplti	r2,r2,5
   41ab0:	103fcd1e 	bne	r2,zero,419e8 <__alt_mem_epcs_flash+0xfffc09e8>
                data->temp_out_alarm = 0x01;
            else
                data->temp_out_alarm = 0x00;
        }
    }
}
   41ab4:	0001883a 	nop
   41ab8:	e037883a 	mov	sp,fp
   41abc:	df000017 	ldw	fp,0(sp)
   41ac0:	dec00104 	addi	sp,sp,4
   41ac4:	f800283a 	ret

00041ac8 <start>:
 * Name: start
 * Description: IIC启动
 * =================================================================
 */
static void start(void)
{
   41ac8:	defffe04 	addi	sp,sp,-8
   41acc:	dfc00115 	stw	ra,4(sp)
   41ad0:	df000015 	stw	fp,0(sp)
   41ad4:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, OUT);
   41ad8:	00c00044 	movi	r3,1
   41adc:	00800234 	movhi	r2,8
   41ae0:	10885d04 	addi	r2,r2,8564
   41ae4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, 1);
   41ae8:	00c00044 	movi	r3,1
   41aec:	00800234 	movhi	r2,8
   41af0:	10885c04 	addi	r2,r2,8560
   41af4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
   41af8:	00c00044 	movi	r3,1
   41afc:	00800234 	movhi	r2,8
   41b00:	10886004 	addi	r2,r2,8576
   41b04:	10c00035 	stwio	r3,0(r2)
    delay_us(2);
   41b08:	01000084 	movi	r4,2
   41b0c:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, 0);
   41b10:	0007883a 	mov	r3,zero
   41b14:	00800234 	movhi	r2,8
   41b18:	10885c04 	addi	r2,r2,8560
   41b1c:	10c00035 	stwio	r3,0(r2)
    delay_us(1);
   41b20:	01000044 	movi	r4,1
   41b24:	00402c80 	call	402c8 <delay_us>
}
   41b28:	0001883a 	nop
   41b2c:	e037883a 	mov	sp,fp
   41b30:	dfc00117 	ldw	ra,4(sp)
   41b34:	df000017 	ldw	fp,0(sp)
   41b38:	dec00204 	addi	sp,sp,8
   41b3c:	f800283a 	ret

00041b40 <stop>:
 * Name: uart_send_byte
 * Description: IIC停止
 * ==================================================================
 */
static void stop(void)
{
   41b40:	defffe04 	addi	sp,sp,-8
   41b44:	dfc00115 	stw	ra,4(sp)
   41b48:	df000015 	stw	fp,0(sp)
   41b4c:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, OUT);
   41b50:	00c00044 	movi	r3,1
   41b54:	00800234 	movhi	r2,8
   41b58:	10885d04 	addi	r2,r2,8564
   41b5c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, 0);
   41b60:	0007883a 	mov	r3,zero
   41b64:	00800234 	movhi	r2,8
   41b68:	10885c04 	addi	r2,r2,8560
   41b6c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41b70:	0007883a 	mov	r3,zero
   41b74:	00800234 	movhi	r2,8
   41b78:	10886004 	addi	r2,r2,8576
   41b7c:	10c00035 	stwio	r3,0(r2)
    delay_us(2);
   41b80:	01000084 	movi	r4,2
   41b84:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
   41b88:	00c00044 	movi	r3,1
   41b8c:	00800234 	movhi	r2,8
   41b90:	10886004 	addi	r2,r2,8576
   41b94:	10c00035 	stwio	r3,0(r2)
    delay_us(1);
   41b98:	01000044 	movi	r4,1
   41b9c:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, 1);
   41ba0:	00c00044 	movi	r3,1
   41ba4:	00800234 	movhi	r2,8
   41ba8:	10885c04 	addi	r2,r2,8560
   41bac:	10c00035 	stwio	r3,0(r2)
    delay_us(2);
   41bb0:	01000084 	movi	r4,2
   41bb4:	00402c80 	call	402c8 <delay_us>
}
   41bb8:	0001883a 	nop
   41bbc:	e037883a 	mov	sp,fp
   41bc0:	dfc00117 	ldw	ra,4(sp)
   41bc4:	df000017 	ldw	fp,0(sp)
   41bc8:	dec00204 	addi	sp,sp,8
   41bcc:	f800283a 	ret

00041bd0 <wait_slave_ack>:
 * Name: ack
 * Description: IIC应答
 * =================================================================
 */
static void wait_slave_ack(void)
{
   41bd0:	defffd04 	addi	sp,sp,-12
   41bd4:	dfc00215 	stw	ra,8(sp)
   41bd8:	df000115 	stw	fp,4(sp)
   41bdc:	df000104 	addi	fp,sp,4
    alt_u8 tmp;
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41be0:	0007883a 	mov	r3,zero
   41be4:	00800234 	movhi	r2,8
   41be8:	10886004 	addi	r2,r2,8576
   41bec:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, IN);
   41bf0:	0007883a 	mov	r3,zero
   41bf4:	00800234 	movhi	r2,8
   41bf8:	10885d04 	addi	r2,r2,8564
   41bfc:	10c00035 	stwio	r3,0(r2)

    delay_us(2);
   41c00:	01000084 	movi	r4,2
   41c04:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
   41c08:	00c00044 	movi	r3,1
   41c0c:	00800234 	movhi	r2,8
   41c10:	10886004 	addi	r2,r2,8576
   41c14:	10c00035 	stwio	r3,0(r2)
    delay_us(1);
   41c18:	01000044 	movi	r4,1
   41c1c:	00402c80 	call	402c8 <delay_us>
    tmp = IORD_ALTERA_AVALON_PIO_DATA(SDA_BASE);
   41c20:	00800234 	movhi	r2,8
   41c24:	10885c04 	addi	r2,r2,8560
   41c28:	10800037 	ldwio	r2,0(r2)
   41c2c:	e0bfff05 	stb	r2,-4(fp)
    
    delay_us(1);
   41c30:	01000044 	movi	r4,1
   41c34:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41c38:	0007883a 	mov	r3,zero
   41c3c:	00800234 	movhi	r2,8
   41c40:	10886004 	addi	r2,r2,8576
   41c44:	10c00035 	stwio	r3,0(r2)
    delay_us(2);
   41c48:	01000084 	movi	r4,2
   41c4c:	00402c80 	call	402c8 <delay_us>
    if(tmp == 1)  // 不正确应答
   41c50:	e0bfff03 	ldbu	r2,-4(fp)
   41c54:	10800058 	cmpnei	r2,r2,1
   41c58:	1000011e 	bne	r2,zero,41c60 <wait_slave_ack+0x90>
        stop();
   41c5c:	0041b400 	call	41b40 <stop>
}
   41c60:	0001883a 	nop
   41c64:	e037883a 	mov	sp,fp
   41c68:	dfc00117 	ldw	ra,4(sp)
   41c6c:	df000017 	ldw	fp,0(sp)
   41c70:	dec00204 	addi	sp,sp,8
   41c74:	f800283a 	ret

00041c78 <master_send_ack>:
/**
 * @brief 主机发送一个低电平的应答信号, 继续读取数据
 * 
 */
static void master_send_ack(void)
{
   41c78:	defffe04 	addi	sp,sp,-8
   41c7c:	dfc00115 	stw	ra,4(sp)
   41c80:	df000015 	stw	fp,0(sp)
   41c84:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41c88:	0007883a 	mov	r3,zero
   41c8c:	00800234 	movhi	r2,8
   41c90:	10886004 	addi	r2,r2,8576
   41c94:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, OUT);
   41c98:	00c00044 	movi	r3,1
   41c9c:	00800234 	movhi	r2,8
   41ca0:	10885d04 	addi	r2,r2,8564
   41ca4:	10c00035 	stwio	r3,0(r2)

    delay_us(2);
   41ca8:	01000084 	movi	r4,2
   41cac:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, 0);
   41cb0:	0007883a 	mov	r3,zero
   41cb4:	00800234 	movhi	r2,8
   41cb8:	10885c04 	addi	r2,r2,8560
   41cbc:	10c00035 	stwio	r3,0(r2)
    delay_us(1);
   41cc0:	01000044 	movi	r4,1
   41cc4:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
   41cc8:	00c00044 	movi	r3,1
   41ccc:	00800234 	movhi	r2,8
   41cd0:	10886004 	addi	r2,r2,8576
   41cd4:	10c00035 	stwio	r3,0(r2)
    delay_us(1);
   41cd8:	01000044 	movi	r4,1
   41cdc:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41ce0:	0007883a 	mov	r3,zero
   41ce4:	00800234 	movhi	r2,8
   41ce8:	10886004 	addi	r2,r2,8576
   41cec:	10c00035 	stwio	r3,0(r2)
    delay_us(2);
   41cf0:	01000084 	movi	r4,2
   41cf4:	00402c80 	call	402c8 <delay_us>
}
   41cf8:	0001883a 	nop
   41cfc:	e037883a 	mov	sp,fp
   41d00:	dfc00117 	ldw	ra,4(sp)
   41d04:	df000017 	ldw	fp,0(sp)
   41d08:	dec00204 	addi	sp,sp,8
   41d0c:	f800283a 	ret

00041d10 <no_ack>:
/**
 * @brief 
 * 
 */
static void no_ack(void)
{
   41d10:	defffe04 	addi	sp,sp,-8
   41d14:	dfc00115 	stw	ra,4(sp)
   41d18:	df000015 	stw	fp,0(sp)
   41d1c:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41d20:	0007883a 	mov	r3,zero
   41d24:	00800234 	movhi	r2,8
   41d28:	10886004 	addi	r2,r2,8576
   41d2c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, OUT);
   41d30:	00c00044 	movi	r3,1
   41d34:	00800234 	movhi	r2,8
   41d38:	10885d04 	addi	r2,r2,8564
   41d3c:	10c00035 	stwio	r3,0(r2)
    delay_us(2);
   41d40:	01000084 	movi	r4,2
   41d44:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, 1);
   41d48:	00c00044 	movi	r3,1
   41d4c:	00800234 	movhi	r2,8
   41d50:	10885c04 	addi	r2,r2,8560
   41d54:	10c00035 	stwio	r3,0(r2)
    delay_us(1);
   41d58:	01000044 	movi	r4,1
   41d5c:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
   41d60:	00c00044 	movi	r3,1
   41d64:	00800234 	movhi	r2,8
   41d68:	10886004 	addi	r2,r2,8576
   41d6c:	10c00035 	stwio	r3,0(r2)
    delay_us(1);
   41d70:	01000044 	movi	r4,1
   41d74:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41d78:	0007883a 	mov	r3,zero
   41d7c:	00800234 	movhi	r2,8
   41d80:	10886004 	addi	r2,r2,8576
   41d84:	10c00035 	stwio	r3,0(r2)
    delay_us(2);
   41d88:	01000084 	movi	r4,2
   41d8c:	00402c80 	call	402c8 <delay_us>
}
   41d90:	0001883a 	nop
   41d94:	e037883a 	mov	sp,fp
   41d98:	dfc00117 	ldw	ra,4(sp)
   41d9c:	df000017 	ldw	fp,0(sp)
   41da0:	dec00204 	addi	sp,sp,8
   41da4:	f800283a 	ret

00041da8 <iic_write>:
 * Name: iic_write
 * Description: IIC写一个字节
 * =================================================================
 */
void iic_write(alt_u8 dat)
{
   41da8:	defffc04 	addi	sp,sp,-16
   41dac:	dfc00315 	stw	ra,12(sp)
   41db0:	df000215 	stw	fp,8(sp)
   41db4:	df000204 	addi	fp,sp,8
   41db8:	2005883a 	mov	r2,r4
   41dbc:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 i, tmp;
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, OUT);
   41dc0:	00c00044 	movi	r3,1
   41dc4:	00800234 	movhi	r2,8
   41dc8:	10885d04 	addi	r2,r2,8564
   41dcc:	10c00035 	stwio	r3,0(r2)
    for(i = 0; i < 8; i++)
   41dd0:	e03ffe05 	stb	zero,-8(fp)
   41dd4:	00001c06 	br	41e48 <iic_write+0xa0>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41dd8:	0007883a 	mov	r3,zero
   41ddc:	00800234 	movhi	r2,8
   41de0:	10886004 	addi	r2,r2,8576
   41de4:	10c00035 	stwio	r3,0(r2)
        delay_us(2);
   41de8:	01000084 	movi	r4,2
   41dec:	00402c80 	call	402c8 <delay_us>
        tmp = (dat & 0x80) ? 1 : 0;
   41df0:	e0bfff03 	ldbu	r2,-4(fp)
   41df4:	10803fcc 	andi	r2,r2,255
   41df8:	1004d1fa 	srli	r2,r2,7
   41dfc:	e0bffe45 	stb	r2,-7(fp)
        dat <<= 1;
   41e00:	e0bfff03 	ldbu	r2,-4(fp)
   41e04:	1085883a 	add	r2,r2,r2
   41e08:	e0bfff05 	stb	r2,-4(fp)
        IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, tmp);
   41e0c:	e0fffe43 	ldbu	r3,-7(fp)
   41e10:	00800234 	movhi	r2,8
   41e14:	10885c04 	addi	r2,r2,8560
   41e18:	10c00035 	stwio	r3,0(r2)
        delay_us(1);
   41e1c:	01000044 	movi	r4,1
   41e20:	00402c80 	call	402c8 <delay_us>
        IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
   41e24:	00c00044 	movi	r3,1
   41e28:	00800234 	movhi	r2,8
   41e2c:	10886004 	addi	r2,r2,8576
   41e30:	10c00035 	stwio	r3,0(r2)
        delay_us(2);
   41e34:	01000084 	movi	r4,2
   41e38:	00402c80 	call	402c8 <delay_us>
 */
void iic_write(alt_u8 dat)
{
    alt_u8 i, tmp;
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, OUT);
    for(i = 0; i < 8; i++)
   41e3c:	e0bffe03 	ldbu	r2,-8(fp)
   41e40:	10800044 	addi	r2,r2,1
   41e44:	e0bffe05 	stb	r2,-8(fp)
   41e48:	e0bffe03 	ldbu	r2,-8(fp)
   41e4c:	10800230 	cmpltui	r2,r2,8
   41e50:	103fe11e 	bne	r2,zero,41dd8 <__alt_mem_epcs_flash+0xfffc0dd8>
        IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, tmp);
        delay_us(1);
        IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
        delay_us(2);
    }
}
   41e54:	0001883a 	nop
   41e58:	e037883a 	mov	sp,fp
   41e5c:	dfc00117 	ldw	ra,4(sp)
   41e60:	df000017 	ldw	fp,0(sp)
   41e64:	dec00204 	addi	sp,sp,8
   41e68:	f800283a 	ret

00041e6c <iic_read>:
 * Name: read
 * Description: IIC读一个字节
 * ==================================================================
 */
static alt_u8 iic_read(void)
{
   41e6c:	defffd04 	addi	sp,sp,-12
   41e70:	dfc00215 	stw	ra,8(sp)
   41e74:	df000115 	stw	fp,4(sp)
   41e78:	df000104 	addi	fp,sp,4
    alt_u8 i, dat = 0;
   41e7c:	e03fff45 	stb	zero,-3(fp)
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, IN);
   41e80:	0007883a 	mov	r3,zero
   41e84:	00800234 	movhi	r2,8
   41e88:	10885d04 	addi	r2,r2,8564
   41e8c:	10c00035 	stwio	r3,0(r2)
    for(i = 0; i < 8; i++)
   41e90:	e03fff05 	stb	zero,-4(fp)
   41e94:	00001b06 	br	41f04 <iic_read+0x98>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41e98:	0007883a 	mov	r3,zero
   41e9c:	00800234 	movhi	r2,8
   41ea0:	10886004 	addi	r2,r2,8576
   41ea4:	10c00035 	stwio	r3,0(r2)
        delay_us(2);
   41ea8:	01000084 	movi	r4,2
   41eac:	00402c80 	call	402c8 <delay_us>
        IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
   41eb0:	00c00044 	movi	r3,1
   41eb4:	00800234 	movhi	r2,8
   41eb8:	10886004 	addi	r2,r2,8576
   41ebc:	10c00035 	stwio	r3,0(r2)
        delay_us(1);
   41ec0:	01000044 	movi	r4,1
   41ec4:	00402c80 	call	402c8 <delay_us>
        dat <<= 1;
   41ec8:	e0bfff43 	ldbu	r2,-3(fp)
   41ecc:	1085883a 	add	r2,r2,r2
   41ed0:	e0bfff45 	stb	r2,-3(fp)
        dat |= IORD_ALTERA_AVALON_PIO_DATA(SDA_BASE);
   41ed4:	00800234 	movhi	r2,8
   41ed8:	10885c04 	addi	r2,r2,8560
   41edc:	10800037 	ldwio	r2,0(r2)
   41ee0:	1007883a 	mov	r3,r2
   41ee4:	e0bfff43 	ldbu	r2,-3(fp)
   41ee8:	1884b03a 	or	r2,r3,r2
   41eec:	e0bfff45 	stb	r2,-3(fp)
        delay_us(1);
   41ef0:	01000044 	movi	r4,1
   41ef4:	00402c80 	call	402c8 <delay_us>
 */
static alt_u8 iic_read(void)
{
    alt_u8 i, dat = 0;
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, IN);
    for(i = 0; i < 8; i++)
   41ef8:	e0bfff03 	ldbu	r2,-4(fp)
   41efc:	10800044 	addi	r2,r2,1
   41f00:	e0bfff05 	stb	r2,-4(fp)
   41f04:	e0bfff03 	ldbu	r2,-4(fp)
   41f08:	10800230 	cmpltui	r2,r2,8
   41f0c:	103fe21e 	bne	r2,zero,41e98 <__alt_mem_epcs_flash+0xfffc0e98>
        delay_us(1);
        dat <<= 1;
        dat |= IORD_ALTERA_AVALON_PIO_DATA(SDA_BASE);
        delay_us(1);
    }
    delay_us(1);
   41f10:	01000044 	movi	r4,1
   41f14:	00402c80 	call	402c8 <delay_us>
//    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
//    delay_us(1);
//    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
//    delay_us(1);
//    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
    return dat;
   41f18:	e0bfff43 	ldbu	r2,-3(fp)
}
   41f1c:	e037883a 	mov	sp,fp
   41f20:	dfc00117 	ldw	ra,4(sp)
   41f24:	df000017 	ldw	fp,0(sp)
   41f28:	dec00204 	addi	sp,sp,8
   41f2c:	f800283a 	ret

00041f30 <write_byte>:
 * @brief 向EEPROM写一个字节. 注意E2PROM的固有写入时间
 * @param addr
 * @param dat
 */
static void write_byte(alt_u32 addr, alt_u8 dat)
{
   41f30:	defffb04 	addi	sp,sp,-20
   41f34:	dfc00415 	stw	ra,16(sp)
   41f38:	df000315 	stw	fp,12(sp)
   41f3c:	df000304 	addi	fp,sp,12
   41f40:	e13ffe15 	stw	r4,-8(fp)
   41f44:	2805883a 	mov	r2,r5
   41f48:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 cmd;
    cmd = 0xa0 | ( (addr >> 15) & 0x02 );
   41f4c:	e0bffe17 	ldw	r2,-8(fp)
   41f50:	1004d3fa 	srli	r2,r2,15
   41f54:	1080008c 	andi	r2,r2,2
   41f58:	1007883a 	mov	r3,r2
   41f5c:	00bfe804 	movi	r2,-96
   41f60:	1884b03a 	or	r2,r3,r2
   41f64:	e0bffd05 	stb	r2,-12(fp)
    start();
   41f68:	0041ac80 	call	41ac8 <start>
    iic_write(cmd);
   41f6c:	e0bffd03 	ldbu	r2,-12(fp)
   41f70:	1009883a 	mov	r4,r2
   41f74:	0041da80 	call	41da8 <iic_write>
    wait_slave_ack();
   41f78:	0041bd00 	call	41bd0 <wait_slave_ack>
    iic_write((addr >> 8) & 0xff);
   41f7c:	e0bffe17 	ldw	r2,-8(fp)
   41f80:	1004d23a 	srli	r2,r2,8
   41f84:	10803fcc 	andi	r2,r2,255
   41f88:	1009883a 	mov	r4,r2
   41f8c:	0041da80 	call	41da8 <iic_write>
    wait_slave_ack();
   41f90:	0041bd00 	call	41bd0 <wait_slave_ack>
    iic_write((addr >> 0) & 0xff);
   41f94:	e0bffe17 	ldw	r2,-8(fp)
   41f98:	10803fcc 	andi	r2,r2,255
   41f9c:	1009883a 	mov	r4,r2
   41fa0:	0041da80 	call	41da8 <iic_write>
    wait_slave_ack();
   41fa4:	0041bd00 	call	41bd0 <wait_slave_ack>
    iic_write(dat);
   41fa8:	e0bfff03 	ldbu	r2,-4(fp)
   41fac:	1009883a 	mov	r4,r2
   41fb0:	0041da80 	call	41da8 <iic_write>
    wait_slave_ack();
   41fb4:	0041bd00 	call	41bd0 <wait_slave_ack>
    stop();
   41fb8:	0041b400 	call	41b40 <stop>
    delay_us(2500);
   41fbc:	01027104 	movi	r4,2500
   41fc0:	00402c80 	call	402c8 <delay_us>
}
   41fc4:	0001883a 	nop
   41fc8:	e037883a 	mov	sp,fp
   41fcc:	dfc00117 	ldw	ra,4(sp)
   41fd0:	df000017 	ldw	fp,0(sp)
   41fd4:	dec00204 	addi	sp,sp,8
   41fd8:	f800283a 	ret

00041fdc <write_page>:
 * @param addr, 要写入E2PROM的起始地址
 * @param dat, 地址指针
 * @param len, 写入数据长度
 */
void write_page(alt_u32 addr, alt_u8 *dat, alt_u16 len)
{
   41fdc:	defff804 	addi	sp,sp,-32
   41fe0:	dfc00715 	stw	ra,28(sp)
   41fe4:	df000615 	stw	fp,24(sp)
   41fe8:	df000604 	addi	fp,sp,24
   41fec:	e13ffd15 	stw	r4,-12(fp)
   41ff0:	e17ffe15 	stw	r5,-8(fp)
   41ff4:	3005883a 	mov	r2,r6
   41ff8:	e0bfff0d 	sth	r2,-4(fp)
    alt_u16 i, j;
    alt_u8 number, remain;
    alt_32 i2c_addr;

    // 最高位地址放到bit6上
    cmd = 0xa0 | ( (addr >> 15) & 0x02 );
   41ffc:	e0bffd17 	ldw	r2,-12(fp)
   42000:	1004d3fa 	srli	r2,r2,15
   42004:	1080008c 	andi	r2,r2,2
   42008:	1007883a 	mov	r3,r2
   4200c:	00bfe804 	movi	r2,-96
   42010:	1884b03a 	or	r2,r3,r2
   42014:	e0bffb05 	stb	r2,-20(fp)

    number = len / EEPROM_PAGE_SIZE;
   42018:	e0bfff0b 	ldhu	r2,-4(fp)
   4201c:	1004d23a 	srli	r2,r2,8
   42020:	e0bffb45 	stb	r2,-19(fp)
    remain = len % EEPROM_PAGE_SIZE;
   42024:	e0bfff0b 	ldhu	r2,-4(fp)
   42028:	e0bffb85 	stb	r2,-18(fp)

    for(i = 0; i < number; i++)
   4202c:	e03ffa0d 	sth	zero,-24(fp)
   42030:	00003006 	br	420f4 <write_page+0x118>
    {
        i2c_addr = addr + i * EEPROM_PAGE_SIZE;
   42034:	e0bffa0b 	ldhu	r2,-24(fp)
   42038:	1004923a 	slli	r2,r2,8
   4203c:	1007883a 	mov	r3,r2
   42040:	e0bffd17 	ldw	r2,-12(fp)
   42044:	1885883a 	add	r2,r3,r2
   42048:	e0bffc15 	stw	r2,-16(fp)
        start();
   4204c:	0041ac80 	call	41ac8 <start>
        iic_write(cmd);
   42050:	e0bffb03 	ldbu	r2,-20(fp)
   42054:	1009883a 	mov	r4,r2
   42058:	0041da80 	call	41da8 <iic_write>
        wait_slave_ack();
   4205c:	0041bd00 	call	41bd0 <wait_slave_ack>
        iic_write((i2c_addr >> 8) & 0xff);
   42060:	e0bffc17 	ldw	r2,-16(fp)
   42064:	1005d23a 	srai	r2,r2,8
   42068:	10803fcc 	andi	r2,r2,255
   4206c:	1009883a 	mov	r4,r2
   42070:	0041da80 	call	41da8 <iic_write>
        wait_slave_ack();
   42074:	0041bd00 	call	41bd0 <wait_slave_ack>
        iic_write((i2c_addr >> 0) & 0xff);
   42078:	e0bffc17 	ldw	r2,-16(fp)
   4207c:	10803fcc 	andi	r2,r2,255
   42080:	1009883a 	mov	r4,r2
   42084:	0041da80 	call	41da8 <iic_write>
        wait_slave_ack();
   42088:	0041bd00 	call	41bd0 <wait_slave_ack>
        for(j = 0; j < EEPROM_PAGE_SIZE; j++)
   4208c:	e03ffa8d 	sth	zero,-22(fp)
   42090:	00000f06 	br	420d0 <write_page+0xf4>
        {
            iic_write(dat[i * EEPROM_PAGE_SIZE + j]);
   42094:	e0bffa0b 	ldhu	r2,-24(fp)
   42098:	1006923a 	slli	r3,r2,8
   4209c:	e0bffa8b 	ldhu	r2,-22(fp)
   420a0:	1885883a 	add	r2,r3,r2
   420a4:	1007883a 	mov	r3,r2
   420a8:	e0bffe17 	ldw	r2,-8(fp)
   420ac:	10c5883a 	add	r2,r2,r3
   420b0:	10800003 	ldbu	r2,0(r2)
   420b4:	10803fcc 	andi	r2,r2,255
   420b8:	1009883a 	mov	r4,r2
   420bc:	0041da80 	call	41da8 <iic_write>
            wait_slave_ack();
   420c0:	0041bd00 	call	41bd0 <wait_slave_ack>
        wait_slave_ack();
        iic_write((i2c_addr >> 8) & 0xff);
        wait_slave_ack();
        iic_write((i2c_addr >> 0) & 0xff);
        wait_slave_ack();
        for(j = 0; j < EEPROM_PAGE_SIZE; j++)
   420c4:	e0bffa8b 	ldhu	r2,-22(fp)
   420c8:	10800044 	addi	r2,r2,1
   420cc:	e0bffa8d 	sth	r2,-22(fp)
   420d0:	e0bffa8b 	ldhu	r2,-22(fp)
   420d4:	10804030 	cmpltui	r2,r2,256
   420d8:	103fee1e 	bne	r2,zero,42094 <__alt_mem_epcs_flash+0xfffc1094>
        {
            iic_write(dat[i * EEPROM_PAGE_SIZE + j]);
            wait_slave_ack();
        }
        stop();
   420dc:	0041b400 	call	41b40 <stop>
        delay_us(10000);
   420e0:	0109c404 	movi	r4,10000
   420e4:	00402c80 	call	402c8 <delay_us>
    cmd = 0xa0 | ( (addr >> 15) & 0x02 );

    number = len / EEPROM_PAGE_SIZE;
    remain = len % EEPROM_PAGE_SIZE;

    for(i = 0; i < number; i++)
   420e8:	e0bffa0b 	ldhu	r2,-24(fp)
   420ec:	10800044 	addi	r2,r2,1
   420f0:	e0bffa0d 	sth	r2,-24(fp)
   420f4:	e0bffb43 	ldbu	r2,-19(fp)
   420f8:	10bfffcc 	andi	r2,r2,65535
   420fc:	e0fffa0b 	ldhu	r3,-24(fp)
   42100:	18bfcc36 	bltu	r3,r2,42034 <__alt_mem_epcs_flash+0xfffc1034>
        }
        stop();
        delay_us(10000);
//        usleep(5000);
    }
    if(remain != 0)
   42104:	e0bffb83 	ldbu	r2,-18(fp)
   42108:	10002e26 	beq	r2,zero,421c4 <write_page+0x1e8>
    {
        i2c_addr = addr + number * EEPROM_PAGE_SIZE;
   4210c:	e0bffb43 	ldbu	r2,-19(fp)
   42110:	1004923a 	slli	r2,r2,8
   42114:	1007883a 	mov	r3,r2
   42118:	e0bffd17 	ldw	r2,-12(fp)
   4211c:	1885883a 	add	r2,r3,r2
   42120:	e0bffc15 	stw	r2,-16(fp)
        start();
   42124:	0041ac80 	call	41ac8 <start>
        iic_write(cmd);
   42128:	e0bffb03 	ldbu	r2,-20(fp)
   4212c:	1009883a 	mov	r4,r2
   42130:	0041da80 	call	41da8 <iic_write>
        wait_slave_ack();
   42134:	0041bd00 	call	41bd0 <wait_slave_ack>
        iic_write((i2c_addr >> 8) & 0xff);
   42138:	e0bffc17 	ldw	r2,-16(fp)
   4213c:	1005d23a 	srai	r2,r2,8
   42140:	10803fcc 	andi	r2,r2,255
   42144:	1009883a 	mov	r4,r2
   42148:	0041da80 	call	41da8 <iic_write>
        wait_slave_ack();
   4214c:	0041bd00 	call	41bd0 <wait_slave_ack>
        iic_write((i2c_addr >> 0) & 0xff);
   42150:	e0bffc17 	ldw	r2,-16(fp)
   42154:	10803fcc 	andi	r2,r2,255
   42158:	1009883a 	mov	r4,r2
   4215c:	0041da80 	call	41da8 <iic_write>
        wait_slave_ack();
   42160:	0041bd00 	call	41bd0 <wait_slave_ack>
        for(j = 0; j < remain; j++)
   42164:	e03ffa8d 	sth	zero,-22(fp)
   42168:	00000f06 	br	421a8 <write_page+0x1cc>
        {
            iic_write(dat[number * EEPROM_PAGE_SIZE + j]);
   4216c:	e0bffb43 	ldbu	r2,-19(fp)
   42170:	1006923a 	slli	r3,r2,8
   42174:	e0bffa8b 	ldhu	r2,-22(fp)
   42178:	1885883a 	add	r2,r3,r2
   4217c:	1007883a 	mov	r3,r2
   42180:	e0bffe17 	ldw	r2,-8(fp)
   42184:	10c5883a 	add	r2,r2,r3
   42188:	10800003 	ldbu	r2,0(r2)
   4218c:	10803fcc 	andi	r2,r2,255
   42190:	1009883a 	mov	r4,r2
   42194:	0041da80 	call	41da8 <iic_write>
            wait_slave_ack();
   42198:	0041bd00 	call	41bd0 <wait_slave_ack>
        wait_slave_ack();
        iic_write((i2c_addr >> 8) & 0xff);
        wait_slave_ack();
        iic_write((i2c_addr >> 0) & 0xff);
        wait_slave_ack();
        for(j = 0; j < remain; j++)
   4219c:	e0bffa8b 	ldhu	r2,-22(fp)
   421a0:	10800044 	addi	r2,r2,1
   421a4:	e0bffa8d 	sth	r2,-22(fp)
   421a8:	e0bffb83 	ldbu	r2,-18(fp)
   421ac:	10bfffcc 	andi	r2,r2,65535
   421b0:	e0fffa8b 	ldhu	r3,-22(fp)
   421b4:	18bfed36 	bltu	r3,r2,4216c <__alt_mem_epcs_flash+0xfffc116c>
        {
            iic_write(dat[number * EEPROM_PAGE_SIZE + j]);
            wait_slave_ack();
        }
        stop();
   421b8:	0041b400 	call	41b40 <stop>
        delay_us(10000);
   421bc:	0109c404 	movi	r4,10000
   421c0:	00402c80 	call	402c8 <delay_us>
//        usleep(5000);
    }
}
   421c4:	0001883a 	nop
   421c8:	e037883a 	mov	sp,fp
   421cc:	dfc00117 	ldw	ra,4(sp)
   421d0:	df000017 	ldw	fp,0(sp)
   421d4:	dec00204 	addi	sp,sp,8
   421d8:	f800283a 	ret

000421dc <read_byte>:
 * Name: read_byte
 * Description: 从EEPROM读一个字节
 * =================================================================
 */
static alt_u8 read_byte(alt_u32 addr)
{
   421dc:	defffc04 	addi	sp,sp,-16
   421e0:	dfc00315 	stw	ra,12(sp)
   421e4:	df000215 	stw	fp,8(sp)
   421e8:	df000204 	addi	fp,sp,8
   421ec:	e13fff15 	stw	r4,-4(fp)
    alt_u8 cmd, dat;
    
    if(addr > AT24C1024_MAX_ADDR)
   421f0:	e0ffff17 	ldw	r3,-4(fp)
   421f4:	008000b4 	movhi	r2,2
   421f8:	10b53004 	addi	r2,r2,-11072
   421fc:	10c0022e 	bgeu	r2,r3,42208 <read_byte+0x2c>
        return 0xff;
   42200:	00bfffc4 	movi	r2,-1
   42204:	00002406 	br	42298 <read_byte+0xbc>
        
    cmd = 0xa0 | ( (addr >> 15) & 0x02 );
   42208:	e0bfff17 	ldw	r2,-4(fp)
   4220c:	1004d3fa 	srli	r2,r2,15
   42210:	1080008c 	andi	r2,r2,2
   42214:	1007883a 	mov	r3,r2
   42218:	00bfe804 	movi	r2,-96
   4221c:	1884b03a 	or	r2,r3,r2
   42220:	e0bffe05 	stb	r2,-8(fp)
    start();
   42224:	0041ac80 	call	41ac8 <start>
    iic_write(cmd);
   42228:	e0bffe03 	ldbu	r2,-8(fp)
   4222c:	1009883a 	mov	r4,r2
   42230:	0041da80 	call	41da8 <iic_write>
    wait_slave_ack();
   42234:	0041bd00 	call	41bd0 <wait_slave_ack>
    iic_write((addr >> 8) & 0xff);
   42238:	e0bfff17 	ldw	r2,-4(fp)
   4223c:	1004d23a 	srli	r2,r2,8
   42240:	10803fcc 	andi	r2,r2,255
   42244:	1009883a 	mov	r4,r2
   42248:	0041da80 	call	41da8 <iic_write>
    wait_slave_ack();
   4224c:	0041bd00 	call	41bd0 <wait_slave_ack>
    iic_write((addr >> 0) & 0xff);
   42250:	e0bfff17 	ldw	r2,-4(fp)
   42254:	10803fcc 	andi	r2,r2,255
   42258:	1009883a 	mov	r4,r2
   4225c:	0041da80 	call	41da8 <iic_write>
    wait_slave_ack();
   42260:	0041bd00 	call	41bd0 <wait_slave_ack>
    cmd |= 0x01;
   42264:	e0bffe03 	ldbu	r2,-8(fp)
   42268:	10800054 	ori	r2,r2,1
   4226c:	e0bffe05 	stb	r2,-8(fp)
    start();
   42270:	0041ac80 	call	41ac8 <start>
    iic_write(cmd);
   42274:	e0bffe03 	ldbu	r2,-8(fp)
   42278:	1009883a 	mov	r4,r2
   4227c:	0041da80 	call	41da8 <iic_write>
    wait_slave_ack();
   42280:	0041bd00 	call	41bd0 <wait_slave_ack>
    dat = iic_read();
   42284:	0041e6c0 	call	41e6c <iic_read>
   42288:	e0bffe45 	stb	r2,-7(fp)
    no_ack();
   4228c:	0041d100 	call	41d10 <no_ack>
    stop();
   42290:	0041b400 	call	41b40 <stop>
    return dat;
   42294:	e0bffe43 	ldbu	r2,-7(fp)
}
   42298:	e037883a 	mov	sp,fp
   4229c:	dfc00117 	ldw	ra,4(sp)
   422a0:	df000017 	ldw	fp,0(sp)
   422a4:	dec00204 	addi	sp,sp,8
   422a8:	f800283a 	ret

000422ac <iic_sequential_read>:


void iic_sequential_read(alt_u32 addr, alt_u8 *dat, alt_u16 len)
{
   422ac:	defffa04 	addi	sp,sp,-24
   422b0:	dfc00515 	stw	ra,20(sp)
   422b4:	df000415 	stw	fp,16(sp)
   422b8:	df000404 	addi	fp,sp,16
   422bc:	e13ffd15 	stw	r4,-12(fp)
   422c0:	e17ffe15 	stw	r5,-8(fp)
   422c4:	3005883a 	mov	r2,r6
   422c8:	e0bfff0d 	sth	r2,-4(fp)
    alt_u16 i;
    alt_u8 cmd;
    if(addr > AT24C1024_MAX_ADDR)
   422cc:	e0fffd17 	ldw	r3,-12(fp)
   422d0:	008000b4 	movhi	r2,2
   422d4:	10b53004 	addi	r2,r2,-11072
   422d8:	10c03736 	bltu	r2,r3,423b8 <iic_sequential_read+0x10c>
        return;
    cmd = 0xa0 | ( (addr >> 15) & 0x02 );
   422dc:	e0bffd17 	ldw	r2,-12(fp)
   422e0:	1004d3fa 	srli	r2,r2,15
   422e4:	1080008c 	andi	r2,r2,2
   422e8:	1007883a 	mov	r3,r2
   422ec:	00bfe804 	movi	r2,-96
   422f0:	1884b03a 	or	r2,r3,r2
   422f4:	e0bffc85 	stb	r2,-14(fp)
    start();
   422f8:	0041ac80 	call	41ac8 <start>
    iic_write(cmd);
   422fc:	e0bffc83 	ldbu	r2,-14(fp)
   42300:	1009883a 	mov	r4,r2
   42304:	0041da80 	call	41da8 <iic_write>
    wait_slave_ack();
   42308:	0041bd00 	call	41bd0 <wait_slave_ack>
    iic_write((addr >> 8) & 0xff);
   4230c:	e0bffd17 	ldw	r2,-12(fp)
   42310:	1004d23a 	srli	r2,r2,8
   42314:	10803fcc 	andi	r2,r2,255
   42318:	1009883a 	mov	r4,r2
   4231c:	0041da80 	call	41da8 <iic_write>
    wait_slave_ack();
   42320:	0041bd00 	call	41bd0 <wait_slave_ack>
    iic_write((addr >> 0) & 0xff);
   42324:	e0bffd17 	ldw	r2,-12(fp)
   42328:	10803fcc 	andi	r2,r2,255
   4232c:	1009883a 	mov	r4,r2
   42330:	0041da80 	call	41da8 <iic_write>
    wait_slave_ack();
   42334:	0041bd00 	call	41bd0 <wait_slave_ack>
    cmd |= 0x01;
   42338:	e0bffc83 	ldbu	r2,-14(fp)
   4233c:	10800054 	ori	r2,r2,1
   42340:	e0bffc85 	stb	r2,-14(fp)
    start();
   42344:	0041ac80 	call	41ac8 <start>
    iic_write(cmd);
   42348:	e0bffc83 	ldbu	r2,-14(fp)
   4234c:	1009883a 	mov	r4,r2
   42350:	0041da80 	call	41da8 <iic_write>
    wait_slave_ack();
   42354:	0041bd00 	call	41bd0 <wait_slave_ack>
//    dat = iic_read();

    for(i = 0; i < len; i++)
   42358:	e03ffc0d 	sth	zero,-16(fp)
   4235c:	00000b06 	br	4238c <iic_sequential_read+0xe0>
    {
        *dat = iic_read();
   42360:	0041e6c0 	call	41e6c <iic_read>
   42364:	1007883a 	mov	r3,r2
   42368:	e0bffe17 	ldw	r2,-8(fp)
   4236c:	10c00005 	stb	r3,0(r2)
        master_send_ack();
   42370:	0041c780 	call	41c78 <master_send_ack>
        dat++;
   42374:	e0bffe17 	ldw	r2,-8(fp)
   42378:	10800044 	addi	r2,r2,1
   4237c:	e0bffe15 	stw	r2,-8(fp)
    start();
    iic_write(cmd);
    wait_slave_ack();
//    dat = iic_read();

    for(i = 0; i < len; i++)
   42380:	e0bffc0b 	ldhu	r2,-16(fp)
   42384:	10800044 	addi	r2,r2,1
   42388:	e0bffc0d 	sth	r2,-16(fp)
   4238c:	e0fffc0b 	ldhu	r3,-16(fp)
   42390:	e0bfff0b 	ldhu	r2,-4(fp)
   42394:	18bff236 	bltu	r3,r2,42360 <__alt_mem_epcs_flash+0xfffc1360>
    {
        *dat = iic_read();
        master_send_ack();
        dat++;
    }
    no_ack();
   42398:	0041d100 	call	41d10 <no_ack>
    stop();
   4239c:	0041b400 	call	41b40 <stop>
    iic.read_byte(addr);
   423a0:	008001b4 	movhi	r2,6
   423a4:	10a4b904 	addi	r2,r2,-27932
   423a8:	10800217 	ldw	r2,8(r2)
   423ac:	e13ffd17 	ldw	r4,-12(fp)
   423b0:	103ee83a 	callr	r2
   423b4:	00000106 	br	423bc <iic_sequential_read+0x110>
void iic_sequential_read(alt_u32 addr, alt_u8 *dat, alt_u16 len)
{
    alt_u16 i;
    alt_u8 cmd;
    if(addr > AT24C1024_MAX_ADDR)
        return;
   423b8:	0001883a 	nop
        dat++;
    }
    no_ack();
    stop();
    iic.read_byte(addr);
}
   423bc:	e037883a 	mov	sp,fp
   423c0:	dfc00117 	ldw	ra,4(sp)
   423c4:	df000017 	ldw	fp,0(sp)
   423c8:	dec00204 	addi	sp,sp,8
   423cc:	f800283a 	ret

000423d0 <init_avalon_fifo>:
#include "status_led.h"
#include "user_interrupt.h"
#include "w5500.h"

void init_avalon_fifo(void)
{
   423d0:	defffe04 	addi	sp,sp,-8
   423d4:	dfc00115 	stw	ra,4(sp)
   423d8:	df000015 	stw	fp,0(sp)
   423dc:	d839883a 	mov	fp,sp
    altera_avalon_fifo_init(PROTOCOL_FIFO_IN_CSR_BASE, 0, 2, PROTOCOL_FIFO_IN_FIFO_DEPTH - 2);
   423e0:	01c0ff84 	movi	r7,1022
   423e4:	01800084 	movi	r6,2
   423e8:	000b883a 	mov	r5,zero
   423ec:	01000234 	movhi	r4,8
   423f0:	21084004 	addi	r4,r4,8448
   423f4:	004a5cc0 	call	4a5cc <altera_avalon_fifo_init>
    altera_avalon_fifo_init(LASER_FIFO_IN_CSR_BASE, 0, 2, LASER_FIFO_OUT_FIFO_DEPTH - 2);
   423f8:	01c1ff84 	movi	r7,2046
   423fc:	01800084 	movi	r6,2
   42400:	000b883a 	mov	r5,zero
   42404:	01000234 	movhi	r4,8
   42408:	21084804 	addi	r4,r4,8480
   4240c:	004a5cc0 	call	4a5cc <altera_avalon_fifo_init>
    altera_avalon_fifo_init(SPIWR_FIFO_IN_CSR_BASE, 0, 2, 120);
   42410:	01c01e04 	movi	r7,120
   42414:	01800084 	movi	r6,2
   42418:	000b883a 	mov	r5,zero
   4241c:	01000234 	movhi	r4,8
   42420:	21083804 	addi	r4,r4,8416
   42424:	004a5cc0 	call	4a5cc <altera_avalon_fifo_init>
    altera_avalon_fifo_init(SPIRD_FIFO_IN_CSR_BASE, 0, 2, 120);
   42428:	01c01e04 	movi	r7,120
   4242c:	01800084 	movi	r6,2
   42430:	000b883a 	mov	r5,zero
   42434:	01000234 	movhi	r4,8
   42438:	21083004 	addi	r4,r4,8384
   4243c:	004a5cc0 	call	4a5cc <altera_avalon_fifo_init>
}
   42440:	0001883a 	nop
   42444:	e037883a 	mov	sp,fp
   42448:	dfc00117 	ldw	ra,4(sp)
   4244c:	df000017 	ldw	fp,0(sp)
   42450:	dec00204 	addi	sp,sp,8
   42454:	f800283a 	ret

00042458 <main>:

int main()
{
   42458:	defffb04 	addi	sp,sp,-20
   4245c:	dfc00415 	stw	ra,16(sp)
   42460:	df000315 	stw	fp,12(sp)
   42464:	df000304 	addi	fp,sp,12
#if 0
    test();
#else
    unsigned int len, offset, recv_data;
    init_avalon_fifo();
   42468:	00423d00 	call	423d0 <init_avalon_fifo>
    IINCHIP_CSon();
   4246c:	0047c580 	call	47c58 <IINCHIP_CSon>

    /***** 硬重启W5500 *****/
    Reset_W5500();
   42470:	0040b800 	call	40b80 <Reset_W5500>
    IOWR_ALTERA_AVALON_PIO_DATA(POWER_LED_BASE, LED_ON);
   42474:	0007883a 	mov	r3,zero
   42478:	00800234 	movhi	r2,8
   4247c:	10885804 	addi	r2,r2,8544
   42480:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(STATUS_LED_BASE, LED_OFF);
   42484:	00c00044 	movi	r3,1
   42488:	00800234 	movhi	r2,8
   4248c:	10885404 	addi	r2,r2,8528
   42490:	10c00035 	stwio	r3,0(r2)

    /***** W5500的IP信息初始化 *****/
    delay_ms(500);
   42494:	01007d04 	movi	r4,500
   42498:	00402800 	call	40280 <delay_ms>
    set_default();  // 设置默认MAC、IP、GW、SUB、DNS
   4249c:	0040ca80 	call	40ca8 <set_default>
    set_network();  // 配置初始化IP信息并打印，初始化8个Socket
   424a0:	0040c1c0 	call	40c1c <set_network>
    /***** 打开W5500的Keepalive功能 *****/
    //     setkeepalive(0);

    alarm_region.change_region_value = rd_switch_io_value();
   424a4:	0045c1c0 	call	45c1c <rd_switch_io_value>
   424a8:	1007883a 	mov	r3,r2
   424ac:	008001b4 	movhi	r2,6
   424b0:	10a4c504 	addi	r2,r2,-27884
   424b4:	10c000c5 	stb	r3,3(r2)
    alarm_region.change_region_flag  = 0x01;
   424b8:	008001b4 	movhi	r2,6
   424bc:	10a4c504 	addi	r2,r2,-27884
   424c0:	00c00044 	movi	r3,1
   424c4:	10c00085 	stb	r3,2(r2)
    isPowerUp                        = 0x01;
   424c8:	00800044 	movi	r2,1
   424cc:	d0a01505 	stb	r2,-32684(gp)
    // 从默认地址读取数据作为默认报警区域
    alarm_region.read_from_rom(&alarm_region, alarm_region.change_region_value * 3);
   424d0:	008001b4 	movhi	r2,6
   424d4:	10a4c504 	addi	r2,r2,-27884
   424d8:	1181c117 	ldw	r6,1796(r2)
   424dc:	008001b4 	movhi	r2,6
   424e0:	10a4c504 	addi	r2,r2,-27884
   424e4:	108000c3 	ldbu	r2,3(r2)
   424e8:	10c03fcc 	andi	r3,r2,255
   424ec:	1805883a 	mov	r2,r3
   424f0:	1085883a 	add	r2,r2,r2
   424f4:	10c5883a 	add	r2,r2,r3
   424f8:	100b883a 	mov	r5,r2
   424fc:	010001b4 	movhi	r4,6
   42500:	2124c504 	addi	r4,r4,-27884
   42504:	303ee83a 	callr	r6
    alarm_region.read_from_rom(&alarm_region, alarm_region.change_region_value * 3 + 1);
   42508:	008001b4 	movhi	r2,6
   4250c:	10a4c504 	addi	r2,r2,-27884
   42510:	1181c117 	ldw	r6,1796(r2)
   42514:	008001b4 	movhi	r2,6
   42518:	10a4c504 	addi	r2,r2,-27884
   4251c:	108000c3 	ldbu	r2,3(r2)
   42520:	10c03fcc 	andi	r3,r2,255
   42524:	1805883a 	mov	r2,r3
   42528:	1085883a 	add	r2,r2,r2
   4252c:	10c5883a 	add	r2,r2,r3
   42530:	10800044 	addi	r2,r2,1
   42534:	100b883a 	mov	r5,r2
   42538:	010001b4 	movhi	r4,6
   4253c:	2124c504 	addi	r4,r4,-27884
   42540:	303ee83a 	callr	r6
    alarm_region.read_from_rom(&alarm_region, alarm_region.change_region_value * 3 + 2);
   42544:	008001b4 	movhi	r2,6
   42548:	10a4c504 	addi	r2,r2,-27884
   4254c:	1181c117 	ldw	r6,1796(r2)
   42550:	008001b4 	movhi	r2,6
   42554:	10a4c504 	addi	r2,r2,-27884
   42558:	108000c3 	ldbu	r2,3(r2)
   4255c:	10c03fcc 	andi	r3,r2,255
   42560:	1805883a 	mov	r2,r3
   42564:	1085883a 	add	r2,r2,r2
   42568:	10c5883a 	add	r2,r2,r3
   4256c:	10800084 	addi	r2,r2,2
   42570:	100b883a 	mov	r5,r2
   42574:	010001b4 	movhi	r4,6
   42578:	2124c504 	addi	r4,r4,-27884
   4257c:	303ee83a 	callr	r6
    read_sys_para(&SysPara);
   42580:	010001b4 	movhi	r4,6
   42584:	21246e04 	addi	r4,r4,-28232
   42588:	0045a880 	call	45a88 <read_sys_para>
    init_fpga_sys();
   4258c:	0042f2c0 	call	42f2c <init_fpga_sys>
    timer_initial();
   42590:	00479f40 	call	479f4 <timer_initial>
    //    alarm_select_pio_initial();
       watchdog_init();
   42594:	0047bc80 	call	47bc8 <watchdog_init>
    queue_init(&LaserDataQueue, &LaserData[0], 2048);
   42598:	01820004 	movi	r6,2048
   4259c:	014001b4 	movhi	r5,6
   425a0:	29772604 	addi	r5,r5,-9064
   425a4:	010001b4 	movhi	r4,6
   425a8:	21370a04 	addi	r4,r4,-9176
   425ac:	004549c0 	call	4549c <queue_init>
    while(1)
    {
        tim561_run();
   425b0:	00403340 	call	40334 <tim561_run>
        while(fpga_is_has_data())
   425b4:	00001c06 	br	42628 <main+0x1d0>
        {
            if(queue_is_full(&LaserDataQueue))
   425b8:	010001b4 	movhi	r4,6
   425bc:	21370a04 	addi	r4,r4,-9176
   425c0:	00456d80 	call	456d8 <queue_is_full>
   425c4:	10803fcc 	andi	r2,r2,255
   425c8:	10000326 	beq	r2,zero,425d8 <main+0x180>
                queue_clear(&LaserDataQueue);
   425cc:	010001b4 	movhi	r4,6
   425d0:	21370a04 	addi	r4,r4,-9176
   425d4:	00455280 	call	45528 <queue_clear>
            recv_data = read_fpga_data();
   425d8:	004107c0 	call	4107c <read_fpga_data>
   425dc:	e0bffe15 	stw	r2,-8(fp)
            if(recv_data >> 16 == FRAME_HEAD)
   425e0:	e0bffe17 	ldw	r2,-8(fp)
   425e4:	1004d43a 	srli	r2,r2,16
   425e8:	10848d18 	cmpnei	r2,r2,4660
   425ec:	1000011e 	bne	r2,zero,425f4 <main+0x19c>
                len = 0;
   425f0:	e03fff15 	stw	zero,-4(fp)

            queue_push(&LaserDataQueue, recv_data);
   425f4:	e17ffe17 	ldw	r5,-8(fp)
   425f8:	010001b4 	movhi	r4,6
   425fc:	21370a04 	addi	r4,r4,-9176
   42600:	00455640 	call	45564 <queue_push>
            if((recv_data & 0xffff) == 0xeeee)
   42604:	e0bffe17 	ldw	r2,-8(fp)
   42608:	10ffffcc 	andi	r3,r2,65535
   4260c:	00bbbb94 	movui	r2,61166
   42610:	1880051e 	bne	r3,r2,42628 <main+0x1d0>
            {
                LaserDataQueue.frame_over_flag = 0x01;
   42614:	008001b4 	movhi	r2,6
   42618:	10b70a04 	addi	r2,r2,-9176
   4261c:	00c00044 	movi	r3,1
   42620:	10c00315 	stw	r3,12(r2)
                break;
   42624:	00000306 	br	42634 <main+0x1dc>
       watchdog_init();
    queue_init(&LaserDataQueue, &LaserData[0], 2048);
    while(1)
    {
        tim561_run();
        while(fpga_is_has_data())
   42628:	00410340 	call	41034 <fpga_is_has_data>
   4262c:	10803fcc 	andi	r2,r2,255
   42630:	103fe11e 	bne	r2,zero,425b8 <__alt_mem_epcs_flash+0xfffc15b8>
            {
                LaserDataQueue.frame_over_flag = 0x01;
                break;
            }
        }
        if(LaserDataQueue.frame_over_flag == 0x01)
   42634:	008001b4 	movhi	r2,6
   42638:	10b70a04 	addi	r2,r2,-9176
   4263c:	10800317 	ldw	r2,12(r2)
   42640:	10800058 	cmpnei	r2,r2,1
   42644:	1000041e 	bne	r2,zero,42658 <main+0x200>
        {
            fpga2nios_parse();
   42648:	00410c00 	call	410c0 <fpga2nios_parse>
            LaserDataQueue.frame_over_flag = 0x00;
   4264c:	008001b4 	movhi	r2,6
   42650:	10b70a04 	addi	r2,r2,-9176
   42654:	10000315 	stw	zero,12(r2)
            //            if(queue_is_empty(&LaserDataQueue))
            //            	LaserDataQueue.frame_over_flag = 0x00;
        }
        // 打包 获得数据到(sick数据协议) send_buffer;
        if(CycleData.pos_finish)
   42658:	008001b4 	movhi	r2,6
   4265c:	10bf2604 	addi	r2,r2,-872
   42660:	10800003 	ldbu	r2,0(r2)
   42664:	10803fcc 	andi	r2,r2,255
   42668:	10009926 	beq	r2,zero,428d0 <main+0x478>
        {
            CycleData.pos_finish = false;
   4266c:	008001b4 	movhi	r2,6
   42670:	10bf2604 	addi	r2,r2,-872
   42674:	10000005 	stb	zero,0(r2)
            sick_pos_packet();
   42678:	00467b40 	call	467b4 <sick_pos_packet>
            offset = 0;
   4267c:	e03ffd15 	stw	zero,-12(fp)

            while(1)  // 分包发送
            {
                IOWR_ALTERA_AVALON_PIO_DATA(W5500_INT_BASE, 0x01);
   42680:	00c00044 	movi	r3,1
   42684:	00800234 	movhi	r2,8
   42688:	10886804 	addi	r2,r2,8608
   4268c:	10c00035 	stwio	r3,0(r2)
                len = strlen((char *)send_buffer);
   42690:	010001b4 	movhi	r4,6
   42694:	21071504 	addi	r4,r4,7252
   42698:	00493700 	call	49370 <strlen>
   4269c:	e0bfff15 	stw	r2,-4(fp)
                if(len - offset >= 1460)
   426a0:	e0ffff17 	ldw	r3,-4(fp)
   426a4:	e0bffd17 	ldw	r2,-12(fp)
   426a8:	1885c83a 	sub	r2,r3,r2
   426ac:	10816d30 	cmpltui	r2,r2,1460
   426b0:	1000141e 	bne	r2,zero,42704 <main+0x2ac>
                {
                    send(SOCKET0, send_buffer + offset, 1460);
   426b4:	e0fffd17 	ldw	r3,-12(fp)
   426b8:	008001b4 	movhi	r2,6
   426bc:	10871504 	addi	r2,r2,7252
   426c0:	1885883a 	add	r2,r3,r2
   426c4:	01816d04 	movi	r6,1460
   426c8:	100b883a 	mov	r5,r2
   426cc:	0009883a 	mov	r4,zero
   426d0:	0046f7c0 	call	46f7c <send>
                    send(SOCKET1, send_buffer + offset, 1460);
   426d4:	e0fffd17 	ldw	r3,-12(fp)
   426d8:	008001b4 	movhi	r2,6
   426dc:	10871504 	addi	r2,r2,7252
   426e0:	1885883a 	add	r2,r3,r2
   426e4:	01816d04 	movi	r6,1460
   426e8:	100b883a 	mov	r5,r2
   426ec:	01000044 	movi	r4,1
   426f0:	0046f7c0 	call	46f7c <send>
                    offset += 1460;
   426f4:	e0bffd17 	ldw	r2,-12(fp)
   426f8:	10816d04 	addi	r2,r2,1460
   426fc:	e0bffd15 	stw	r2,-12(fp)
   42700:	003fdf06 	br	42680 <__alt_mem_epcs_flash+0xfffc1680>
                }
                else if((len - offset < 1460) && (len - offset > 0))
   42704:	e0ffff17 	ldw	r3,-4(fp)
   42708:	e0bffd17 	ldw	r2,-12(fp)
   4270c:	1885c83a 	sub	r2,r3,r2
   42710:	10816d28 	cmpgeui	r2,r2,1460
   42714:	10006e1e 	bne	r2,zero,428d0 <main+0x478>
   42718:	e0ffff17 	ldw	r3,-4(fp)
   4271c:	e0bffd17 	ldw	r2,-12(fp)
   42720:	18806b26 	beq	r3,r2,428d0 <main+0x478>
                {
                    send(SOCKET0, send_buffer + offset, len - offset);
   42724:	e0fffd17 	ldw	r3,-12(fp)
   42728:	008001b4 	movhi	r2,6
   4272c:	10871504 	addi	r2,r2,7252
   42730:	1885883a 	add	r2,r3,r2
   42734:	e0ffff17 	ldw	r3,-4(fp)
   42738:	1809883a 	mov	r4,r3
   4273c:	e0fffd17 	ldw	r3,-12(fp)
   42740:	20c7c83a 	sub	r3,r4,r3
   42744:	18ffffcc 	andi	r3,r3,65535
   42748:	180d883a 	mov	r6,r3
   4274c:	100b883a 	mov	r5,r2
   42750:	0009883a 	mov	r4,zero
   42754:	0046f7c0 	call	46f7c <send>
                    send(SOCKET1, send_buffer + offset, len - offset);
   42758:	e0fffd17 	ldw	r3,-12(fp)
   4275c:	008001b4 	movhi	r2,6
   42760:	10871504 	addi	r2,r2,7252
   42764:	1885883a 	add	r2,r3,r2
   42768:	e0ffff17 	ldw	r3,-4(fp)
   4276c:	1809883a 	mov	r4,r3
   42770:	e0fffd17 	ldw	r3,-12(fp)
   42774:	20c7c83a 	sub	r3,r4,r3
   42778:	18ffffcc 	andi	r3,r3,65535
   4277c:	180d883a 	mov	r6,r3
   42780:	100b883a 	mov	r5,r2
   42784:	01000044 	movi	r4,1
   42788:	0046f7c0 	call	46f7c <send>
                    IOWR_ALTERA_AVALON_PIO_DATA(W5500_INT_BASE, 0x00);
   4278c:	0007883a 	mov	r3,zero
   42790:	00800234 	movhi	r2,8
   42794:	10886804 	addi	r2,r2,8608
   42798:	10c00035 	stwio	r3,0(r2)

                    // if(sys_warn.region_alarm != 0)
                    {
                        send_buffer[0]  = 0x12;
   4279c:	008001b4 	movhi	r2,6
   427a0:	10871504 	addi	r2,r2,7252
   427a4:	00c00484 	movi	r3,18
   427a8:	10c00005 	stb	r3,0(r2)
                        send_buffer[1]  = 0x34;
   427ac:	008001b4 	movhi	r2,6
   427b0:	10871504 	addi	r2,r2,7252
   427b4:	00c00d04 	movi	r3,52
   427b8:	10c00045 	stb	r3,1(r2)
                        send_buffer[2]  = (UP_ALARM_REGION_STATUS >> 8) & 0xff;
   427bc:	008001b4 	movhi	r2,6
   427c0:	10871504 	addi	r2,r2,7252
   427c4:	00fff044 	movi	r3,-63
   427c8:	10c00085 	stb	r3,2(r2)
                        send_buffer[3]  = (UP_ALARM_REGION_STATUS >> 0) & 0xff;
   427cc:	008001b4 	movhi	r2,6
   427d0:	10871504 	addi	r2,r2,7252
   427d4:	00c00044 	movi	r3,1
   427d8:	10c000c5 	stb	r3,3(r2)
                        send_buffer[4]  = 0;
   427dc:	008001b4 	movhi	r2,6
   427e0:	10871504 	addi	r2,r2,7252
   427e4:	10000105 	stb	zero,4(r2)
                        send_buffer[5]  = 0;
   427e8:	008001b4 	movhi	r2,6
   427ec:	10871504 	addi	r2,r2,7252
   427f0:	10000145 	stb	zero,5(r2)
                        send_buffer[6]  = 0;
   427f4:	008001b4 	movhi	r2,6
   427f8:	10871504 	addi	r2,r2,7252
   427fc:	10000185 	stb	zero,6(r2)
                        send_buffer[7]  = 4;
   42800:	008001b4 	movhi	r2,6
   42804:	10871504 	addi	r2,r2,7252
   42808:	00c00104 	movi	r3,4
   4280c:	10c001c5 	stb	r3,7(r2)
                        send_buffer[8]  = 0;
   42810:	008001b4 	movhi	r2,6
   42814:	10871504 	addi	r2,r2,7252
   42818:	10000205 	stb	zero,8(r2)
                        send_buffer[9]  = 0;
   4281c:	008001b4 	movhi	r2,6
   42820:	10871504 	addi	r2,r2,7252
   42824:	10000245 	stb	zero,9(r2)
                        send_buffer[10] = 0;
   42828:	008001b4 	movhi	r2,6
   4282c:	10871504 	addi	r2,r2,7252
   42830:	10000285 	stb	zero,10(r2)
                        send_buffer[11] = (unsigned char)sys_warn.region_alarm;
   42834:	008001b4 	movhi	r2,6
   42838:	10b36a04 	addi	r2,r2,-12888
   4283c:	10800417 	ldw	r2,16(r2)
   42840:	1007883a 	mov	r3,r2
   42844:	008001b4 	movhi	r2,6
   42848:	10871504 	addi	r2,r2,7252
   4284c:	10c002c5 	stb	r3,11(r2)
                        send_buffer[12] = send_buffer[13] = send_buffer[14] = send_buffer[15] = 0xee;  // 当做校验码
   42850:	008001b4 	movhi	r2,6
   42854:	10871504 	addi	r2,r2,7252
   42858:	00fffb84 	movi	r3,-18
   4285c:	10c003c5 	stb	r3,15(r2)
   42860:	008001b4 	movhi	r2,6
   42864:	10871504 	addi	r2,r2,7252
   42868:	10c003c3 	ldbu	r3,15(r2)
   4286c:	008001b4 	movhi	r2,6
   42870:	10871504 	addi	r2,r2,7252
   42874:	10c00385 	stb	r3,14(r2)
   42878:	008001b4 	movhi	r2,6
   4287c:	10871504 	addi	r2,r2,7252
   42880:	10c00383 	ldbu	r3,14(r2)
   42884:	008001b4 	movhi	r2,6
   42888:	10871504 	addi	r2,r2,7252
   4288c:	10c00345 	stb	r3,13(r2)
   42890:	008001b4 	movhi	r2,6
   42894:	10871504 	addi	r2,r2,7252
   42898:	10c00343 	ldbu	r3,13(r2)
   4289c:	008001b4 	movhi	r2,6
   428a0:	10871504 	addi	r2,r2,7252
   428a4:	10c00305 	stb	r3,12(r2)
                        send(SOCKET0, send_buffer, 16);
   428a8:	01800404 	movi	r6,16
   428ac:	014001b4 	movhi	r5,6
   428b0:	29471504 	addi	r5,r5,7252
   428b4:	0009883a 	mov	r4,zero
   428b8:	0046f7c0 	call	46f7c <send>
                        send(SOCKET1, send_buffer, 16);
   428bc:	01800404 	movi	r6,16
   428c0:	014001b4 	movhi	r5,6
   428c4:	29471504 	addi	r5,r5,7252
   428c8:	01000044 	movi	r4,1
   428cc:	0046f7c0 	call	46f7c <send>
                else
                    break;
            }
        }

        if(sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm)
   428d0:	008001b4 	movhi	r2,6
   428d4:	10b36a04 	addi	r2,r2,-12888
   428d8:	10c00017 	ldw	r3,0(r2)
   428dc:	008001b4 	movhi	r2,6
   428e0:	10b36a04 	addi	r2,r2,-12888
   428e4:	10800117 	ldw	r2,4(r2)
   428e8:	1884b03a 	or	r2,r3,r2
   428ec:	10001626 	beq	r2,zero,42948 <main+0x4f0>
        {
            status_led_light(LED_ON);
   428f0:	0009883a 	mov	r4,zero
   428f4:	00479340 	call	47934 <status_led_light>
            set_laser_paramter(&Nios2FPGA_pck, LASER_FREQ,
                               sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm | sys_warn.temp_out_alarm | sys_warn.window_dust_alarm);
   428f8:	008001b4 	movhi	r2,6
   428fc:	10b36a04 	addi	r2,r2,-12888
   42900:	10c00017 	ldw	r3,0(r2)
   42904:	008001b4 	movhi	r2,6
   42908:	10b36a04 	addi	r2,r2,-12888
   4290c:	10800117 	ldw	r2,4(r2)
   42910:	1886b03a 	or	r3,r3,r2
   42914:	008001b4 	movhi	r2,6
   42918:	10b36a04 	addi	r2,r2,-12888
   4291c:	10800317 	ldw	r2,12(r2)
   42920:	1886b03a 	or	r3,r3,r2
   42924:	008001b4 	movhi	r2,6
   42928:	10b36a04 	addi	r2,r2,-12888
   4292c:	10800217 	ldw	r2,8(r2)
        }

        if(sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm)
        {
            status_led_light(LED_ON);
            set_laser_paramter(&Nios2FPGA_pck, LASER_FREQ,
   42930:	1884b03a 	or	r2,r3,r2
   42934:	100d883a 	mov	r6,r2
   42938:	01684054 	movui	r5,41217
   4293c:	d1201604 	addi	r4,gp,-32680
   42940:	0042ebc0 	call	42ebc <set_laser_paramter>
   42944:	00004906 	br	42a6c <main+0x614>
                               sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm | sys_warn.temp_out_alarm | sys_warn.window_dust_alarm);
        }
        else if(sys_warn.window_dust_alarm)
   42948:	008001b4 	movhi	r2,6
   4294c:	10b36a04 	addi	r2,r2,-12888
   42950:	10800217 	ldw	r2,8(r2)
   42954:	10002126 	beq	r2,zero,429dc <main+0x584>
        {
            if(led_time_flag.status_led_1s_flag)
   42958:	d0a01903 	ldbu	r2,-32668(gp)
   4295c:	10803fcc 	andi	r2,r2,255
   42960:	10000a26 	beq	r2,zero,4298c <main+0x534>
            {
                led_time_flag.status_led_1s_flag = 0x00;
   42964:	d0201905 	stb	zero,-32668(gp)
                led_time_flag.status_led_value   = (~led_time_flag.status_led_value) & 0x01;
   42968:	d0a01843 	ldbu	r2,-32671(gp)
   4296c:	10803fcc 	andi	r2,r2,255
   42970:	1080004c 	andi	r2,r2,1
   42974:	1005003a 	cmpeq	r2,r2,zero
   42978:	d0a01845 	stb	r2,-32671(gp)
                status_led_light(led_time_flag.status_led_value);
   4297c:	d0a01843 	ldbu	r2,-32671(gp)
   42980:	10803fcc 	andi	r2,r2,255
   42984:	1009883a 	mov	r4,r2
   42988:	00479340 	call	47934 <status_led_light>
            }
            set_laser_paramter(&Nios2FPGA_pck, LASER_FREQ,
                               sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm | sys_warn.temp_out_alarm | sys_warn.window_dust_alarm);
   4298c:	008001b4 	movhi	r2,6
   42990:	10b36a04 	addi	r2,r2,-12888
   42994:	10c00017 	ldw	r3,0(r2)
   42998:	008001b4 	movhi	r2,6
   4299c:	10b36a04 	addi	r2,r2,-12888
   429a0:	10800117 	ldw	r2,4(r2)
   429a4:	1886b03a 	or	r3,r3,r2
   429a8:	008001b4 	movhi	r2,6
   429ac:	10b36a04 	addi	r2,r2,-12888
   429b0:	10800317 	ldw	r2,12(r2)
   429b4:	1886b03a 	or	r3,r3,r2
   429b8:	008001b4 	movhi	r2,6
   429bc:	10b36a04 	addi	r2,r2,-12888
   429c0:	10800217 	ldw	r2,8(r2)
            {
                led_time_flag.status_led_1s_flag = 0x00;
                led_time_flag.status_led_value   = (~led_time_flag.status_led_value) & 0x01;
                status_led_light(led_time_flag.status_led_value);
            }
            set_laser_paramter(&Nios2FPGA_pck, LASER_FREQ,
   429c4:	1884b03a 	or	r2,r3,r2
   429c8:	100d883a 	mov	r6,r2
   429cc:	01684054 	movui	r5,41217
   429d0:	d1201604 	addi	r4,gp,-32680
   429d4:	0042ebc0 	call	42ebc <set_laser_paramter>
   429d8:	00002406 	br	42a6c <main+0x614>
                               sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm | sys_warn.temp_out_alarm | sys_warn.window_dust_alarm);
        }
        else if(sys_warn.temp_out_alarm)
   429dc:	008001b4 	movhi	r2,6
   429e0:	10b36a04 	addi	r2,r2,-12888
   429e4:	10800317 	ldw	r2,12(r2)
   429e8:	10002026 	beq	r2,zero,42a6c <main+0x614>
        {
            if(led_time_flag.status_led_300ms_flag)
   429ec:	d0a01943 	ldbu	r2,-32667(gp)
   429f0:	10803fcc 	andi	r2,r2,255
   429f4:	10000a26 	beq	r2,zero,42a20 <main+0x5c8>
            {
                led_time_flag.status_led_300ms_flag = 0x00;
   429f8:	d0201945 	stb	zero,-32667(gp)
                led_time_flag.status_led_value      = (~led_time_flag.status_led_value) & 0x01;
   429fc:	d0a01843 	ldbu	r2,-32671(gp)
   42a00:	10803fcc 	andi	r2,r2,255
   42a04:	1080004c 	andi	r2,r2,1
   42a08:	1005003a 	cmpeq	r2,r2,zero
   42a0c:	d0a01845 	stb	r2,-32671(gp)
                status_led_light(led_time_flag.status_led_value);
   42a10:	d0a01843 	ldbu	r2,-32671(gp)
   42a14:	10803fcc 	andi	r2,r2,255
   42a18:	1009883a 	mov	r4,r2
   42a1c:	00479340 	call	47934 <status_led_light>
            }
            set_laser_paramter(&Nios2FPGA_pck, LASER_FREQ,
                               sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm | sys_warn.temp_out_alarm | sys_warn.window_dust_alarm);
   42a20:	008001b4 	movhi	r2,6
   42a24:	10b36a04 	addi	r2,r2,-12888
   42a28:	10c00017 	ldw	r3,0(r2)
   42a2c:	008001b4 	movhi	r2,6
   42a30:	10b36a04 	addi	r2,r2,-12888
   42a34:	10800117 	ldw	r2,4(r2)
   42a38:	1886b03a 	or	r3,r3,r2
   42a3c:	008001b4 	movhi	r2,6
   42a40:	10b36a04 	addi	r2,r2,-12888
   42a44:	10800317 	ldw	r2,12(r2)
   42a48:	1886b03a 	or	r3,r3,r2
   42a4c:	008001b4 	movhi	r2,6
   42a50:	10b36a04 	addi	r2,r2,-12888
   42a54:	10800217 	ldw	r2,8(r2)
            {
                led_time_flag.status_led_300ms_flag = 0x00;
                led_time_flag.status_led_value      = (~led_time_flag.status_led_value) & 0x01;
                status_led_light(led_time_flag.status_led_value);
            }
            set_laser_paramter(&Nios2FPGA_pck, LASER_FREQ,
   42a58:	1884b03a 	or	r2,r3,r2
   42a5c:	100d883a 	mov	r6,r2
   42a60:	01684054 	movui	r5,41217
   42a64:	d1201604 	addi	r4,gp,-32680
   42a68:	0042ebc0 	call	42ebc <set_laser_paramter>
        //     alarm_region.change_region_flag = 0x01;
        //     alarm_region.change_region_value = alarm_region.last_io_value[0];
        // }
        // alarm_region.last_io_value[1] = alarm_region.last_io_value[0];

        if(isTcpEstablished & isPowerUp)  // 刚上电且TCP连接建立时，发送一次
   42a6c:	d0e01303 	ldbu	r3,-32692(gp)
   42a70:	d0a01503 	ldbu	r2,-32684(gp)
   42a74:	1884703a 	and	r2,r3,r2
   42a78:	10803fcc 	andi	r2,r2,255
   42a7c:	10002426 	beq	r2,zero,42b10 <main+0x6b8>
        {
            isPowerUp        = 0x00;
   42a80:	d0201505 	stb	zero,-32684(gp)
            nios2pc.command  = UP_ALARM_IO_VALUE;
   42a84:	008001b4 	movhi	r2,6
   42a88:	10a4c004 	addi	r2,r2,-27904
   42a8c:	00f04094 	movui	r3,49410
   42a90:	10c00115 	stw	r3,4(r2)
            nios2pc.data_len = 4;
   42a94:	008001b4 	movhi	r2,6
   42a98:	10a4c004 	addi	r2,r2,-27904
   42a9c:	00c00104 	movi	r3,4
   42aa0:	10c00215 	stw	r3,8(r2)
            nios2pc.value    = alarm_region.change_region_value;
   42aa4:	008001b4 	movhi	r2,6
   42aa8:	10a4c504 	addi	r2,r2,-27884
   42aac:	108000c3 	ldbu	r2,3(r2)
   42ab0:	10c03fcc 	andi	r3,r2,255
   42ab4:	008001b4 	movhi	r2,6
   42ab8:	10a4c004 	addi	r2,r2,-27904
   42abc:	10c00315 	stw	r3,12(r2)
            len              = pc2dev_packet(&nios2pc, send_buffer);
   42ac0:	014001b4 	movhi	r5,6
   42ac4:	29471504 	addi	r5,r5,7252
   42ac8:	010001b4 	movhi	r4,6
   42acc:	2124c004 	addi	r4,r4,-27904
   42ad0:	0044d140 	call	44d14 <pc2dev_packet>
   42ad4:	e0bfff15 	stw	r2,-4(fp)
            send(SOCKET0, send_buffer, len);
   42ad8:	e0bfff17 	ldw	r2,-4(fp)
   42adc:	10bfffcc 	andi	r2,r2,65535
   42ae0:	100d883a 	mov	r6,r2
   42ae4:	014001b4 	movhi	r5,6
   42ae8:	29471504 	addi	r5,r5,7252
   42aec:	0009883a 	mov	r4,zero
   42af0:	0046f7c0 	call	46f7c <send>
            send(SOCKET1, send_buffer, len);
   42af4:	e0bfff17 	ldw	r2,-4(fp)
   42af8:	10bfffcc 	andi	r2,r2,65535
   42afc:	100d883a 	mov	r6,r2
   42b00:	014001b4 	movhi	r5,6
   42b04:	29471504 	addi	r5,r5,7252
   42b08:	01000044 	movi	r4,1
   42b0c:	0046f7c0 	call	46f7c <send>
        }

        if(alarm_region.change_region_flag == 0x01)
   42b10:	008001b4 	movhi	r2,6
   42b14:	10a4c504 	addi	r2,r2,-27884
   42b18:	10800083 	ldbu	r2,2(r2)
   42b1c:	10803fcc 	andi	r2,r2,255
   42b20:	10800058 	cmpnei	r2,r2,1
   42b24:	1000521e 	bne	r2,zero,42c70 <main+0x818>
        {
            alarm_region.change_region_flag = 0x00;
   42b28:	008001b4 	movhi	r2,6
   42b2c:	10a4c504 	addi	r2,r2,-27884
   42b30:	10000085 	stb	zero,2(r2)
            alarm_region.read_from_rom(&alarm_region, alarm_region.change_region_value * 3);
   42b34:	008001b4 	movhi	r2,6
   42b38:	10a4c504 	addi	r2,r2,-27884
   42b3c:	1181c117 	ldw	r6,1796(r2)
   42b40:	008001b4 	movhi	r2,6
   42b44:	10a4c504 	addi	r2,r2,-27884
   42b48:	108000c3 	ldbu	r2,3(r2)
   42b4c:	10c03fcc 	andi	r3,r2,255
   42b50:	1805883a 	mov	r2,r3
   42b54:	1085883a 	add	r2,r2,r2
   42b58:	10c5883a 	add	r2,r2,r3
   42b5c:	100b883a 	mov	r5,r2
   42b60:	010001b4 	movhi	r4,6
   42b64:	2124c504 	addi	r4,r4,-27884
   42b68:	303ee83a 	callr	r6
            alarm_region.read_from_rom(&alarm_region, alarm_region.change_region_value * 3 + 1);
   42b6c:	008001b4 	movhi	r2,6
   42b70:	10a4c504 	addi	r2,r2,-27884
   42b74:	1181c117 	ldw	r6,1796(r2)
   42b78:	008001b4 	movhi	r2,6
   42b7c:	10a4c504 	addi	r2,r2,-27884
   42b80:	108000c3 	ldbu	r2,3(r2)
   42b84:	10c03fcc 	andi	r3,r2,255
   42b88:	1805883a 	mov	r2,r3
   42b8c:	1085883a 	add	r2,r2,r2
   42b90:	10c5883a 	add	r2,r2,r3
   42b94:	10800044 	addi	r2,r2,1
   42b98:	100b883a 	mov	r5,r2
   42b9c:	010001b4 	movhi	r4,6
   42ba0:	2124c504 	addi	r4,r4,-27884
   42ba4:	303ee83a 	callr	r6
            alarm_region.read_from_rom(&alarm_region, alarm_region.change_region_value * 3 + 2);
   42ba8:	008001b4 	movhi	r2,6
   42bac:	10a4c504 	addi	r2,r2,-27884
   42bb0:	1181c117 	ldw	r6,1796(r2)
   42bb4:	008001b4 	movhi	r2,6
   42bb8:	10a4c504 	addi	r2,r2,-27884
   42bbc:	108000c3 	ldbu	r2,3(r2)
   42bc0:	10c03fcc 	andi	r3,r2,255
   42bc4:	1805883a 	mov	r2,r3
   42bc8:	1085883a 	add	r2,r2,r2
   42bcc:	10c5883a 	add	r2,r2,r3
   42bd0:	10800084 	addi	r2,r2,2
   42bd4:	100b883a 	mov	r5,r2
   42bd8:	010001b4 	movhi	r4,6
   42bdc:	2124c504 	addi	r4,r4,-27884
   42be0:	303ee83a 	callr	r6

            //            if(isTcpEstablished)
            {
                nios2pc.command  = UP_ALARM_IO_VALUE;
   42be4:	008001b4 	movhi	r2,6
   42be8:	10a4c004 	addi	r2,r2,-27904
   42bec:	00f04094 	movui	r3,49410
   42bf0:	10c00115 	stw	r3,4(r2)
                nios2pc.data_len = 4;
   42bf4:	008001b4 	movhi	r2,6
   42bf8:	10a4c004 	addi	r2,r2,-27904
   42bfc:	00c00104 	movi	r3,4
   42c00:	10c00215 	stw	r3,8(r2)
                nios2pc.value    = alarm_region.change_region_value;
   42c04:	008001b4 	movhi	r2,6
   42c08:	10a4c504 	addi	r2,r2,-27884
   42c0c:	108000c3 	ldbu	r2,3(r2)
   42c10:	10c03fcc 	andi	r3,r2,255
   42c14:	008001b4 	movhi	r2,6
   42c18:	10a4c004 	addi	r2,r2,-27904
   42c1c:	10c00315 	stw	r3,12(r2)
                len              = pc2dev_packet(&nios2pc, send_buffer);
   42c20:	014001b4 	movhi	r5,6
   42c24:	29471504 	addi	r5,r5,7252
   42c28:	010001b4 	movhi	r4,6
   42c2c:	2124c004 	addi	r4,r4,-27904
   42c30:	0044d140 	call	44d14 <pc2dev_packet>
   42c34:	e0bfff15 	stw	r2,-4(fp)
                send(SOCKET0, send_buffer, len);
   42c38:	e0bfff17 	ldw	r2,-4(fp)
   42c3c:	10bfffcc 	andi	r2,r2,65535
   42c40:	100d883a 	mov	r6,r2
   42c44:	014001b4 	movhi	r5,6
   42c48:	29471504 	addi	r5,r5,7252
   42c4c:	0009883a 	mov	r4,zero
   42c50:	0046f7c0 	call	46f7c <send>
                send(SOCKET1, send_buffer, len);
   42c54:	e0bfff17 	ldw	r2,-4(fp)
   42c58:	10bfffcc 	andi	r2,r2,65535
   42c5c:	100d883a 	mov	r6,r2
   42c60:	014001b4 	movhi	r5,6
   42c64:	29471504 	addi	r5,r5,7252
   42c68:	01000044 	movi	r4,1
   42c6c:	0046f7c0 	call	46f7c <send>
            }
        }
        if(SysStatus.reset_nios != ENABLE)
   42c70:	d0e01417 	ldw	r3,-32688(gp)
   42c74:	00844474 	movhi	r2,4369
   42c78:	10844444 	addi	r2,r2,4369
   42c7c:	18be4c26 	beq	r3,r2,425b0 <__alt_mem_epcs_flash+0xfffc15b0>
            watchdog_feed();
   42c80:	0047bf80 	call	47bf8 <watchdog_feed>
    }
   42c84:	003e4a06 	br	425b0 <__alt_mem_epcs_flash+0xfffc15b0>

00042c88 <check_sum>:

UpDataFrame CycleData;
NIOS2FPGA_Pck_t Nios2FPGA_pck;

static unsigned int check_sum(unsigned int *data, unsigned char len)
{
   42c88:	defffb04 	addi	sp,sp,-20
   42c8c:	df000415 	stw	fp,16(sp)
   42c90:	df000404 	addi	fp,sp,16
   42c94:	e13ffe15 	stw	r4,-8(fp)
   42c98:	2805883a 	mov	r2,r5
   42c9c:	e0bfff05 	stb	r2,-4(fp)
    int i;
    unsigned int checksum = 0;
   42ca0:	e03ffd15 	stw	zero,-12(fp)
    for(i = 0; i < len; i++)
   42ca4:	e03ffc15 	stw	zero,-16(fp)
   42ca8:	00000d06 	br	42ce0 <check_sum+0x58>
    {
        checksum ^= data[i];
   42cac:	e0bffc17 	ldw	r2,-16(fp)
   42cb0:	1085883a 	add	r2,r2,r2
   42cb4:	1085883a 	add	r2,r2,r2
   42cb8:	1007883a 	mov	r3,r2
   42cbc:	e0bffe17 	ldw	r2,-8(fp)
   42cc0:	10c5883a 	add	r2,r2,r3
   42cc4:	10800017 	ldw	r2,0(r2)
   42cc8:	e0fffd17 	ldw	r3,-12(fp)
   42ccc:	1884f03a 	xor	r2,r3,r2
   42cd0:	e0bffd15 	stw	r2,-12(fp)

static unsigned int check_sum(unsigned int *data, unsigned char len)
{
    int i;
    unsigned int checksum = 0;
    for(i = 0; i < len; i++)
   42cd4:	e0bffc17 	ldw	r2,-16(fp)
   42cd8:	10800044 	addi	r2,r2,1
   42cdc:	e0bffc15 	stw	r2,-16(fp)
   42ce0:	e0bfff03 	ldbu	r2,-4(fp)
   42ce4:	e0fffc17 	ldw	r3,-16(fp)
   42ce8:	18bff016 	blt	r3,r2,42cac <__alt_mem_epcs_flash+0xfffc1cac>
    {
        checksum ^= data[i];
    }

    return checksum;
   42cec:	e0bffd17 	ldw	r2,-12(fp)
}
   42cf0:	e037883a 	mov	sp,fp
   42cf4:	df000017 	ldw	fp,0(sp)
   42cf8:	dec00104 	addi	sp,sp,4
   42cfc:	f800283a 	ret

00042d00 <motor_init>:

void motor_init() {}
   42d00:	deffff04 	addi	sp,sp,-4
   42d04:	df000015 	stw	fp,0(sp)
   42d08:	d839883a 	mov	fp,sp
   42d0c:	0001883a 	nop
   42d10:	e037883a 	mov	sp,fp
   42d14:	df000017 	ldw	fp,0(sp)
   42d18:	dec00104 	addi	sp,sp,4
   42d1c:	f800283a 	ret

00042d20 <nios2fpga_packet>:

/*
 * 打包数据并发送
 */
void nios2fpga_packet(unsigned short command, unsigned char len, unsigned int *src)
{
   42d20:	deffdb04 	addi	sp,sp,-148
   42d24:	dfc02415 	stw	ra,144(sp)
   42d28:	df002315 	stw	fp,140(sp)
   42d2c:	dc002215 	stw	r16,136(sp)
   42d30:	df002304 	addi	fp,sp,140
   42d34:	2007883a 	mov	r3,r4
   42d38:	2805883a 	mov	r2,r5
   42d3c:	e1bffe15 	stw	r6,-8(fp)
   42d40:	e0fffc0d 	sth	r3,-16(fp)
   42d44:	e0bffd05 	stb	r2,-12(fp)
    int i;
    unsigned int buf[30];
    buf[0] = (0x1234 << 16) + command;
   42d48:	e0fffc0b 	ldhu	r3,-16(fp)
   42d4c:	00848d34 	movhi	r2,4660
   42d50:	1885883a 	add	r2,r3,r2
   42d54:	e0bfde15 	stw	r2,-136(fp)
    buf[1] = len;
   42d58:	e0bffd03 	ldbu	r2,-12(fp)
   42d5c:	e0bfdf15 	stw	r2,-132(fp)

    for(i = 0; i < len; i++)
   42d60:	e03fdd15 	stw	zero,-140(fp)
   42d64:	00001206 	br	42db0 <nios2fpga_packet+0x90>
    {
        buf[i + 2] = src[i];
   42d68:	e0bfdd17 	ldw	r2,-140(fp)
   42d6c:	10800084 	addi	r2,r2,2
   42d70:	e0ffdd17 	ldw	r3,-140(fp)
   42d74:	18c7883a 	add	r3,r3,r3
   42d78:	18c7883a 	add	r3,r3,r3
   42d7c:	1809883a 	mov	r4,r3
   42d80:	e0fffe17 	ldw	r3,-8(fp)
   42d84:	1907883a 	add	r3,r3,r4
   42d88:	18c00017 	ldw	r3,0(r3)
   42d8c:	1085883a 	add	r2,r2,r2
   42d90:	1085883a 	add	r2,r2,r2
   42d94:	e13fdd04 	addi	r4,fp,-140
   42d98:	2085883a 	add	r2,r4,r2
   42d9c:	10800104 	addi	r2,r2,4
   42da0:	10c00015 	stw	r3,0(r2)
    int i;
    unsigned int buf[30];
    buf[0] = (0x1234 << 16) + command;
    buf[1] = len;

    for(i = 0; i < len; i++)
   42da4:	e0bfdd17 	ldw	r2,-140(fp)
   42da8:	10800044 	addi	r2,r2,1
   42dac:	e0bfdd15 	stw	r2,-140(fp)
   42db0:	e0bffd03 	ldbu	r2,-12(fp)
   42db4:	e0ffdd17 	ldw	r3,-140(fp)
   42db8:	18bfeb16 	blt	r3,r2,42d68 <__alt_mem_epcs_flash+0xfffc1d68>
    {
        buf[i + 2] = src[i];
    }
    buf[len + 2] = check_sum(buf, len + 2);
   42dbc:	e0bffd03 	ldbu	r2,-12(fp)
   42dc0:	14000084 	addi	r16,r2,2
   42dc4:	e0bffd03 	ldbu	r2,-12(fp)
   42dc8:	10800084 	addi	r2,r2,2
   42dcc:	10c03fcc 	andi	r3,r2,255
   42dd0:	e0bfde04 	addi	r2,fp,-136
   42dd4:	180b883a 	mov	r5,r3
   42dd8:	1009883a 	mov	r4,r2
   42ddc:	0042c880 	call	42c88 <check_sum>
   42de0:	1007883a 	mov	r3,r2
   42de4:	8405883a 	add	r2,r16,r16
   42de8:	1085883a 	add	r2,r2,r2
   42dec:	e13fdd04 	addi	r4,fp,-140
   42df0:	2085883a 	add	r2,r4,r2
   42df4:	10800104 	addi	r2,r2,4
   42df8:	10c00015 	stw	r3,0(r2)

    write_data_to_fpga(buf, len + 3);
   42dfc:	e0bffd03 	ldbu	r2,-12(fp)
   42e00:	108000c4 	addi	r2,r2,3
   42e04:	1007883a 	mov	r3,r2
   42e08:	e0bfde04 	addi	r2,fp,-136
   42e0c:	180b883a 	mov	r5,r3
   42e10:	1009883a 	mov	r4,r2
   42e14:	0042e340 	call	42e34 <write_data_to_fpga>
}
   42e18:	0001883a 	nop
   42e1c:	e6ffff04 	addi	sp,fp,-4
   42e20:	dfc00217 	ldw	ra,8(sp)
   42e24:	df000117 	ldw	fp,4(sp)
   42e28:	dc000017 	ldw	r16,0(sp)
   42e2c:	dec00304 	addi	sp,sp,12
   42e30:	f800283a 	ret

00042e34 <write_data_to_fpga>:

/*
 * niso 数据通过fifo写到 FPGA
 */
bool write_data_to_fpga(unsigned int *data, unsigned int len)
{
   42e34:	defffb04 	addi	sp,sp,-20
   42e38:	dfc00415 	stw	ra,16(sp)
   42e3c:	df000315 	stw	fp,12(sp)
   42e40:	df000304 	addi	fp,sp,12
   42e44:	e13ffe15 	stw	r4,-8(fp)
   42e48:	e17fff15 	stw	r5,-4(fp)
    int i;
    for(i = 0; i < len; i++)
   42e4c:	e03ffd15 	stw	zero,-12(fp)
   42e50:	00001106 	br	42e98 <write_data_to_fpga+0x64>
    {
        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data[i] >> 16) + (data[i] << 16));
   42e54:	e0bffd17 	ldw	r2,-12(fp)
   42e58:	1085883a 	add	r2,r2,r2
   42e5c:	1085883a 	add	r2,r2,r2
   42e60:	1007883a 	mov	r3,r2
   42e64:	e0bffe17 	ldw	r2,-8(fp)
   42e68:	10c5883a 	add	r2,r2,r3
   42e6c:	10800017 	ldw	r2,0(r2)
   42e70:	1004143a 	roli	r2,r2,16
   42e74:	100d883a 	mov	r6,r2
   42e78:	01400234 	movhi	r5,8
   42e7c:	29484004 	addi	r5,r5,8448
   42e80:	01000234 	movhi	r4,8
   42e84:	21087a04 	addi	r4,r4,8680
   42e88:	004a90c0 	call	4a90c <altera_avalon_fifo_write_fifo>
 * niso 数据通过fifo写到 FPGA
 */
bool write_data_to_fpga(unsigned int *data, unsigned int len)
{
    int i;
    for(i = 0; i < len; i++)
   42e8c:	e0bffd17 	ldw	r2,-12(fp)
   42e90:	10800044 	addi	r2,r2,1
   42e94:	e0bffd15 	stw	r2,-12(fp)
   42e98:	e0fffd17 	ldw	r3,-12(fp)
   42e9c:	e0bfff17 	ldw	r2,-4(fp)
   42ea0:	18bfec36 	bltu	r3,r2,42e54 <__alt_mem_epcs_flash+0xfffc1e54>
    {
        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data[i] >> 16) + (data[i] << 16));
        // usleep(1000);
    }
    return true;
   42ea4:	00800044 	movi	r2,1
}
   42ea8:	e037883a 	mov	sp,fp
   42eac:	dfc00117 	ldw	ra,4(sp)
   42eb0:	df000017 	ldw	fp,0(sp)
   42eb4:	dec00204 	addi	sp,sp,8
   42eb8:	f800283a 	ret

00042ebc <set_laser_paramter>:

void set_laser_paramter(NIOS2FPGA_Pck_t *pck, unsigned short command, unsigned int data)
{
   42ebc:	defffa04 	addi	sp,sp,-24
   42ec0:	dfc00515 	stw	ra,20(sp)
   42ec4:	df000415 	stw	fp,16(sp)
   42ec8:	df000404 	addi	fp,sp,16
   42ecc:	e13ffd15 	stw	r4,-12(fp)
   42ed0:	2805883a 	mov	r2,r5
   42ed4:	e1bfff15 	stw	r6,-4(fp)
   42ed8:	e0bffe0d 	sth	r2,-8(fp)
    unsigned char len = 1;
   42edc:	00800044 	movi	r2,1
   42ee0:	e0bffc05 	stb	r2,-16(fp)
    pck->command = command;
   42ee4:	e0fffe0b 	ldhu	r3,-8(fp)
   42ee8:	e0bffd17 	ldw	r2,-12(fp)
   42eec:	10c00015 	stw	r3,0(r2)
    // {

    //     default:
    //         break;
    // }
    nios2fpga_packet(pck->command, len, &data);
   42ef0:	e0bffd17 	ldw	r2,-12(fp)
   42ef4:	10800017 	ldw	r2,0(r2)
   42ef8:	10bfffcc 	andi	r2,r2,65535
   42efc:	e0fffc03 	ldbu	r3,-16(fp)
   42f00:	e13fff04 	addi	r4,fp,-4
   42f04:	200d883a 	mov	r6,r4
   42f08:	180b883a 	mov	r5,r3
   42f0c:	1009883a 	mov	r4,r2
   42f10:	0042d200 	call	42d20 <nios2fpga_packet>
}
   42f14:	0001883a 	nop
   42f18:	e037883a 	mov	sp,fp
   42f1c:	dfc00117 	ldw	ra,4(sp)
   42f20:	df000017 	ldw	fp,0(sp)
   42f24:	dec00204 	addi	sp,sp,8
   42f28:	f800283a 	ret

00042f2c <init_fpga_sys>:

void init_fpga_sys(void)
{
   42f2c:	defffe04 	addi	sp,sp,-8
   42f30:	dfc00115 	stw	ra,4(sp)
   42f34:	df000015 	stw	fp,0(sp)
   42f38:	d839883a 	mov	fp,sp
	set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, ENABLE);
   42f3c:	01844474 	movhi	r6,4369
   42f40:	31844444 	addi	r6,r6,4369
   42f44:	016c0014 	movui	r5,45056
   42f48:	d1201604 	addi	r4,gp,-32680
   42f4c:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, LASER_ENABLE, SysPara.laser_enable);
   42f50:	008001b4 	movhi	r2,6
   42f54:	10a46e04 	addi	r2,r2,-28232
   42f58:	10800117 	ldw	r2,4(r2)
   42f5c:	100d883a 	mov	r6,r2
   42f60:	01684014 	movui	r5,41216
   42f64:	d1201604 	addi	r4,gp,-32680
   42f68:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, LASER_FREQ, SysPara.laser_freq);
   42f6c:	008001b4 	movhi	r2,6
   42f70:	10a46e04 	addi	r2,r2,-28232
   42f74:	10800217 	ldw	r2,8(r2)
   42f78:	100d883a 	mov	r6,r2
   42f7c:	01684054 	movui	r5,41217
   42f80:	d1201604 	addi	r4,gp,-32680
   42f84:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, LASER_PULSE_WIDTH, SysPara.laser_pulse_width);
   42f88:	008001b4 	movhi	r2,6
   42f8c:	10a46e04 	addi	r2,r2,-28232
   42f90:	10800b17 	ldw	r2,44(r2)
   42f94:	100d883a 	mov	r6,r2
   42f98:	01684094 	movui	r5,41218
   42f9c:	d1201604 	addi	r4,gp,-32680
   42fa0:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, LASER_RECV_DELAY, SysPara.laser_recv_delay);
   42fa4:	008001b4 	movhi	r2,6
   42fa8:	10a46e04 	addi	r2,r2,-28232
   42fac:	10800317 	ldw	r2,12(r2)
   42fb0:	100d883a 	mov	r6,r2
   42fb4:	016840d4 	movui	r5,41219
   42fb8:	d1201604 	addi	r4,gp,-32680
   42fbc:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, MOTOR_ENABLE, SysPara.motor_enable);
   42fc0:	008001b4 	movhi	r2,6
   42fc4:	10a46e04 	addi	r2,r2,-28232
   42fc8:	10800417 	ldw	r2,16(r2)
   42fcc:	100d883a 	mov	r6,r2
   42fd0:	01688014 	movui	r5,41472
   42fd4:	d1201604 	addi	r4,gp,-32680
   42fd8:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, MOTOR_SPEED, SysPara.motor_expect_speed);
   42fdc:	008001b4 	movhi	r2,6
   42fe0:	10a46e04 	addi	r2,r2,-28232
   42fe4:	10800517 	ldw	r2,20(r2)
   42fe8:	100d883a 	mov	r6,r2
   42fec:	01688054 	movui	r5,41473
   42ff0:	d1201604 	addi	r4,gp,-32680
   42ff4:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, ZERO_DISTANCE_REVISE, SysPara.zero_distance_revise);
   42ff8:	008001b4 	movhi	r2,6
   42ffc:	10a46e04 	addi	r2,r2,-28232
   43000:	10800617 	ldw	r2,24(r2)
   43004:	100d883a 	mov	r6,r2
   43008:	0168c054 	movui	r5,41729
   4300c:	d1201604 	addi	r4,gp,-32680
   43010:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, ZERO_ANGLE_REVISE, SysPara.zero_angle_revise);
   43014:	008001b4 	movhi	r2,6
   43018:	10a46e04 	addi	r2,r2,-28232
   4301c:	10800717 	ldw	r2,28(r2)
   43020:	100d883a 	mov	r6,r2
   43024:	0168c094 	movui	r5,41730
   43028:	d1201604 	addi	r4,gp,-32680
   4302c:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_DISTANCE_REVISE1, SysPara.gray_distance_revise1);
   43030:	008001b4 	movhi	r2,6
   43034:	10a46e04 	addi	r2,r2,-28232
   43038:	10800817 	ldw	r2,32(r2)
   4303c:	100d883a 	mov	r6,r2
   43040:	01690054 	movui	r5,41985
   43044:	d1201604 	addi	r4,gp,-32680
   43048:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_DISTANCE_REVISE2, SysPara.gray_distance_revise2);
   4304c:	008001b4 	movhi	r2,6
   43050:	10a46e04 	addi	r2,r2,-28232
   43054:	10800917 	ldw	r2,36(r2)
   43058:	100d883a 	mov	r6,r2
   4305c:	01690094 	movui	r5,41986
   43060:	d1201604 	addi	r4,gp,-32680
   43064:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_DISTANCE_REVISE3, SysPara.gray_distance_revise3);
   43068:	008001b4 	movhi	r2,6
   4306c:	10a46e04 	addi	r2,r2,-28232
   43070:	10800a17 	ldw	r2,40(r2)
   43074:	100d883a 	mov	r6,r2
   43078:	016900d4 	movui	r5,41987
   4307c:	d1201604 	addi	r4,gp,-32680
   43080:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_DISTANCE_REVISE4, SysPara.gray_distance_revise4);
   43084:	008001b4 	movhi	r2,6
   43088:	10a46e04 	addi	r2,r2,-28232
   4308c:	10804717 	ldw	r2,284(r2)
   43090:	100d883a 	mov	r6,r2
   43094:	01690114 	movui	r5,41988
   43098:	d1201604 	addi	r4,gp,-32680
   4309c:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_DISTANCE_REVISE5, SysPara.gray_distance_revise5);
   430a0:	008001b4 	movhi	r2,6
   430a4:	10a46e04 	addi	r2,r2,-28232
   430a8:	10804817 	ldw	r2,288(r2)
   430ac:	100d883a 	mov	r6,r2
   430b0:	01690154 	movui	r5,41989
   430b4:	d1201604 	addi	r4,gp,-32680
   430b8:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_INFLECTION1, SysPara.gray_inflection1);
   430bc:	008001b4 	movhi	r2,6
   430c0:	10a46e04 	addi	r2,r2,-28232
   430c4:	10801017 	ldw	r2,64(r2)
   430c8:	100d883a 	mov	r6,r2
   430cc:	01698054 	movui	r5,42497
   430d0:	d1201604 	addi	r4,gp,-32680
   430d4:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_INFLECTION2, SysPara.gray_inflection2);
   430d8:	008001b4 	movhi	r2,6
   430dc:	10a46e04 	addi	r2,r2,-28232
   430e0:	10801117 	ldw	r2,68(r2)
   430e4:	100d883a 	mov	r6,r2
   430e8:	01698094 	movui	r5,42498
   430ec:	d1201604 	addi	r4,gp,-32680
   430f0:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_INFLECTION3, SysPara.gray_inflection3);
   430f4:	008001b4 	movhi	r2,6
   430f8:	10a46e04 	addi	r2,r2,-28232
   430fc:	10804517 	ldw	r2,276(r2)
   43100:	100d883a 	mov	r6,r2
   43104:	016980d4 	movui	r5,42499
   43108:	d1201604 	addi	r4,gp,-32680
   4310c:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_INFLECTION4, SysPara.gray_inflection4);
   43110:	008001b4 	movhi	r2,6
   43114:	10a46e04 	addi	r2,r2,-28232
   43118:	10804617 	ldw	r2,280(r2)
   4311c:	100d883a 	mov	r6,r2
   43120:	01698114 	movui	r5,42500
   43124:	d1201604 	addi	r4,gp,-32680
   43128:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, NOISE_DIFF_SETTING1, SysPara.noise_diff_setting1);
   4312c:	008001b4 	movhi	r2,6
   43130:	10a46e04 	addi	r2,r2,-28232
   43134:	10800d17 	ldw	r2,52(r2)
   43138:	100d883a 	mov	r6,r2
   4313c:	01694054 	movui	r5,42241
   43140:	d1201604 	addi	r4,gp,-32680
   43144:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, NOISE_DIFF_SETTING2, SysPara.noise_diff_setting2);
   43148:	008001b4 	movhi	r2,6
   4314c:	10a46e04 	addi	r2,r2,-28232
   43150:	10800e17 	ldw	r2,56(r2)
   43154:	100d883a 	mov	r6,r2
   43158:	01694094 	movui	r5,42242
   4315c:	d1201604 	addi	r4,gp,-32680
   43160:	0042ebc0 	call	42ebc <set_laser_paramter>

    set_laser_paramter(&Nios2FPGA_pck, APD_VOL_SETTING, SysPara.signal_thresold);
   43164:	008001b4 	movhi	r2,6
   43168:	10a46e04 	addi	r2,r2,-28232
   4316c:	10800c17 	ldw	r2,48(r2)
   43170:	100d883a 	mov	r6,r2
   43174:	0169c094 	movui	r5,42754
   43178:	d1201604 	addi	r4,gp,-32680
   4317c:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, APD_VOL_SETTING, SysPara.apd_vol_base);
   43180:	008001b4 	movhi	r2,6
   43184:	10a46e04 	addi	r2,r2,-28232
   43188:	10800f17 	ldw	r2,60(r2)
   4318c:	100d883a 	mov	r6,r2
   43190:	0169c094 	movui	r5,42754
   43194:	d1201604 	addi	r4,gp,-32680
   43198:	0042ebc0 	call	42ebc <set_laser_paramter>

    set_laser_paramter(&Nios2FPGA_pck, TEMP_VOL_COF1, SysPara.temp_volt_cof1);
   4319c:	008001b4 	movhi	r2,6
   431a0:	10a46e04 	addi	r2,r2,-28232
   431a4:	10801717 	ldw	r2,92(r2)
   431a8:	100d883a 	mov	r6,r2
   431ac:	0169c0d4 	movui	r5,42755
   431b0:	d1201604 	addi	r4,gp,-32680
   431b4:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, TEMP_VOL_COF2, SysPara.temp_volt_cof2);
   431b8:	008001b4 	movhi	r2,6
   431bc:	10a46e04 	addi	r2,r2,-28232
   431c0:	10801817 	ldw	r2,96(r2)
   431c4:	100d883a 	mov	r6,r2
   431c8:	0169c114 	movui	r5,42756
   431cc:	d1201604 	addi	r4,gp,-32680
   431d0:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, TEMP_VOL_INFLECTION, SysPara.temp_volt_inflection);
   431d4:	008001b4 	movhi	r2,6
   431d8:	10a46e04 	addi	r2,r2,-28232
   431dc:	10801917 	ldw	r2,100(r2)
   431e0:	100d883a 	mov	r6,r2
   431e4:	0169c154 	movui	r5,42757
   431e8:	d1201604 	addi	r4,gp,-32680
   431ec:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, TEMP_DISTANCE_COF1, SysPara.temp_distance_cof1);
   431f0:	008001b4 	movhi	r2,6
   431f4:	10a46e04 	addi	r2,r2,-28232
   431f8:	10801a17 	ldw	r2,104(r2)
   431fc:	100d883a 	mov	r6,r2
   43200:	0169c194 	movui	r5,42758
   43204:	d1201604 	addi	r4,gp,-32680
   43208:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, TEMP_DISTANCE_COF2, SysPara.temp_distance_cof2);
   4320c:	008001b4 	movhi	r2,6
   43210:	10a46e04 	addi	r2,r2,-28232
   43214:	10801b17 	ldw	r2,108(r2)
   43218:	100d883a 	mov	r6,r2
   4321c:	0169c1d4 	movui	r5,42759
   43220:	d1201604 	addi	r4,gp,-32680
   43224:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, TEMP_DISTANCE_INFLECTION, SysPara.temp_distance_inflection);
   43228:	008001b4 	movhi	r2,6
   4322c:	10a46e04 	addi	r2,r2,-28232
   43230:	10801c17 	ldw	r2,112(r2)
   43234:	100d883a 	mov	r6,r2
   43238:	0169c214 	movui	r5,42760
   4323c:	d1201604 	addi	r4,gp,-32680
   43240:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, MIN_DISTANCE_VALUE, SysPara.min_display_distance);
   43244:	008001b4 	movhi	r2,6
   43248:	10a46e04 	addi	r2,r2,-28232
   4324c:	10801217 	ldw	r2,72(r2)
   43250:	100d883a 	mov	r6,r2
   43254:	016a8054 	movui	r5,43521
   43258:	d1201604 	addi	r4,gp,-32680
   4325c:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, FIRST_NOISE_FILTER, SysPara.first_noise_filter);
   43260:	008001b4 	movhi	r2,6
   43264:	10a46e04 	addi	r2,r2,-28232
   43268:	10801417 	ldw	r2,80(r2)
   4326c:	100d883a 	mov	r6,r2
   43270:	016a80d4 	movui	r5,43523
   43274:	d1201604 	addi	r4,gp,-32680
   43278:	0042ebc0 	call	42ebc <set_laser_paramter>

    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA1, SysPara.da_cycle_para1);
   4327c:	008001b4 	movhi	r2,6
   43280:	10a46e04 	addi	r2,r2,-28232
   43284:	10802317 	ldw	r2,140(r2)
   43288:	100d883a 	mov	r6,r2
   4328c:	016b0054 	movui	r5,44033
   43290:	d1201604 	addi	r4,gp,-32680
   43294:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA2, SysPara.da_cycle_para2);
   43298:	008001b4 	movhi	r2,6
   4329c:	10a46e04 	addi	r2,r2,-28232
   432a0:	10802417 	ldw	r2,144(r2)
   432a4:	100d883a 	mov	r6,r2
   432a8:	016b0094 	movui	r5,44034
   432ac:	d1201604 	addi	r4,gp,-32680
   432b0:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA3, SysPara.da_cycle_para3);
   432b4:	008001b4 	movhi	r2,6
   432b8:	10a46e04 	addi	r2,r2,-28232
   432bc:	10802517 	ldw	r2,148(r2)
   432c0:	100d883a 	mov	r6,r2
   432c4:	016b00d4 	movui	r5,44035
   432c8:	d1201604 	addi	r4,gp,-32680
   432cc:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA4, SysPara.da_cycle_para4);
   432d0:	008001b4 	movhi	r2,6
   432d4:	10a46e04 	addi	r2,r2,-28232
   432d8:	10802617 	ldw	r2,152(r2)
   432dc:	100d883a 	mov	r6,r2
   432e0:	016b0114 	movui	r5,44036
   432e4:	d1201604 	addi	r4,gp,-32680
   432e8:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA5, SysPara.da_cycle_para5);
   432ec:	008001b4 	movhi	r2,6
   432f0:	10a46e04 	addi	r2,r2,-28232
   432f4:	10802717 	ldw	r2,156(r2)
   432f8:	100d883a 	mov	r6,r2
   432fc:	016b0154 	movui	r5,44037
   43300:	d1201604 	addi	r4,gp,-32680
   43304:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA6, SysPara.da_cycle_para6);
   43308:	008001b4 	movhi	r2,6
   4330c:	10a46e04 	addi	r2,r2,-28232
   43310:	10802817 	ldw	r2,160(r2)
   43314:	100d883a 	mov	r6,r2
   43318:	016b0194 	movui	r5,44038
   4331c:	d1201604 	addi	r4,gp,-32680
   43320:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA7, SysPara.da_cycle_para7);
   43324:	008001b4 	movhi	r2,6
   43328:	10a46e04 	addi	r2,r2,-28232
   4332c:	10802917 	ldw	r2,164(r2)
   43330:	100d883a 	mov	r6,r2
   43334:	016b01d4 	movui	r5,44039
   43338:	d1201604 	addi	r4,gp,-32680
   4333c:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA8, SysPara.da_cycle_para8);
   43340:	008001b4 	movhi	r2,6
   43344:	10a46e04 	addi	r2,r2,-28232
   43348:	10802a17 	ldw	r2,168(r2)
   4334c:	100d883a 	mov	r6,r2
   43350:	016b0214 	movui	r5,44040
   43354:	d1201604 	addi	r4,gp,-32680
   43358:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA9, SysPara.da_cycle_para9);
   4335c:	008001b4 	movhi	r2,6
   43360:	10a46e04 	addi	r2,r2,-28232
   43364:	10802b17 	ldw	r2,172(r2)
   43368:	100d883a 	mov	r6,r2
   4336c:	016b0254 	movui	r5,44041
   43370:	d1201604 	addi	r4,gp,-32680
   43374:	0042ebc0 	call	42ebc <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, PC_SET_HW_TYPE, SysPara.board_type);
   43378:	008001b4 	movhi	r2,6
   4337c:	10a46e04 	addi	r2,r2,-28232
   43380:	10802c17 	ldw	r2,176(r2)
   43384:	100d883a 	mov	r6,r2
   43388:	01500184 	movi	r5,16390
   4338c:	d1201604 	addi	r4,gp,-32680
   43390:	0042ebc0 	call	42ebc <set_laser_paramter>
    write_laser_presdo(SysPara.laser_presdo);
   43394:	010001b4 	movhi	r4,6
   43398:	2124aa04 	addi	r4,r4,-27992
   4339c:	00433d80 	call	433d8 <write_laser_presdo>
}
   433a0:	0001883a 	nop
   433a4:	e037883a 	mov	sp,fp
   433a8:	dfc00117 	ldw	ra,4(sp)
   433ac:	df000017 	ldw	fp,0(sp)
   433b0:	dec00204 	addi	sp,sp,8
   433b4:	f800283a 	ret

000433b8 <close_peripheral_dev>:

void close_peripheral_dev(void)
{
   433b8:	deffff04 	addi	sp,sp,-4
   433bc:	df000015 	stw	fp,0(sp)
   433c0:	d839883a 	mov	fp,sp
    set_laser_paramter(&Nios2FPGA_pck, MOTOR_ENABLE, DISABLE);
    set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, DISABLE);
    // set_laser_paramter(&Nios2FPGA_pck, LASER_ENABLE, DISABLE);
    // set_laser_paramter(&Nios2FPGA_pck, APD_VOL_SETTING, 550);
#endif
}
   433c4:	0001883a 	nop
   433c8:	e037883a 	mov	sp,fp
   433cc:	df000017 	ldw	fp,0(sp)
   433d0:	dec00104 	addi	sp,sp,4
   433d4:	f800283a 	ret

000433d8 <write_laser_presdo>:


void write_laser_presdo(unsigned char *arr)
{
   433d8:	defffb04 	addi	sp,sp,-20
   433dc:	dfc00415 	stw	ra,16(sp)
   433e0:	df000315 	stw	fp,12(sp)
   433e4:	df000304 	addi	fp,sp,12
   433e8:	e13fff15 	stw	r4,-4(fp)
    int i;
    unsigned int data;
    data = 0x1234a104;
   433ec:	00848d74 	movhi	r2,4661
   433f0:	10a84104 	addi	r2,r2,-24316
   433f4:	e0bffe15 	stw	r2,-8(fp)

    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   433f8:	e0bffe17 	ldw	r2,-8(fp)
   433fc:	1004143a 	roli	r2,r2,16
   43400:	100d883a 	mov	r6,r2
   43404:	01400234 	movhi	r5,8
   43408:	29484004 	addi	r5,r5,8448
   4340c:	01000234 	movhi	r4,8
   43410:	21087a04 	addi	r4,r4,8680
   43414:	004a90c0 	call	4a90c <altera_avalon_fifo_write_fifo>
    data = 30;
   43418:	00800784 	movi	r2,30
   4341c:	e0bffe15 	stw	r2,-8(fp)
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   43420:	e0bffe17 	ldw	r2,-8(fp)
   43424:	1004143a 	roli	r2,r2,16
   43428:	100d883a 	mov	r6,r2
   4342c:	01400234 	movhi	r5,8
   43430:	29484004 	addi	r5,r5,8448
   43434:	01000234 	movhi	r4,8
   43438:	21087a04 	addi	r4,r4,8680
   4343c:	004a90c0 	call	4a90c <altera_avalon_fifo_write_fifo>

    //    data = 0x1000;
    for(i = 0; i < sizeof(SysPara.laser_presdo); i=i+4)
   43440:	e03ffd15 	stw	zero,-12(fp)
   43444:	00002906 	br	434ec <write_laser_presdo+0x114>
    {
        data = (arr[i] << 24) + (arr[i+1] << 16) + (arr[i+2] << 8) + (arr[i+3] << 0);
   43448:	e0bffd17 	ldw	r2,-12(fp)
   4344c:	e0ffff17 	ldw	r3,-4(fp)
   43450:	1885883a 	add	r2,r3,r2
   43454:	10800003 	ldbu	r2,0(r2)
   43458:	10803fcc 	andi	r2,r2,255
   4345c:	1006963a 	slli	r3,r2,24
   43460:	e0bffd17 	ldw	r2,-12(fp)
   43464:	10800044 	addi	r2,r2,1
   43468:	e13fff17 	ldw	r4,-4(fp)
   4346c:	2085883a 	add	r2,r4,r2
   43470:	10800003 	ldbu	r2,0(r2)
   43474:	10803fcc 	andi	r2,r2,255
   43478:	1004943a 	slli	r2,r2,16
   4347c:	1887883a 	add	r3,r3,r2
   43480:	e0bffd17 	ldw	r2,-12(fp)
   43484:	10800084 	addi	r2,r2,2
   43488:	e13fff17 	ldw	r4,-4(fp)
   4348c:	2085883a 	add	r2,r4,r2
   43490:	10800003 	ldbu	r2,0(r2)
   43494:	10803fcc 	andi	r2,r2,255
   43498:	1004923a 	slli	r2,r2,8
   4349c:	1887883a 	add	r3,r3,r2
   434a0:	e0bffd17 	ldw	r2,-12(fp)
   434a4:	108000c4 	addi	r2,r2,3
   434a8:	e13fff17 	ldw	r4,-4(fp)
   434ac:	2085883a 	add	r2,r4,r2
   434b0:	10800003 	ldbu	r2,0(r2)
   434b4:	10803fcc 	andi	r2,r2,255
   434b8:	1885883a 	add	r2,r3,r2
   434bc:	e0bffe15 	stw	r2,-8(fp)
        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   434c0:	e0bffe17 	ldw	r2,-8(fp)
   434c4:	1004143a 	roli	r2,r2,16
   434c8:	100d883a 	mov	r6,r2
   434cc:	01400234 	movhi	r5,8
   434d0:	29484004 	addi	r5,r5,8448
   434d4:	01000234 	movhi	r4,8
   434d8:	21087a04 	addi	r4,r4,8680
   434dc:	004a90c0 	call	4a90c <altera_avalon_fifo_write_fifo>
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
    data = 30;
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));

    //    data = 0x1000;
    for(i = 0; i < sizeof(SysPara.laser_presdo); i=i+4)
   434e0:	e0bffd17 	ldw	r2,-12(fp)
   434e4:	10800104 	addi	r2,r2,4
   434e8:	e0bffd15 	stw	r2,-12(fp)
   434ec:	e0bffd17 	ldw	r2,-12(fp)
   434f0:	108007b0 	cmpltui	r2,r2,30
   434f4:	103fd41e 	bne	r2,zero,43448 <__alt_mem_epcs_flash+0xfffc2448>
    {
        data = (arr[i] << 24) + (arr[i+1] << 16) + (arr[i+2] << 8) + (arr[i+3] << 0);
        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
    }
    data = 0xccccdddd;
   434f8:	00b33374 	movhi	r2,52429
   434fc:	10b77744 	addi	r2,r2,-8739
   43500:	e0bffe15 	stw	r2,-8(fp)
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   43504:	e0bffe17 	ldw	r2,-8(fp)
   43508:	1004143a 	roli	r2,r2,16
   4350c:	100d883a 	mov	r6,r2
   43510:	01400234 	movhi	r5,8
   43514:	29484004 	addi	r5,r5,8448
   43518:	01000234 	movhi	r4,8
   4351c:	21087a04 	addi	r4,r4,8680
   43520:	004a90c0 	call	4a90c <altera_avalon_fifo_write_fifo>
}
   43524:	0001883a 	nop
   43528:	e037883a 	mov	sp,fp
   4352c:	dfc00117 	ldw	ra,4(sp)
   43530:	df000017 	ldw	fp,0(sp)
   43534:	dec00204 	addi	sp,sp,8
   43538:	f800283a 	ret

0004353c <pc_data_to_fpga>:
unsigned char send_buffer[8448];  // 定义一个2KB的数组，用来存放Socket的通信数据
/*
 *转发pc数据到fpga
 */
bool pc_data_to_fpga(unsigned int *data, unsigned int len)
{
   4353c:	defffb04 	addi	sp,sp,-20
   43540:	dfc00415 	stw	ra,16(sp)
   43544:	df000315 	stw	fp,12(sp)
   43548:	df000304 	addi	fp,sp,12
   4354c:	e13ffe15 	stw	r4,-8(fp)
   43550:	e17fff15 	stw	r5,-4(fp)
    int i;
    for(i = 0; i < len; i++)
   43554:	e03ffd15 	stw	zero,-12(fp)
   43558:	00003406 	br	4362c <pc_data_to_fpga+0xf0>
    {
        // nios 采用小端格式，char 数组 转 unsigned int 数组， 字节顺序会颠倒
        data[i] = ((data[i] & 0xff000000) >> 24) | ((data[i] & 0x00ff0000) >> 8) | ((data[i] & 0x0000ff00) << 8) | ((data[i] & 0x000000ff) << 32);
   4355c:	e0bffd17 	ldw	r2,-12(fp)
   43560:	1085883a 	add	r2,r2,r2
   43564:	1085883a 	add	r2,r2,r2
   43568:	1007883a 	mov	r3,r2
   4356c:	e0bffe17 	ldw	r2,-8(fp)
   43570:	10c7883a 	add	r3,r2,r3
   43574:	e0bffd17 	ldw	r2,-12(fp)
   43578:	1085883a 	add	r2,r2,r2
   4357c:	1085883a 	add	r2,r2,r2
   43580:	1009883a 	mov	r4,r2
   43584:	e0bffe17 	ldw	r2,-8(fp)
   43588:	1105883a 	add	r2,r2,r4
   4358c:	10800017 	ldw	r2,0(r2)
   43590:	1008d63a 	srli	r4,r2,24
   43594:	e0bffd17 	ldw	r2,-12(fp)
   43598:	1085883a 	add	r2,r2,r2
   4359c:	1085883a 	add	r2,r2,r2
   435a0:	100b883a 	mov	r5,r2
   435a4:	e0bffe17 	ldw	r2,-8(fp)
   435a8:	1145883a 	add	r2,r2,r5
   435ac:	10800017 	ldw	r2,0(r2)
   435b0:	10803fec 	andhi	r2,r2,255
   435b4:	1004d23a 	srli	r2,r2,8
   435b8:	2088b03a 	or	r4,r4,r2
   435bc:	e0bffd17 	ldw	r2,-12(fp)
   435c0:	1085883a 	add	r2,r2,r2
   435c4:	1085883a 	add	r2,r2,r2
   435c8:	100b883a 	mov	r5,r2
   435cc:	e0bffe17 	ldw	r2,-8(fp)
   435d0:	1145883a 	add	r2,r2,r5
   435d4:	10800017 	ldw	r2,0(r2)
   435d8:	10bfc00c 	andi	r2,r2,65280
   435dc:	1004923a 	slli	r2,r2,8
   435e0:	2084b03a 	or	r2,r4,r2
   435e4:	18800015 	stw	r2,0(r3)

        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data[i] >> 16) + (data[i] << 16));
   435e8:	e0bffd17 	ldw	r2,-12(fp)
   435ec:	1085883a 	add	r2,r2,r2
   435f0:	1085883a 	add	r2,r2,r2
   435f4:	1007883a 	mov	r3,r2
   435f8:	e0bffe17 	ldw	r2,-8(fp)
   435fc:	10c5883a 	add	r2,r2,r3
   43600:	10800017 	ldw	r2,0(r2)
   43604:	1004143a 	roli	r2,r2,16
   43608:	100d883a 	mov	r6,r2
   4360c:	01400234 	movhi	r5,8
   43610:	29484004 	addi	r5,r5,8448
   43614:	01000234 	movhi	r4,8
   43618:	21087a04 	addi	r4,r4,8680
   4361c:	004a90c0 	call	4a90c <altera_avalon_fifo_write_fifo>
 *转发pc数据到fpga
 */
bool pc_data_to_fpga(unsigned int *data, unsigned int len)
{
    int i;
    for(i = 0; i < len; i++)
   43620:	e0bffd17 	ldw	r2,-12(fp)
   43624:	10800044 	addi	r2,r2,1
   43628:	e0bffd15 	stw	r2,-12(fp)
   4362c:	e0fffd17 	ldw	r3,-12(fp)
   43630:	e0bfff17 	ldw	r2,-4(fp)
   43634:	18bfc936 	bltu	r3,r2,4355c <__alt_mem_epcs_flash+0xfffc255c>
        // nios 采用小端格式，char 数组 转 unsigned int 数组， 字节顺序会颠倒
        data[i] = ((data[i] & 0xff000000) >> 24) | ((data[i] & 0x00ff0000) >> 8) | ((data[i] & 0x0000ff00) << 8) | ((data[i] & 0x000000ff) << 32);

        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data[i] >> 16) + (data[i] << 16));
    }
    return true;
   43638:	00800044 	movi	r2,1
}
   4363c:	e037883a 	mov	sp,fp
   43640:	dfc00117 	ldw	ra,4(sp)
   43644:	df000017 	ldw	fp,0(sp)
   43648:	dec00204 	addi	sp,sp,8
   4364c:	f800283a 	ret

00043650 <pc2dev_parse>:

void pc2dev_parse(SOCKET s, unsigned char *buf, int len)
{
   43650:	defff504 	addi	sp,sp,-44
   43654:	dfc00a15 	stw	ra,40(sp)
   43658:	df000915 	stw	fp,36(sp)
   4365c:	dc000815 	stw	r16,32(sp)
   43660:	df000904 	addi	fp,sp,36
   43664:	2005883a 	mov	r2,r4
   43668:	e17ffd15 	stw	r5,-12(fp)
   4366c:	e1bffe15 	stw	r6,-8(fp)
   43670:	e0bffc05 	stb	r2,-16(fp)
    int            send_len;
    unsigned short recv_pos;
    unsigned int   para;        // PC 传给 nios 的参数值
    int            packet_len;  // buf里可能有多包数据，本包数据长度

    while(len != 0)
   43674:	00059d06 	br	44cec <pc2dev_parse+0x169c>
    {
        if(buf[0] == 0x02)  // 命令属于tim561协议
   43678:	e0bffd17 	ldw	r2,-12(fp)
   4367c:	10800003 	ldbu	r2,0(r2)
   43680:	10803fcc 	andi	r2,r2,255
   43684:	10800098 	cmpnei	r2,r2,2
   43688:	1000071e 	bne	r2,zero,436a8 <pc2dev_parse+0x58>
        {
            sick_protocol_process(s, buf, len);
   4368c:	e0bffc03 	ldbu	r2,-16(fp)
   43690:	e1bffe17 	ldw	r6,-8(fp)
   43694:	e17ffd17 	ldw	r5,-12(fp)
   43698:	1009883a 	mov	r4,r2
   4369c:	0045fec0 	call	45fec <sick_protocol_process>
            len = 0;
   436a0:	e03ffe15 	stw	zero,-8(fp)
   436a4:	00059106 	br	44cec <pc2dev_parse+0x169c>
        }
        else  // 自定义协议
        {
            para = (buf[8] << 24) + (buf[9] << 16) + (buf[10] << 8) + buf[11];
   436a8:	e0bffd17 	ldw	r2,-12(fp)
   436ac:	10800204 	addi	r2,r2,8
   436b0:	10800003 	ldbu	r2,0(r2)
   436b4:	10803fcc 	andi	r2,r2,255
   436b8:	1006963a 	slli	r3,r2,24
   436bc:	e0bffd17 	ldw	r2,-12(fp)
   436c0:	10800244 	addi	r2,r2,9
   436c4:	10800003 	ldbu	r2,0(r2)
   436c8:	10803fcc 	andi	r2,r2,255
   436cc:	1004943a 	slli	r2,r2,16
   436d0:	1887883a 	add	r3,r3,r2
   436d4:	e0bffd17 	ldw	r2,-12(fp)
   436d8:	10800284 	addi	r2,r2,10
   436dc:	10800003 	ldbu	r2,0(r2)
   436e0:	10803fcc 	andi	r2,r2,255
   436e4:	1004923a 	slli	r2,r2,8
   436e8:	1887883a 	add	r3,r3,r2
   436ec:	e0bffd17 	ldw	r2,-12(fp)
   436f0:	108002c4 	addi	r2,r2,11
   436f4:	10800003 	ldbu	r2,0(r2)
   436f8:	10803fcc 	andi	r2,r2,255
   436fc:	1885883a 	add	r2,r3,r2
   43700:	e0bff815 	stw	r2,-32(fp)
            /*
             *
             */
            pc2nios.head     = (buf[0] << 8) + buf[1];
   43704:	e0bffd17 	ldw	r2,-12(fp)
   43708:	10800003 	ldbu	r2,0(r2)
   4370c:	10803fcc 	andi	r2,r2,255
   43710:	1006923a 	slli	r3,r2,8
   43714:	e0bffd17 	ldw	r2,-12(fp)
   43718:	10800044 	addi	r2,r2,1
   4371c:	10800003 	ldbu	r2,0(r2)
   43720:	10803fcc 	andi	r2,r2,255
   43724:	1885883a 	add	r2,r3,r2
   43728:	1007883a 	mov	r3,r2
   4372c:	008001b4 	movhi	r2,6
   43730:	10a4bc04 	addi	r2,r2,-27920
   43734:	10c00015 	stw	r3,0(r2)
            pc2nios.command  = (buf[2] << 8) + buf[3];
   43738:	e0bffd17 	ldw	r2,-12(fp)
   4373c:	10800084 	addi	r2,r2,2
   43740:	10800003 	ldbu	r2,0(r2)
   43744:	10803fcc 	andi	r2,r2,255
   43748:	1006923a 	slli	r3,r2,8
   4374c:	e0bffd17 	ldw	r2,-12(fp)
   43750:	108000c4 	addi	r2,r2,3
   43754:	10800003 	ldbu	r2,0(r2)
   43758:	10803fcc 	andi	r2,r2,255
   4375c:	1885883a 	add	r2,r3,r2
   43760:	1007883a 	mov	r3,r2
   43764:	008001b4 	movhi	r2,6
   43768:	10a4bc04 	addi	r2,r2,-27920
   4376c:	10c00115 	stw	r3,4(r2)
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
   43770:	e0bffd17 	ldw	r2,-12(fp)
   43774:	10800104 	addi	r2,r2,4
   43778:	10800003 	ldbu	r2,0(r2)
   4377c:	10803fcc 	andi	r2,r2,255
   43780:	1006963a 	slli	r3,r2,24
   43784:	e0bffd17 	ldw	r2,-12(fp)
   43788:	10800144 	addi	r2,r2,5
   4378c:	10800003 	ldbu	r2,0(r2)
   43790:	10803fcc 	andi	r2,r2,255
   43794:	1004943a 	slli	r2,r2,16
   43798:	1887883a 	add	r3,r3,r2
   4379c:	e0bffd17 	ldw	r2,-12(fp)
   437a0:	10800184 	addi	r2,r2,6
   437a4:	10800003 	ldbu	r2,0(r2)
   437a8:	10803fcc 	andi	r2,r2,255
   437ac:	1004923a 	slli	r2,r2,8
   437b0:	1887883a 	add	r3,r3,r2
   437b4:	e0bffd17 	ldw	r2,-12(fp)
   437b8:	108001c4 	addi	r2,r2,7
   437bc:	10800003 	ldbu	r2,0(r2)
   437c0:	10803fcc 	andi	r2,r2,255
   437c4:	1885883a 	add	r2,r3,r2
   437c8:	1007883a 	mov	r3,r2
   437cc:	008001b4 	movhi	r2,6
   437d0:	10a4bc04 	addi	r2,r2,-27920
   437d4:	10c00215 	stw	r3,8(r2)
            SysPara.pc_command_value++;
   437d8:	008001b4 	movhi	r2,6
   437dc:	10a46e04 	addi	r2,r2,-28232
   437e0:	10804a17 	ldw	r2,296(r2)
   437e4:	10c00044 	addi	r3,r2,1
   437e8:	008001b4 	movhi	r2,6
   437ec:	10a46e04 	addi	r2,r2,-28232
   437f0:	10c04a15 	stw	r3,296(r2)

            switch(pc2nios.command)
   437f4:	008001b4 	movhi	r2,6
   437f8:	10a4bc04 	addi	r2,r2,-27920
   437fc:	10800117 	ldw	r2,4(r2)
   43800:	00e90154 	movui	r3,41989
   43804:	10c2a426 	beq	r2,r3,44298 <pc2dev_parse+0xc48>
   43808:	10e901a8 	cmpgeui	r3,r2,41990
   4380c:	1800481e 	bne	r3,zero,43930 <pc2dev_parse+0x2e0>
   43810:	10d040a0 	cmpeqi	r3,r2,16642
   43814:	1804e21e 	bne	r3,zero,44ba0 <pc2dev_parse+0x1550>
   43818:	10d040e8 	cmpgeui	r3,r2,16643
   4381c:	1800221e 	bne	r3,zero,438a8 <pc2dev_parse+0x258>
   43820:	10d001e0 	cmpeqi	r3,r2,16391
   43824:	1801991e 	bne	r3,zero,43e8c <pc2dev_parse+0x83c>
   43828:	10d00228 	cmpgeui	r3,r2,16392
   4382c:	18000e1e 	bne	r3,zero,43868 <pc2dev_parse+0x218>
   43830:	10d000e0 	cmpeqi	r3,r2,16387
   43834:	1800e91e 	bne	r3,zero,43bdc <pc2dev_parse+0x58c>
   43838:	10d00128 	cmpgeui	r3,r2,16388
   4383c:	1800051e 	bne	r3,zero,43854 <pc2dev_parse+0x204>
   43840:	10d00060 	cmpeqi	r3,r2,16385
   43844:	1800841e 	bne	r3,zero,43a58 <pc2dev_parse+0x408>
   43848:	109000a0 	cmpeqi	r2,r2,16386
   4384c:	1000c91e 	bne	r2,zero,43b74 <pc2dev_parse+0x524>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   43850:	00051906 	br	44cb8 <pc2dev_parse+0x1668>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   43854:	10d00160 	cmpeqi	r3,r2,16389
   43858:	1801641e 	bne	r3,zero,43dec <pc2dev_parse+0x79c>
   4385c:	109001a8 	cmpgeui	r2,r2,16390
   43860:	10017d1e 	bne	r2,zero,43e58 <pc2dev_parse+0x808>
   43864:	00014506 	br	43d7c <pc2dev_parse+0x72c>
   43868:	10d00420 	cmpeqi	r3,r2,16400
   4386c:	18019f1e 	bne	r3,zero,43eec <pc2dev_parse+0x89c>
   43870:	10d00468 	cmpgeui	r3,r2,16401
   43874:	1800051e 	bne	r3,zero,4388c <pc2dev_parse+0x23c>
   43878:	10d00220 	cmpeqi	r3,r2,16392
   4387c:	1801871e 	bne	r3,zero,43e9c <pc2dev_parse+0x84c>
   43880:	10900260 	cmpeqi	r2,r2,16393
   43884:	1001881e 	bne	r2,zero,43ea8 <pc2dev_parse+0x858>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   43888:	00050b06 	br	44cb8 <pc2dev_parse+0x1668>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   4388c:	10d04020 	cmpeqi	r3,r2,16640
   43890:	1804411e 	bne	r3,zero,44998 <pc2dev_parse+0x1348>
   43894:	10d04068 	cmpgeui	r3,r2,16641
   43898:	1804891e 	bne	r3,zero,44ac0 <pc2dev_parse+0x1470>
   4389c:	10900460 	cmpeqi	r2,r2,16401
   438a0:	1001a31e 	bne	r2,zero,43f30 <pc2dev_parse+0x8e0>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   438a4:	00050406 	br	44cb8 <pc2dev_parse+0x1668>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   438a8:	00e88054 	movui	r3,41473
   438ac:	10c21026 	beq	r2,r3,440f0 <pc2dev_parse+0xaa0>
   438b0:	10e880a8 	cmpgeui	r3,r2,41474
   438b4:	1800101e 	bne	r3,zero,438f8 <pc2dev_parse+0x2a8>
   438b8:	00e84094 	movui	r3,41218
   438bc:	10c1c326 	beq	r2,r3,43fcc <pc2dev_parse+0x97c>
   438c0:	10e840e8 	cmpgeui	r3,r2,41219
   438c4:	1800051e 	bne	r3,zero,438dc <pc2dev_parse+0x28c>
   438c8:	00e84014 	movui	r3,41216
   438cc:	10c19d26 	beq	r2,r3,43f44 <pc2dev_parse+0x8f4>
   438d0:	00e84054 	movui	r3,41217
   438d4:	10c1b026 	beq	r2,r3,43f98 <pc2dev_parse+0x948>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   438d8:	0004f706 	br	44cb8 <pc2dev_parse+0x1668>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   438dc:	00e84114 	movui	r3,41220
   438e0:	10c1cd26 	beq	r2,r3,44018 <pc2dev_parse+0x9c8>
   438e4:	10e84130 	cmpltui	r3,r2,41220
   438e8:	1801dc1e 	bne	r3,zero,4405c <pc2dev_parse+0xa0c>
   438ec:	00e88014 	movui	r3,41472
   438f0:	10c1ea26 	beq	r2,r3,4409c <pc2dev_parse+0xa4c>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   438f4:	0004f006 	br	44cb8 <pc2dev_parse+0x1668>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   438f8:	00e90054 	movui	r3,41985
   438fc:	10c23226 	beq	r2,r3,441c8 <pc2dev_parse+0xb78>
   43900:	10e900a8 	cmpgeui	r3,r2,41986
   43904:	1800051e 	bne	r3,zero,4391c <pc2dev_parse+0x2cc>
   43908:	00e8c054 	movui	r3,41729
   4390c:	10c20b26 	beq	r2,r3,4413c <pc2dev_parse+0xaec>
   43910:	00e8c094 	movui	r3,41730
   43914:	10c21926 	beq	r2,r3,4417c <pc2dev_parse+0xb2c>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   43918:	0004e706 	br	44cb8 <pc2dev_parse+0x1668>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   4391c:	00e900d4 	movui	r3,41987
   43920:	10c24326 	beq	r2,r3,44230 <pc2dev_parse+0xbe0>
   43924:	10a90128 	cmpgeui	r2,r2,41988
   43928:	10024e1e 	bne	r2,zero,44264 <pc2dev_parse+0xc14>
   4392c:	00023306 	br	441fc <pc2dev_parse+0xbac>
   43930:	00e9c214 	movui	r3,42760
   43934:	10c33226 	beq	r2,r3,44600 <pc2dev_parse+0xfb0>
   43938:	10e9c268 	cmpgeui	r3,r2,42761
   4393c:	1800221e 	bne	r3,zero,439c8 <pc2dev_parse+0x378>
   43940:	00e9c054 	movui	r3,42753
   43944:	10c2af26 	beq	r2,r3,44404 <pc2dev_parse+0xdb4>
   43948:	10e9c0a8 	cmpgeui	r3,r2,42754
   4394c:	1800101e 	bne	r3,zero,43990 <pc2dev_parse+0x340>
   43950:	00e98054 	movui	r3,42497
   43954:	10c25d26 	beq	r2,r3,442cc <pc2dev_parse+0xc7c>
   43958:	10e980a8 	cmpgeui	r3,r2,42498
   4395c:	1800051e 	bne	r3,zero,43974 <pc2dev_parse+0x324>
   43960:	00e94054 	movui	r3,42241
   43964:	10c28d26 	beq	r2,r3,4439c <pc2dev_parse+0xd4c>
   43968:	00e94094 	movui	r3,42242
   4396c:	10c29826 	beq	r2,r3,443d0 <pc2dev_parse+0xd80>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   43970:	0004d106 	br	44cb8 <pc2dev_parse+0x1668>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   43974:	00e980d4 	movui	r3,42499
   43978:	10c26e26 	beq	r2,r3,44334 <pc2dev_parse+0xce4>
   4397c:	10e980f0 	cmpltui	r3,r2,42499
   43980:	18025f1e 	bne	r3,zero,44300 <pc2dev_parse+0xcb0>
   43984:	00e98114 	movui	r3,42500
   43988:	10c27726 	beq	r2,r3,44368 <pc2dev_parse+0xd18>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   4398c:	0004ca06 	br	44cb8 <pc2dev_parse+0x1668>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   43990:	00e9c114 	movui	r3,42756
   43994:	10c2d726 	beq	r2,r3,444f4 <pc2dev_parse+0xea4>
   43998:	10e9c168 	cmpgeui	r3,r2,42757
   4399c:	1800051e 	bne	r3,zero,439b4 <pc2dev_parse+0x364>
   439a0:	00e9c094 	movui	r3,42754
   439a4:	10c2a726 	beq	r2,r3,44444 <pc2dev_parse+0xdf4>
   439a8:	00e9c0d4 	movui	r3,42755
   439ac:	10c2be26 	beq	r2,r3,444a8 <pc2dev_parse+0xe58>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   439b0:	0004c106 	br	44cb8 <pc2dev_parse+0x1668>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   439b4:	00e9c194 	movui	r3,42758
   439b8:	10c2f126 	beq	r2,r3,44580 <pc2dev_parse+0xf30>
   439bc:	10a9c1e8 	cmpgeui	r2,r2,42759
   439c0:	1002ff1e 	bne	r2,zero,445c0 <pc2dev_parse+0xf70>
   439c4:	0002de06 	br	44540 <pc2dev_parse+0xef0>
   439c8:	00eb00d4 	movui	r3,44035
   439cc:	10c38226 	beq	r2,r3,447d8 <pc2dev_parse+0x1188>
   439d0:	10eb0128 	cmpgeui	r3,r2,44036
   439d4:	1800101e 	bne	r3,zero,43a18 <pc2dev_parse+0x3c8>
   439d8:	00ea80d4 	movui	r3,43523
   439dc:	10c33b26 	beq	r2,r3,446cc <pc2dev_parse+0x107c>
   439e0:	10ea8128 	cmpgeui	r3,r2,43524
   439e4:	1800051e 	bne	r3,zero,439fc <pc2dev_parse+0x3ac>
   439e8:	00e9c254 	movui	r3,42761
   439ec:	10c31426 	beq	r2,r3,44640 <pc2dev_parse+0xff0>
   439f0:	00ea8054 	movui	r3,43521
   439f4:	10c32526 	beq	r2,r3,4468c <pc2dev_parse+0x103c>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   439f8:	0004af06 	br	44cb8 <pc2dev_parse+0x1668>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   439fc:	00eb0054 	movui	r3,44033
   43a00:	10c35526 	beq	r2,r3,44758 <pc2dev_parse+0x1108>
   43a04:	10eb00a8 	cmpgeui	r3,r2,44034
   43a08:	1803631e 	bne	r3,zero,44798 <pc2dev_parse+0x1148>
   43a0c:	00eac014 	movui	r3,43776
   43a10:	10c34126 	beq	r2,r3,44718 <pc2dev_parse+0x10c8>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   43a14:	0004a806 	br	44cb8 <pc2dev_parse+0x1668>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   43a18:	00eb0194 	movui	r3,44038
   43a1c:	10c39e26 	beq	r2,r3,44898 <pc2dev_parse+0x1248>
   43a20:	10eb01e8 	cmpgeui	r3,r2,44039
   43a24:	1800051e 	bne	r3,zero,43a3c <pc2dev_parse+0x3ec>
   43a28:	00eb0114 	movui	r3,44036
   43a2c:	10c37a26 	beq	r2,r3,44818 <pc2dev_parse+0x11c8>
   43a30:	00eb0154 	movui	r3,44037
   43a34:	10c38826 	beq	r2,r3,44858 <pc2dev_parse+0x1208>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   43a38:	00049f06 	br	44cb8 <pc2dev_parse+0x1668>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   43a3c:	00eb0214 	movui	r3,44040
   43a40:	10c3b526 	beq	r2,r3,44918 <pc2dev_parse+0x12c8>
   43a44:	10eb0230 	cmpltui	r3,r2,44040
   43a48:	1803a31e 	bne	r3,zero,448d8 <pc2dev_parse+0x1288>
   43a4c:	00eb0254 	movui	r3,44041
   43a50:	10c3c126 	beq	r2,r3,44958 <pc2dev_parse+0x1308>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   43a54:	00049806 	br	44cb8 <pc2dev_parse+0x1668>
            switch(pc2nios.command)
            {
                // 设置使用那个报警区域，这个值会写到E2PROM，每次设置值都会有3bit为1
                // 从E2PROM里读出报警区域数据，作为比较
                case PC_SET_ALARM_REGION:
                    alarm_region.select = para;
   43a58:	008001b4 	movhi	r2,6
   43a5c:	10a4c504 	addi	r2,r2,-27884
   43a60:	e0fff817 	ldw	r3,-32(fp)
   43a64:	10c1bd15 	stw	r3,1780(r2)

                    if(alarm_region.select <= 15)  // 范围保护
   43a68:	008001b4 	movhi	r2,6
   43a6c:	10a4c504 	addi	r2,r2,-27884
   43a70:	1081bd17 	ldw	r2,1780(r2)
   43a74:	10800428 	cmpgeui	r2,r2,16
   43a78:	10049f1e 	bne	r2,zero,44cf8 <pc2dev_parse+0x16a8>
                    {
                        iic.write_byte(CUR_ALARM_GROUP + 2, buf[10]);
   43a7c:	008001b4 	movhi	r2,6
   43a80:	10a4b904 	addi	r2,r2,-27932
   43a84:	10800017 	ldw	r2,0(r2)
   43a88:	e0fffd17 	ldw	r3,-12(fp)
   43a8c:	18c00284 	addi	r3,r3,10
   43a90:	18c00003 	ldbu	r3,0(r3)
   43a94:	18c03fcc 	andi	r3,r3,255
   43a98:	180b883a 	mov	r5,r3
   43a9c:	01000084 	movi	r4,2
   43aa0:	103ee83a 	callr	r2
                        iic.write_byte(CUR_ALARM_GROUP + 3, buf[11]);
   43aa4:	008001b4 	movhi	r2,6
   43aa8:	10a4b904 	addi	r2,r2,-27932
   43aac:	10800017 	ldw	r2,0(r2)
   43ab0:	e0fffd17 	ldw	r3,-12(fp)
   43ab4:	18c002c4 	addi	r3,r3,11
   43ab8:	18c00003 	ldbu	r3,0(r3)
   43abc:	18c03fcc 	andi	r3,r3,255
   43ac0:	180b883a 	mov	r5,r3
   43ac4:	010000c4 	movi	r4,3
   43ac8:	103ee83a 	callr	r2
                    }
                    else
                        return;
                    //  接受到设置后, 从E2PROM里读出之前的设置数据
                    alarm_region.read_from_rom(&alarm_region, alarm_region.select * 3 + 0);
   43acc:	008001b4 	movhi	r2,6
   43ad0:	10a4c504 	addi	r2,r2,-27884
   43ad4:	1181c117 	ldw	r6,1796(r2)
   43ad8:	008001b4 	movhi	r2,6
   43adc:	10a4c504 	addi	r2,r2,-27884
   43ae0:	10c1bd17 	ldw	r3,1780(r2)
   43ae4:	1805883a 	mov	r2,r3
   43ae8:	1085883a 	add	r2,r2,r2
   43aec:	10c5883a 	add	r2,r2,r3
   43af0:	100b883a 	mov	r5,r2
   43af4:	010001b4 	movhi	r4,6
   43af8:	2124c504 	addi	r4,r4,-27884
   43afc:	303ee83a 	callr	r6
                    alarm_region.read_from_rom(&alarm_region, alarm_region.select * 3 + 1);
   43b00:	008001b4 	movhi	r2,6
   43b04:	10a4c504 	addi	r2,r2,-27884
   43b08:	1181c117 	ldw	r6,1796(r2)
   43b0c:	008001b4 	movhi	r2,6
   43b10:	10a4c504 	addi	r2,r2,-27884
   43b14:	10c1bd17 	ldw	r3,1780(r2)
   43b18:	1805883a 	mov	r2,r3
   43b1c:	1085883a 	add	r2,r2,r2
   43b20:	10c5883a 	add	r2,r2,r3
   43b24:	10800044 	addi	r2,r2,1
   43b28:	100b883a 	mov	r5,r2
   43b2c:	010001b4 	movhi	r4,6
   43b30:	2124c504 	addi	r4,r4,-27884
   43b34:	303ee83a 	callr	r6
                    alarm_region.read_from_rom(&alarm_region, alarm_region.select * 3 + 2);
   43b38:	008001b4 	movhi	r2,6
   43b3c:	10a4c504 	addi	r2,r2,-27884
   43b40:	1181c117 	ldw	r6,1796(r2)
   43b44:	008001b4 	movhi	r2,6
   43b48:	10a4c504 	addi	r2,r2,-27884
   43b4c:	10c1bd17 	ldw	r3,1780(r2)
   43b50:	1805883a 	mov	r2,r3
   43b54:	1085883a 	add	r2,r2,r2
   43b58:	10c5883a 	add	r2,r2,r3
   43b5c:	10800084 	addi	r2,r2,2
   43b60:	100b883a 	mov	r5,r2
   43b64:	010001b4 	movhi	r4,6
   43b68:	2124c504 	addi	r4,r4,-27884
   43b6c:	303ee83a 	callr	r6
                    break;
   43b70:	00045106 	br	44cb8 <pc2dev_parse+0x1668>
                case PC_READ_ALARM_REGION:
                    if(para <= 15)
   43b74:	e0bff817 	ldw	r2,-32(fp)
   43b78:	10800428 	cmpgeui	r2,r2,16
   43b7c:	1004131e 	bne	r2,zero,44bcc <pc2dev_parse+0x157c>
                    {
                        nios2pc.command  = NIOS_UP_ALARM_REGION;
   43b80:	008001b4 	movhi	r2,6
   43b84:	10a4c004 	addi	r2,r2,-27904
   43b88:	00d40044 	movi	r3,20481
   43b8c:	10c00115 	stw	r3,4(r2)
                        nios2pc.data_len = 4;
   43b90:	008001b4 	movhi	r2,6
   43b94:	10a4c004 	addi	r2,r2,-27904
   43b98:	00c00104 	movi	r3,4
   43b9c:	10c00215 	stw	r3,8(r2)
                        send_len         = pc2dev_packet(&nios2pc, send_buffer);
   43ba0:	014001b4 	movhi	r5,6
   43ba4:	29471504 	addi	r5,r5,7252
   43ba8:	010001b4 	movhi	r4,6
   43bac:	2124c004 	addi	r4,r4,-27904
   43bb0:	0044d140 	call	44d14 <pc2dev_packet>
   43bb4:	e0bff915 	stw	r2,-28(fp)
                        send(s, send_buffer, send_len);
   43bb8:	e0fffc03 	ldbu	r3,-16(fp)
   43bbc:	e0bff917 	ldw	r2,-28(fp)
   43bc0:	10bfffcc 	andi	r2,r2,65535
   43bc4:	100d883a 	mov	r6,r2
   43bc8:	014001b4 	movhi	r5,6
   43bcc:	29471504 	addi	r5,r5,7252
   43bd0:	1809883a 	mov	r4,r3
   43bd4:	0046f7c0 	call	46f7c <send>
                    }
                    break;
   43bd8:	0003fc06 	br	44bcc <pc2dev_parse+0x157c>
                case PC_LOAD_REGION_DATA:
                    // 下传区域边界数据,写入E2PROM的时候,同时写入
                    alarm_region.wr_which = buf[8];
   43bdc:	e0bffd17 	ldw	r2,-12(fp)
   43be0:	10c00203 	ldbu	r3,8(r2)
   43be4:	008001b4 	movhi	r2,6
   43be8:	10a4c504 	addi	r2,r2,-27884
   43bec:	10c00105 	stb	r3,4(r2)
                    for(i = 0; i < TARGET_NUMBER * 2; i = i + 2)
   43bf0:	e03ff715 	stw	zero,-36(fp)
   43bf4:	00001c06 	br	43c68 <pc2dev_parse+0x618>
                    {
                        recv_pos                    = (buf[i + 9] << 8) + buf[i + 1 + 9];
   43bf8:	e0bff717 	ldw	r2,-36(fp)
   43bfc:	10800244 	addi	r2,r2,9
   43c00:	e0fffd17 	ldw	r3,-12(fp)
   43c04:	1885883a 	add	r2,r3,r2
   43c08:	10800003 	ldbu	r2,0(r2)
   43c0c:	10803fcc 	andi	r2,r2,255
   43c10:	1004923a 	slli	r2,r2,8
   43c14:	1009883a 	mov	r4,r2
   43c18:	e0bff717 	ldw	r2,-36(fp)
   43c1c:	10800284 	addi	r2,r2,10
   43c20:	e0fffd17 	ldw	r3,-12(fp)
   43c24:	1885883a 	add	r2,r3,r2
   43c28:	10800003 	ldbu	r2,0(r2)
   43c2c:	10803fcc 	andi	r2,r2,255
   43c30:	2085883a 	add	r2,r4,r2
   43c34:	e0bffa0d 	sth	r2,-24(fp)
                        alarm_region.buffer[i >> 1] = recv_pos;
   43c38:	e0bff717 	ldw	r2,-36(fp)
   43c3c:	1007d07a 	srai	r3,r2,1
   43c40:	008001b4 	movhi	r2,6
   43c44:	10a4c504 	addi	r2,r2,-27884
   43c48:	18c01384 	addi	r3,r3,78
   43c4c:	18c7883a 	add	r3,r3,r3
   43c50:	10c5883a 	add	r2,r2,r3
   43c54:	e0fffa0b 	ldhu	r3,-24(fp)
   43c58:	10c0000d 	sth	r3,0(r2)
                    }
                    break;
                case PC_LOAD_REGION_DATA:
                    // 下传区域边界数据,写入E2PROM的时候,同时写入
                    alarm_region.wr_which = buf[8];
                    for(i = 0; i < TARGET_NUMBER * 2; i = i + 2)
   43c5c:	e0bff717 	ldw	r2,-36(fp)
   43c60:	10800084 	addi	r2,r2,2
   43c64:	e0bff715 	stw	r2,-36(fp)
   43c68:	e0bff717 	ldw	r2,-36(fp)
   43c6c:	10819590 	cmplti	r2,r2,1622
   43c70:	103fe11e 	bne	r2,zero,43bf8 <__alt_mem_epcs_flash+0xfffc2bf8>
                    {
                        recv_pos                    = (buf[i + 9] << 8) + buf[i + 1 + 9];
                        alarm_region.buffer[i >> 1] = recv_pos;
                    }
                    // 8+1+TARGET_NUMBER*2 		+ 1 + 102
                    for(i = 0; i < ZENITH_NUMBER; i++)
   43c74:	e03ff715 	stw	zero,-36(fp)
   43c78:	00000f06 	br	43cb8 <pc2dev_parse+0x668>
                    {
                        alarm_region.zenith_save[i] = buf[1631 + i];
   43c7c:	e0bff717 	ldw	r2,-36(fp)
   43c80:	108197c4 	addi	r2,r2,1631
   43c84:	1007883a 	mov	r3,r2
   43c88:	e0bffd17 	ldw	r2,-12(fp)
   43c8c:	10c5883a 	add	r2,r2,r3
   43c90:	10c00003 	ldbu	r3,0(r2)
   43c94:	008001b4 	movhi	r2,6
   43c98:	10a4c504 	addi	r2,r2,-27884
   43c9c:	e13ff717 	ldw	r4,-36(fp)
   43ca0:	1105883a 	add	r2,r2,r4
   43ca4:	10800184 	addi	r2,r2,6
   43ca8:	10c00005 	stb	r3,0(r2)
                    {
                        recv_pos                    = (buf[i + 9] << 8) + buf[i + 1 + 9];
                        alarm_region.buffer[i >> 1] = recv_pos;
                    }
                    // 8+1+TARGET_NUMBER*2 		+ 1 + 102
                    for(i = 0; i < ZENITH_NUMBER; i++)
   43cac:	e0bff717 	ldw	r2,-36(fp)
   43cb0:	10800044 	addi	r2,r2,1
   43cb4:	e0bff715 	stw	r2,-36(fp)
   43cb8:	e0bff717 	ldw	r2,-36(fp)
   43cbc:	108019d0 	cmplti	r2,r2,103
   43cc0:	103fee1e 	bne	r2,zero,43c7c <__alt_mem_epcs_flash+0xfffc2c7c>
                    {
                        alarm_region.zenith_save[i] = buf[1631 + i];
                    }
                    // 异或值暂不读取
                    if(SysPara.update_pos_flag)
   43cc4:	008001b4 	movhi	r2,6
   43cc8:	10a46e04 	addi	r2,r2,-28232
   43ccc:	10800003 	ldbu	r2,0(r2)
   43cd0:	10803fcc 	andi	r2,r2,255
   43cd4:	10001126 	beq	r2,zero,43d1c <pc2dev_parse+0x6cc>
                    {
                        set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, DISABLE);
   43cd8:	018888b4 	movhi	r6,8738
   43cdc:	31888884 	addi	r6,r6,8738
   43ce0:	016c0014 	movui	r5,45056
   43ce4:	d1201604 	addi	r4,gp,-32680
   43ce8:	0042ebc0 	call	42ebc <set_laser_paramter>
                        alarm_region.save2rom(&alarm_region);
   43cec:	008001b4 	movhi	r2,6
   43cf0:	10a4c504 	addi	r2,r2,-27884
   43cf4:	1081bf17 	ldw	r2,1788(r2)
   43cf8:	010001b4 	movhi	r4,6
   43cfc:	2124c504 	addi	r4,r4,-27884
   43d00:	103ee83a 	callr	r2
                        set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, ENABLE);
   43d04:	01844474 	movhi	r6,4369
   43d08:	31844444 	addi	r6,r6,4369
   43d0c:	016c0014 	movui	r5,45056
   43d10:	d1201604 	addi	r4,gp,-32680
   43d14:	0042ebc0 	call	42ebc <set_laser_paramter>
   43d18:	00000606 	br	43d34 <pc2dev_parse+0x6e4>
                    }
                    else
                        alarm_region.save2rom(&alarm_region);
   43d1c:	008001b4 	movhi	r2,6
   43d20:	10a4c504 	addi	r2,r2,-27884
   43d24:	1081bf17 	ldw	r2,1788(r2)
   43d28:	010001b4 	movhi	r4,6
   43d2c:	2124c504 	addi	r4,r4,-27884
   43d30:	103ee83a 	callr	r2
                    // 如果当前开关输入量的值和修改区域的值一样，才去修改FPGA内报警区域值
                    if(alarm_region.change_region_value == alarm_region.wr_which / 3)
   43d34:	008001b4 	movhi	r2,6
   43d38:	10a4c504 	addi	r2,r2,-27884
   43d3c:	140000c3 	ldbu	r16,3(r2)
   43d40:	008001b4 	movhi	r2,6
   43d44:	10a4c504 	addi	r2,r2,-27884
   43d48:	10800103 	ldbu	r2,4(r2)
   43d4c:	10803fcc 	andi	r2,r2,255
   43d50:	014000c4 	movi	r5,3
   43d54:	1009883a 	mov	r4,r2
   43d58:	0048f680 	call	48f68 <__udivsi3>
   43d5c:	80c03fcc 	andi	r3,r16,255
   43d60:	10803fcc 	andi	r2,r2,255
   43d64:	18839b1e 	bne	r3,r2,44bd4 <pc2dev_parse+0x1584>
                        alarm_region.change_region_flag = 0x01;
   43d68:	008001b4 	movhi	r2,6
   43d6c:	10a4c504 	addi	r2,r2,-27884
   43d70:	00c00044 	movi	r3,1
   43d74:	10c00085 	stb	r3,2(r2)
                    break;
   43d78:	00039606 	br	44bd4 <pc2dev_parse+0x1584>
                case PC_REQ_REGION_DATA:
                    alarm_region.rd_which = (unsigned char)para;
   43d7c:	e0bff817 	ldw	r2,-32(fp)
   43d80:	1007883a 	mov	r3,r2
   43d84:	008001b4 	movhi	r2,6
   43d88:	10a4c504 	addi	r2,r2,-27884
   43d8c:	10c00145 	stb	r3,5(r2)
                    nios2pc.command       = NIOS_UP_REGION_DATA;
   43d90:	008001b4 	movhi	r2,6
   43d94:	10a4c004 	addi	r2,r2,-27904
   43d98:	00d40084 	movi	r3,20482
   43d9c:	10c00115 	stw	r3,4(r2)
                    nios2pc.data_len      = 1 + TARGET_NUMBER * 2 + ZENITH_NUMBER;
   43da0:	008001b4 	movhi	r2,6
   43da4:	10a4c004 	addi	r2,r2,-27904
   43da8:	00c1af84 	movi	r3,1726
   43dac:	10c00215 	stw	r3,8(r2)
                    send_len              = pc2dev_packet(&nios2pc, send_buffer);
   43db0:	014001b4 	movhi	r5,6
   43db4:	29471504 	addi	r5,r5,7252
   43db8:	010001b4 	movhi	r4,6
   43dbc:	2124c004 	addi	r4,r4,-27904
   43dc0:	0044d140 	call	44d14 <pc2dev_packet>
   43dc4:	e0bff915 	stw	r2,-28(fp)
                    send(s, send_buffer, send_len);
   43dc8:	e0fffc03 	ldbu	r3,-16(fp)
   43dcc:	e0bff917 	ldw	r2,-28(fp)
   43dd0:	10bfffcc 	andi	r2,r2,65535
   43dd4:	100d883a 	mov	r6,r2
   43dd8:	014001b4 	movhi	r5,6
   43ddc:	29471504 	addi	r5,r5,7252
   43de0:	1809883a 	mov	r4,r3
   43de4:	0046f7c0 	call	46f7c <send>
                    break;
   43de8:	0003b306 	br	44cb8 <pc2dev_parse+0x1668>
                case PC_REQ_RADAR_PARA:  // 请求系统状态参数
                    nios2pc.command  = NIOS_UP_RADAR_PARA;
   43dec:	008001b4 	movhi	r2,6
   43df0:	10a4c004 	addi	r2,r2,-27904
   43df4:	00d40144 	movi	r3,20485
   43df8:	10c00115 	stw	r3,4(r2)
                    nios2pc.data_len = sizeof(SysPara);
   43dfc:	008001b4 	movhi	r2,6
   43e00:	10a4c004 	addi	r2,r2,-27904
   43e04:	00c04b04 	movi	r3,300
   43e08:	10c00215 	stw	r3,8(r2)
                    send_len         = pc2dev_packet(&nios2pc, send_buffer);
   43e0c:	014001b4 	movhi	r5,6
   43e10:	29471504 	addi	r5,r5,7252
   43e14:	010001b4 	movhi	r4,6
   43e18:	2124c004 	addi	r4,r4,-27904
   43e1c:	0044d140 	call	44d14 <pc2dev_packet>
   43e20:	e0bff915 	stw	r2,-28(fp)
                    send(s, send_buffer, send_len);
   43e24:	e0fffc03 	ldbu	r3,-16(fp)
   43e28:	e0bff917 	ldw	r2,-28(fp)
   43e2c:	10bfffcc 	andi	r2,r2,65535
   43e30:	100d883a 	mov	r6,r2
   43e34:	014001b4 	movhi	r5,6
   43e38:	29471504 	addi	r5,r5,7252
   43e3c:	1809883a 	mov	r4,r3
   43e40:	0046f7c0 	call	46f7c <send>

                    set_laser_paramter(&Nios2FPGA_pck, 0xc000, 0xaaaa);
   43e44:	01aaaa94 	movui	r6,43690
   43e48:	01700014 	movui	r5,49152
   43e4c:	d1201604 	addi	r4,gp,-32680
   43e50:	0042ebc0 	call	42ebc <set_laser_paramter>
                    break;
   43e54:	00039806 	br	44cb8 <pc2dev_parse+0x1668>
                case PC_SET_HW_TYPE:
                    SysPara.board_type = para;
   43e58:	008001b4 	movhi	r2,6
   43e5c:	10a46e04 	addi	r2,r2,-28232
   43e60:	e0fff817 	ldw	r3,-32(fp)
   43e64:	10c02c15 	stw	r3,176(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   43e68:	008001b4 	movhi	r2,6
   43e6c:	10a4bc04 	addi	r2,r2,-27920
   43e70:	10800117 	ldw	r2,4(r2)
   43e74:	10bfffcc 	andi	r2,r2,65535
   43e78:	e1bff817 	ldw	r6,-32(fp)
   43e7c:	100b883a 	mov	r5,r2
   43e80:	d1201604 	addi	r4,gp,-32680
   43e84:	0042ebc0 	call	42ebc <set_laser_paramter>
                    break;
   43e88:	00038b06 	br	44cb8 <pc2dev_parse+0x1668>
                case PC_SAVA_SYS_PARA:
                    save_sys_para(&SysPara);
   43e8c:	010001b4 	movhi	r4,6
   43e90:	21246e04 	addi	r4,r4,-28232
   43e94:	0045a200 	call	45a20 <save_sys_para>
                    break;
   43e98:	00038706 	br	44cb8 <pc2dev_parse+0x1668>
                case PC_RESET_NIOS:
                    SysStatus.reset_nios = para;
   43e9c:	e0bff817 	ldw	r2,-32(fp)
   43ea0:	d0a01415 	stw	r2,-32688(gp)
                    break;
   43ea4:	00038406 	br	44cb8 <pc2dev_parse+0x1668>
                case PC_SET_SN:
                    memset(SysPara.dev_sn, 0, sizeof(SysPara.dev_sn));
   43ea8:	01800404 	movi	r6,16
   43eac:	000b883a 	mov	r5,zero
   43eb0:	010001b4 	movhi	r4,6
   43eb4:	2124a604 	addi	r4,r4,-28008
   43eb8:	004916c0 	call	4916c <memset>
                    memcpy(SysPara.dev_sn, &buf[8], sizeof(SysPara.dev_sn));
   43ebc:	e0bffd17 	ldw	r2,-12(fp)
   43ec0:	10c00204 	addi	r3,r2,8
   43ec4:	008001b4 	movhi	r2,6
   43ec8:	10a46e04 	addi	r2,r2,-28232
   43ecc:	10803804 	addi	r2,r2,224
   43ed0:	1809883a 	mov	r4,r3
   43ed4:	00c00404 	movi	r3,16
   43ed8:	180d883a 	mov	r6,r3
   43edc:	200b883a 	mov	r5,r4
   43ee0:	1009883a 	mov	r4,r2
   43ee4:	00490240 	call	49024 <memcpy>
                    break;
   43ee8:	00037306 	br	44cb8 <pc2dev_parse+0x1668>
                case PC_SET_DEV_TYPE:
                    memset(SysPara.dev_type, 0, sizeof(SysPara.dev_type));
   43eec:	01800504 	movi	r6,20
   43ef0:	000b883a 	mov	r5,zero
   43ef4:	010001b4 	movhi	r4,6
   43ef8:	21249c04 	addi	r4,r4,-28048
   43efc:	004916c0 	call	4916c <memset>
                    memcpy(SysPara.dev_type, &buf[8], sizeof(SysPara.dev_type));
   43f00:	e0bffd17 	ldw	r2,-12(fp)
   43f04:	10c00204 	addi	r3,r2,8
   43f08:	008001b4 	movhi	r2,6
   43f0c:	10a46e04 	addi	r2,r2,-28232
   43f10:	10802e04 	addi	r2,r2,184
   43f14:	1809883a 	mov	r4,r3
   43f18:	00c00504 	movi	r3,20
   43f1c:	180d883a 	mov	r6,r3
   43f20:	200b883a 	mov	r5,r4
   43f24:	1009883a 	mov	r4,r2
   43f28:	00490240 	call	49024 <memcpy>
                    break;
   43f2c:	00036206 	br	44cb8 <pc2dev_parse+0x1668>
                case PC_SET_DUST_THRESHOLD:
                    SysPara.dust_threshold = para;
   43f30:	008001b4 	movhi	r2,6
   43f34:	10a46e04 	addi	r2,r2,-28232
   43f38:	e0fff817 	ldw	r3,-32(fp)
   43f3c:	10c04915 	stw	r3,292(r2)
                    break;
   43f40:	00035d06 	br	44cb8 <pc2dev_parse+0x1668>
                case LASER_ENABLE:
                    if((para == ENABLE) || (para == DISABLE))
   43f44:	e0fff817 	ldw	r3,-32(fp)
   43f48:	00844474 	movhi	r2,4369
   43f4c:	10844444 	addi	r2,r2,4369
   43f50:	18800426 	beq	r3,r2,43f64 <pc2dev_parse+0x914>
   43f54:	e0fff817 	ldw	r3,-32(fp)
   43f58:	008888b4 	movhi	r2,8738
   43f5c:	10888884 	addi	r2,r2,8738
   43f60:	18831e1e 	bne	r3,r2,44bdc <pc2dev_parse+0x158c>
                    {
                        SysPara.laser_enable = para;
   43f64:	008001b4 	movhi	r2,6
   43f68:	10a46e04 	addi	r2,r2,-28232
   43f6c:	e0fff817 	ldw	r3,-32(fp)
   43f70:	10c00115 	stw	r3,4(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   43f74:	008001b4 	movhi	r2,6
   43f78:	10a4bc04 	addi	r2,r2,-27920
   43f7c:	10800117 	ldw	r2,4(r2)
   43f80:	10bfffcc 	andi	r2,r2,65535
   43f84:	e1bff817 	ldw	r6,-32(fp)
   43f88:	100b883a 	mov	r5,r2
   43f8c:	d1201604 	addi	r4,gp,-32680
   43f90:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   43f94:	00031106 	br	44bdc <pc2dev_parse+0x158c>
                case LASER_FREQ:
                    SysPara.laser_freq = para;
   43f98:	008001b4 	movhi	r2,6
   43f9c:	10a46e04 	addi	r2,r2,-28232
   43fa0:	e0fff817 	ldw	r3,-32(fp)
   43fa4:	10c00215 	stw	r3,8(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   43fa8:	008001b4 	movhi	r2,6
   43fac:	10a4bc04 	addi	r2,r2,-27920
   43fb0:	10800117 	ldw	r2,4(r2)
   43fb4:	10bfffcc 	andi	r2,r2,65535
   43fb8:	e1bff817 	ldw	r6,-32(fp)
   43fbc:	100b883a 	mov	r5,r2
   43fc0:	d1201604 	addi	r4,gp,-32680
   43fc4:	0042ebc0 	call	42ebc <set_laser_paramter>
                    break;
   43fc8:	00033b06 	br	44cb8 <pc2dev_parse+0x1668>
                case LASER_PULSE_WIDTH:
                    if((para >= 3) && (para <= 10))
   43fcc:	e0bff817 	ldw	r2,-32(fp)
   43fd0:	108000f0 	cmpltui	r2,r2,3
   43fd4:	1003031e 	bne	r2,zero,44be4 <pc2dev_parse+0x1594>
   43fd8:	e0bff817 	ldw	r2,-32(fp)
   43fdc:	108002e8 	cmpgeui	r2,r2,11
   43fe0:	1003001e 	bne	r2,zero,44be4 <pc2dev_parse+0x1594>
                    {
                        SysPara.laser_pulse_width = para;
   43fe4:	008001b4 	movhi	r2,6
   43fe8:	10a46e04 	addi	r2,r2,-28232
   43fec:	e0fff817 	ldw	r3,-32(fp)
   43ff0:	10c00b15 	stw	r3,44(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   43ff4:	008001b4 	movhi	r2,6
   43ff8:	10a4bc04 	addi	r2,r2,-27920
   43ffc:	10800117 	ldw	r2,4(r2)
   44000:	10bfffcc 	andi	r2,r2,65535
   44004:	e1bff817 	ldw	r6,-32(fp)
   44008:	100b883a 	mov	r5,r2
   4400c:	d1201604 	addi	r4,gp,-32680
   44010:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   44014:	0002f306 	br	44be4 <pc2dev_parse+0x1594>
                case LASER_PRESDO:
                    memset(SysPara.laser_presdo, 0, sizeof(SysPara.laser_presdo));
   44018:	01800784 	movi	r6,30
   4401c:	000b883a 	mov	r5,zero
   44020:	010001b4 	movhi	r4,6
   44024:	2124aa04 	addi	r4,r4,-27992
   44028:	004916c0 	call	4916c <memset>
                    memcpy(SysPara.laser_presdo, &buf[8], sizeof(SysPara.laser_presdo));
   4402c:	e0bffd17 	ldw	r2,-12(fp)
   44030:	10c00204 	addi	r3,r2,8
   44034:	008001b4 	movhi	r2,6
   44038:	10a46e04 	addi	r2,r2,-28232
   4403c:	10803c04 	addi	r2,r2,240
   44040:	1809883a 	mov	r4,r3
   44044:	00c00784 	movi	r3,30
   44048:	180d883a 	mov	r6,r3
   4404c:	200b883a 	mov	r5,r4
   44050:	1009883a 	mov	r4,r2
   44054:	00490240 	call	49024 <memcpy>
                    break;
   44058:	00031706 	br	44cb8 <pc2dev_parse+0x1668>
                case LASER_RECV_DELAY:
                    if(para <= 16)
   4405c:	e0bff817 	ldw	r2,-32(fp)
   44060:	10800468 	cmpgeui	r2,r2,17
   44064:	1002e11e 	bne	r2,zero,44bec <pc2dev_parse+0x159c>
                    {
                        SysPara.laser_recv_delay = para;
   44068:	008001b4 	movhi	r2,6
   4406c:	10a46e04 	addi	r2,r2,-28232
   44070:	e0fff817 	ldw	r3,-32(fp)
   44074:	10c00315 	stw	r3,12(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44078:	008001b4 	movhi	r2,6
   4407c:	10a4bc04 	addi	r2,r2,-27920
   44080:	10800117 	ldw	r2,4(r2)
   44084:	10bfffcc 	andi	r2,r2,65535
   44088:	e1bff817 	ldw	r6,-32(fp)
   4408c:	100b883a 	mov	r5,r2
   44090:	d1201604 	addi	r4,gp,-32680
   44094:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   44098:	0002d406 	br	44bec <pc2dev_parse+0x159c>
                case MOTOR_ENABLE:
                    if((para == ENABLE) || (para == DISABLE))
   4409c:	e0fff817 	ldw	r3,-32(fp)
   440a0:	00844474 	movhi	r2,4369
   440a4:	10844444 	addi	r2,r2,4369
   440a8:	18800426 	beq	r3,r2,440bc <pc2dev_parse+0xa6c>
   440ac:	e0fff817 	ldw	r3,-32(fp)
   440b0:	008888b4 	movhi	r2,8738
   440b4:	10888884 	addi	r2,r2,8738
   440b8:	1882ce1e 	bne	r3,r2,44bf4 <pc2dev_parse+0x15a4>
                    {
                        SysPara.motor_enable = para;
   440bc:	008001b4 	movhi	r2,6
   440c0:	10a46e04 	addi	r2,r2,-28232
   440c4:	e0fff817 	ldw	r3,-32(fp)
   440c8:	10c00415 	stw	r3,16(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   440cc:	008001b4 	movhi	r2,6
   440d0:	10a4bc04 	addi	r2,r2,-27920
   440d4:	10800117 	ldw	r2,4(r2)
   440d8:	10bfffcc 	andi	r2,r2,65535
   440dc:	e1bff817 	ldw	r6,-32(fp)
   440e0:	100b883a 	mov	r5,r2
   440e4:	d1201604 	addi	r4,gp,-32680
   440e8:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   440ec:	0002c106 	br	44bf4 <pc2dev_parse+0x15a4>
                case MOTOR_SPEED:
                    if((para >= 8) && (para <= 15))
   440f0:	e0bff817 	ldw	r2,-32(fp)
   440f4:	10800230 	cmpltui	r2,r2,8
   440f8:	1002c01e 	bne	r2,zero,44bfc <pc2dev_parse+0x15ac>
   440fc:	e0bff817 	ldw	r2,-32(fp)
   44100:	10800428 	cmpgeui	r2,r2,16
   44104:	1002bd1e 	bne	r2,zero,44bfc <pc2dev_parse+0x15ac>
                    {
                        SysPara.motor_expect_speed = para;
   44108:	008001b4 	movhi	r2,6
   4410c:	10a46e04 	addi	r2,r2,-28232
   44110:	e0fff817 	ldw	r3,-32(fp)
   44114:	10c00515 	stw	r3,20(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44118:	008001b4 	movhi	r2,6
   4411c:	10a4bc04 	addi	r2,r2,-27920
   44120:	10800117 	ldw	r2,4(r2)
   44124:	10bfffcc 	andi	r2,r2,65535
   44128:	e1bff817 	ldw	r6,-32(fp)
   4412c:	100b883a 	mov	r5,r2
   44130:	d1201604 	addi	r4,gp,-32680
   44134:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   44138:	0002b006 	br	44bfc <pc2dev_parse+0x15ac>
                case ZERO_DISTANCE_REVISE:
                    if(para <= 1024)
   4413c:	e0bff817 	ldw	r2,-32(fp)
   44140:	10810068 	cmpgeui	r2,r2,1025
   44144:	1002af1e 	bne	r2,zero,44c04 <pc2dev_parse+0x15b4>
                    {
                        SysPara.zero_distance_revise = para;
   44148:	008001b4 	movhi	r2,6
   4414c:	10a46e04 	addi	r2,r2,-28232
   44150:	e0fff817 	ldw	r3,-32(fp)
   44154:	10c00615 	stw	r3,24(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44158:	008001b4 	movhi	r2,6
   4415c:	10a4bc04 	addi	r2,r2,-27920
   44160:	10800117 	ldw	r2,4(r2)
   44164:	10bfffcc 	andi	r2,r2,65535
   44168:	e1bff817 	ldw	r6,-32(fp)
   4416c:	100b883a 	mov	r5,r2
   44170:	d1201604 	addi	r4,gp,-32680
   44174:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   44178:	0002a206 	br	44c04 <pc2dev_parse+0x15b4>
                case ZERO_ANGLE_REVISE:
                    if((para >= 2) && (para <= 240))
   4417c:	e0bff817 	ldw	r2,-32(fp)
   44180:	108000b0 	cmpltui	r2,r2,2
   44184:	1002a11e 	bne	r2,zero,44c0c <pc2dev_parse+0x15bc>
   44188:	e0bff817 	ldw	r2,-32(fp)
   4418c:	10803c68 	cmpgeui	r2,r2,241
   44190:	10029e1e 	bne	r2,zero,44c0c <pc2dev_parse+0x15bc>
                    {
                        SysPara.zero_angle_revise = para;
   44194:	008001b4 	movhi	r2,6
   44198:	10a46e04 	addi	r2,r2,-28232
   4419c:	e0fff817 	ldw	r3,-32(fp)
   441a0:	10c00715 	stw	r3,28(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   441a4:	008001b4 	movhi	r2,6
   441a8:	10a4bc04 	addi	r2,r2,-27920
   441ac:	10800117 	ldw	r2,4(r2)
   441b0:	10bfffcc 	andi	r2,r2,65535
   441b4:	e1bff817 	ldw	r6,-32(fp)
   441b8:	100b883a 	mov	r5,r2
   441bc:	d1201604 	addi	r4,gp,-32680
   441c0:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   441c4:	00029106 	br	44c0c <pc2dev_parse+0x15bc>
                case GRAY_DISTANCE_REVISE1:
                    SysPara.gray_distance_revise1 = para;
   441c8:	008001b4 	movhi	r2,6
   441cc:	10a46e04 	addi	r2,r2,-28232
   441d0:	e0fff817 	ldw	r3,-32(fp)
   441d4:	10c00815 	stw	r3,32(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   441d8:	008001b4 	movhi	r2,6
   441dc:	10a4bc04 	addi	r2,r2,-27920
   441e0:	10800117 	ldw	r2,4(r2)
   441e4:	10bfffcc 	andi	r2,r2,65535
   441e8:	e1bff817 	ldw	r6,-32(fp)
   441ec:	100b883a 	mov	r5,r2
   441f0:	d1201604 	addi	r4,gp,-32680
   441f4:	0042ebc0 	call	42ebc <set_laser_paramter>
                    break;
   441f8:	0002af06 	br	44cb8 <pc2dev_parse+0x1668>
                case GRAY_DISTANCE_REVISE2:
                    SysPara.gray_distance_revise2 = para;
   441fc:	008001b4 	movhi	r2,6
   44200:	10a46e04 	addi	r2,r2,-28232
   44204:	e0fff817 	ldw	r3,-32(fp)
   44208:	10c00915 	stw	r3,36(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   4420c:	008001b4 	movhi	r2,6
   44210:	10a4bc04 	addi	r2,r2,-27920
   44214:	10800117 	ldw	r2,4(r2)
   44218:	10bfffcc 	andi	r2,r2,65535
   4421c:	e1bff817 	ldw	r6,-32(fp)
   44220:	100b883a 	mov	r5,r2
   44224:	d1201604 	addi	r4,gp,-32680
   44228:	0042ebc0 	call	42ebc <set_laser_paramter>
                    break;
   4422c:	0002a206 	br	44cb8 <pc2dev_parse+0x1668>
                case GRAY_DISTANCE_REVISE3:
                    SysPara.gray_distance_revise3 = para;
   44230:	008001b4 	movhi	r2,6
   44234:	10a46e04 	addi	r2,r2,-28232
   44238:	e0fff817 	ldw	r3,-32(fp)
   4423c:	10c00a15 	stw	r3,40(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44240:	008001b4 	movhi	r2,6
   44244:	10a4bc04 	addi	r2,r2,-27920
   44248:	10800117 	ldw	r2,4(r2)
   4424c:	10bfffcc 	andi	r2,r2,65535
   44250:	e1bff817 	ldw	r6,-32(fp)
   44254:	100b883a 	mov	r5,r2
   44258:	d1201604 	addi	r4,gp,-32680
   4425c:	0042ebc0 	call	42ebc <set_laser_paramter>
                    break;
   44260:	00029506 	br	44cb8 <pc2dev_parse+0x1668>
                case GRAY_DISTANCE_REVISE4:
                    SysPara.gray_distance_revise4 = para;
   44264:	008001b4 	movhi	r2,6
   44268:	10a46e04 	addi	r2,r2,-28232
   4426c:	e0fff817 	ldw	r3,-32(fp)
   44270:	10c04715 	stw	r3,284(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44274:	008001b4 	movhi	r2,6
   44278:	10a4bc04 	addi	r2,r2,-27920
   4427c:	10800117 	ldw	r2,4(r2)
   44280:	10bfffcc 	andi	r2,r2,65535
   44284:	e1bff817 	ldw	r6,-32(fp)
   44288:	100b883a 	mov	r5,r2
   4428c:	d1201604 	addi	r4,gp,-32680
   44290:	0042ebc0 	call	42ebc <set_laser_paramter>
                    break;
   44294:	00028806 	br	44cb8 <pc2dev_parse+0x1668>
                case GRAY_DISTANCE_REVISE5:
                    SysPara.gray_distance_revise5 = para;
   44298:	008001b4 	movhi	r2,6
   4429c:	10a46e04 	addi	r2,r2,-28232
   442a0:	e0fff817 	ldw	r3,-32(fp)
   442a4:	10c04815 	stw	r3,288(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   442a8:	008001b4 	movhi	r2,6
   442ac:	10a4bc04 	addi	r2,r2,-27920
   442b0:	10800117 	ldw	r2,4(r2)
   442b4:	10bfffcc 	andi	r2,r2,65535
   442b8:	e1bff817 	ldw	r6,-32(fp)
   442bc:	100b883a 	mov	r5,r2
   442c0:	d1201604 	addi	r4,gp,-32680
   442c4:	0042ebc0 	call	42ebc <set_laser_paramter>
                    break;
   442c8:	00027b06 	br	44cb8 <pc2dev_parse+0x1668>
                case GRAY_INFLECTION1:
                    SysPara.gray_inflection1 = para;
   442cc:	008001b4 	movhi	r2,6
   442d0:	10a46e04 	addi	r2,r2,-28232
   442d4:	e0fff817 	ldw	r3,-32(fp)
   442d8:	10c01015 	stw	r3,64(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   442dc:	008001b4 	movhi	r2,6
   442e0:	10a4bc04 	addi	r2,r2,-27920
   442e4:	10800117 	ldw	r2,4(r2)
   442e8:	10bfffcc 	andi	r2,r2,65535
   442ec:	e1bff817 	ldw	r6,-32(fp)
   442f0:	100b883a 	mov	r5,r2
   442f4:	d1201604 	addi	r4,gp,-32680
   442f8:	0042ebc0 	call	42ebc <set_laser_paramter>
                    break;
   442fc:	00026e06 	br	44cb8 <pc2dev_parse+0x1668>
                case GRAY_INFLECTION2:
                    SysPara.gray_inflection2 = para;
   44300:	008001b4 	movhi	r2,6
   44304:	10a46e04 	addi	r2,r2,-28232
   44308:	e0fff817 	ldw	r3,-32(fp)
   4430c:	10c01115 	stw	r3,68(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44310:	008001b4 	movhi	r2,6
   44314:	10a4bc04 	addi	r2,r2,-27920
   44318:	10800117 	ldw	r2,4(r2)
   4431c:	10bfffcc 	andi	r2,r2,65535
   44320:	e1bff817 	ldw	r6,-32(fp)
   44324:	100b883a 	mov	r5,r2
   44328:	d1201604 	addi	r4,gp,-32680
   4432c:	0042ebc0 	call	42ebc <set_laser_paramter>
                    break;
   44330:	00026106 	br	44cb8 <pc2dev_parse+0x1668>
                case GRAY_INFLECTION3:
                    SysPara.gray_inflection3 = para;
   44334:	008001b4 	movhi	r2,6
   44338:	10a46e04 	addi	r2,r2,-28232
   4433c:	e0fff817 	ldw	r3,-32(fp)
   44340:	10c04515 	stw	r3,276(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44344:	008001b4 	movhi	r2,6
   44348:	10a4bc04 	addi	r2,r2,-27920
   4434c:	10800117 	ldw	r2,4(r2)
   44350:	10bfffcc 	andi	r2,r2,65535
   44354:	e1bff817 	ldw	r6,-32(fp)
   44358:	100b883a 	mov	r5,r2
   4435c:	d1201604 	addi	r4,gp,-32680
   44360:	0042ebc0 	call	42ebc <set_laser_paramter>
                    break;
   44364:	00025406 	br	44cb8 <pc2dev_parse+0x1668>
                case GRAY_INFLECTION4:
                    SysPara.gray_inflection4 = para;
   44368:	008001b4 	movhi	r2,6
   4436c:	10a46e04 	addi	r2,r2,-28232
   44370:	e0fff817 	ldw	r3,-32(fp)
   44374:	10c04615 	stw	r3,280(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44378:	008001b4 	movhi	r2,6
   4437c:	10a4bc04 	addi	r2,r2,-27920
   44380:	10800117 	ldw	r2,4(r2)
   44384:	10bfffcc 	andi	r2,r2,65535
   44388:	e1bff817 	ldw	r6,-32(fp)
   4438c:	100b883a 	mov	r5,r2
   44390:	d1201604 	addi	r4,gp,-32680
   44394:	0042ebc0 	call	42ebc <set_laser_paramter>
                    break;
   44398:	00024706 	br	44cb8 <pc2dev_parse+0x1668>
                case NOISE_DIFF_SETTING1:
                    SysPara.noise_diff_setting1 = para;
   4439c:	008001b4 	movhi	r2,6
   443a0:	10a46e04 	addi	r2,r2,-28232
   443a4:	e0fff817 	ldw	r3,-32(fp)
   443a8:	10c00d15 	stw	r3,52(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   443ac:	008001b4 	movhi	r2,6
   443b0:	10a4bc04 	addi	r2,r2,-27920
   443b4:	10800117 	ldw	r2,4(r2)
   443b8:	10bfffcc 	andi	r2,r2,65535
   443bc:	e1bff817 	ldw	r6,-32(fp)
   443c0:	100b883a 	mov	r5,r2
   443c4:	d1201604 	addi	r4,gp,-32680
   443c8:	0042ebc0 	call	42ebc <set_laser_paramter>
                    break;
   443cc:	00023a06 	br	44cb8 <pc2dev_parse+0x1668>
                case NOISE_DIFF_SETTING2:
                    SysPara.noise_diff_setting2 = para;
   443d0:	008001b4 	movhi	r2,6
   443d4:	10a46e04 	addi	r2,r2,-28232
   443d8:	e0fff817 	ldw	r3,-32(fp)
   443dc:	10c00e15 	stw	r3,56(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   443e0:	008001b4 	movhi	r2,6
   443e4:	10a4bc04 	addi	r2,r2,-27920
   443e8:	10800117 	ldw	r2,4(r2)
   443ec:	10bfffcc 	andi	r2,r2,65535
   443f0:	e1bff817 	ldw	r6,-32(fp)
   443f4:	100b883a 	mov	r5,r2
   443f8:	d1201604 	addi	r4,gp,-32680
   443fc:	0042ebc0 	call	42ebc <set_laser_paramter>
                    break;
   44400:	00022d06 	br	44cb8 <pc2dev_parse+0x1668>

                case SIGNAL_THRESHOLD:
                    if(para <= 1024)
   44404:	e0bff817 	ldw	r2,-32(fp)
   44408:	10810068 	cmpgeui	r2,r2,1025
   4440c:	1002011e 	bne	r2,zero,44c14 <pc2dev_parse+0x15c4>
                    {
                        SysPara.signal_thresold = para;
   44410:	008001b4 	movhi	r2,6
   44414:	10a46e04 	addi	r2,r2,-28232
   44418:	e0fff817 	ldw	r3,-32(fp)
   4441c:	10c00c15 	stw	r3,48(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44420:	008001b4 	movhi	r2,6
   44424:	10a4bc04 	addi	r2,r2,-27920
   44428:	10800117 	ldw	r2,4(r2)
   4442c:	10bfffcc 	andi	r2,r2,65535
   44430:	e1bff817 	ldw	r6,-32(fp)
   44434:	100b883a 	mov	r5,r2
   44438:	d1201604 	addi	r4,gp,-32680
   4443c:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   44440:	0001f406 	br	44c14 <pc2dev_parse+0x15c4>
                case APD_VOL_SETTING:
                    if((para & 0x3f) <= 1024)
   44444:	e0bff817 	ldw	r2,-32(fp)
   44448:	10800fcc 	andi	r2,r2,63
   4444c:	10810068 	cmpgeui	r2,r2,1025
   44450:	1001f21e 	bne	r2,zero,44c1c <pc2dev_parse+0x15cc>
                    {
                        if((para >> 15 & 0x01) == 0x01)
   44454:	e0bff817 	ldw	r2,-32(fp)
   44458:	10a0000c 	andi	r2,r2,32768
   4445c:	10000526 	beq	r2,zero,44474 <pc2dev_parse+0xe24>
                            SysPara.signal_thresold = para;
   44460:	008001b4 	movhi	r2,6
   44464:	10a46e04 	addi	r2,r2,-28232
   44468:	e0fff817 	ldw	r3,-32(fp)
   4446c:	10c00c15 	stw	r3,48(r2)
   44470:	00000406 	br	44484 <pc2dev_parse+0xe34>
                        else
                            SysPara.apd_vol_base = para;
   44474:	008001b4 	movhi	r2,6
   44478:	10a46e04 	addi	r2,r2,-28232
   4447c:	e0fff817 	ldw	r3,-32(fp)
   44480:	10c00f15 	stw	r3,60(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44484:	008001b4 	movhi	r2,6
   44488:	10a4bc04 	addi	r2,r2,-27920
   4448c:	10800117 	ldw	r2,4(r2)
   44490:	10bfffcc 	andi	r2,r2,65535
   44494:	e1bff817 	ldw	r6,-32(fp)
   44498:	100b883a 	mov	r5,r2
   4449c:	d1201604 	addi	r4,gp,-32680
   444a0:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   444a4:	0001dd06 	br	44c1c <pc2dev_parse+0x15cc>
                case TEMP_VOL_COF1:
                    if((para >= 20) && (para <= 45))
   444a8:	e0bff817 	ldw	r2,-32(fp)
   444ac:	10800530 	cmpltui	r2,r2,20
   444b0:	1001dc1e 	bne	r2,zero,44c24 <pc2dev_parse+0x15d4>
   444b4:	e0bff817 	ldw	r2,-32(fp)
   444b8:	10800ba8 	cmpgeui	r2,r2,46
   444bc:	1001d91e 	bne	r2,zero,44c24 <pc2dev_parse+0x15d4>
                    {
                        SysPara.temp_volt_cof1 = para;
   444c0:	008001b4 	movhi	r2,6
   444c4:	10a46e04 	addi	r2,r2,-28232
   444c8:	e0fff817 	ldw	r3,-32(fp)
   444cc:	10c01715 	stw	r3,92(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   444d0:	008001b4 	movhi	r2,6
   444d4:	10a4bc04 	addi	r2,r2,-27920
   444d8:	10800117 	ldw	r2,4(r2)
   444dc:	10bfffcc 	andi	r2,r2,65535
   444e0:	e1bff817 	ldw	r6,-32(fp)
   444e4:	100b883a 	mov	r5,r2
   444e8:	d1201604 	addi	r4,gp,-32680
   444ec:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   444f0:	0001cc06 	br	44c24 <pc2dev_parse+0x15d4>
                case TEMP_VOL_COF2:
                    if((para >= 20) && (para <= 45))
   444f4:	e0bff817 	ldw	r2,-32(fp)
   444f8:	10800530 	cmpltui	r2,r2,20
   444fc:	1001cb1e 	bne	r2,zero,44c2c <pc2dev_parse+0x15dc>
   44500:	e0bff817 	ldw	r2,-32(fp)
   44504:	10800ba8 	cmpgeui	r2,r2,46
   44508:	1001c81e 	bne	r2,zero,44c2c <pc2dev_parse+0x15dc>
                    {
                        SysPara.temp_volt_cof2 = para;
   4450c:	008001b4 	movhi	r2,6
   44510:	10a46e04 	addi	r2,r2,-28232
   44514:	e0fff817 	ldw	r3,-32(fp)
   44518:	10c01815 	stw	r3,96(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   4451c:	008001b4 	movhi	r2,6
   44520:	10a4bc04 	addi	r2,r2,-27920
   44524:	10800117 	ldw	r2,4(r2)
   44528:	10bfffcc 	andi	r2,r2,65535
   4452c:	e1bff817 	ldw	r6,-32(fp)
   44530:	100b883a 	mov	r5,r2
   44534:	d1201604 	addi	r4,gp,-32680
   44538:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   4453c:	0001bb06 	br	44c2c <pc2dev_parse+0x15dc>
                case TEMP_VOL_INFLECTION:
                    if(para <= 50)
   44540:	e0bff817 	ldw	r2,-32(fp)
   44544:	10800ce8 	cmpgeui	r2,r2,51
   44548:	1001ba1e 	bne	r2,zero,44c34 <pc2dev_parse+0x15e4>
                    {
                        SysPara.temp_volt_inflection = para;
   4454c:	008001b4 	movhi	r2,6
   44550:	10a46e04 	addi	r2,r2,-28232
   44554:	e0fff817 	ldw	r3,-32(fp)
   44558:	10c01915 	stw	r3,100(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   4455c:	008001b4 	movhi	r2,6
   44560:	10a4bc04 	addi	r2,r2,-27920
   44564:	10800117 	ldw	r2,4(r2)
   44568:	10bfffcc 	andi	r2,r2,65535
   4456c:	e1bff817 	ldw	r6,-32(fp)
   44570:	100b883a 	mov	r5,r2
   44574:	d1201604 	addi	r4,gp,-32680
   44578:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   4457c:	0001ad06 	br	44c34 <pc2dev_parse+0x15e4>
                case TEMP_DISTANCE_COF1:
                    if(para <= 128)
   44580:	e0bff817 	ldw	r2,-32(fp)
   44584:	10802068 	cmpgeui	r2,r2,129
   44588:	1001ac1e 	bne	r2,zero,44c3c <pc2dev_parse+0x15ec>
                    {
                        SysPara.temp_distance_cof1 = para;
   4458c:	008001b4 	movhi	r2,6
   44590:	10a46e04 	addi	r2,r2,-28232
   44594:	e0fff817 	ldw	r3,-32(fp)
   44598:	10c01a15 	stw	r3,104(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   4459c:	008001b4 	movhi	r2,6
   445a0:	10a4bc04 	addi	r2,r2,-27920
   445a4:	10800117 	ldw	r2,4(r2)
   445a8:	10bfffcc 	andi	r2,r2,65535
   445ac:	e1bff817 	ldw	r6,-32(fp)
   445b0:	100b883a 	mov	r5,r2
   445b4:	d1201604 	addi	r4,gp,-32680
   445b8:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   445bc:	00019f06 	br	44c3c <pc2dev_parse+0x15ec>

                case TEMP_DISTANCE_COF2:
                    if(para <= 128)
   445c0:	e0bff817 	ldw	r2,-32(fp)
   445c4:	10802068 	cmpgeui	r2,r2,129
   445c8:	10019e1e 	bne	r2,zero,44c44 <pc2dev_parse+0x15f4>
                    {
                        SysPara.temp_distance_cof2 = para;
   445cc:	008001b4 	movhi	r2,6
   445d0:	10a46e04 	addi	r2,r2,-28232
   445d4:	e0fff817 	ldw	r3,-32(fp)
   445d8:	10c01b15 	stw	r3,108(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   445dc:	008001b4 	movhi	r2,6
   445e0:	10a4bc04 	addi	r2,r2,-27920
   445e4:	10800117 	ldw	r2,4(r2)
   445e8:	10bfffcc 	andi	r2,r2,65535
   445ec:	e1bff817 	ldw	r6,-32(fp)
   445f0:	100b883a 	mov	r5,r2
   445f4:	d1201604 	addi	r4,gp,-32680
   445f8:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   445fc:	00019106 	br	44c44 <pc2dev_parse+0x15f4>
                case TEMP_DISTANCE_INFLECTION:
                    if(para <= 60)
   44600:	e0bff817 	ldw	r2,-32(fp)
   44604:	10800f68 	cmpgeui	r2,r2,61
   44608:	1001901e 	bne	r2,zero,44c4c <pc2dev_parse+0x15fc>
                    {
                        SysPara.temp_distance_inflection = para;
   4460c:	e0fff817 	ldw	r3,-32(fp)
   44610:	008001b4 	movhi	r2,6
   44614:	10a46e04 	addi	r2,r2,-28232
   44618:	10c01c15 	stw	r3,112(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   4461c:	008001b4 	movhi	r2,6
   44620:	10a4bc04 	addi	r2,r2,-27920
   44624:	10800117 	ldw	r2,4(r2)
   44628:	10bfffcc 	andi	r2,r2,65535
   4462c:	e1bff817 	ldw	r6,-32(fp)
   44630:	100b883a 	mov	r5,r2
   44634:	d1201604 	addi	r4,gp,-32680
   44638:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   4463c:	00018306 	br	44c4c <pc2dev_parse+0x15fc>
                case VALID_NUM_THRESHOLD:
                    if((para > 1) && (para < 40))
   44640:	e0bff817 	ldw	r2,-32(fp)
   44644:	108000b0 	cmpltui	r2,r2,2
   44648:	1001821e 	bne	r2,zero,44c54 <pc2dev_parse+0x1604>
   4464c:	e0bff817 	ldw	r2,-32(fp)
   44650:	10800a28 	cmpgeui	r2,r2,40
   44654:	10017f1e 	bne	r2,zero,44c54 <pc2dev_parse+0x1604>
                    {
                        SysPara.valid_num_threshold = para;
   44658:	008001b4 	movhi	r2,6
   4465c:	10a46e04 	addi	r2,r2,-28232
   44660:	e0fff817 	ldw	r3,-32(fp)
   44664:	10c04415 	stw	r3,272(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44668:	008001b4 	movhi	r2,6
   4466c:	10a4bc04 	addi	r2,r2,-27920
   44670:	10800117 	ldw	r2,4(r2)
   44674:	10bfffcc 	andi	r2,r2,65535
   44678:	e1bff817 	ldw	r6,-32(fp)
   4467c:	100b883a 	mov	r5,r2
   44680:	d1201604 	addi	r4,gp,-32680
   44684:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   44688:	00017206 	br	44c54 <pc2dev_parse+0x1604>
                case MIN_DISTANCE_VALUE:
                    if(para <= 500)
   4468c:	e0bff817 	ldw	r2,-32(fp)
   44690:	10807d68 	cmpgeui	r2,r2,501
   44694:	1001711e 	bne	r2,zero,44c5c <pc2dev_parse+0x160c>
                    {
                        SysPara.min_display_distance = para;
   44698:	008001b4 	movhi	r2,6
   4469c:	10a46e04 	addi	r2,r2,-28232
   446a0:	e0fff817 	ldw	r3,-32(fp)
   446a4:	10c01215 	stw	r3,72(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   446a8:	008001b4 	movhi	r2,6
   446ac:	10a4bc04 	addi	r2,r2,-27920
   446b0:	10800117 	ldw	r2,4(r2)
   446b4:	10bfffcc 	andi	r2,r2,65535
   446b8:	e1bff817 	ldw	r6,-32(fp)
   446bc:	100b883a 	mov	r5,r2
   446c0:	d1201604 	addi	r4,gp,-32680
   446c4:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   446c8:	00016406 	br	44c5c <pc2dev_parse+0x160c>
                case FIRST_NOISE_FILTER:
                    if((para >= 2) && (para <= 12))
   446cc:	e0bff817 	ldw	r2,-32(fp)
   446d0:	108000b0 	cmpltui	r2,r2,2
   446d4:	1001631e 	bne	r2,zero,44c64 <pc2dev_parse+0x1614>
   446d8:	e0bff817 	ldw	r2,-32(fp)
   446dc:	10800368 	cmpgeui	r2,r2,13
   446e0:	1001601e 	bne	r2,zero,44c64 <pc2dev_parse+0x1614>
                    {
                        SysPara.first_noise_filter = para;
   446e4:	008001b4 	movhi	r2,6
   446e8:	10a46e04 	addi	r2,r2,-28232
   446ec:	e0fff817 	ldw	r3,-32(fp)
   446f0:	10c01415 	stw	r3,80(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   446f4:	008001b4 	movhi	r2,6
   446f8:	10a4bc04 	addi	r2,r2,-27920
   446fc:	10800117 	ldw	r2,4(r2)
   44700:	10bfffcc 	andi	r2,r2,65535
   44704:	e1bff817 	ldw	r6,-32(fp)
   44708:	100b883a 	mov	r5,r2
   4470c:	d1201604 	addi	r4,gp,-32680
   44710:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   44714:	00015306 	br	44c64 <pc2dev_parse+0x1614>
                case DUST_ALARM_THRESHOLD:
                    if(para <= 100)
   44718:	e0bff817 	ldw	r2,-32(fp)
   4471c:	10801968 	cmpgeui	r2,r2,101
   44720:	1001521e 	bne	r2,zero,44c6c <pc2dev_parse+0x161c>
                    {
                        SysPara.dust_alarm_threshold = para;
   44724:	008001b4 	movhi	r2,6
   44728:	10a46e04 	addi	r2,r2,-28232
   4472c:	e0fff817 	ldw	r3,-32(fp)
   44730:	10c02215 	stw	r3,136(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44734:	008001b4 	movhi	r2,6
   44738:	10a4bc04 	addi	r2,r2,-27920
   4473c:	10800117 	ldw	r2,4(r2)
   44740:	10bfffcc 	andi	r2,r2,65535
   44744:	e1bff817 	ldw	r6,-32(fp)
   44748:	100b883a 	mov	r5,r2
   4474c:	d1201604 	addi	r4,gp,-32680
   44750:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   44754:	00014506 	br	44c6c <pc2dev_parse+0x161c>

                case DA_CYCLE_PARA1:
                    if(para <= 1023)
   44758:	e0bff817 	ldw	r2,-32(fp)
   4475c:	10810028 	cmpgeui	r2,r2,1024
   44760:	1001441e 	bne	r2,zero,44c74 <pc2dev_parse+0x1624>
                    {
                        SysPara.da_cycle_para1 = para;
   44764:	008001b4 	movhi	r2,6
   44768:	10a46e04 	addi	r2,r2,-28232
   4476c:	e0fff817 	ldw	r3,-32(fp)
   44770:	10c02315 	stw	r3,140(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44774:	008001b4 	movhi	r2,6
   44778:	10a4bc04 	addi	r2,r2,-27920
   4477c:	10800117 	ldw	r2,4(r2)
   44780:	10bfffcc 	andi	r2,r2,65535
   44784:	e1bff817 	ldw	r6,-32(fp)
   44788:	100b883a 	mov	r5,r2
   4478c:	d1201604 	addi	r4,gp,-32680
   44790:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   44794:	00013706 	br	44c74 <pc2dev_parse+0x1624>
                case DA_CYCLE_PARA2:
                    if(para <= 1023)
   44798:	e0bff817 	ldw	r2,-32(fp)
   4479c:	10810028 	cmpgeui	r2,r2,1024
   447a0:	1001361e 	bne	r2,zero,44c7c <pc2dev_parse+0x162c>
                    {
                        SysPara.da_cycle_para2 = para;
   447a4:	008001b4 	movhi	r2,6
   447a8:	10a46e04 	addi	r2,r2,-28232
   447ac:	e0fff817 	ldw	r3,-32(fp)
   447b0:	10c02415 	stw	r3,144(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   447b4:	008001b4 	movhi	r2,6
   447b8:	10a4bc04 	addi	r2,r2,-27920
   447bc:	10800117 	ldw	r2,4(r2)
   447c0:	10bfffcc 	andi	r2,r2,65535
   447c4:	e1bff817 	ldw	r6,-32(fp)
   447c8:	100b883a 	mov	r5,r2
   447cc:	d1201604 	addi	r4,gp,-32680
   447d0:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   447d4:	00012906 	br	44c7c <pc2dev_parse+0x162c>
                case DA_CYCLE_PARA3:
                    if(para <= 1023)
   447d8:	e0bff817 	ldw	r2,-32(fp)
   447dc:	10810028 	cmpgeui	r2,r2,1024
   447e0:	1001281e 	bne	r2,zero,44c84 <pc2dev_parse+0x1634>
                    {
                        SysPara.da_cycle_para3 = para;
   447e4:	008001b4 	movhi	r2,6
   447e8:	10a46e04 	addi	r2,r2,-28232
   447ec:	e0fff817 	ldw	r3,-32(fp)
   447f0:	10c02515 	stw	r3,148(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   447f4:	008001b4 	movhi	r2,6
   447f8:	10a4bc04 	addi	r2,r2,-27920
   447fc:	10800117 	ldw	r2,4(r2)
   44800:	10bfffcc 	andi	r2,r2,65535
   44804:	e1bff817 	ldw	r6,-32(fp)
   44808:	100b883a 	mov	r5,r2
   4480c:	d1201604 	addi	r4,gp,-32680
   44810:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   44814:	00011b06 	br	44c84 <pc2dev_parse+0x1634>
                case DA_CYCLE_PARA4:
                    if(para <= 1023)
   44818:	e0bff817 	ldw	r2,-32(fp)
   4481c:	10810028 	cmpgeui	r2,r2,1024
   44820:	10011a1e 	bne	r2,zero,44c8c <pc2dev_parse+0x163c>
                    {
                        SysPara.da_cycle_para4 = para;
   44824:	008001b4 	movhi	r2,6
   44828:	10a46e04 	addi	r2,r2,-28232
   4482c:	e0fff817 	ldw	r3,-32(fp)
   44830:	10c02615 	stw	r3,152(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44834:	008001b4 	movhi	r2,6
   44838:	10a4bc04 	addi	r2,r2,-27920
   4483c:	10800117 	ldw	r2,4(r2)
   44840:	10bfffcc 	andi	r2,r2,65535
   44844:	e1bff817 	ldw	r6,-32(fp)
   44848:	100b883a 	mov	r5,r2
   4484c:	d1201604 	addi	r4,gp,-32680
   44850:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   44854:	00010d06 	br	44c8c <pc2dev_parse+0x163c>
                case DA_CYCLE_PARA5:
                    if(para <= 1023)
   44858:	e0bff817 	ldw	r2,-32(fp)
   4485c:	10810028 	cmpgeui	r2,r2,1024
   44860:	10010c1e 	bne	r2,zero,44c94 <pc2dev_parse+0x1644>
                    {
                        SysPara.da_cycle_para5 = para;
   44864:	008001b4 	movhi	r2,6
   44868:	10a46e04 	addi	r2,r2,-28232
   4486c:	e0fff817 	ldw	r3,-32(fp)
   44870:	10c02715 	stw	r3,156(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44874:	008001b4 	movhi	r2,6
   44878:	10a4bc04 	addi	r2,r2,-27920
   4487c:	10800117 	ldw	r2,4(r2)
   44880:	10bfffcc 	andi	r2,r2,65535
   44884:	e1bff817 	ldw	r6,-32(fp)
   44888:	100b883a 	mov	r5,r2
   4488c:	d1201604 	addi	r4,gp,-32680
   44890:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   44894:	0000ff06 	br	44c94 <pc2dev_parse+0x1644>
                case DA_CYCLE_PARA6:
                    if(para <= 1023)
   44898:	e0bff817 	ldw	r2,-32(fp)
   4489c:	10810028 	cmpgeui	r2,r2,1024
   448a0:	1000fe1e 	bne	r2,zero,44c9c <pc2dev_parse+0x164c>
                    {
                        SysPara.da_cycle_para6 = para;
   448a4:	008001b4 	movhi	r2,6
   448a8:	10a46e04 	addi	r2,r2,-28232
   448ac:	e0fff817 	ldw	r3,-32(fp)
   448b0:	10c02815 	stw	r3,160(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   448b4:	008001b4 	movhi	r2,6
   448b8:	10a4bc04 	addi	r2,r2,-27920
   448bc:	10800117 	ldw	r2,4(r2)
   448c0:	10bfffcc 	andi	r2,r2,65535
   448c4:	e1bff817 	ldw	r6,-32(fp)
   448c8:	100b883a 	mov	r5,r2
   448cc:	d1201604 	addi	r4,gp,-32680
   448d0:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   448d4:	0000f106 	br	44c9c <pc2dev_parse+0x164c>
                case DA_CYCLE_PARA7:
                    if(para <= 1023)
   448d8:	e0bff817 	ldw	r2,-32(fp)
   448dc:	10810028 	cmpgeui	r2,r2,1024
   448e0:	1000f01e 	bne	r2,zero,44ca4 <pc2dev_parse+0x1654>
                    {
                        SysPara.da_cycle_para7 = para;
   448e4:	008001b4 	movhi	r2,6
   448e8:	10a46e04 	addi	r2,r2,-28232
   448ec:	e0fff817 	ldw	r3,-32(fp)
   448f0:	10c02915 	stw	r3,164(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   448f4:	008001b4 	movhi	r2,6
   448f8:	10a4bc04 	addi	r2,r2,-27920
   448fc:	10800117 	ldw	r2,4(r2)
   44900:	10bfffcc 	andi	r2,r2,65535
   44904:	e1bff817 	ldw	r6,-32(fp)
   44908:	100b883a 	mov	r5,r2
   4490c:	d1201604 	addi	r4,gp,-32680
   44910:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   44914:	0000e306 	br	44ca4 <pc2dev_parse+0x1654>
                case DA_CYCLE_PARA8:
                    if(para <= 1023)
   44918:	e0bff817 	ldw	r2,-32(fp)
   4491c:	10810028 	cmpgeui	r2,r2,1024
   44920:	1000e21e 	bne	r2,zero,44cac <pc2dev_parse+0x165c>
                    {
                        SysPara.da_cycle_para8 = para;
   44924:	008001b4 	movhi	r2,6
   44928:	10a46e04 	addi	r2,r2,-28232
   4492c:	e0fff817 	ldw	r3,-32(fp)
   44930:	10c02a15 	stw	r3,168(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44934:	008001b4 	movhi	r2,6
   44938:	10a4bc04 	addi	r2,r2,-27920
   4493c:	10800117 	ldw	r2,4(r2)
   44940:	10bfffcc 	andi	r2,r2,65535
   44944:	e1bff817 	ldw	r6,-32(fp)
   44948:	100b883a 	mov	r5,r2
   4494c:	d1201604 	addi	r4,gp,-32680
   44950:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   44954:	0000d506 	br	44cac <pc2dev_parse+0x165c>
                case DA_CYCLE_PARA9:
                    if(para <= 1023)
   44958:	e0bff817 	ldw	r2,-32(fp)
   4495c:	10810028 	cmpgeui	r2,r2,1024
   44960:	1000d41e 	bne	r2,zero,44cb4 <pc2dev_parse+0x1664>
                    {
                        SysPara.da_cycle_para9 = para;
   44964:	008001b4 	movhi	r2,6
   44968:	10a46e04 	addi	r2,r2,-28232
   4496c:	e0fff817 	ldw	r3,-32(fp)
   44970:	10c02b15 	stw	r3,172(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44974:	008001b4 	movhi	r2,6
   44978:	10a4bc04 	addi	r2,r2,-27920
   4497c:	10800117 	ldw	r2,4(r2)
   44980:	10bfffcc 	andi	r2,r2,65535
   44984:	e1bff817 	ldw	r6,-32(fp)
   44988:	100b883a 	mov	r5,r2
   4498c:	d1201604 	addi	r4,gp,-32680
   44990:	0042ebc0 	call	42ebc <set_laser_paramter>
                    }
                    break;
   44994:	0000c706 	br	44cb4 <pc2dev_parse+0x1664>

                case PC_REMOTE_UPDATE_WRITE:
                    image.addr = (buf[8] << 24) + (buf[9] << 16) + (buf[10] << 8) + (buf[11]);
   44998:	e0bffd17 	ldw	r2,-12(fp)
   4499c:	10800204 	addi	r2,r2,8
   449a0:	10800003 	ldbu	r2,0(r2)
   449a4:	10803fcc 	andi	r2,r2,255
   449a8:	1006963a 	slli	r3,r2,24
   449ac:	e0bffd17 	ldw	r2,-12(fp)
   449b0:	10800244 	addi	r2,r2,9
   449b4:	10800003 	ldbu	r2,0(r2)
   449b8:	10803fcc 	andi	r2,r2,255
   449bc:	1004943a 	slli	r2,r2,16
   449c0:	1887883a 	add	r3,r3,r2
   449c4:	e0bffd17 	ldw	r2,-12(fp)
   449c8:	10800284 	addi	r2,r2,10
   449cc:	10800003 	ldbu	r2,0(r2)
   449d0:	10803fcc 	andi	r2,r2,255
   449d4:	1004923a 	slli	r2,r2,8
   449d8:	1887883a 	add	r3,r3,r2
   449dc:	e0bffd17 	ldw	r2,-12(fp)
   449e0:	108002c4 	addi	r2,r2,11
   449e4:	10800003 	ldbu	r2,0(r2)
   449e8:	10803fcc 	andi	r2,r2,255
   449ec:	1885883a 	add	r2,r3,r2
   449f0:	1007883a 	mov	r3,r2
   449f4:	008001b4 	movhi	r2,6
   449f8:	108f5504 	addi	r2,r2,15700
   449fc:	10c00015 	stw	r3,0(r2)
                    memcpy(image.data, &buf[12], 256);
   44a00:	e0bffd17 	ldw	r2,-12(fp)
   44a04:	10c00304 	addi	r3,r2,12
   44a08:	008001b4 	movhi	r2,6
   44a0c:	108f5504 	addi	r2,r2,15700
   44a10:	10800104 	addi	r2,r2,4
   44a14:	1809883a 	mov	r4,r3
   44a18:	00c04004 	movi	r3,256
   44a1c:	180d883a 	mov	r6,r3
   44a20:	200b883a 	mov	r5,r4
   44a24:	1009883a 	mov	r4,r2
   44a28:	00490240 	call	49024 <memcpy>
                    image_write(image.addr, image.data);
   44a2c:	008001b4 	movhi	r2,6
   44a30:	108f5504 	addi	r2,r2,15700
   44a34:	10800017 	ldw	r2,0(r2)
   44a38:	014001b4 	movhi	r5,6
   44a3c:	294f5604 	addi	r5,r5,15704
   44a40:	1009883a 	mov	r4,r2
   44a44:	0045c5c0 	call	45c5c <image_write>

                    image_read(image.addr, image.data);
   44a48:	008001b4 	movhi	r2,6
   44a4c:	108f5504 	addi	r2,r2,15700
   44a50:	10800017 	ldw	r2,0(r2)
   44a54:	014001b4 	movhi	r5,6
   44a58:	294f5604 	addi	r5,r5,15704
   44a5c:	1009883a 	mov	r4,r2
   44a60:	0045d540 	call	45d54 <image_read>
                    nios2pc.command  = NIOS_REMOTE_WRITE_REPONSE;
   44a64:	008001b4 	movhi	r2,6
   44a68:	10a4c004 	addi	r2,r2,-27904
   44a6c:	00d44004 	movi	r3,20736
   44a70:	10c00115 	stw	r3,4(r2)
                    nios2pc.data_len = 4 + 256;
   44a74:	008001b4 	movhi	r2,6
   44a78:	10a4c004 	addi	r2,r2,-27904
   44a7c:	00c04104 	movi	r3,260
   44a80:	10c00215 	stw	r3,8(r2)
                    send_len         = pc2dev_packet(&nios2pc, send_buffer);
   44a84:	014001b4 	movhi	r5,6
   44a88:	29471504 	addi	r5,r5,7252
   44a8c:	010001b4 	movhi	r4,6
   44a90:	2124c004 	addi	r4,r4,-27904
   44a94:	0044d140 	call	44d14 <pc2dev_packet>
   44a98:	e0bff915 	stw	r2,-28(fp)
                    send(s, send_buffer, send_len);
   44a9c:	e0fffc03 	ldbu	r3,-16(fp)
   44aa0:	e0bff917 	ldw	r2,-28(fp)
   44aa4:	10bfffcc 	andi	r2,r2,65535
   44aa8:	100d883a 	mov	r6,r2
   44aac:	014001b4 	movhi	r5,6
   44ab0:	29471504 	addi	r5,r5,7252
   44ab4:	1809883a 	mov	r4,r3
   44ab8:	0046f7c0 	call	46f7c <send>
                    break;
   44abc:	00007e06 	br	44cb8 <pc2dev_parse+0x1668>
                case PC_REMOTE_UPDATE_READ:
                    image.addr = (buf[8] << 24) + (buf[9] << 16) + (buf[10] << 8) + (buf[11]);
   44ac0:	e0bffd17 	ldw	r2,-12(fp)
   44ac4:	10800204 	addi	r2,r2,8
   44ac8:	10800003 	ldbu	r2,0(r2)
   44acc:	10803fcc 	andi	r2,r2,255
   44ad0:	1006963a 	slli	r3,r2,24
   44ad4:	e0bffd17 	ldw	r2,-12(fp)
   44ad8:	10800244 	addi	r2,r2,9
   44adc:	10800003 	ldbu	r2,0(r2)
   44ae0:	10803fcc 	andi	r2,r2,255
   44ae4:	1004943a 	slli	r2,r2,16
   44ae8:	1887883a 	add	r3,r3,r2
   44aec:	e0bffd17 	ldw	r2,-12(fp)
   44af0:	10800284 	addi	r2,r2,10
   44af4:	10800003 	ldbu	r2,0(r2)
   44af8:	10803fcc 	andi	r2,r2,255
   44afc:	1004923a 	slli	r2,r2,8
   44b00:	1887883a 	add	r3,r3,r2
   44b04:	e0bffd17 	ldw	r2,-12(fp)
   44b08:	108002c4 	addi	r2,r2,11
   44b0c:	10800003 	ldbu	r2,0(r2)
   44b10:	10803fcc 	andi	r2,r2,255
   44b14:	1885883a 	add	r2,r3,r2
   44b18:	1007883a 	mov	r3,r2
   44b1c:	008001b4 	movhi	r2,6
   44b20:	108f5504 	addi	r2,r2,15700
   44b24:	10c00015 	stw	r3,0(r2)
                    image_read(image.addr, image.data);
   44b28:	008001b4 	movhi	r2,6
   44b2c:	108f5504 	addi	r2,r2,15700
   44b30:	10800017 	ldw	r2,0(r2)
   44b34:	014001b4 	movhi	r5,6
   44b38:	294f5604 	addi	r5,r5,15704
   44b3c:	1009883a 	mov	r4,r2
   44b40:	0045d540 	call	45d54 <image_read>

                    nios2pc.command  = NIOS_UP_REMOTE_UPDATE_IMAGE;
   44b44:	008001b4 	movhi	r2,6
   44b48:	10a4c004 	addi	r2,r2,-27904
   44b4c:	00d44044 	movi	r3,20737
   44b50:	10c00115 	stw	r3,4(r2)
                    nios2pc.data_len = 4 + 256;
   44b54:	008001b4 	movhi	r2,6
   44b58:	10a4c004 	addi	r2,r2,-27904
   44b5c:	00c04104 	movi	r3,260
   44b60:	10c00215 	stw	r3,8(r2)
                    send_len         = pc2dev_packet(&nios2pc, send_buffer);
   44b64:	014001b4 	movhi	r5,6
   44b68:	29471504 	addi	r5,r5,7252
   44b6c:	010001b4 	movhi	r4,6
   44b70:	2124c004 	addi	r4,r4,-27904
   44b74:	0044d140 	call	44d14 <pc2dev_packet>
   44b78:	e0bff915 	stw	r2,-28(fp)
                    send(s, send_buffer, send_len);
   44b7c:	e0fffc03 	ldbu	r3,-16(fp)
   44b80:	e0bff917 	ldw	r2,-28(fp)
   44b84:	10bfffcc 	andi	r2,r2,65535
   44b88:	100d883a 	mov	r6,r2
   44b8c:	014001b4 	movhi	r5,6
   44b90:	29471504 	addi	r5,r5,7252
   44b94:	1809883a 	mov	r4,r3
   44b98:	0046f7c0 	call	46f7c <send>
                    break;
   44b9c:	00004606 	br	44cb8 <pc2dev_parse+0x1668>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
   44ba0:	e03ff715 	stw	zero,-36(fp)
   44ba4:	00000506 	br	44bbc <pc2dev_parse+0x156c>
                        image_erase(i);
   44ba8:	e13ff717 	ldw	r4,-36(fp)
   44bac:	0045dec0 	call	45dec <image_erase>
                    nios2pc.data_len = 4 + 256;
                    send_len         = pc2dev_packet(&nios2pc, send_buffer);
                    send(s, send_buffer, send_len);
                    break;
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
   44bb0:	e0bff717 	ldw	r2,-36(fp)
   44bb4:	10800044 	addi	r2,r2,1
   44bb8:	e0bff715 	stw	r2,-36(fp)
   44bbc:	e0fff717 	ldw	r3,-36(fp)
   44bc0:	e0bff817 	ldw	r2,-32(fp)
   44bc4:	18bff836 	bltu	r3,r2,44ba8 <__alt_mem_epcs_flash+0xfffc3ba8>
                        image_erase(i);
                    break;
   44bc8:	00003b06 	br	44cb8 <pc2dev_parse+0x1668>
                        nios2pc.command  = NIOS_UP_ALARM_REGION;
                        nios2pc.data_len = 4;
                        send_len         = pc2dev_packet(&nios2pc, send_buffer);
                        send(s, send_buffer, send_len);
                    }
                    break;
   44bcc:	0001883a 	nop
   44bd0:	00003906 	br	44cb8 <pc2dev_parse+0x1668>
                    else
                        alarm_region.save2rom(&alarm_region);
                    // 如果当前开关输入量的值和修改区域的值一样，才去修改FPGA内报警区域值
                    if(alarm_region.change_region_value == alarm_region.wr_which / 3)
                        alarm_region.change_region_flag = 0x01;
                    break;
   44bd4:	0001883a 	nop
   44bd8:	00003706 	br	44cb8 <pc2dev_parse+0x1668>
                    if((para == ENABLE) || (para == DISABLE))
                    {
                        SysPara.laser_enable = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44bdc:	0001883a 	nop
   44be0:	00003506 	br	44cb8 <pc2dev_parse+0x1668>
                    if((para >= 3) && (para <= 10))
                    {
                        SysPara.laser_pulse_width = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44be4:	0001883a 	nop
   44be8:	00003306 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 16)
                    {
                        SysPara.laser_recv_delay = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44bec:	0001883a 	nop
   44bf0:	00003106 	br	44cb8 <pc2dev_parse+0x1668>
                    if((para == ENABLE) || (para == DISABLE))
                    {
                        SysPara.motor_enable = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44bf4:	0001883a 	nop
   44bf8:	00002f06 	br	44cb8 <pc2dev_parse+0x1668>
                    if((para >= 8) && (para <= 15))
                    {
                        SysPara.motor_expect_speed = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44bfc:	0001883a 	nop
   44c00:	00002d06 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 1024)
                    {
                        SysPara.zero_distance_revise = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c04:	0001883a 	nop
   44c08:	00002b06 	br	44cb8 <pc2dev_parse+0x1668>
                    if((para >= 2) && (para <= 240))
                    {
                        SysPara.zero_angle_revise = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c0c:	0001883a 	nop
   44c10:	00002906 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 1024)
                    {
                        SysPara.signal_thresold = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c14:	0001883a 	nop
   44c18:	00002706 	br	44cb8 <pc2dev_parse+0x1668>
                            SysPara.signal_thresold = para;
                        else
                            SysPara.apd_vol_base = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c1c:	0001883a 	nop
   44c20:	00002506 	br	44cb8 <pc2dev_parse+0x1668>
                    if((para >= 20) && (para <= 45))
                    {
                        SysPara.temp_volt_cof1 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c24:	0001883a 	nop
   44c28:	00002306 	br	44cb8 <pc2dev_parse+0x1668>
                    if((para >= 20) && (para <= 45))
                    {
                        SysPara.temp_volt_cof2 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c2c:	0001883a 	nop
   44c30:	00002106 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 50)
                    {
                        SysPara.temp_volt_inflection = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c34:	0001883a 	nop
   44c38:	00001f06 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 128)
                    {
                        SysPara.temp_distance_cof1 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c3c:	0001883a 	nop
   44c40:	00001d06 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 128)
                    {
                        SysPara.temp_distance_cof2 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c44:	0001883a 	nop
   44c48:	00001b06 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 60)
                    {
                        SysPara.temp_distance_inflection = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c4c:	0001883a 	nop
   44c50:	00001906 	br	44cb8 <pc2dev_parse+0x1668>
                    if((para > 1) && (para < 40))
                    {
                        SysPara.valid_num_threshold = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c54:	0001883a 	nop
   44c58:	00001706 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 500)
                    {
                        SysPara.min_display_distance = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c5c:	0001883a 	nop
   44c60:	00001506 	br	44cb8 <pc2dev_parse+0x1668>
                    if((para >= 2) && (para <= 12))
                    {
                        SysPara.first_noise_filter = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c64:	0001883a 	nop
   44c68:	00001306 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 100)
                    {
                        SysPara.dust_alarm_threshold = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c6c:	0001883a 	nop
   44c70:	00001106 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para1 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c74:	0001883a 	nop
   44c78:	00000f06 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para2 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c7c:	0001883a 	nop
   44c80:	00000d06 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para3 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c84:	0001883a 	nop
   44c88:	00000b06 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para4 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c8c:	0001883a 	nop
   44c90:	00000906 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para5 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c94:	0001883a 	nop
   44c98:	00000706 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para6 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c9c:	0001883a 	nop
   44ca0:	00000506 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para7 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44ca4:	0001883a 	nop
   44ca8:	00000306 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para8 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44cac:	0001883a 	nop
   44cb0:	00000106 	br	44cb8 <pc2dev_parse+0x1668>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para9 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44cb4:	0001883a 	nop
                        image_erase(i);
                    break;
                default:
                    break;
            }
            packet_len = pc2nios.data_len + 12;
   44cb8:	008001b4 	movhi	r2,6
   44cbc:	10a4bc04 	addi	r2,r2,-27920
   44cc0:	10800217 	ldw	r2,8(r2)
   44cc4:	10800304 	addi	r2,r2,12
   44cc8:	e0bffb15 	stw	r2,-20(fp)
            len        = len - packet_len;
   44ccc:	e0fffe17 	ldw	r3,-8(fp)
   44cd0:	e0bffb17 	ldw	r2,-20(fp)
   44cd4:	1885c83a 	sub	r2,r3,r2
   44cd8:	e0bffe15 	stw	r2,-8(fp)
            buf        = buf + packet_len;
   44cdc:	e0bffb17 	ldw	r2,-20(fp)
   44ce0:	e0fffd17 	ldw	r3,-12(fp)
   44ce4:	1885883a 	add	r2,r3,r2
   44ce8:	e0bffd15 	stw	r2,-12(fp)
    int            send_len;
    unsigned short recv_pos;
    unsigned int   para;        // PC 传给 nios 的参数值
    int            packet_len;  // buf里可能有多包数据，本包数据长度

    while(len != 0)
   44cec:	e0bffe17 	ldw	r2,-8(fp)
   44cf0:	103a611e 	bne	r2,zero,43678 <__alt_mem_epcs_flash+0xfffc2678>
   44cf4:	00000106 	br	44cfc <pc2dev_parse+0x16ac>
                    {
                        iic.write_byte(CUR_ALARM_GROUP + 2, buf[10]);
                        iic.write_byte(CUR_ALARM_GROUP + 3, buf[11]);
                    }
                    else
                        return;
   44cf8:	0001883a 	nop
            // nios2pc.data_len = 4;
            // send_len = pc2dev_packet(&nios2pc, send_buffer);
            // send(s, send_buffer, send_len);
        }
    }
}
   44cfc:	e6ffff04 	addi	sp,fp,-4
   44d00:	dfc00217 	ldw	ra,8(sp)
   44d04:	df000117 	ldw	fp,4(sp)
   44d08:	dc000017 	ldw	r16,0(sp)
   44d0c:	dec00304 	addi	sp,sp,12
   44d10:	f800283a 	ret

00044d14 <pc2dev_packet>:
 * @param data
 * @param buf
 * @return int 打包后要发送给上位机的字节数
 */
int pc2dev_packet(struct __nios2pc *data, unsigned char *buf)
{
   44d14:	defff604 	addi	sp,sp,-40
   44d18:	dfc00915 	stw	ra,36(sp)
   44d1c:	df000815 	stw	fp,32(sp)
   44d20:	dc000715 	stw	r16,28(sp)
   44d24:	df000804 	addi	fp,sp,32
   44d28:	e13ffd15 	stw	r4,-12(fp)
   44d2c:	e17ffe15 	stw	r5,-8(fp)
    int           i;
    int           offset_addr;
    int           buf_len;
    unsigned char checksum;
    unsigned char temp;
    buf[0] = (data->head >> 8) & 0xff;
   44d30:	e0bffd17 	ldw	r2,-12(fp)
   44d34:	10800017 	ldw	r2,0(r2)
   44d38:	1004d23a 	srli	r2,r2,8
   44d3c:	1007883a 	mov	r3,r2
   44d40:	e0bffe17 	ldw	r2,-8(fp)
   44d44:	10c00005 	stb	r3,0(r2)
    buf[1] = (data->head >> 0) & 0xff;
   44d48:	e0bffe17 	ldw	r2,-8(fp)
   44d4c:	10800044 	addi	r2,r2,1
   44d50:	e0fffd17 	ldw	r3,-12(fp)
   44d54:	18c00017 	ldw	r3,0(r3)
   44d58:	10c00005 	stb	r3,0(r2)
    buf[2] = (data->command >> 8) & 0xff;
   44d5c:	e0bffe17 	ldw	r2,-8(fp)
   44d60:	10800084 	addi	r2,r2,2
   44d64:	e0fffd17 	ldw	r3,-12(fp)
   44d68:	18c00117 	ldw	r3,4(r3)
   44d6c:	1806d23a 	srli	r3,r3,8
   44d70:	10c00005 	stb	r3,0(r2)
    buf[3] = (data->command >> 0) & 0xff;
   44d74:	e0bffe17 	ldw	r2,-8(fp)
   44d78:	108000c4 	addi	r2,r2,3
   44d7c:	e0fffd17 	ldw	r3,-12(fp)
   44d80:	18c00117 	ldw	r3,4(r3)
   44d84:	10c00005 	stb	r3,0(r2)

    buf[4] = (data->data_len >> 24) & 0xff;  // 数据长度
   44d88:	e0bffe17 	ldw	r2,-8(fp)
   44d8c:	10800104 	addi	r2,r2,4
   44d90:	e0fffd17 	ldw	r3,-12(fp)
   44d94:	18c00217 	ldw	r3,8(r3)
   44d98:	1806d63a 	srli	r3,r3,24
   44d9c:	10c00005 	stb	r3,0(r2)
    buf[5] = (data->data_len >> 16) & 0xff;
   44da0:	e0bffe17 	ldw	r2,-8(fp)
   44da4:	10800144 	addi	r2,r2,5
   44da8:	e0fffd17 	ldw	r3,-12(fp)
   44dac:	18c00217 	ldw	r3,8(r3)
   44db0:	1806d43a 	srli	r3,r3,16
   44db4:	10c00005 	stb	r3,0(r2)
    buf[6] = (data->data_len >> 8) & 0xff;
   44db8:	e0bffe17 	ldw	r2,-8(fp)
   44dbc:	10800184 	addi	r2,r2,6
   44dc0:	e0fffd17 	ldw	r3,-12(fp)
   44dc4:	18c00217 	ldw	r3,8(r3)
   44dc8:	1806d23a 	srli	r3,r3,8
   44dcc:	10c00005 	stb	r3,0(r2)
    buf[7] = (data->data_len >> 0) & 0xff;
   44dd0:	e0bffe17 	ldw	r2,-8(fp)
   44dd4:	108001c4 	addi	r2,r2,7
   44dd8:	e0fffd17 	ldw	r3,-12(fp)
   44ddc:	18c00217 	ldw	r3,8(r3)
   44de0:	10c00005 	stb	r3,0(r2)

    switch(data->command)
   44de4:	e0bffd17 	ldw	r2,-12(fp)
   44de8:	10800117 	ldw	r2,4(r2)
   44dec:	10d400a0 	cmpeqi	r3,r2,20482
   44df0:	1800651e 	bne	r3,zero,44f88 <pc2dev_packet+0x274>
   44df4:	10d400e8 	cmpgeui	r3,r2,20483
   44df8:	1800051e 	bne	r3,zero,44e10 <pc2dev_packet+0xfc>
   44dfc:	10d40020 	cmpeqi	r3,r2,20480
   44e00:	1800c01e 	bne	r3,zero,45104 <pc2dev_packet+0x3f0>
   44e04:	10940060 	cmpeqi	r2,r2,20481
   44e08:	1000091e 	bne	r2,zero,44e30 <pc2dev_packet+0x11c>
   44e0c:	00016606 	br	453a8 <pc2dev_packet+0x694>
   44e10:	10d40160 	cmpeqi	r3,r2,20485
   44e14:	1800f51e 	bne	r3,zero,451ec <pc2dev_packet+0x4d8>
   44e18:	10d40170 	cmpltui	r3,r2,20485
   44e1c:	1801621e 	bne	r3,zero,453a8 <pc2dev_packet+0x694>
   44e20:	10abc004 	addi	r2,r2,-20736
   44e24:	108000a8 	cmpgeui	r2,r2,2
   44e28:	10015f1e 	bne	r2,zero,453a8 <pc2dev_packet+0x694>
   44e2c:	00011806 	br	45290 <pc2dev_packet+0x57c>
    {
        case NIOS_UP_ALARM_REGION:
            offset_addr = CUR_ALARM_GROUP;
   44e30:	e03ffb15 	stw	zero,-20(fp)
            for(i = 0; i < data->data_len; i++)
   44e34:	e03ff815 	stw	zero,-32(fp)
   44e38:	00001006 	br	44e7c <pc2dev_packet+0x168>
            {
                buf[i + 8] = iic.read_byte(offset_addr + i);
   44e3c:	e0bff817 	ldw	r2,-32(fp)
   44e40:	10800204 	addi	r2,r2,8
   44e44:	e0fffe17 	ldw	r3,-8(fp)
   44e48:	18a1883a 	add	r16,r3,r2
   44e4c:	008001b4 	movhi	r2,6
   44e50:	10a4b904 	addi	r2,r2,-27932
   44e54:	10800217 	ldw	r2,8(r2)
   44e58:	e13ffb17 	ldw	r4,-20(fp)
   44e5c:	e0fff817 	ldw	r3,-32(fp)
   44e60:	20c7883a 	add	r3,r4,r3
   44e64:	1809883a 	mov	r4,r3
   44e68:	103ee83a 	callr	r2
   44e6c:	80800005 	stb	r2,0(r16)

    switch(data->command)
    {
        case NIOS_UP_ALARM_REGION:
            offset_addr = CUR_ALARM_GROUP;
            for(i = 0; i < data->data_len; i++)
   44e70:	e0bff817 	ldw	r2,-32(fp)
   44e74:	10800044 	addi	r2,r2,1
   44e78:	e0bff815 	stw	r2,-32(fp)
   44e7c:	e0bffd17 	ldw	r2,-12(fp)
   44e80:	10800217 	ldw	r2,8(r2)
   44e84:	e0fff817 	ldw	r3,-32(fp)
   44e88:	18bfec36 	bltu	r3,r2,44e3c <__alt_mem_epcs_flash+0xfffc3e3c>
            {
                buf[i + 8] = iic.read_byte(offset_addr + i);
            }
            buf[8]   = 0x00;
   44e8c:	e0bffe17 	ldw	r2,-8(fp)
   44e90:	10800204 	addi	r2,r2,8
   44e94:	10000005 	stb	zero,0(r2)
            buf[9]   = 0x00;
   44e98:	e0bffe17 	ldw	r2,-8(fp)
   44e9c:	10800244 	addi	r2,r2,9
   44ea0:	10000005 	stb	zero,0(r2)
            buf[10]  = 0x00;
   44ea4:	e0bffe17 	ldw	r2,-8(fp)
   44ea8:	10800284 	addi	r2,r2,10
   44eac:	10000005 	stb	zero,0(r2)
            buf[11]  = alarm_region.change_region_value;
   44eb0:	e0bffe17 	ldw	r2,-8(fp)
   44eb4:	10c002c4 	addi	r3,r2,11
   44eb8:	008001b4 	movhi	r2,6
   44ebc:	10a4c504 	addi	r2,r2,-27884
   44ec0:	108000c3 	ldbu	r2,3(r2)
   44ec4:	18800005 	stb	r2,0(r3)
            checksum = 0;
   44ec8:	e03ffa05 	stb	zero,-24(fp)
            for(i = 0; i < 8 + data->data_len; i++)
   44ecc:	e03ff815 	stw	zero,-32(fp)
   44ed0:	00000a06 	br	44efc <pc2dev_packet+0x1e8>
            {
                checksum ^= buf[i];
   44ed4:	e0bff817 	ldw	r2,-32(fp)
   44ed8:	e0fffe17 	ldw	r3,-8(fp)
   44edc:	1885883a 	add	r2,r3,r2
   44ee0:	10c00003 	ldbu	r3,0(r2)
   44ee4:	e0bffa03 	ldbu	r2,-24(fp)
   44ee8:	1884f03a 	xor	r2,r3,r2
   44eec:	e0bffa05 	stb	r2,-24(fp)
            buf[8]   = 0x00;
            buf[9]   = 0x00;
            buf[10]  = 0x00;
            buf[11]  = alarm_region.change_region_value;
            checksum = 0;
            for(i = 0; i < 8 + data->data_len; i++)
   44ef0:	e0bff817 	ldw	r2,-32(fp)
   44ef4:	10800044 	addi	r2,r2,1
   44ef8:	e0bff815 	stw	r2,-32(fp)
   44efc:	e0bffd17 	ldw	r2,-12(fp)
   44f00:	10800217 	ldw	r2,8(r2)
   44f04:	10800204 	addi	r2,r2,8
   44f08:	e0fff817 	ldw	r3,-32(fp)
   44f0c:	18bff136 	bltu	r3,r2,44ed4 <__alt_mem_epcs_flash+0xfffc3ed4>
            {
                checksum ^= buf[i];
            }
            buf[8 + data->data_len + 0] = 0x00;
   44f10:	e0bffd17 	ldw	r2,-12(fp)
   44f14:	10800217 	ldw	r2,8(r2)
   44f18:	10800204 	addi	r2,r2,8
   44f1c:	e0fffe17 	ldw	r3,-8(fp)
   44f20:	1885883a 	add	r2,r3,r2
   44f24:	10000005 	stb	zero,0(r2)
            buf[8 + data->data_len + 1] = 0x00;
   44f28:	e0bffd17 	ldw	r2,-12(fp)
   44f2c:	10800217 	ldw	r2,8(r2)
   44f30:	10800244 	addi	r2,r2,9
   44f34:	e0fffe17 	ldw	r3,-8(fp)
   44f38:	1885883a 	add	r2,r3,r2
   44f3c:	10000005 	stb	zero,0(r2)
            buf[8 + data->data_len + 2] = 0x00;
   44f40:	e0bffd17 	ldw	r2,-12(fp)
   44f44:	10800217 	ldw	r2,8(r2)
   44f48:	10800284 	addi	r2,r2,10
   44f4c:	e0fffe17 	ldw	r3,-8(fp)
   44f50:	1885883a 	add	r2,r3,r2
   44f54:	10000005 	stb	zero,0(r2)
            buf[8 + data->data_len + 3] = checksum;
   44f58:	e0bffd17 	ldw	r2,-12(fp)
   44f5c:	10800217 	ldw	r2,8(r2)
   44f60:	108002c4 	addi	r2,r2,11
   44f64:	e0fffe17 	ldw	r3,-8(fp)
   44f68:	1885883a 	add	r2,r3,r2
   44f6c:	e0fffa03 	ldbu	r3,-24(fp)
   44f70:	10c00005 	stb	r3,0(r2)

            buf_len = (8 + data->data_len + 4);
   44f74:	e0bffd17 	ldw	r2,-12(fp)
   44f78:	10800217 	ldw	r2,8(r2)
   44f7c:	10800304 	addi	r2,r2,12
   44f80:	e0bff915 	stw	r2,-28(fp)
            break;
   44f84:	00013e06 	br	45480 <pc2dev_packet+0x76c>
        case NIOS_UP_REGION_DATA:
            // 8 + TARGET_NUMBER*2 + 1 + 102
            offset_addr = GROUP_OFFSET_ADDR + alarm_region.rd_which * REGION_SPACE_SIZE;
   44f88:	008001b4 	movhi	r2,6
   44f8c:	10a4c504 	addi	r2,r2,-27884
   44f90:	10800143 	ldbu	r2,5(r2)
   44f94:	10803fcc 	andi	r2,r2,255
   44f98:	10800084 	addi	r2,r2,2
   44f9c:	100492fa 	slli	r2,r2,11
   44fa0:	e0bffb15 	stw	r2,-20(fp)
            buf[8]      = alarm_region.rd_which;
   44fa4:	e0bffe17 	ldw	r2,-8(fp)
   44fa8:	10c00204 	addi	r3,r2,8
   44fac:	008001b4 	movhi	r2,6
   44fb0:	10a4c504 	addi	r2,r2,-27884
   44fb4:	10800143 	ldbu	r2,5(r2)
   44fb8:	18800005 	stb	r2,0(r3)
            buf_len     = 9;
   44fbc:	00800244 	movi	r2,9
   44fc0:	e0bff915 	stw	r2,-28(fp)
            iic_sequential_read(offset_addr, buf + 9, TARGET_NUMBER * 2 + 1 + 102);
   44fc4:	e0fffb17 	ldw	r3,-20(fp)
   44fc8:	e0bffe17 	ldw	r2,-8(fp)
   44fcc:	10800244 	addi	r2,r2,9
   44fd0:	0181af44 	movi	r6,1725
   44fd4:	100b883a 	mov	r5,r2
   44fd8:	1809883a 	mov	r4,r3
   44fdc:	00422ac0 	call	422ac <iic_sequential_read>
            for(i = 9; i < 9 + TARGET_NUMBER * 2; i += 2)
   44fe0:	00800244 	movi	r2,9
   44fe4:	e0bff815 	stw	r2,-32(fp)
   44fe8:	00001706 	br	45048 <pc2dev_packet+0x334>
            {
                temp       = buf[i + 1];
   44fec:	e0bff817 	ldw	r2,-32(fp)
   44ff0:	10800044 	addi	r2,r2,1
   44ff4:	e0fffe17 	ldw	r3,-8(fp)
   44ff8:	1885883a 	add	r2,r3,r2
   44ffc:	10800003 	ldbu	r2,0(r2)
   45000:	e0bffc05 	stb	r2,-16(fp)
                buf[i + 1] = buf[i];
   45004:	e0bff817 	ldw	r2,-32(fp)
   45008:	10800044 	addi	r2,r2,1
   4500c:	e0fffe17 	ldw	r3,-8(fp)
   45010:	1885883a 	add	r2,r3,r2
   45014:	e0fff817 	ldw	r3,-32(fp)
   45018:	e13ffe17 	ldw	r4,-8(fp)
   4501c:	20c7883a 	add	r3,r4,r3
   45020:	18c00003 	ldbu	r3,0(r3)
   45024:	10c00005 	stb	r3,0(r2)
                buf[i]     = temp;
   45028:	e0bff817 	ldw	r2,-32(fp)
   4502c:	e0fffe17 	ldw	r3,-8(fp)
   45030:	1885883a 	add	r2,r3,r2
   45034:	e0fffc03 	ldbu	r3,-16(fp)
   45038:	10c00005 	stb	r3,0(r2)
            // 8 + TARGET_NUMBER*2 + 1 + 102
            offset_addr = GROUP_OFFSET_ADDR + alarm_region.rd_which * REGION_SPACE_SIZE;
            buf[8]      = alarm_region.rd_which;
            buf_len     = 9;
            iic_sequential_read(offset_addr, buf + 9, TARGET_NUMBER * 2 + 1 + 102);
            for(i = 9; i < 9 + TARGET_NUMBER * 2; i += 2)
   4503c:	e0bff817 	ldw	r2,-32(fp)
   45040:	10800084 	addi	r2,r2,2
   45044:	e0bff815 	stw	r2,-32(fp)
   45048:	e0bff817 	ldw	r2,-32(fp)
   4504c:	108197d0 	cmplti	r2,r2,1631
   45050:	103fe61e 	bne	r2,zero,44fec <__alt_mem_epcs_flash+0xfffc3fec>
                temp       = buf[i + 1];
                buf[i + 1] = buf[i];
                buf[i]     = temp;
            }

            buf_len += TARGET_NUMBER * 2 + 1 + 102;
   45054:	e0bff917 	ldw	r2,-28(fp)
   45058:	1081af44 	addi	r2,r2,1725
   4505c:	e0bff915 	stw	r2,-28(fp)

            checksum = 0;
   45060:	e03ffa05 	stb	zero,-24(fp)
            for(i = 0; i < buf_len; i++)
   45064:	e03ff815 	stw	zero,-32(fp)
   45068:	00000a06 	br	45094 <pc2dev_packet+0x380>
            {
                checksum ^= buf[i];
   4506c:	e0bff817 	ldw	r2,-32(fp)
   45070:	e0fffe17 	ldw	r3,-8(fp)
   45074:	1885883a 	add	r2,r3,r2
   45078:	10c00003 	ldbu	r3,0(r2)
   4507c:	e0bffa03 	ldbu	r2,-24(fp)
   45080:	1884f03a 	xor	r2,r3,r2
   45084:	e0bffa05 	stb	r2,-24(fp)
            }

            buf_len += TARGET_NUMBER * 2 + 1 + 102;

            checksum = 0;
            for(i = 0; i < buf_len; i++)
   45088:	e0bff817 	ldw	r2,-32(fp)
   4508c:	10800044 	addi	r2,r2,1
   45090:	e0bff815 	stw	r2,-32(fp)
   45094:	e0fff817 	ldw	r3,-32(fp)
   45098:	e0bff917 	ldw	r2,-28(fp)
   4509c:	18bff316 	blt	r3,r2,4506c <__alt_mem_epcs_flash+0xfffc406c>
            {
                checksum ^= buf[i];
            }
            buf[buf_len + 1] = 0x00;
   450a0:	e0bff917 	ldw	r2,-28(fp)
   450a4:	10800044 	addi	r2,r2,1
   450a8:	e0fffe17 	ldw	r3,-8(fp)
   450ac:	1885883a 	add	r2,r3,r2
   450b0:	10000005 	stb	zero,0(r2)
            buf[buf_len + 2] = 0x00;
   450b4:	e0bff917 	ldw	r2,-28(fp)
   450b8:	10800084 	addi	r2,r2,2
   450bc:	e0fffe17 	ldw	r3,-8(fp)
   450c0:	1885883a 	add	r2,r3,r2
   450c4:	10000005 	stb	zero,0(r2)
            buf[buf_len + 3] = 0x00;
   450c8:	e0bff917 	ldw	r2,-28(fp)
   450cc:	108000c4 	addi	r2,r2,3
   450d0:	e0fffe17 	ldw	r3,-8(fp)
   450d4:	1885883a 	add	r2,r3,r2
   450d8:	10000005 	stb	zero,0(r2)
            buf[buf_len + 4] = checksum;
   450dc:	e0bff917 	ldw	r2,-28(fp)
   450e0:	10800104 	addi	r2,r2,4
   450e4:	e0fffe17 	ldw	r3,-8(fp)
   450e8:	1885883a 	add	r2,r3,r2
   450ec:	e0fffa03 	ldbu	r3,-24(fp)
   450f0:	10c00005 	stb	r3,0(r2)
            buf_len += 4;
   450f4:	e0bff917 	ldw	r2,-28(fp)
   450f8:	10800104 	addi	r2,r2,4
   450fc:	e0bff915 	stw	r2,-28(fp)
            break;
   45100:	0000df06 	br	45480 <pc2dev_packet+0x76c>
        case NIOS_UP_RESPONSE_PC:
            buf[8]  = (SysPara.pc_command_value >> 24) & 0xff;
   45104:	e0bffe17 	ldw	r2,-8(fp)
   45108:	10c00204 	addi	r3,r2,8
   4510c:	008001b4 	movhi	r2,6
   45110:	10a46e04 	addi	r2,r2,-28232
   45114:	10804a17 	ldw	r2,296(r2)
   45118:	1004d63a 	srli	r2,r2,24
   4511c:	18800005 	stb	r2,0(r3)
            buf[9]  = (SysPara.pc_command_value >> 16) & 0xff;
   45120:	e0bffe17 	ldw	r2,-8(fp)
   45124:	10c00244 	addi	r3,r2,9
   45128:	008001b4 	movhi	r2,6
   4512c:	10a46e04 	addi	r2,r2,-28232
   45130:	10804a17 	ldw	r2,296(r2)
   45134:	1004d43a 	srli	r2,r2,16
   45138:	18800005 	stb	r2,0(r3)
            buf[10] = (SysPara.pc_command_value >> 8) & 0xff;
   4513c:	e0bffe17 	ldw	r2,-8(fp)
   45140:	10c00284 	addi	r3,r2,10
   45144:	008001b4 	movhi	r2,6
   45148:	10a46e04 	addi	r2,r2,-28232
   4514c:	10804a17 	ldw	r2,296(r2)
   45150:	1004d23a 	srli	r2,r2,8
   45154:	18800005 	stb	r2,0(r3)
            buf[11] = (SysPara.pc_command_value >> 0) & 0xff;
   45158:	e0bffe17 	ldw	r2,-8(fp)
   4515c:	10c002c4 	addi	r3,r2,11
   45160:	008001b4 	movhi	r2,6
   45164:	10a46e04 	addi	r2,r2,-28232
   45168:	10804a17 	ldw	r2,296(r2)
   4516c:	18800005 	stb	r2,0(r3)
            for(i = 0; i < 12; i++)
   45170:	e03ff815 	stw	zero,-32(fp)
   45174:	00000a06 	br	451a0 <pc2dev_packet+0x48c>
            {
                checksum ^= buf[i];
   45178:	e0bff817 	ldw	r2,-32(fp)
   4517c:	e0fffe17 	ldw	r3,-8(fp)
   45180:	1885883a 	add	r2,r3,r2
   45184:	10c00003 	ldbu	r3,0(r2)
   45188:	e0bffa03 	ldbu	r2,-24(fp)
   4518c:	1884f03a 	xor	r2,r3,r2
   45190:	e0bffa05 	stb	r2,-24(fp)
        case NIOS_UP_RESPONSE_PC:
            buf[8]  = (SysPara.pc_command_value >> 24) & 0xff;
            buf[9]  = (SysPara.pc_command_value >> 16) & 0xff;
            buf[10] = (SysPara.pc_command_value >> 8) & 0xff;
            buf[11] = (SysPara.pc_command_value >> 0) & 0xff;
            for(i = 0; i < 12; i++)
   45194:	e0bff817 	ldw	r2,-32(fp)
   45198:	10800044 	addi	r2,r2,1
   4519c:	e0bff815 	stw	r2,-32(fp)
   451a0:	e0bff817 	ldw	r2,-32(fp)
   451a4:	10800310 	cmplti	r2,r2,12
   451a8:	103ff31e 	bne	r2,zero,45178 <__alt_mem_epcs_flash+0xfffc4178>
            {
                checksum ^= buf[i];
            }
            buf[12] = 0;
   451ac:	e0bffe17 	ldw	r2,-8(fp)
   451b0:	10800304 	addi	r2,r2,12
   451b4:	10000005 	stb	zero,0(r2)
            buf[13] = 0;
   451b8:	e0bffe17 	ldw	r2,-8(fp)
   451bc:	10800344 	addi	r2,r2,13
   451c0:	10000005 	stb	zero,0(r2)
            buf[14] = 0;
   451c4:	e0bffe17 	ldw	r2,-8(fp)
   451c8:	10800384 	addi	r2,r2,14
   451cc:	10000005 	stb	zero,0(r2)
            buf[15] = checksum;
   451d0:	e0bffe17 	ldw	r2,-8(fp)
   451d4:	108003c4 	addi	r2,r2,15
   451d8:	e0fffa03 	ldbu	r3,-24(fp)
   451dc:	10c00005 	stb	r3,0(r2)
            buf_len = 16;
   451e0:	00800404 	movi	r2,16
   451e4:	e0bff915 	stw	r2,-28(fp)
            break;
   451e8:	0000a506 	br	45480 <pc2dev_packet+0x76c>
        case NIOS_UP_RADAR_PARA:
            memcpy(&buf[8], (unsigned char *)&SysPara, sizeof(SysPara));
   451ec:	e0bffe17 	ldw	r2,-8(fp)
   451f0:	10800204 	addi	r2,r2,8
   451f4:	01804b04 	movi	r6,300
   451f8:	014001b4 	movhi	r5,6
   451fc:	29646e04 	addi	r5,r5,-28232
   45200:	1009883a 	mov	r4,r2
   45204:	00490240 	call	49024 <memcpy>
            for(i = 0; i < 8 + sizeof(SysPara); i++)
   45208:	e03ff815 	stw	zero,-32(fp)
   4520c:	00000a06 	br	45238 <pc2dev_packet+0x524>
            {
                checksum ^= buf[i];
   45210:	e0bff817 	ldw	r2,-32(fp)
   45214:	e0fffe17 	ldw	r3,-8(fp)
   45218:	1885883a 	add	r2,r3,r2
   4521c:	10c00003 	ldbu	r3,0(r2)
   45220:	e0bffa03 	ldbu	r2,-24(fp)
   45224:	1884f03a 	xor	r2,r3,r2
   45228:	e0bffa05 	stb	r2,-24(fp)
            buf[15] = checksum;
            buf_len = 16;
            break;
        case NIOS_UP_RADAR_PARA:
            memcpy(&buf[8], (unsigned char *)&SysPara, sizeof(SysPara));
            for(i = 0; i < 8 + sizeof(SysPara); i++)
   4522c:	e0bff817 	ldw	r2,-32(fp)
   45230:	10800044 	addi	r2,r2,1
   45234:	e0bff815 	stw	r2,-32(fp)
   45238:	e0bff817 	ldw	r2,-32(fp)
   4523c:	10804d30 	cmpltui	r2,r2,308
   45240:	103ff31e 	bne	r2,zero,45210 <__alt_mem_epcs_flash+0xfffc4210>
            {
                checksum ^= buf[i];
            }
            buf[8 + sizeof(SysPara) + 0] = 0xaa;
   45244:	e0bffe17 	ldw	r2,-8(fp)
   45248:	10804d04 	addi	r2,r2,308
   4524c:	00ffea84 	movi	r3,-86
   45250:	10c00005 	stb	r3,0(r2)
            buf[8 + sizeof(SysPara) + 1] = 0xbb;
   45254:	e0bffe17 	ldw	r2,-8(fp)
   45258:	10804d44 	addi	r2,r2,309
   4525c:	00ffeec4 	movi	r3,-69
   45260:	10c00005 	stb	r3,0(r2)
            buf[8 + sizeof(SysPara) + 2] = 0xcc;
   45264:	e0bffe17 	ldw	r2,-8(fp)
   45268:	10804d84 	addi	r2,r2,310
   4526c:	00fff304 	movi	r3,-52
   45270:	10c00005 	stb	r3,0(r2)
            buf[8 + sizeof(SysPara) + 3] = checksum;
   45274:	e0bffe17 	ldw	r2,-8(fp)
   45278:	10804dc4 	addi	r2,r2,311
   4527c:	e0fffa03 	ldbu	r3,-24(fp)
   45280:	10c00005 	stb	r3,0(r2)
            buf_len                      = 8 + sizeof(SysPara) + 4;
   45284:	00804e04 	movi	r2,312
   45288:	e0bff915 	stw	r2,-28(fp)
            break;
   4528c:	00007c06 	br	45480 <pc2dev_packet+0x76c>
        case NIOS_REMOTE_WRITE_REPONSE:
        case NIOS_UP_REMOTE_UPDATE_IMAGE:
            buf[8]  = (image.addr >> 24) & 0xff;
   45290:	e0bffe17 	ldw	r2,-8(fp)
   45294:	10c00204 	addi	r3,r2,8
   45298:	008001b4 	movhi	r2,6
   4529c:	108f5504 	addi	r2,r2,15700
   452a0:	10800017 	ldw	r2,0(r2)
   452a4:	1004d63a 	srli	r2,r2,24
   452a8:	18800005 	stb	r2,0(r3)
            buf[9]  = (image.addr >> 16) & 0xff;
   452ac:	e0bffe17 	ldw	r2,-8(fp)
   452b0:	10c00244 	addi	r3,r2,9
   452b4:	008001b4 	movhi	r2,6
   452b8:	108f5504 	addi	r2,r2,15700
   452bc:	10800017 	ldw	r2,0(r2)
   452c0:	1004d43a 	srli	r2,r2,16
   452c4:	18800005 	stb	r2,0(r3)
            buf[10] = (image.addr >> 8) & 0xff;
   452c8:	e0bffe17 	ldw	r2,-8(fp)
   452cc:	10c00284 	addi	r3,r2,10
   452d0:	008001b4 	movhi	r2,6
   452d4:	108f5504 	addi	r2,r2,15700
   452d8:	10800017 	ldw	r2,0(r2)
   452dc:	1004d23a 	srli	r2,r2,8
   452e0:	18800005 	stb	r2,0(r3)
            buf[11] = (image.addr >> 0) & 0xff;
   452e4:	e0bffe17 	ldw	r2,-8(fp)
   452e8:	10c002c4 	addi	r3,r2,11
   452ec:	008001b4 	movhi	r2,6
   452f0:	108f5504 	addi	r2,r2,15700
   452f4:	10800017 	ldw	r2,0(r2)
   452f8:	18800005 	stb	r2,0(r3)
            memcpy(&buf[12], image.data, 256);
   452fc:	e0bffe17 	ldw	r2,-8(fp)
   45300:	10c00304 	addi	r3,r2,12
   45304:	008001b4 	movhi	r2,6
   45308:	108f5504 	addi	r2,r2,15700
   4530c:	1809883a 	mov	r4,r3
   45310:	10800104 	addi	r2,r2,4
   45314:	00c04004 	movi	r3,256
   45318:	180d883a 	mov	r6,r3
   4531c:	100b883a 	mov	r5,r2
   45320:	00490240 	call	49024 <memcpy>
            for(i = 0; i < 8 + 4 + 256; i++)
   45324:	e03ff815 	stw	zero,-32(fp)
   45328:	00000a06 	br	45354 <pc2dev_packet+0x640>
                checksum ^= buf[i];
   4532c:	e0bff817 	ldw	r2,-32(fp)
   45330:	e0fffe17 	ldw	r3,-8(fp)
   45334:	1885883a 	add	r2,r3,r2
   45338:	10c00003 	ldbu	r3,0(r2)
   4533c:	e0bffa03 	ldbu	r2,-24(fp)
   45340:	1884f03a 	xor	r2,r3,r2
   45344:	e0bffa05 	stb	r2,-24(fp)
            buf[8]  = (image.addr >> 24) & 0xff;
            buf[9]  = (image.addr >> 16) & 0xff;
            buf[10] = (image.addr >> 8) & 0xff;
            buf[11] = (image.addr >> 0) & 0xff;
            memcpy(&buf[12], image.data, 256);
            for(i = 0; i < 8 + 4 + 256; i++)
   45348:	e0bff817 	ldw	r2,-32(fp)
   4534c:	10800044 	addi	r2,r2,1
   45350:	e0bff815 	stw	r2,-32(fp)
   45354:	e0bff817 	ldw	r2,-32(fp)
   45358:	10804310 	cmplti	r2,r2,268
   4535c:	103ff31e 	bne	r2,zero,4532c <__alt_mem_epcs_flash+0xfffc432c>
                checksum ^= buf[i];
            buf[272] = buf[273] = buf[274] = 0;
   45360:	e0bffe17 	ldw	r2,-8(fp)
   45364:	11004404 	addi	r4,r2,272
   45368:	e0bffe17 	ldw	r2,-8(fp)
   4536c:	10804444 	addi	r2,r2,273
   45370:	e0fffe17 	ldw	r3,-8(fp)
   45374:	18c04484 	addi	r3,r3,274
   45378:	18000005 	stb	zero,0(r3)
   4537c:	18c00003 	ldbu	r3,0(r3)
   45380:	10c00005 	stb	r3,0(r2)
   45384:	10800003 	ldbu	r2,0(r2)
   45388:	20800005 	stb	r2,0(r4)
            buf[275]                       = checksum;
   4538c:	e0bffe17 	ldw	r2,-8(fp)
   45390:	108044c4 	addi	r2,r2,275
   45394:	e0fffa03 	ldbu	r3,-24(fp)
   45398:	10c00005 	stb	r3,0(r2)
            buf_len                        = 8 + 4 + 256 + 4;
   4539c:	00804404 	movi	r2,272
   453a0:	e0bff915 	stw	r2,-28(fp)
            break;
   453a4:	00003606 	br	45480 <pc2dev_packet+0x76c>
        default:
            buf[8]  = (data->value >> 24) & 0xff;
   453a8:	e0bffe17 	ldw	r2,-8(fp)
   453ac:	10800204 	addi	r2,r2,8
   453b0:	e0fffd17 	ldw	r3,-12(fp)
   453b4:	18c00317 	ldw	r3,12(r3)
   453b8:	1806d63a 	srli	r3,r3,24
   453bc:	10c00005 	stb	r3,0(r2)
            buf[9]  = (data->value >> 16) & 0xff;
   453c0:	e0bffe17 	ldw	r2,-8(fp)
   453c4:	10800244 	addi	r2,r2,9
   453c8:	e0fffd17 	ldw	r3,-12(fp)
   453cc:	18c00317 	ldw	r3,12(r3)
   453d0:	1806d43a 	srli	r3,r3,16
   453d4:	10c00005 	stb	r3,0(r2)
            buf[10] = (data->value >> 8) & 0xff;
   453d8:	e0bffe17 	ldw	r2,-8(fp)
   453dc:	10800284 	addi	r2,r2,10
   453e0:	e0fffd17 	ldw	r3,-12(fp)
   453e4:	18c00317 	ldw	r3,12(r3)
   453e8:	1806d23a 	srli	r3,r3,8
   453ec:	10c00005 	stb	r3,0(r2)
            buf[11] = (data->value >> 0) & 0xff;
   453f0:	e0bffe17 	ldw	r2,-8(fp)
   453f4:	108002c4 	addi	r2,r2,11
   453f8:	e0fffd17 	ldw	r3,-12(fp)
   453fc:	18c00317 	ldw	r3,12(r3)
   45400:	10c00005 	stb	r3,0(r2)
            for(i = 0; i < 12; i++)
   45404:	e03ff815 	stw	zero,-32(fp)
   45408:	00000a06 	br	45434 <pc2dev_packet+0x720>
            {
                checksum ^= buf[i];
   4540c:	e0bff817 	ldw	r2,-32(fp)
   45410:	e0fffe17 	ldw	r3,-8(fp)
   45414:	1885883a 	add	r2,r3,r2
   45418:	10c00003 	ldbu	r3,0(r2)
   4541c:	e0bffa03 	ldbu	r2,-24(fp)
   45420:	1884f03a 	xor	r2,r3,r2
   45424:	e0bffa05 	stb	r2,-24(fp)
        default:
            buf[8]  = (data->value >> 24) & 0xff;
            buf[9]  = (data->value >> 16) & 0xff;
            buf[10] = (data->value >> 8) & 0xff;
            buf[11] = (data->value >> 0) & 0xff;
            for(i = 0; i < 12; i++)
   45428:	e0bff817 	ldw	r2,-32(fp)
   4542c:	10800044 	addi	r2,r2,1
   45430:	e0bff815 	stw	r2,-32(fp)
   45434:	e0bff817 	ldw	r2,-32(fp)
   45438:	10800310 	cmplti	r2,r2,12
   4543c:	103ff31e 	bne	r2,zero,4540c <__alt_mem_epcs_flash+0xfffc440c>
            {
                checksum ^= buf[i];
            }
            buf[12] = 0;
   45440:	e0bffe17 	ldw	r2,-8(fp)
   45444:	10800304 	addi	r2,r2,12
   45448:	10000005 	stb	zero,0(r2)
            buf[13] = 0;
   4544c:	e0bffe17 	ldw	r2,-8(fp)
   45450:	10800344 	addi	r2,r2,13
   45454:	10000005 	stb	zero,0(r2)
            buf[14] = 0;
   45458:	e0bffe17 	ldw	r2,-8(fp)
   4545c:	10800384 	addi	r2,r2,14
   45460:	10000005 	stb	zero,0(r2)
            buf[15] = checksum;
   45464:	e0bffe17 	ldw	r2,-8(fp)
   45468:	108003c4 	addi	r2,r2,15
   4546c:	e0fffa03 	ldbu	r3,-24(fp)
   45470:	10c00005 	stb	r3,0(r2)
            buf_len = 16;
   45474:	00800404 	movi	r2,16
   45478:	e0bff915 	stw	r2,-28(fp)
            break;
   4547c:	0001883a 	nop
    }

    return buf_len;
   45480:	e0bff917 	ldw	r2,-28(fp)
}
   45484:	e6ffff04 	addi	sp,fp,-4
   45488:	dfc00217 	ldw	ra,8(sp)
   4548c:	df000117 	ldw	fp,4(sp)
   45490:	dc000017 	ldw	r16,0(sp)
   45494:	dec00304 	addi	sp,sp,12
   45498:	f800283a 	ret

0004549c <queue_init>:
 * @param   queue_element_t* const ptr: pointer to the array to store the data.
 * @param   const unsigned size: the size of the queue.
 * @return  None
 */
void queue_init(Queue* const queue, queue_item_t* const ptr, const unsigned size)
{
   4549c:	defffb04 	addi	sp,sp,-20
   454a0:	dfc00415 	stw	ra,16(sp)
   454a4:	df000315 	stw	fp,12(sp)
   454a8:	df000304 	addi	fp,sp,12
   454ac:	e13ffd15 	stw	r4,-12(fp)
   454b0:	e17ffe15 	stw	r5,-8(fp)
   454b4:	e1bfff15 	stw	r6,-4(fp)
    queue->front = 0;
   454b8:	e0bffd17 	ldw	r2,-12(fp)
   454bc:	10000015 	stw	zero,0(r2)
    queue->rear = 0;
   454c0:	e0bffd17 	ldw	r2,-12(fp)
   454c4:	10000115 	stw	zero,4(r2)
    queue->depth = size;
   454c8:	e0bffd17 	ldw	r2,-12(fp)
   454cc:	e0ffff17 	ldw	r3,-4(fp)
   454d0:	10c00215 	stw	r3,8(r2)
    queue->data = ptr;
   454d4:	e0bffd17 	ldw	r2,-12(fp)
   454d8:	e0fffe17 	ldw	r3,-8(fp)
   454dc:	10c00415 	stw	r3,16(r2)
    memset(queue->data, 0, sizeof(queue_item_t) * queue->depth);
   454e0:	e0bffd17 	ldw	r2,-12(fp)
   454e4:	10c00417 	ldw	r3,16(r2)
   454e8:	e0bffd17 	ldw	r2,-12(fp)
   454ec:	10800217 	ldw	r2,8(r2)
   454f0:	1085883a 	add	r2,r2,r2
   454f4:	1085883a 	add	r2,r2,r2
   454f8:	100d883a 	mov	r6,r2
   454fc:	000b883a 	mov	r5,zero
   45500:	1809883a 	mov	r4,r3
   45504:	004916c0 	call	4916c <memset>
    queue->frame_over_flag = 0;
   45508:	e0bffd17 	ldw	r2,-12(fp)
   4550c:	10000315 	stw	zero,12(r2)
}
   45510:	0001883a 	nop
   45514:	e037883a 	mov	sp,fp
   45518:	dfc00117 	ldw	ra,4(sp)
   4551c:	df000017 	ldw	fp,0(sp)
   45520:	dec00204 	addi	sp,sp,8
   45524:	f800283a 	ret

00045528 <queue_clear>:
 * @brief   Sets the front and the back to the same index and flags the queue as empty.
 * @param   Queue* const queue: pointer to a Queue.
 * @return  Queue_Status: returns the status of the queue. Should read Queue_Empty.
 */
void queue_clear(Queue* const queue)
{
   45528:	defffe04 	addi	sp,sp,-8
   4552c:	df000115 	stw	fp,4(sp)
   45530:	df000104 	addi	fp,sp,4
   45534:	e13fff15 	stw	r4,-4(fp)
    /* Perform the same operation as queue_init(). */
    queue->front = queue->rear = 0;
   45538:	e0bfff17 	ldw	r2,-4(fp)
   4553c:	10000115 	stw	zero,4(r2)
   45540:	e0bfff17 	ldw	r2,-4(fp)
   45544:	10c00117 	ldw	r3,4(r2)
   45548:	e0bfff17 	ldw	r2,-4(fp)
   4554c:	10c00015 	stw	r3,0(r2)
//    memset(queue->data, 0, sizeof(queue_item_t) * queue->depth);
}
   45550:	0001883a 	nop
   45554:	e037883a 	mov	sp,fp
   45558:	df000017 	ldw	fp,0(sp)
   4555c:	dec00104 	addi	sp,sp,4
   45560:	f800283a 	ret

00045564 <queue_push>:
 * @param   Queue* const queue: pointer to a Queue.
 *          queue_element_t queue_element: data to be emplaced upon the queue.
 * @return  None.
 */
bool queue_push(Queue* const queue, const queue_item_t queue_element)
{
   45564:	defffc04 	addi	sp,sp,-16
   45568:	dfc00315 	stw	ra,12(sp)
   4556c:	df000215 	stw	fp,8(sp)
   45570:	df000204 	addi	fp,sp,8
   45574:	e13ffe15 	stw	r4,-8(fp)
   45578:	e17fff15 	stw	r5,-4(fp)
	queue->data[queue->rear] = queue_element;
   4557c:	e0bffe17 	ldw	r2,-8(fp)
   45580:	10c00417 	ldw	r3,16(r2)
   45584:	e0bffe17 	ldw	r2,-8(fp)
   45588:	10800117 	ldw	r2,4(r2)
   4558c:	1085883a 	add	r2,r2,r2
   45590:	1085883a 	add	r2,r2,r2
   45594:	1885883a 	add	r2,r3,r2
   45598:	e0ffff17 	ldw	r3,-4(fp)
   4559c:	10c00015 	stw	r3,0(r2)
	queue->rear = (queue->rear+1) % queue->depth;
   455a0:	e0bffe17 	ldw	r2,-8(fp)
   455a4:	10800117 	ldw	r2,4(r2)
   455a8:	10c00044 	addi	r3,r2,1
   455ac:	e0bffe17 	ldw	r2,-8(fp)
   455b0:	10800217 	ldw	r2,8(r2)
   455b4:	100b883a 	mov	r5,r2
   455b8:	1809883a 	mov	r4,r3
   455bc:	0048fcc0 	call	48fcc <__umodsi3>
   455c0:	1007883a 	mov	r3,r2
   455c4:	e0bffe17 	ldw	r2,-8(fp)
   455c8:	10c00115 	stw	r3,4(r2)
    return true;
   455cc:	00800044 	movi	r2,1
}
   455d0:	e037883a 	mov	sp,fp
   455d4:	dfc00117 	ldw	ra,4(sp)
   455d8:	df000017 	ldw	fp,0(sp)
   455dc:	dec00204 	addi	sp,sp,8
   455e0:	f800283a 	ret

000455e4 <queue_pop>:
 * @brief   Removes an entry from the queue.
 * @param   Queue* const queue: pointer to a Queue.
 * @return  queue_element_t: the last element in the queue.
 */
queue_item_t queue_pop(Queue* const queue)
{
   455e4:	defffc04 	addi	sp,sp,-16
   455e8:	dfc00315 	stw	ra,12(sp)
   455ec:	df000215 	stw	fp,8(sp)
   455f0:	df000204 	addi	fp,sp,8
   455f4:	e13fff15 	stw	r4,-4(fp)
    /* First check to see if the queue is full. Since enqueue() doesn't update the front
     * pointer there is a possibility that the queue could've wrapped. Performing the
     * overfull check here means that 'front' is read only and not write. */
    queue_item_t data = queue->data[queue->front];
   455f8:	e0bfff17 	ldw	r2,-4(fp)
   455fc:	10c00417 	ldw	r3,16(r2)
   45600:	e0bfff17 	ldw	r2,-4(fp)
   45604:	10800017 	ldw	r2,0(r2)
   45608:	1085883a 	add	r2,r2,r2
   4560c:	1085883a 	add	r2,r2,r2
   45610:	1885883a 	add	r2,r3,r2
   45614:	10800017 	ldw	r2,0(r2)
   45618:	e0bffe15 	stw	r2,-8(fp)
    queue->front = (queue->front + 1) % queue->depth;
   4561c:	e0bfff17 	ldw	r2,-4(fp)
   45620:	10800017 	ldw	r2,0(r2)
   45624:	10c00044 	addi	r3,r2,1
   45628:	e0bfff17 	ldw	r2,-4(fp)
   4562c:	10800217 	ldw	r2,8(r2)
   45630:	100b883a 	mov	r5,r2
   45634:	1809883a 	mov	r4,r3
   45638:	0048fcc0 	call	48fcc <__umodsi3>
   4563c:	1007883a 	mov	r3,r2
   45640:	e0bfff17 	ldw	r2,-4(fp)
   45644:	10c00015 	stw	r3,0(r2)
    return data;
   45648:	e0bffe17 	ldw	r2,-8(fp)
}
   4564c:	e037883a 	mov	sp,fp
   45650:	dfc00117 	ldw	ra,4(sp)
   45654:	df000017 	ldw	fp,0(sp)
   45658:	dec00204 	addi	sp,sp,8
   4565c:	f800283a 	ret

00045660 <queue_count>:
 * @brief   Returns the number of objects in a queue.
 * @param   const Queue *queue: the queue to be checked.
 * @return  unsigned int: count
 */
unsigned int queue_count(const Queue* const queue)
{
   45660:	defffd04 	addi	sp,sp,-12
   45664:	dfc00215 	stw	ra,8(sp)
   45668:	df000115 	stw	fp,4(sp)
   4566c:	df000104 	addi	fp,sp,4
   45670:	e13fff15 	stw	r4,-4(fp)
    if(queue_is_empty(queue) == false)
   45674:	e13fff17 	ldw	r4,-4(fp)
   45678:	00457400 	call	45740 <queue_is_empty>
   4567c:	1080005c 	xori	r2,r2,1
   45680:	10803fcc 	andi	r2,r2,255
   45684:	10000e26 	beq	r2,zero,456c0 <queue_count+0x60>
        return (queue->rear + queue->depth - queue->front) % queue->depth;
   45688:	e0bfff17 	ldw	r2,-4(fp)
   4568c:	10c00117 	ldw	r3,4(r2)
   45690:	e0bfff17 	ldw	r2,-4(fp)
   45694:	10800217 	ldw	r2,8(r2)
   45698:	1887883a 	add	r3,r3,r2
   4569c:	e0bfff17 	ldw	r2,-4(fp)
   456a0:	10800017 	ldw	r2,0(r2)
   456a4:	1887c83a 	sub	r3,r3,r2
   456a8:	e0bfff17 	ldw	r2,-4(fp)
   456ac:	10800217 	ldw	r2,8(r2)
   456b0:	100b883a 	mov	r5,r2
   456b4:	1809883a 	mov	r4,r3
   456b8:	0048fcc0 	call	48fcc <__umodsi3>
   456bc:	00000106 	br	456c4 <queue_count+0x64>
    else
        return 0;
   456c0:	0005883a 	mov	r2,zero
}
   456c4:	e037883a 	mov	sp,fp
   456c8:	dfc00117 	ldw	ra,4(sp)
   456cc:	df000017 	ldw	fp,0(sp)
   456d0:	dec00204 	addi	sp,sp,8
   456d4:	f800283a 	ret

000456d8 <queue_is_full>:
 * @brief   Boolean check to see if the queue is full
 * @param   const Queue *queue: the queue to be checked.
 * @return  bool: false if not full. true if full.
 */
bool queue_is_full(const Queue* const queue)
{
   456d8:	defffc04 	addi	sp,sp,-16
   456dc:	dfc00315 	stw	ra,12(sp)
   456e0:	df000215 	stw	fp,8(sp)
   456e4:	dc000115 	stw	r16,4(sp)
   456e8:	df000204 	addi	fp,sp,8
   456ec:	e13ffe15 	stw	r4,-8(fp)
    if(queue->front == ( (queue->rear+1) % queue->depth) )
   456f0:	e0bffe17 	ldw	r2,-8(fp)
   456f4:	14000017 	ldw	r16,0(r2)
   456f8:	e0bffe17 	ldw	r2,-8(fp)
   456fc:	10800117 	ldw	r2,4(r2)
   45700:	10c00044 	addi	r3,r2,1
   45704:	e0bffe17 	ldw	r2,-8(fp)
   45708:	10800217 	ldw	r2,8(r2)
   4570c:	100b883a 	mov	r5,r2
   45710:	1809883a 	mov	r4,r3
   45714:	0048fcc0 	call	48fcc <__umodsi3>
   45718:	8080021e 	bne	r16,r2,45724 <queue_is_full+0x4c>
        return true;
   4571c:	00800044 	movi	r2,1
   45720:	00000106 	br	45728 <queue_is_full+0x50>
    else
        return false;
   45724:	0005883a 	mov	r2,zero
}
   45728:	e6ffff04 	addi	sp,fp,-4
   4572c:	dfc00217 	ldw	ra,8(sp)
   45730:	df000117 	ldw	fp,4(sp)
   45734:	dc000017 	ldw	r16,0(sp)
   45738:	dec00304 	addi	sp,sp,12
   4573c:	f800283a 	ret

00045740 <queue_is_empty>:
 * @brief   Boolean check to see if the queue is empty.
 * @param   const Queue *queue: the queue to be checked.
 * @return  bool: false if not empty. true if empty.
 */
bool queue_is_empty(const Queue* const queue)
{
   45740:	defffe04 	addi	sp,sp,-8
   45744:	df000115 	stw	fp,4(sp)
   45748:	df000104 	addi	fp,sp,4
   4574c:	e13fff15 	stw	r4,-4(fp)
    if(queue->front == queue->rear)
   45750:	e0bfff17 	ldw	r2,-4(fp)
   45754:	10c00017 	ldw	r3,0(r2)
   45758:	e0bfff17 	ldw	r2,-4(fp)
   4575c:	10800117 	ldw	r2,4(r2)
   45760:	1880021e 	bne	r3,r2,4576c <queue_is_empty+0x2c>
        return true;
   45764:	00800044 	movi	r2,1
   45768:	00000106 	br	45770 <queue_is_empty+0x30>
    else
        return false;
   4576c:	0005883a 	mov	r2,zero
}
   45770:	e037883a 	mov	sp,fp
   45774:	df000017 	ldw	fp,0(sp)
   45778:	dec00104 	addi	sp,sp,4
   4577c:	f800283a 	ret

00045780 <save2rom>:
 * @param region
 * @return true
 * @return false
 */
bool save2rom(struct __region *region)
{
   45780:	defffc04 	addi	sp,sp,-16
   45784:	dfc00315 	stw	ra,12(sp)
   45788:	df000215 	stw	fp,8(sp)
   4578c:	df000204 	addi	fp,sp,8
   45790:	e13fff15 	stw	r4,-4(fp)
    unsigned int offset_addr;

    iic.write_byte(3, (unsigned char)region->select);  //
   45794:	008001b4 	movhi	r2,6
   45798:	10a4b904 	addi	r2,r2,-27932
   4579c:	10800017 	ldw	r2,0(r2)
   457a0:	e0ffff17 	ldw	r3,-4(fp)
   457a4:	18c1bd17 	ldw	r3,1780(r3)
   457a8:	18c03fcc 	andi	r3,r3,255
   457ac:	180b883a 	mov	r5,r3
   457b0:	010000c4 	movi	r4,3
   457b4:	103ee83a 	callr	r2
    delay_us(10000);
   457b8:	0109c404 	movi	r4,10000
   457bc:	00402c80 	call	402c8 <delay_us>

    offset_addr = GROUP_OFFSET_ADDR + REGION_SPACE_SIZE * region->wr_which;
   457c0:	e0bfff17 	ldw	r2,-4(fp)
   457c4:	10800103 	ldbu	r2,4(r2)
   457c8:	10803fcc 	andi	r2,r2,255
   457cc:	10800084 	addi	r2,r2,2
   457d0:	100492fa 	slli	r2,r2,11
   457d4:	e0bffe15 	stw	r2,-8(fp)
    iic.write_page(offset_addr, (alt_u8 *)region->buffer, TARGET_NUMBER * 2);
   457d8:	008001b4 	movhi	r2,6
   457dc:	10a4b904 	addi	r2,r2,-27932
   457e0:	10800117 	ldw	r2,4(r2)
   457e4:	e0ffff17 	ldw	r3,-4(fp)
   457e8:	18c02704 	addi	r3,r3,156
   457ec:	01819584 	movi	r6,1622
   457f0:	180b883a 	mov	r5,r3
   457f4:	e13ffe17 	ldw	r4,-8(fp)
   457f8:	103ee83a 	callr	r2
    offset_addr += TARGET_NUMBER * 2;
   457fc:	e0bffe17 	ldw	r2,-8(fp)
   45800:	10819584 	addi	r2,r2,1622
   45804:	e0bffe15 	stw	r2,-8(fp)
    iic.write_page(offset_addr, (alt_u8 *)region->zenith_save, ZENITH_NUMBER);
   45808:	008001b4 	movhi	r2,6
   4580c:	10a4b904 	addi	r2,r2,-27932
   45810:	10800117 	ldw	r2,4(r2)
   45814:	e0ffff17 	ldw	r3,-4(fp)
   45818:	18c00184 	addi	r3,r3,6
   4581c:	018019c4 	movi	r6,103
   45820:	180b883a 	mov	r5,r3
   45824:	e13ffe17 	ldw	r4,-8(fp)
   45828:	103ee83a 	callr	r2

    return true;
   4582c:	00800044 	movi	r2,1
}
   45830:	e037883a 	mov	sp,fp
   45834:	dfc00117 	ldw	ra,4(sp)
   45838:	df000017 	ldw	fp,0(sp)
   4583c:	dec00204 	addi	sp,sp,8
   45840:	f800283a 	ret

00045844 <save2fpga>:
 * @param num 0,内层; 1, 中间层; 2:外层
 * @return true
 * @return false
 */
bool save2fpga(struct __region *region, int num)
{
   45844:	defffa04 	addi	sp,sp,-24
   45848:	dfc00515 	stw	ra,20(sp)
   4584c:	df000415 	stw	fp,16(sp)
   45850:	df000404 	addi	fp,sp,16
   45854:	e13ffe15 	stw	r4,-8(fp)
   45858:	e17fff15 	stw	r5,-4(fp)
    int          i;
    unsigned int data;
    if(num == 0)
   4585c:	e0bfff17 	ldw	r2,-4(fp)
   45860:	1000041e 	bne	r2,zero,45874 <save2fpga+0x30>
        data = 0x12340000 + WR_REGION0_DATA;
   45864:	00848d74 	movhi	r2,4661
   45868:	10ac4004 	addi	r2,r2,-20224
   4586c:	e0bffd15 	stw	r2,-12(fp)
   45870:	00000d06 	br	458a8 <save2fpga+0x64>
    else if(num == 1)
   45874:	e0bfff17 	ldw	r2,-4(fp)
   45878:	10800058 	cmpnei	r2,r2,1
   4587c:	1000041e 	bne	r2,zero,45890 <save2fpga+0x4c>
        data = 0x12340000 + WR_REGION1_DATA;
   45880:	00848d74 	movhi	r2,4661
   45884:	10ac4044 	addi	r2,r2,-20223
   45888:	e0bffd15 	stw	r2,-12(fp)
   4588c:	00000606 	br	458a8 <save2fpga+0x64>
    else if(num == 2)
   45890:	e0bfff17 	ldw	r2,-4(fp)
   45894:	10800098 	cmpnei	r2,r2,2
   45898:	1000031e 	bne	r2,zero,458a8 <save2fpga+0x64>
        data = 0x12340000 + WR_REGION2_DATA;
   4589c:	00848d74 	movhi	r2,4661
   458a0:	10ac4084 	addi	r2,r2,-20222
   458a4:	e0bffd15 	stw	r2,-12(fp)

    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   458a8:	e0bffd17 	ldw	r2,-12(fp)
   458ac:	1004143a 	roli	r2,r2,16
   458b0:	100d883a 	mov	r6,r2
   458b4:	01400234 	movhi	r5,8
   458b8:	29484004 	addi	r5,r5,8448
   458bc:	01000234 	movhi	r4,8
   458c0:	21087a04 	addi	r4,r4,8680
   458c4:	004a90c0 	call	4a90c <altera_avalon_fifo_write_fifo>
    data = 811;
   458c8:	0080cac4 	movi	r2,811
   458cc:	e0bffd15 	stw	r2,-12(fp)
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   458d0:	e0bffd17 	ldw	r2,-12(fp)
   458d4:	1004143a 	roli	r2,r2,16
   458d8:	100d883a 	mov	r6,r2
   458dc:	01400234 	movhi	r5,8
   458e0:	29484004 	addi	r5,r5,8448
   458e4:	01000234 	movhi	r4,8
   458e8:	21087a04 	addi	r4,r4,8680
   458ec:	004a90c0 	call	4a90c <altera_avalon_fifo_write_fifo>

    //    data = 0x1000;
    for(i = 0; i < 811; i++)
   458f0:	e03ffc15 	stw	zero,-16(fp)
   458f4:	00001306 	br	45944 <save2fpga+0x100>
    {
        data = region->buffer[i];
   458f8:	e0fffe17 	ldw	r3,-8(fp)
   458fc:	e0bffc17 	ldw	r2,-16(fp)
   45900:	10801384 	addi	r2,r2,78
   45904:	1085883a 	add	r2,r2,r2
   45908:	1885883a 	add	r2,r3,r2
   4590c:	1080000b 	ldhu	r2,0(r2)
   45910:	10bfffcc 	andi	r2,r2,65535
   45914:	e0bffd15 	stw	r2,-12(fp)
        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   45918:	e0bffd17 	ldw	r2,-12(fp)
   4591c:	1004143a 	roli	r2,r2,16
   45920:	100d883a 	mov	r6,r2
   45924:	01400234 	movhi	r5,8
   45928:	29484004 	addi	r5,r5,8448
   4592c:	01000234 	movhi	r4,8
   45930:	21087a04 	addi	r4,r4,8680
   45934:	004a90c0 	call	4a90c <altera_avalon_fifo_write_fifo>
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
    data = 811;
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));

    //    data = 0x1000;
    for(i = 0; i < 811; i++)
   45938:	e0bffc17 	ldw	r2,-16(fp)
   4593c:	10800044 	addi	r2,r2,1
   45940:	e0bffc15 	stw	r2,-16(fp)
   45944:	e0bffc17 	ldw	r2,-16(fp)
   45948:	1080cad0 	cmplti	r2,r2,811
   4594c:	103fea1e 	bne	r2,zero,458f8 <__alt_mem_epcs_flash+0xfffc48f8>
    {
        data = region->buffer[i];
        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
    }
    data = 0xccccdddd;
   45950:	00b33374 	movhi	r2,52429
   45954:	10b77744 	addi	r2,r2,-8739
   45958:	e0bffd15 	stw	r2,-12(fp)
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   4595c:	e0bffd17 	ldw	r2,-12(fp)
   45960:	1004143a 	roli	r2,r2,16
   45964:	100d883a 	mov	r6,r2
   45968:	01400234 	movhi	r5,8
   4596c:	29484004 	addi	r5,r5,8448
   45970:	01000234 	movhi	r4,8
   45974:	21087a04 	addi	r4,r4,8680
   45978:	004a90c0 	call	4a90c <altera_avalon_fifo_write_fifo>
    return true;
   4597c:	00800044 	movi	r2,1
}
   45980:	e037883a 	mov	sp,fp
   45984:	dfc00117 	ldw	ra,4(sp)
   45988:	df000017 	ldw	fp,0(sp)
   4598c:	dec00204 	addi	sp,sp,8
   45990:	f800283a 	ret

00045994 <read_from_rom>:
 * @param num e2prom内存空间编号. 0, 3内存; 1,4,中间层; 2,5 外层
 * @return true
 * @return false
 */
bool read_from_rom(struct __region *region, int num)
{
   45994:	defffa04 	addi	sp,sp,-24
   45998:	dfc00515 	stw	ra,20(sp)
   4599c:	df000415 	stw	fp,16(sp)
   459a0:	dc000315 	stw	r16,12(sp)
   459a4:	df000404 	addi	fp,sp,16
   459a8:	e13ffd15 	stw	r4,-12(fp)
   459ac:	e17ffe15 	stw	r5,-8(fp)
    unsigned int offset_addr;

    offset_addr = GROUP_OFFSET_ADDR + num * REGION_SPACE_SIZE;
   459b0:	e0bffe17 	ldw	r2,-8(fp)
   459b4:	10800084 	addi	r2,r2,2
   459b8:	100492fa 	slli	r2,r2,11
   459bc:	e0bffc15 	stw	r2,-16(fp)
    iic_sequential_read(offset_addr, (alt_u8 *)region->buffer, TARGET_NUMBER * 2);
   459c0:	e0bffd17 	ldw	r2,-12(fp)
   459c4:	10802704 	addi	r2,r2,156
   459c8:	01819584 	movi	r6,1622
   459cc:	100b883a 	mov	r5,r2
   459d0:	e13ffc17 	ldw	r4,-16(fp)
   459d4:	00422ac0 	call	422ac <iic_sequential_read>
    alarm_region.save2fpga(&alarm_region, num % 3);
   459d8:	008001b4 	movhi	r2,6
   459dc:	10a4c504 	addi	r2,r2,-27884
   459e0:	1401c017 	ldw	r16,1792(r2)
   459e4:	e0bffe17 	ldw	r2,-8(fp)
   459e8:	014000c4 	movi	r5,3
   459ec:	1009883a 	mov	r4,r2
   459f0:	0048ef40 	call	48ef4 <__modsi3>
   459f4:	100b883a 	mov	r5,r2
   459f8:	010001b4 	movhi	r4,6
   459fc:	2124c504 	addi	r4,r4,-27884
   45a00:	803ee83a 	callr	r16

    return true;
   45a04:	00800044 	movi	r2,1
}
   45a08:	e6ffff04 	addi	sp,fp,-4
   45a0c:	dfc00217 	ldw	ra,8(sp)
   45a10:	df000117 	ldw	fp,4(sp)
   45a14:	dc000017 	ldw	r16,0(sp)
   45a18:	dec00304 	addi	sp,sp,12
   45a1c:	f800283a 	ret

00045a20 <save_sys_para>:
 * @brief 将SysStatus里的系统运行参数保存到Flash里, 小端模式写入
 * TODO: 解决参数区域内容被意外擦除
 * @param data
 */
void save_sys_para(Sys_Para *data)
{
   45a20:	deff9d04 	addi	sp,sp,-396
   45a24:	dfc06215 	stw	ra,392(sp)
   45a28:	df006115 	stw	fp,388(sp)
   45a2c:	df006104 	addi	fp,sp,388
   45a30:	e13fff15 	stw	r4,-4(fp)
    unsigned char buf[384];
    memset(buf, 0, sizeof(buf));
   45a34:	01806004 	movi	r6,384
   45a38:	000b883a 	mov	r5,zero
   45a3c:	e13f9f04 	addi	r4,fp,-388
   45a40:	004916c0 	call	4916c <memset>
    memcpy(buf, (unsigned char *)data, sizeof(Sys_Para));
   45a44:	01804b04 	movi	r6,300
   45a48:	e17fff17 	ldw	r5,-4(fp)
   45a4c:	e13f9f04 	addi	r4,fp,-388
   45a50:	00490240 	call	49024 <memcpy>
    iic.write_page(SYS_PARA_ADDR, buf, sizeof(Sys_Para));
   45a54:	008001b4 	movhi	r2,6
   45a58:	10a4b904 	addi	r2,r2,-27932
   45a5c:	10800117 	ldw	r2,4(r2)
   45a60:	01804b04 	movi	r6,300
   45a64:	e17f9f04 	addi	r5,fp,-388
   45a68:	01010004 	movi	r4,1024
   45a6c:	103ee83a 	callr	r2
}
   45a70:	0001883a 	nop
   45a74:	e037883a 	mov	sp,fp
   45a78:	dfc00117 	ldw	ra,4(sp)
   45a7c:	df000017 	ldw	fp,0(sp)
   45a80:	dec00204 	addi	sp,sp,8
   45a84:	f800283a 	ret

00045a88 <read_sys_para>:
 * @brief 如果Flash为空，则版本号为0.01。保存参数重新上电后，版本号正常
 *
 * @param status
 */
void read_sys_para(Sys_Para *status)
{
   45a88:	deff9c04 	addi	sp,sp,-400
   45a8c:	dfc06315 	stw	ra,396(sp)
   45a90:	df006215 	stw	fp,392(sp)
   45a94:	df006204 	addi	fp,sp,392
   45a98:	e13fff15 	stw	r4,-4(fp)
    unsigned int  num = 5;
   45a9c:	00800144 	movi	r2,5
   45aa0:	e0bf9e15 	stw	r2,-392(fp)
    unsigned char buf[384];

    while(num--)
   45aa4:	00005406 	br	45bf8 <read_sys_para+0x170>
    {
        iic_sequential_read(SYS_PARA_ADDR, buf, sizeof(Sys_Para));
   45aa8:	e0bf9f04 	addi	r2,fp,-388
   45aac:	01804b04 	movi	r6,300
   45ab0:	100b883a 	mov	r5,r2
   45ab4:	01010004 	movi	r4,1024
   45ab8:	00422ac0 	call	422ac <iic_sequential_read>
        status->dust_threshold = 400;
   45abc:	e0bfff17 	ldw	r2,-4(fp)
   45ac0:	00c06404 	movi	r3,400
   45ac4:	10c04915 	stw	r3,292(r2)
        // 简单判断从eeprom读出来的数据是否正确
        if(((buf[4] == 0x11) && (buf[5] == 0x11) && (buf[6] == 0x11) && (buf[7] == 0x11)) ||
   45ac8:	e0bfa003 	ldbu	r2,-384(fp)
   45acc:	10803fcc 	andi	r2,r2,255
   45ad0:	10800458 	cmpnei	r2,r2,17
   45ad4:	10000c1e 	bne	r2,zero,45b08 <read_sys_para+0x80>
   45ad8:	e0bfa043 	ldbu	r2,-383(fp)
   45adc:	10803fcc 	andi	r2,r2,255
   45ae0:	10800458 	cmpnei	r2,r2,17
   45ae4:	1000081e 	bne	r2,zero,45b08 <read_sys_para+0x80>
   45ae8:	e0bfa083 	ldbu	r2,-382(fp)
   45aec:	10803fcc 	andi	r2,r2,255
   45af0:	10800458 	cmpnei	r2,r2,17
   45af4:	1000041e 	bne	r2,zero,45b08 <read_sys_para+0x80>
   45af8:	e0bfa0c3 	ldbu	r2,-381(fp)
   45afc:	10803fcc 	andi	r2,r2,255
   45b00:	10800460 	cmpeqi	r2,r2,17
   45b04:	1000101e 	bne	r2,zero,45b48 <read_sys_para+0xc0>
           ((buf[4] == 0x22) && (buf[5] == 0x22) && (buf[6] == 0x22) && (buf[7] == 0x22)))
   45b08:	e0bfa003 	ldbu	r2,-384(fp)
    while(num--)
    {
        iic_sequential_read(SYS_PARA_ADDR, buf, sizeof(Sys_Para));
        status->dust_threshold = 400;
        // 简单判断从eeprom读出来的数据是否正确
        if(((buf[4] == 0x11) && (buf[5] == 0x11) && (buf[6] == 0x11) && (buf[7] == 0x11)) ||
   45b0c:	10803fcc 	andi	r2,r2,255
   45b10:	10800898 	cmpnei	r2,r2,34
   45b14:	1000381e 	bne	r2,zero,45bf8 <read_sys_para+0x170>
           ((buf[4] == 0x22) && (buf[5] == 0x22) && (buf[6] == 0x22) && (buf[7] == 0x22)))
   45b18:	e0bfa043 	ldbu	r2,-383(fp)
   45b1c:	10803fcc 	andi	r2,r2,255
   45b20:	10800898 	cmpnei	r2,r2,34
   45b24:	1000341e 	bne	r2,zero,45bf8 <read_sys_para+0x170>
   45b28:	e0bfa083 	ldbu	r2,-382(fp)
   45b2c:	10803fcc 	andi	r2,r2,255
   45b30:	10800898 	cmpnei	r2,r2,34
   45b34:	1000301e 	bne	r2,zero,45bf8 <read_sys_para+0x170>
   45b38:	e0bfa0c3 	ldbu	r2,-381(fp)
   45b3c:	10803fcc 	andi	r2,r2,255
   45b40:	10800898 	cmpnei	r2,r2,34
   45b44:	10002c1e 	bne	r2,zero,45bf8 <read_sys_para+0x170>
        {
            memcpy(status, buf, sizeof(Sys_Para));
   45b48:	e0bf9f04 	addi	r2,fp,-388
   45b4c:	01804b04 	movi	r6,300
   45b50:	100b883a 	mov	r5,r2
   45b54:	e13fff17 	ldw	r4,-4(fp)
   45b58:	00490240 	call	49024 <memcpy>

            // 标识位即时写入E2PROM, 如果此时系统断电, 重新上电后系统状态会出错
            status->update_pos_flag = true;
   45b5c:	e0bfff17 	ldw	r2,-4(fp)
   45b60:	00c00044 	movi	r3,1
   45b64:	10c00005 	stb	r3,0(r2)
            status->motor_enable    = ENABLE;
   45b68:	e0ffff17 	ldw	r3,-4(fp)
   45b6c:	00844474 	movhi	r2,4369
   45b70:	10844444 	addi	r2,r2,4369
   45b74:	18800415 	stw	r2,16(r3)
            status->laser_enable    = ENABLE;
   45b78:	e0ffff17 	ldw	r3,-4(fp)
   45b7c:	00844474 	movhi	r2,4369
   45b80:	10844444 	addi	r2,r2,4369
   45b84:	18800115 	stw	r2,4(r3)
            status->max_pwm_duty    = 10;
   45b88:	e0bfff17 	ldw	r2,-4(fp)
   45b8c:	00c00284 	movi	r3,10
   45b90:	10c01f15 	stw	r3,124(r2)
            status->dust_threshold = 400;
   45b94:	e0bfff17 	ldw	r2,-4(fp)
   45b98:	00c06404 	movi	r3,400
   45b9c:	10c04915 	stw	r3,292(r2)
            memcpy(status->nios_ver, NIOS_VERSION, 4);
   45ba0:	e0bfff17 	ldw	r2,-4(fp)
   45ba4:	10801504 	addi	r2,r2,84
   45ba8:	01800104 	movi	r6,4
   45bac:	01400174 	movhi	r5,5
   45bb0:	2973de04 	addi	r5,r5,-12424
   45bb4:	1009883a 	mov	r4,r2
   45bb8:	00490240 	call	49024 <memcpy>
            memcpy(status->fpga_ver, FPGA_VERSION, 4);
   45bbc:	e0bfff17 	ldw	r2,-4(fp)
   45bc0:	10801604 	addi	r2,r2,88
   45bc4:	01800104 	movi	r6,4
   45bc8:	01400174 	movhi	r5,5
   45bcc:	2973de04 	addi	r5,r5,-12424
   45bd0:	1009883a 	mov	r4,r2
   45bd4:	00490240 	call	49024 <memcpy>
            memcpy(status->dev_pn, DEV_PN_NUM, 20);
   45bd8:	e0bfff17 	ldw	r2,-4(fp)
   45bdc:	10803304 	addi	r2,r2,204
   45be0:	01800504 	movi	r6,20
   45be4:	01400174 	movhi	r5,5
   45be8:	2973e004 	addi	r5,r5,-12416
   45bec:	1009883a 	mov	r4,r2
   45bf0:	00490240 	call	49024 <memcpy>
   45bf4:	00000406 	br	45c08 <read_sys_para+0x180>
void read_sys_para(Sys_Para *status)
{
    unsigned int  num = 5;
    unsigned char buf[384];

    while(num--)
   45bf8:	e0bf9e17 	ldw	r2,-392(fp)
   45bfc:	10ffffc4 	addi	r3,r2,-1
   45c00:	e0ff9e15 	stw	r3,-392(fp)
   45c04:	103fa81e 	bne	r2,zero,45aa8 <__alt_mem_epcs_flash+0xfffc4aa8>
            memcpy(status->dev_pn, DEV_PN_NUM, 20);

            return;
        }
    }
}
   45c08:	e037883a 	mov	sp,fp
   45c0c:	dfc00117 	ldw	ra,4(sp)
   45c10:	df000017 	ldw	fp,0(sp)
   45c14:	dec00204 	addi	sp,sp,8
   45c18:	f800283a 	ret

00045c1c <rd_switch_io_value>:

unsigned char rd_switch_io_value(void)
{
   45c1c:	defffe04 	addi	sp,sp,-8
   45c20:	df000115 	stw	fp,4(sp)
   45c24:	df000104 	addi	fp,sp,4
    unsigned char data;
    data = IORD_ALTERA_AVALON_PIO_DATA(ALARM_SELECT_BASE);
   45c28:	00800234 	movhi	r2,8
   45c2c:	10885004 	addi	r2,r2,8512
   45c30:	10800037 	ldwio	r2,0(r2)
   45c34:	e0bfff05 	stb	r2,-4(fp)
    data = (~data) & 0x0f;
   45c38:	e0bfff03 	ldbu	r2,-4(fp)
   45c3c:	0084303a 	nor	r2,zero,r2
   45c40:	108003cc 	andi	r2,r2,15
   45c44:	e0bfff05 	stb	r2,-4(fp)
    return data;
   45c48:	e0bfff03 	ldbu	r2,-4(fp)
}
   45c4c:	e037883a 	mov	sp,fp
   45c50:	df000017 	ldw	fp,0(sp)
   45c54:	dec00104 	addi	sp,sp,4
   45c58:	f800283a 	ret

00045c5c <image_write>:
#include "remote_update.h"

update_t image;

int image_write(int addr, unsigned char *data)
{
   45c5c:	defff104 	addi	sp,sp,-60
   45c60:	dfc00e15 	stw	ra,56(sp)
   45c64:	df000d15 	stw	fp,52(sp)
   45c68:	df000d04 	addi	fp,sp,52
   45c6c:	e13ffe15 	stw	r4,-8(fp)
   45c70:	e17fff15 	stw	r5,-4(fp)
    int           block_addr;
    int           offset;
    int           ret_code;
    alt_flash_fd *fd;

    block_addr = (int)(addr / EPCS_BLOCK_SIZE) * EPCS_BLOCK_SIZE;
   45c74:	e0bffe17 	ldw	r2,-8(fp)
   45c78:	1000020e 	bge	r2,zero,45c84 <image_write+0x28>
   45c7c:	00ffffd4 	movui	r3,65535
   45c80:	10c5883a 	add	r2,r2,r3
   45c84:	1005d43a 	srai	r2,r2,16
   45c88:	1004943a 	slli	r2,r2,16
   45c8c:	e0bff415 	stw	r2,-48(fp)
    offset     = addr % EPCS_BLOCK_SIZE;
   45c90:	e0fffe17 	ldw	r3,-8(fp)
   45c94:	00a00074 	movhi	r2,32769
   45c98:	10bfffc4 	addi	r2,r2,-1
   45c9c:	1884703a 	and	r2,r3,r2
   45ca0:	1000030e 	bge	r2,zero,45cb0 <image_write+0x54>
   45ca4:	10bfffc4 	addi	r2,r2,-1
   45ca8:	10bffff4 	orhi	r2,r2,65535
   45cac:	10800044 	addi	r2,r2,1
   45cb0:	e0bff515 	stw	r2,-44(fp)
    fd         = alt_flash_open_dev(EPCS_FLASH_NAME);
   45cb4:	01000174 	movhi	r4,5
   45cb8:	2133e404 	addi	r4,r4,-12400
   45cbc:	00494d80 	call	494d8 <alt_flash_open_dev>
   45cc0:	e0bff615 	stw	r2,-40(fp)
    if(!fd)
   45cc4:	e0bff617 	ldw	r2,-40(fp)
   45cc8:	1000021e 	bne	r2,zero,45cd4 <image_write+0x78>
        return 0;
   45ccc:	0005883a 	mov	r2,zero
   45cd0:	00001b06 	br	45d40 <image_write+0xe4>
    else
    {
        ret_code = alt_write_flash_block(fd, block_addr, block_addr + offset, data, 256);
   45cd4:	e0fff417 	ldw	r3,-48(fp)
   45cd8:	e0bff517 	ldw	r2,-44(fp)
   45cdc:	1885883a 	add	r2,r3,r2
   45ce0:	e0fff617 	ldw	r3,-40(fp)
   45ce4:	e0fff815 	stw	r3,-32(fp)
   45ce8:	e0fff417 	ldw	r3,-48(fp)
   45cec:	e0fff915 	stw	r3,-28(fp)
   45cf0:	e0bffa15 	stw	r2,-24(fp)
   45cf4:	e0bfff17 	ldw	r2,-4(fp)
   45cf8:	e0bffb15 	stw	r2,-20(fp)
   45cfc:	00804004 	movi	r2,256
   45d00:	e0bffc15 	stw	r2,-16(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
   45d04:	e0bff817 	ldw	r2,-32(fp)
   45d08:	10800917 	ldw	r2,36(r2)
   45d0c:	e0fffc17 	ldw	r3,-16(fp)
   45d10:	d8c00015 	stw	r3,0(sp)
   45d14:	e1fffb17 	ldw	r7,-20(fp)
   45d18:	e1bffa17 	ldw	r6,-24(fp)
   45d1c:	e17ff917 	ldw	r5,-28(fp)
   45d20:	e13ff817 	ldw	r4,-32(fp)
   45d24:	103ee83a 	callr	r2
   45d28:	e0bffd15 	stw	r2,-12(fp)

/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
*/
  return ret_code;
   45d2c:	e0bffd17 	ldw	r2,-12(fp)
   45d30:	e0bff715 	stw	r2,-36(fp)
        alt_flash_close_dev(fd);
   45d34:	e13ff617 	ldw	r4,-40(fp)
   45d38:	00495400 	call	49540 <alt_flash_close_dev>
        return ret_code;
   45d3c:	e0bff717 	ldw	r2,-36(fp)
    }
}
   45d40:	e037883a 	mov	sp,fp
   45d44:	dfc00117 	ldw	ra,4(sp)
   45d48:	df000017 	ldw	fp,0(sp)
   45d4c:	dec00204 	addi	sp,sp,8
   45d50:	f800283a 	ret

00045d54 <image_read>:

int image_read(int addr, unsigned char *data)
{
   45d54:	defff604 	addi	sp,sp,-40
   45d58:	dfc00915 	stw	ra,36(sp)
   45d5c:	df000815 	stw	fp,32(sp)
   45d60:	df000804 	addi	fp,sp,32
   45d64:	e13ffe15 	stw	r4,-8(fp)
   45d68:	e17fff15 	stw	r5,-4(fp)
    int           ret_code;
    alt_flash_fd *fd;

    fd = alt_flash_open_dev(EPCS_FLASH_NAME);
   45d6c:	01000174 	movhi	r4,5
   45d70:	2133e404 	addi	r4,r4,-12400
   45d74:	00494d80 	call	494d8 <alt_flash_open_dev>
   45d78:	e0bff815 	stw	r2,-32(fp)
    if(!fd)
   45d7c:	e0bff817 	ldw	r2,-32(fp)
   45d80:	1000021e 	bne	r2,zero,45d8c <image_read+0x38>
        return 0;
   45d84:	0005883a 	mov	r2,zero
   45d88:	00001306 	br	45dd8 <image_read+0x84>
   45d8c:	e0bff817 	ldw	r2,-32(fp)
   45d90:	e0bffa15 	stw	r2,-24(fp)
   45d94:	e0bffe17 	ldw	r2,-8(fp)
   45d98:	e0bffb15 	stw	r2,-20(fp)
   45d9c:	e0bfff17 	ldw	r2,-4(fp)
   45da0:	e0bffc15 	stw	r2,-16(fp)
   45da4:	00804004 	movi	r2,256
   45da8:	e0bffd15 	stw	r2,-12(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
   45dac:	e0bffa17 	ldw	r2,-24(fp)
   45db0:	10800617 	ldw	r2,24(r2)
   45db4:	e1fffd17 	ldw	r7,-12(fp)
   45db8:	e1bffc17 	ldw	r6,-16(fp)
   45dbc:	e17ffb17 	ldw	r5,-20(fp)
   45dc0:	e13ffa17 	ldw	r4,-24(fp)
   45dc4:	103ee83a 	callr	r2
    else
    {
        ret_code = alt_read_flash(fd, addr, data, 256);
   45dc8:	e0bff915 	stw	r2,-28(fp)
        alt_flash_close_dev(fd);
   45dcc:	e13ff817 	ldw	r4,-32(fp)
   45dd0:	00495400 	call	49540 <alt_flash_close_dev>

        return ret_code;
   45dd4:	e0bff917 	ldw	r2,-28(fp)
    }
}
   45dd8:	e037883a 	mov	sp,fp
   45ddc:	dfc00117 	ldw	ra,4(sp)
   45de0:	df000017 	ldw	fp,0(sp)
   45de4:	dec00204 	addi	sp,sp,8
   45de8:	f800283a 	ret

00045dec <image_erase>:

int image_erase(int block_offset)
{
   45dec:	defff704 	addi	sp,sp,-36
   45df0:	dfc00815 	stw	ra,32(sp)
   45df4:	df000715 	stw	fp,28(sp)
   45df8:	df000704 	addi	fp,sp,28
   45dfc:	e13fff15 	stw	r4,-4(fp)
    int           ret_code;
    alt_flash_fd *fd;

    fd = alt_flash_open_dev(EPCS_FLASH_NAME);
   45e00:	01000174 	movhi	r4,5
   45e04:	2133e404 	addi	r4,r4,-12400
   45e08:	00494d80 	call	494d8 <alt_flash_open_dev>
   45e0c:	e0bff915 	stw	r2,-28(fp)
    if(!fd)
   45e10:	e0bff917 	ldw	r2,-28(fp)
   45e14:	1000021e 	bne	r2,zero,45e20 <image_erase+0x34>
        return 0;
   45e18:	0005883a 	mov	r2,zero
   45e1c:	00001206 	br	45e68 <image_erase+0x7c>
    else
    {
        ret_code = alt_erase_flash_block(fd, block_offset * EPCS_BLOCK_SIZE, EPCS_BLOCK_SIZE);
   45e20:	e0bfff17 	ldw	r2,-4(fp)
   45e24:	1004943a 	slli	r2,r2,16
   45e28:	e0fff917 	ldw	r3,-28(fp)
   45e2c:	e0fffb15 	stw	r3,-20(fp)
   45e30:	e0bffc15 	stw	r2,-16(fp)
   45e34:	00800074 	movhi	r2,1
   45e38:	e0bffd15 	stw	r2,-12(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
   45e3c:	e0bffb17 	ldw	r2,-20(fp)
   45e40:	10800817 	ldw	r2,32(r2)
   45e44:	e17ffc17 	ldw	r5,-16(fp)
   45e48:	e13ffb17 	ldw	r4,-20(fp)
   45e4c:	103ee83a 	callr	r2
   45e50:	e0bffe15 	stw	r2,-8(fp)
  
/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
*/
  return ret_code;
   45e54:	e0bffe17 	ldw	r2,-8(fp)
   45e58:	e0bffa15 	stw	r2,-24(fp)
        alt_flash_close_dev(fd);
   45e5c:	e13ff917 	ldw	r4,-28(fp)
   45e60:	00495400 	call	49540 <alt_flash_close_dev>
        return ret_code;
   45e64:	e0bffa17 	ldw	r2,-24(fp)
    }
}
   45e68:	e037883a 	mov	sp,fp
   45e6c:	dfc00117 	ldw	ra,4(sp)
   45e70:	df000017 	ldw	fp,0(sp)
   45e74:	dec00204 	addi	sp,sp,8
   45e78:	f800283a 	ret

00045e7c <string2hex>:
 * @param src 源字符串
 * @param len 源字符串长度
 * @param dest
 */
static void string2hex(const char *src, int len, char *dest)
{
   45e7c:	defffa04 	addi	sp,sp,-24
   45e80:	df000515 	stw	fp,20(sp)
   45e84:	df000504 	addi	fp,sp,20
   45e88:	e13ffd15 	stw	r4,-12(fp)
   45e8c:	e17ffe15 	stw	r5,-8(fp)
   45e90:	e1bfff15 	stw	r6,-4(fp)
    int  i;
    char data[2];
    for(i = 0; i < len; i++)
   45e94:	e03ffb15 	stw	zero,-20(fp)
   45e98:	00001a06 	br	45f04 <string2hex+0x88>
    {
        data[0] = *src++;  // 取出前面2个字符
   45e9c:	e0bffd17 	ldw	r2,-12(fp)
   45ea0:	10c00044 	addi	r3,r2,1
   45ea4:	e0fffd15 	stw	r3,-12(fp)
   45ea8:	10800003 	ldbu	r2,0(r2)
   45eac:	e0bffc05 	stb	r2,-16(fp)
        data[1] = *src++;
   45eb0:	e0bffd17 	ldw	r2,-12(fp)
   45eb4:	10c00044 	addi	r3,r2,1
   45eb8:	e0fffd15 	stw	r3,-12(fp)
   45ebc:	10800003 	ldbu	r2,0(r2)
   45ec0:	e0bffc45 	stb	r2,-15(fp)
        //        *dest = strtol(data, &pEnd, 16);
        *dest = ((data[0] - 0x30) << 4) + (data[1] - 0x30);
   45ec4:	e0bffc03 	ldbu	r2,-16(fp)
   45ec8:	10bff404 	addi	r2,r2,-48
   45ecc:	1004913a 	slli	r2,r2,4
   45ed0:	1007883a 	mov	r3,r2
   45ed4:	e0bffc43 	ldbu	r2,-15(fp)
   45ed8:	1885883a 	add	r2,r3,r2
   45edc:	10bff404 	addi	r2,r2,-48
   45ee0:	1007883a 	mov	r3,r2
   45ee4:	e0bfff17 	ldw	r2,-4(fp)
   45ee8:	10c00005 	stb	r3,0(r2)
        dest++;
   45eec:	e0bfff17 	ldw	r2,-4(fp)
   45ef0:	10800044 	addi	r2,r2,1
   45ef4:	e0bfff15 	stw	r2,-4(fp)
 */
static void string2hex(const char *src, int len, char *dest)
{
    int  i;
    char data[2];
    for(i = 0; i < len; i++)
   45ef8:	e0bffb17 	ldw	r2,-20(fp)
   45efc:	10800044 	addi	r2,r2,1
   45f00:	e0bffb15 	stw	r2,-20(fp)
   45f04:	e0fffb17 	ldw	r3,-20(fp)
   45f08:	e0bffe17 	ldw	r2,-8(fp)
   45f0c:	18bfe316 	blt	r3,r2,45e9c <__alt_mem_epcs_flash+0xfffc4e9c>
        data[1] = *src++;
        //        *dest = strtol(data, &pEnd, 16);
        *dest = ((data[0] - 0x30) << 4) + (data[1] - 0x30);
        dest++;
    }
}
   45f10:	0001883a 	nop
   45f14:	e037883a 	mov	sp,fp
   45f18:	df000017 	ldw	fp,0(sp)
   45f1c:	dec00104 	addi	sp,sp,4
   45f20:	f800283a 	ret

00045f24 <find_index>:

static int find_index(char *str, int str_len, char **array, int length)
{
   45f24:	defff804 	addi	sp,sp,-32
   45f28:	dfc00715 	stw	ra,28(sp)
   45f2c:	df000615 	stw	fp,24(sp)
   45f30:	df000604 	addi	fp,sp,24
   45f34:	e13ffc15 	stw	r4,-16(fp)
   45f38:	e17ffd15 	stw	r5,-12(fp)
   45f3c:	e1bffe15 	stw	r6,-8(fp)
   45f40:	e1ffff15 	stw	r7,-4(fp)
    int i;
    int len;
    for(i = 0; i < length; i++)
   45f44:	e03ffa15 	stw	zero,-24(fp)
   45f48:	00001f06 	br	45fc8 <find_index+0xa4>
    {
        len = strlen(array[i]);
   45f4c:	e0bffa17 	ldw	r2,-24(fp)
   45f50:	1085883a 	add	r2,r2,r2
   45f54:	1085883a 	add	r2,r2,r2
   45f58:	1007883a 	mov	r3,r2
   45f5c:	e0bffe17 	ldw	r2,-8(fp)
   45f60:	10c5883a 	add	r2,r2,r3
   45f64:	10800017 	ldw	r2,0(r2)
   45f68:	1009883a 	mov	r4,r2
   45f6c:	00493700 	call	49370 <strlen>
   45f70:	e0bffb15 	stw	r2,-20(fp)
        if(strncmp(str, array[i], str_len) == 0 && (len == str_len))
   45f74:	e0bffa17 	ldw	r2,-24(fp)
   45f78:	1085883a 	add	r2,r2,r2
   45f7c:	1085883a 	add	r2,r2,r2
   45f80:	1007883a 	mov	r3,r2
   45f84:	e0bffe17 	ldw	r2,-8(fp)
   45f88:	10c5883a 	add	r2,r2,r3
   45f8c:	10800017 	ldw	r2,0(r2)
   45f90:	e0fffd17 	ldw	r3,-12(fp)
   45f94:	180d883a 	mov	r6,r3
   45f98:	100b883a 	mov	r5,r2
   45f9c:	e13ffc17 	ldw	r4,-16(fp)
   45fa0:	00494080 	call	49408 <strncmp>
   45fa4:	1000051e 	bne	r2,zero,45fbc <find_index+0x98>
   45fa8:	e0fffb17 	ldw	r3,-20(fp)
   45fac:	e0bffd17 	ldw	r2,-12(fp)
   45fb0:	1880021e 	bne	r3,r2,45fbc <find_index+0x98>
            return i;
   45fb4:	e0bffa17 	ldw	r2,-24(fp)
   45fb8:	00000706 	br	45fd8 <find_index+0xb4>

static int find_index(char *str, int str_len, char **array, int length)
{
    int i;
    int len;
    for(i = 0; i < length; i++)
   45fbc:	e0bffa17 	ldw	r2,-24(fp)
   45fc0:	10800044 	addi	r2,r2,1
   45fc4:	e0bffa15 	stw	r2,-24(fp)
   45fc8:	e0fffa17 	ldw	r3,-24(fp)
   45fcc:	e0bfff17 	ldw	r2,-4(fp)
   45fd0:	18bfde16 	blt	r3,r2,45f4c <__alt_mem_epcs_flash+0xfffc4f4c>
    {
        len = strlen(array[i]);
        if(strncmp(str, array[i], str_len) == 0 && (len == str_len))
            return i;
    }
    return -1;
   45fd4:	00bfffc4 	movi	r2,-1
}
   45fd8:	e037883a 	mov	sp,fp
   45fdc:	dfc00117 	ldw	ra,4(sp)
   45fe0:	df000017 	ldw	fp,0(sp)
   45fe4:	dec00204 	addi	sp,sp,8
   45fe8:	f800283a 	ret

00045fec <sick_protocol_process>:

void sick_protocol_process(SOCKET s, unsigned char *buf, int len)
{
   45fec:	defff604 	addi	sp,sp,-40
   45ff0:	dfc00915 	stw	ra,36(sp)
   45ff4:	df000815 	stw	fp,32(sp)
   45ff8:	df000804 	addi	fp,sp,32
   45ffc:	2005883a 	mov	r2,r4
   46000:	e17ffe15 	stw	r5,-8(fp)
   46004:	e1bfff15 	stw	r6,-4(fp)
   46008:	e0bffd05 	stb	r2,-12(fp)
    int            send_len;
    int            i;
    unsigned char  enable_flag  = 0;  //  enable = 1, 上传数据， enable = 2 停止上传数据
   4600c:	e03ff905 	stb	zero,-28(fp)
    unsigned char *recv_command = buf + 1;
   46010:	e0bffe17 	ldw	r2,-8(fp)
   46014:	10800044 	addi	r2,r2,1
   46018:	e0bffa15 	stw	r2,-24(fp)
    int            pos          = 0;
   4601c:	e03ffb15 	stw	zero,-20(fp)
    pos                         = find_index((char *)recv_command, len - 2, tim561_index, 572);
   46020:	e0bfff17 	ldw	r2,-4(fp)
   46024:	10bfff84 	addi	r2,r2,-2
   46028:	01c08f04 	movi	r7,572
   4602c:	018001b4 	movhi	r6,6
   46030:	31a7e204 	addi	r6,r6,-24696
   46034:	100b883a 	mov	r5,r2
   46038:	e13ffa17 	ldw	r4,-24(fp)
   4603c:	0045f240 	call	45f24 <find_index>
   46040:	e0bffb15 	stw	r2,-20(fp)
    if(pos != -1)  // 命令属于tim561协议
   46044:	e0bffb17 	ldw	r2,-20(fp)
   46048:	10bfffe0 	cmpeqi	r2,r2,-1
   4604c:	1001b91e 	bne	r2,zero,46734 <sick_protocol_process+0x748>
    {
        /*
         *  "sMI 0 3 F4724744" , "sMI 2"需要回复很多命令，需要特殊处理
         */
        if(strncmp((char *)recv_command, "sMI 0 3 F4724744", strlen((char *)"sMI 0 3 F4724744")) == 0)
   46050:	01800404 	movi	r6,16
   46054:	01400174 	movhi	r5,5
   46058:	2973e804 	addi	r5,r5,-12384
   4605c:	e13ffa17 	ldw	r4,-24(fp)
   46060:	00494080 	call	49408 <strncmp>
   46064:	1000701e 	bne	r2,zero,46228 <sick_protocol_process+0x23c>
        {
            if(SysPara.update_pos_flag == false)  //   没有上传数据时，sops软件电机点击stop measure响应下面数据
   46068:	008001b4 	movhi	r2,6
   4606c:	10a46e04 	addi	r2,r2,-28232
   46070:	10800003 	ldbu	r2,0(r2)
   46074:	1080005c 	xori	r2,r2,1
   46078:	10803fcc 	andi	r2,r2,255
   4607c:	10003526 	beq	r2,zero,46154 <sick_protocol_process+0x168>
            {
                for(i = 0; i < 2; i++)
   46080:	e03ff815 	stw	zero,-32(fp)
   46084:	00002f06 	br	46144 <sick_protocol_process+0x158>
                {
                    send_len = strlen(sMI_0_3_F4724744_start[i]);
   46088:	008001b4 	movhi	r2,6
   4608c:	10b34b04 	addi	r2,r2,-13012
   46090:	e0fff817 	ldw	r3,-32(fp)
   46094:	18c7883a 	add	r3,r3,r3
   46098:	18c7883a 	add	r3,r3,r3
   4609c:	10c5883a 	add	r2,r2,r3
   460a0:	10800017 	ldw	r2,0(r2)
   460a4:	1009883a 	mov	r4,r2
   460a8:	00493700 	call	49370 <strlen>
   460ac:	e0bffc15 	stw	r2,-16(fp)
                    memcpy(send_buffer + 1, sMI_0_3_F4724744_start[i], send_len);
   460b0:	00c001b4 	movhi	r3,6
   460b4:	18c71544 	addi	r3,r3,7253
   460b8:	008001b4 	movhi	r2,6
   460bc:	10b34b04 	addi	r2,r2,-13012
   460c0:	e13ff817 	ldw	r4,-32(fp)
   460c4:	2109883a 	add	r4,r4,r4
   460c8:	2109883a 	add	r4,r4,r4
   460cc:	1105883a 	add	r2,r2,r4
   460d0:	10800017 	ldw	r2,0(r2)
   460d4:	e13ffc17 	ldw	r4,-16(fp)
   460d8:	200d883a 	mov	r6,r4
   460dc:	100b883a 	mov	r5,r2
   460e0:	1809883a 	mov	r4,r3
   460e4:	00490240 	call	49024 <memcpy>
                    send_buffer[0]            = 0x02;
   460e8:	008001b4 	movhi	r2,6
   460ec:	10871504 	addi	r2,r2,7252
   460f0:	00c00084 	movi	r3,2
   460f4:	10c00005 	stb	r3,0(r2)
                    send_buffer[send_len + 1] = 0x03;
   460f8:	e0bffc17 	ldw	r2,-16(fp)
   460fc:	10c00044 	addi	r3,r2,1
   46100:	008001b4 	movhi	r2,6
   46104:	10871504 	addi	r2,r2,7252
   46108:	10c5883a 	add	r2,r2,r3
   4610c:	00c000c4 	movi	r3,3
   46110:	10c00005 	stb	r3,0(r2)
                    send(s, send_buffer, send_len + 2);
   46114:	e0bffd03 	ldbu	r2,-12(fp)
   46118:	e0fffc17 	ldw	r3,-16(fp)
   4611c:	18c00084 	addi	r3,r3,2
   46120:	18ffffcc 	andi	r3,r3,65535
   46124:	180d883a 	mov	r6,r3
   46128:	014001b4 	movhi	r5,6
   4612c:	29471504 	addi	r5,r5,7252
   46130:	1009883a 	mov	r4,r2
   46134:	0046f7c0 	call	46f7c <send>
         */
        if(strncmp((char *)recv_command, "sMI 0 3 F4724744", strlen((char *)"sMI 0 3 F4724744")) == 0)
        {
            if(SysPara.update_pos_flag == false)  //   没有上传数据时，sops软件电机点击stop measure响应下面数据
            {
                for(i = 0; i < 2; i++)
   46138:	e0bff817 	ldw	r2,-32(fp)
   4613c:	10800044 	addi	r2,r2,1
   46140:	e0bff815 	stw	r2,-32(fp)
   46144:	e0bff817 	ldw	r2,-32(fp)
   46148:	10800090 	cmplti	r2,r2,2
   4614c:	103fce1e 	bne	r2,zero,46088 <__alt_mem_epcs_flash+0xfffc5088>
   46150:	00010406 	br	46564 <sick_protocol_process+0x578>
                    send(s, send_buffer, send_len + 2);
                }
            }
            else  // 上传数据
            {
                for(i = 0; i < 4; i++)
   46154:	e03ff815 	stw	zero,-32(fp)
   46158:	00002f06 	br	46218 <sick_protocol_process+0x22c>
                {
                    send_len = strlen(sMI_0_3_F4724744_stop[i]);
   4615c:	008001b4 	movhi	r2,6
   46160:	10ac6404 	addi	r2,r2,-20080
   46164:	e0fff817 	ldw	r3,-32(fp)
   46168:	18c7883a 	add	r3,r3,r3
   4616c:	18c7883a 	add	r3,r3,r3
   46170:	10c5883a 	add	r2,r2,r3
   46174:	10800017 	ldw	r2,0(r2)
   46178:	1009883a 	mov	r4,r2
   4617c:	00493700 	call	49370 <strlen>
   46180:	e0bffc15 	stw	r2,-16(fp)
                    memcpy(send_buffer + 1, sMI_0_3_F4724744_stop[i], send_len);
   46184:	00c001b4 	movhi	r3,6
   46188:	18c71544 	addi	r3,r3,7253
   4618c:	008001b4 	movhi	r2,6
   46190:	10ac6404 	addi	r2,r2,-20080
   46194:	e13ff817 	ldw	r4,-32(fp)
   46198:	2109883a 	add	r4,r4,r4
   4619c:	2109883a 	add	r4,r4,r4
   461a0:	1105883a 	add	r2,r2,r4
   461a4:	10800017 	ldw	r2,0(r2)
   461a8:	e13ffc17 	ldw	r4,-16(fp)
   461ac:	200d883a 	mov	r6,r4
   461b0:	100b883a 	mov	r5,r2
   461b4:	1809883a 	mov	r4,r3
   461b8:	00490240 	call	49024 <memcpy>
                    send_buffer[0]            = 0x02;
   461bc:	008001b4 	movhi	r2,6
   461c0:	10871504 	addi	r2,r2,7252
   461c4:	00c00084 	movi	r3,2
   461c8:	10c00005 	stb	r3,0(r2)
                    send_buffer[send_len + 1] = 0x03;
   461cc:	e0bffc17 	ldw	r2,-16(fp)
   461d0:	10c00044 	addi	r3,r2,1
   461d4:	008001b4 	movhi	r2,6
   461d8:	10871504 	addi	r2,r2,7252
   461dc:	10c5883a 	add	r2,r2,r3
   461e0:	00c000c4 	movi	r3,3
   461e4:	10c00005 	stb	r3,0(r2)
                    send(s, send_buffer, send_len + 2);
   461e8:	e0bffd03 	ldbu	r2,-12(fp)
   461ec:	e0fffc17 	ldw	r3,-16(fp)
   461f0:	18c00084 	addi	r3,r3,2
   461f4:	18ffffcc 	andi	r3,r3,65535
   461f8:	180d883a 	mov	r6,r3
   461fc:	014001b4 	movhi	r5,6
   46200:	29471504 	addi	r5,r5,7252
   46204:	1009883a 	mov	r4,r2
   46208:	0046f7c0 	call	46f7c <send>
                    send(s, send_buffer, send_len + 2);
                }
            }
            else  // 上传数据
            {
                for(i = 0; i < 4; i++)
   4620c:	e0bff817 	ldw	r2,-32(fp)
   46210:	10800044 	addi	r2,r2,1
   46214:	e0bff815 	stw	r2,-32(fp)
   46218:	e0bff817 	ldw	r2,-32(fp)
   4621c:	10800110 	cmplti	r2,r2,4
   46220:	103fce1e 	bne	r2,zero,4615c <__alt_mem_epcs_flash+0xfffc515c>
   46224:	0000cf06 	br	46564 <sick_protocol_process+0x578>
                    send(s, send_buffer, send_len + 2);
                }
            }
        }

        else if(strncmp((char *)recv_command, "sMI 2", strlen((char *)"sMI 2")) == 0)
   46228:	01800144 	movi	r6,5
   4622c:	01400174 	movhi	r5,5
   46230:	2973ed04 	addi	r5,r5,-12364
   46234:	e13ffa17 	ldw	r4,-24(fp)
   46238:	00494080 	call	49408 <strncmp>
   4623c:	1000621e 	bne	r2,zero,463c8 <sick_protocol_process+0x3dc>
        {
            // if(SysStatus.update_pos_flag == false)
            if(sMI_3E_flag == 1)
   46240:	d0a01703 	ldbu	r2,-32676(gp)
   46244:	10803fcc 	andi	r2,r2,255
   46248:	10800058 	cmpnei	r2,r2,1
   4624c:	1000371e 	bne	r2,zero,4632c <sick_protocol_process+0x340>
            {
                for(i = 0; i < 11; i++)
   46250:	e03ff815 	stw	zero,-32(fp)
   46254:	00002f06 	br	46314 <sick_protocol_process+0x328>
                {
                    send_len = strlen(sMI_reply[i]);
   46258:	008001b4 	movhi	r2,6
   4625c:	10ad7e04 	addi	r2,r2,-18952
   46260:	e0fff817 	ldw	r3,-32(fp)
   46264:	18c7883a 	add	r3,r3,r3
   46268:	18c7883a 	add	r3,r3,r3
   4626c:	10c5883a 	add	r2,r2,r3
   46270:	10800017 	ldw	r2,0(r2)
   46274:	1009883a 	mov	r4,r2
   46278:	00493700 	call	49370 <strlen>
   4627c:	e0bffc15 	stw	r2,-16(fp)
                    memcpy(send_buffer + 1, sMI_reply[i], send_len);
   46280:	00c001b4 	movhi	r3,6
   46284:	18c71544 	addi	r3,r3,7253
   46288:	008001b4 	movhi	r2,6
   4628c:	10ad7e04 	addi	r2,r2,-18952
   46290:	e13ff817 	ldw	r4,-32(fp)
   46294:	2109883a 	add	r4,r4,r4
   46298:	2109883a 	add	r4,r4,r4
   4629c:	1105883a 	add	r2,r2,r4
   462a0:	10800017 	ldw	r2,0(r2)
   462a4:	e13ffc17 	ldw	r4,-16(fp)
   462a8:	200d883a 	mov	r6,r4
   462ac:	100b883a 	mov	r5,r2
   462b0:	1809883a 	mov	r4,r3
   462b4:	00490240 	call	49024 <memcpy>
                    send_buffer[0]            = 0x02;
   462b8:	008001b4 	movhi	r2,6
   462bc:	10871504 	addi	r2,r2,7252
   462c0:	00c00084 	movi	r3,2
   462c4:	10c00005 	stb	r3,0(r2)
                    send_buffer[send_len + 1] = 0x03;
   462c8:	e0bffc17 	ldw	r2,-16(fp)
   462cc:	10c00044 	addi	r3,r2,1
   462d0:	008001b4 	movhi	r2,6
   462d4:	10871504 	addi	r2,r2,7252
   462d8:	10c5883a 	add	r2,r2,r3
   462dc:	00c000c4 	movi	r3,3
   462e0:	10c00005 	stb	r3,0(r2)
                    send(s, send_buffer, send_len + 2);
   462e4:	e0bffd03 	ldbu	r2,-12(fp)
   462e8:	e0fffc17 	ldw	r3,-16(fp)
   462ec:	18c00084 	addi	r3,r3,2
   462f0:	18ffffcc 	andi	r3,r3,65535
   462f4:	180d883a 	mov	r6,r3
   462f8:	014001b4 	movhi	r5,6
   462fc:	29471504 	addi	r5,r5,7252
   46300:	1009883a 	mov	r4,r2
   46304:	0046f7c0 	call	46f7c <send>
        else if(strncmp((char *)recv_command, "sMI 2", strlen((char *)"sMI 2")) == 0)
        {
            // if(SysStatus.update_pos_flag == false)
            if(sMI_3E_flag == 1)
            {
                for(i = 0; i < 11; i++)
   46308:	e0bff817 	ldw	r2,-32(fp)
   4630c:	10800044 	addi	r2,r2,1
   46310:	e0bff815 	stw	r2,-32(fp)
   46314:	e0bff817 	ldw	r2,-32(fp)
   46318:	108002d0 	cmplti	r2,r2,11
   4631c:	103fce1e 	bne	r2,zero,46258 <__alt_mem_epcs_flash+0xfffc5258>
                    memcpy(send_buffer + 1, sMI_reply[i], send_len);
                    send_buffer[0]            = 0x02;
                    send_buffer[send_len + 1] = 0x03;
                    send(s, send_buffer, send_len + 2);
                }
                enable_flag = 1;
   46320:	00800044 	movi	r2,1
   46324:	e0bff905 	stb	r2,-28(fp)
   46328:	00008e06 	br	46564 <sick_protocol_process+0x578>
            }
            else
            {
                send_len = strlen(sMI_reply[0]);
   4632c:	008001b4 	movhi	r2,6
   46330:	10ad7e04 	addi	r2,r2,-18952
   46334:	10800017 	ldw	r2,0(r2)
   46338:	1009883a 	mov	r4,r2
   4633c:	00493700 	call	49370 <strlen>
   46340:	e0bffc15 	stw	r2,-16(fp)
                memcpy(send_buffer + 1, sMI_reply[0], send_len);
   46344:	00c001b4 	movhi	r3,6
   46348:	18c71544 	addi	r3,r3,7253
   4634c:	008001b4 	movhi	r2,6
   46350:	10ad7e04 	addi	r2,r2,-18952
   46354:	10800017 	ldw	r2,0(r2)
   46358:	e13ffc17 	ldw	r4,-16(fp)
   4635c:	200d883a 	mov	r6,r4
   46360:	100b883a 	mov	r5,r2
   46364:	1809883a 	mov	r4,r3
   46368:	00490240 	call	49024 <memcpy>
                send_buffer[0]            = 0x02;
   4636c:	008001b4 	movhi	r2,6
   46370:	10871504 	addi	r2,r2,7252
   46374:	00c00084 	movi	r3,2
   46378:	10c00005 	stb	r3,0(r2)
                send_buffer[send_len + 1] = 0x03;
   4637c:	e0bffc17 	ldw	r2,-16(fp)
   46380:	10c00044 	addi	r3,r2,1
   46384:	008001b4 	movhi	r2,6
   46388:	10871504 	addi	r2,r2,7252
   4638c:	10c5883a 	add	r2,r2,r3
   46390:	00c000c4 	movi	r3,3
   46394:	10c00005 	stb	r3,0(r2)
                send(s, send_buffer, send_len + 2);
   46398:	e0bffd03 	ldbu	r2,-12(fp)
   4639c:	e0fffc17 	ldw	r3,-16(fp)
   463a0:	18c00084 	addi	r3,r3,2
   463a4:	18ffffcc 	andi	r3,r3,65535
   463a8:	180d883a 	mov	r6,r3
   463ac:	014001b4 	movhi	r5,6
   463b0:	29471504 	addi	r5,r5,7252
   463b4:	1009883a 	mov	r4,r2
   463b8:	0046f7c0 	call	46f7c <send>
                enable_flag = 2;
   463bc:	00800084 	movi	r2,2
   463c0:	e0bff905 	stb	r2,-28(fp)
   463c4:	00006706 	br	46564 <sick_protocol_process+0x578>
        }
        /*
         * 正常的tim561协议中，数据分成两种：ascii格式和hex格式
         * 只需要从对应的表中找到需要回复的字符串响应上去就可以了
         */
        else if(tim561_respons[pos][0] == 0x30)  // hex字符串
   463c8:	008001b4 	movhi	r2,6
   463cc:	10aa1e04 	addi	r2,r2,-22408
   463d0:	e0fffb17 	ldw	r3,-20(fp)
   463d4:	18c7883a 	add	r3,r3,r3
   463d8:	18c7883a 	add	r3,r3,r3
   463dc:	10c5883a 	add	r2,r2,r3
   463e0:	10800017 	ldw	r2,0(r2)
   463e4:	10800003 	ldbu	r2,0(r2)
   463e8:	10803fcc 	andi	r2,r2,255
   463ec:	1080201c 	xori	r2,r2,128
   463f0:	10bfe004 	addi	r2,r2,-128
   463f4:	10800c18 	cmpnei	r2,r2,48
   463f8:	1000211e 	bne	r2,zero,46480 <sick_protocol_process+0x494>
        {
            send_len = strlen(tim561_respons[pos]);
   463fc:	008001b4 	movhi	r2,6
   46400:	10aa1e04 	addi	r2,r2,-22408
   46404:	e0fffb17 	ldw	r3,-20(fp)
   46408:	18c7883a 	add	r3,r3,r3
   4640c:	18c7883a 	add	r3,r3,r3
   46410:	10c5883a 	add	r2,r2,r3
   46414:	10800017 	ldw	r2,0(r2)
   46418:	1009883a 	mov	r4,r2
   4641c:	00493700 	call	49370 <strlen>
   46420:	e0bffc15 	stw	r2,-16(fp)
            string2hex(tim561_respons[pos], send_len, (char *)send_buffer);
   46424:	008001b4 	movhi	r2,6
   46428:	10aa1e04 	addi	r2,r2,-22408
   4642c:	e0fffb17 	ldw	r3,-20(fp)
   46430:	18c7883a 	add	r3,r3,r3
   46434:	18c7883a 	add	r3,r3,r3
   46438:	10c5883a 	add	r2,r2,r3
   4643c:	10800017 	ldw	r2,0(r2)
   46440:	018001b4 	movhi	r6,6
   46444:	31871504 	addi	r6,r6,7252
   46448:	e17ffc17 	ldw	r5,-16(fp)
   4644c:	1009883a 	mov	r4,r2
   46450:	0045e7c0 	call	45e7c <string2hex>
            send(s, send_buffer, send_len / 2);
   46454:	e13ffd03 	ldbu	r4,-12(fp)
   46458:	e0bffc17 	ldw	r2,-16(fp)
   4645c:	1006d7fa 	srli	r3,r2,31
   46460:	1885883a 	add	r2,r3,r2
   46464:	1005d07a 	srai	r2,r2,1
   46468:	10bfffcc 	andi	r2,r2,65535
   4646c:	100d883a 	mov	r6,r2
   46470:	014001b4 	movhi	r5,6
   46474:	29471504 	addi	r5,r5,7252
   46478:	0046f7c0 	call	46f7c <send>
   4647c:	00003906 	br	46564 <sick_protocol_process+0x578>
        }
        else if(tim561_respons[pos][0] == 0x73)  // 's' 开头， ascii字符串
   46480:	008001b4 	movhi	r2,6
   46484:	10aa1e04 	addi	r2,r2,-22408
   46488:	e0fffb17 	ldw	r3,-20(fp)
   4648c:	18c7883a 	add	r3,r3,r3
   46490:	18c7883a 	add	r3,r3,r3
   46494:	10c5883a 	add	r2,r2,r3
   46498:	10800017 	ldw	r2,0(r2)
   4649c:	10800003 	ldbu	r2,0(r2)
   464a0:	10803fcc 	andi	r2,r2,255
   464a4:	1080201c 	xori	r2,r2,128
   464a8:	10bfe004 	addi	r2,r2,-128
   464ac:	10801cd8 	cmpnei	r2,r2,115
   464b0:	10002c1e 	bne	r2,zero,46564 <sick_protocol_process+0x578>
        {
            send_len = strlen(tim561_respons[pos]);
   464b4:	008001b4 	movhi	r2,6
   464b8:	10aa1e04 	addi	r2,r2,-22408
   464bc:	e0fffb17 	ldw	r3,-20(fp)
   464c0:	18c7883a 	add	r3,r3,r3
   464c4:	18c7883a 	add	r3,r3,r3
   464c8:	10c5883a 	add	r2,r2,r3
   464cc:	10800017 	ldw	r2,0(r2)
   464d0:	1009883a 	mov	r4,r2
   464d4:	00493700 	call	49370 <strlen>
   464d8:	e0bffc15 	stw	r2,-16(fp)
            memcpy(send_buffer + 1, tim561_respons[pos], send_len);
   464dc:	00c001b4 	movhi	r3,6
   464e0:	18c71544 	addi	r3,r3,7253
   464e4:	008001b4 	movhi	r2,6
   464e8:	10aa1e04 	addi	r2,r2,-22408
   464ec:	e13ffb17 	ldw	r4,-20(fp)
   464f0:	2109883a 	add	r4,r4,r4
   464f4:	2109883a 	add	r4,r4,r4
   464f8:	1105883a 	add	r2,r2,r4
   464fc:	10800017 	ldw	r2,0(r2)
   46500:	e13ffc17 	ldw	r4,-16(fp)
   46504:	200d883a 	mov	r6,r4
   46508:	100b883a 	mov	r5,r2
   4650c:	1809883a 	mov	r4,r3
   46510:	00490240 	call	49024 <memcpy>
            send_buffer[0]            = 0x02;
   46514:	008001b4 	movhi	r2,6
   46518:	10871504 	addi	r2,r2,7252
   4651c:	00c00084 	movi	r3,2
   46520:	10c00005 	stb	r3,0(r2)
            send_buffer[send_len + 1] = 0x03;
   46524:	e0bffc17 	ldw	r2,-16(fp)
   46528:	10c00044 	addi	r3,r2,1
   4652c:	008001b4 	movhi	r2,6
   46530:	10871504 	addi	r2,r2,7252
   46534:	10c5883a 	add	r2,r2,r3
   46538:	00c000c4 	movi	r3,3
   4653c:	10c00005 	stb	r3,0(r2)
            send(s, send_buffer, send_len + 2);
   46540:	e0bffd03 	ldbu	r2,-12(fp)
   46544:	e0fffc17 	ldw	r3,-16(fp)
   46548:	18c00084 	addi	r3,r3,2
   4654c:	18ffffcc 	andi	r3,r3,65535
   46550:	180d883a 	mov	r6,r3
   46554:	014001b4 	movhi	r5,6
   46558:	29471504 	addi	r5,r5,7252
   4655c:	1009883a 	mov	r4,r2
   46560:	0046f7c0 	call	46f7c <send>
        }

        if(strncmp((char *)recv_command, "sMI 3E", strlen((char *)"sMI 3E")) == 0)
   46564:	01800184 	movi	r6,6
   46568:	01400174 	movhi	r5,5
   4656c:	2973ef04 	addi	r5,r5,-12356
   46570:	e13ffa17 	ldw	r4,-24(fp)
   46574:	00494080 	call	49408 <strncmp>
   46578:	1000031e 	bne	r2,zero,46588 <sick_protocol_process+0x59c>
        {
            sMI_3E_flag = 1;
   4657c:	00800044 	movi	r2,1
   46580:	d0a01705 	stb	r2,-32676(gp)
   46584:	00000706 	br	465a4 <sick_protocol_process+0x5b8>
        }
        else if(strncmp((char *)recv_command, "sMI 3F", strlen((char *)"sMI 3F")) == 0)
   46588:	01800184 	movi	r6,6
   4658c:	01400174 	movhi	r5,5
   46590:	2973f104 	addi	r5,r5,-12348
   46594:	e13ffa17 	ldw	r4,-24(fp)
   46598:	00494080 	call	49408 <strncmp>
   4659c:	1000011e 	bne	r2,zero,465a4 <sick_protocol_process+0x5b8>
        {
            sMI_3E_flag = 0;
   465a0:	d0201705 	stb	zero,-32676(gp)
        }

        if(strncmp((char *)recv_command, "sRI E6", strlen((char *)"sRI E6")) == 0)  // 长字符串，分开处理
   465a4:	01800184 	movi	r6,6
   465a8:	01400174 	movhi	r5,5
   465ac:	2973f304 	addi	r5,r5,-12340
   465b0:	e13ffa17 	ldw	r4,-24(fp)
   465b4:	00494080 	call	49408 <strncmp>
   465b8:	1000291e 	bne	r2,zero,46660 <sick_protocol_process+0x674>
        {
            for(i = 0; i < 5; i++)
   465bc:	e03ff815 	stw	zero,-32(fp)
   465c0:	00002306 	br	46650 <sick_protocol_process+0x664>
            {
                send_len = strlen(sRI_E6_reply[i]);
   465c4:	008001b4 	movhi	r2,6
   465c8:	10ac6804 	addi	r2,r2,-20064
   465cc:	e0fff817 	ldw	r3,-32(fp)
   465d0:	18c7883a 	add	r3,r3,r3
   465d4:	18c7883a 	add	r3,r3,r3
   465d8:	10c5883a 	add	r2,r2,r3
   465dc:	10800017 	ldw	r2,0(r2)
   465e0:	1009883a 	mov	r4,r2
   465e4:	00493700 	call	49370 <strlen>
   465e8:	e0bffc15 	stw	r2,-16(fp)
                string2hex(sRI_E6_reply[i], send_len, (char *)send_buffer);
   465ec:	008001b4 	movhi	r2,6
   465f0:	10ac6804 	addi	r2,r2,-20064
   465f4:	e0fff817 	ldw	r3,-32(fp)
   465f8:	18c7883a 	add	r3,r3,r3
   465fc:	18c7883a 	add	r3,r3,r3
   46600:	10c5883a 	add	r2,r2,r3
   46604:	10800017 	ldw	r2,0(r2)
   46608:	018001b4 	movhi	r6,6
   4660c:	31871504 	addi	r6,r6,7252
   46610:	e17ffc17 	ldw	r5,-16(fp)
   46614:	1009883a 	mov	r4,r2
   46618:	0045e7c0 	call	45e7c <string2hex>
                send(s, send_buffer, send_len / 2);
   4661c:	e13ffd03 	ldbu	r4,-12(fp)
   46620:	e0bffc17 	ldw	r2,-16(fp)
   46624:	1006d7fa 	srli	r3,r2,31
   46628:	1885883a 	add	r2,r3,r2
   4662c:	1005d07a 	srai	r2,r2,1
   46630:	10bfffcc 	andi	r2,r2,65535
   46634:	100d883a 	mov	r6,r2
   46638:	014001b4 	movhi	r5,6
   4663c:	29471504 	addi	r5,r5,7252
   46640:	0046f7c0 	call	46f7c <send>
            sMI_3E_flag = 0;
        }

        if(strncmp((char *)recv_command, "sRI E6", strlen((char *)"sRI E6")) == 0)  // 长字符串，分开处理
        {
            for(i = 0; i < 5; i++)
   46644:	e0bff817 	ldw	r2,-32(fp)
   46648:	10800044 	addi	r2,r2,1
   4664c:	e0bff815 	stw	r2,-32(fp)
   46650:	e0bff817 	ldw	r2,-32(fp)
   46654:	10800150 	cmplti	r2,r2,5
   46658:	103fda1e 	bne	r2,zero,465c4 <__alt_mem_epcs_flash+0xfffc55c4>
   4665c:	00003506 	br	46734 <sick_protocol_process+0x748>
                send_len = strlen(sRI_E6_reply[i]);
                string2hex(sRI_E6_reply[i], send_len, (char *)send_buffer);
                send(s, send_buffer, send_len / 2);
            }
        }
        else if(strncmp((char *)recv_command, "sRI 15B", strlen((char *)"sRI 15B")) == 0)
   46660:	018001c4 	movi	r6,7
   46664:	01400174 	movhi	r5,5
   46668:	2973f504 	addi	r5,r5,-12332
   4666c:	e13ffa17 	ldw	r4,-24(fp)
   46670:	00494080 	call	49408 <strncmp>
   46674:	1000151e 	bne	r2,zero,466cc <sick_protocol_process+0x6e0>
        {
            send_len = strlen(sRI_15B_reply);
   46678:	010001b4 	movhi	r4,6
   4667c:	212c6d04 	addi	r4,r4,-20044
   46680:	00493700 	call	49370 <strlen>
   46684:	e0bffc15 	stw	r2,-16(fp)
            string2hex(sRI_15B_reply, send_len, (char *)send_buffer);
   46688:	018001b4 	movhi	r6,6
   4668c:	31871504 	addi	r6,r6,7252
   46690:	e17ffc17 	ldw	r5,-16(fp)
   46694:	010001b4 	movhi	r4,6
   46698:	212c6d04 	addi	r4,r4,-20044
   4669c:	0045e7c0 	call	45e7c <string2hex>
            send(s, send_buffer, send_len / 2);
   466a0:	e13ffd03 	ldbu	r4,-12(fp)
   466a4:	e0bffc17 	ldw	r2,-16(fp)
   466a8:	1006d7fa 	srli	r3,r2,31
   466ac:	1885883a 	add	r2,r3,r2
   466b0:	1005d07a 	srai	r2,r2,1
   466b4:	10bfffcc 	andi	r2,r2,65535
   466b8:	100d883a 	mov	r6,r2
   466bc:	014001b4 	movhi	r5,6
   466c0:	29471504 	addi	r5,r5,7252
   466c4:	0046f7c0 	call	46f7c <send>
   466c8:	00001a06 	br	46734 <sick_protocol_process+0x748>
        }
        else if(strncmp((char *)recv_command, "sRI 1DC", strlen((char *)"sRI 1DC")) == 0)
   466cc:	018001c4 	movi	r6,7
   466d0:	01400174 	movhi	r5,5
   466d4:	2973f704 	addi	r5,r5,-12324
   466d8:	e13ffa17 	ldw	r4,-24(fp)
   466dc:	00494080 	call	49408 <strncmp>
   466e0:	1000141e 	bne	r2,zero,46734 <sick_protocol_process+0x748>
        {
            send_len = strlen(sRI_1DC_reply);
   466e4:	010001b4 	movhi	r4,6
   466e8:	212d5104 	addi	r4,r4,-19132
   466ec:	00493700 	call	49370 <strlen>
   466f0:	e0bffc15 	stw	r2,-16(fp)
            string2hex(sRI_1DC_reply, send_len, (char *)send_buffer);
   466f4:	018001b4 	movhi	r6,6
   466f8:	31871504 	addi	r6,r6,7252
   466fc:	e17ffc17 	ldw	r5,-16(fp)
   46700:	010001b4 	movhi	r4,6
   46704:	212d5104 	addi	r4,r4,-19132
   46708:	0045e7c0 	call	45e7c <string2hex>
            send(s, send_buffer, send_len / 2);
   4670c:	e13ffd03 	ldbu	r4,-12(fp)
   46710:	e0bffc17 	ldw	r2,-16(fp)
   46714:	1006d7fa 	srli	r3,r2,31
   46718:	1885883a 	add	r2,r3,r2
   4671c:	1005d07a 	srai	r2,r2,1
   46720:	10bfffcc 	andi	r2,r2,65535
   46724:	100d883a 	mov	r6,r2
   46728:	014001b4 	movhi	r5,6
   4672c:	29471504 	addi	r5,r5,7252
   46730:	0046f7c0 	call	46f7c <send>
        }
    }

    if(enable_flag == 1)  // 上传数据
   46734:	e0bff903 	ldbu	r2,-28(fp)
   46738:	10800058 	cmpnei	r2,r2,1
   4673c:	10000b1e 	bne	r2,zero,4676c <sick_protocol_process+0x780>
    {
        enable_flag = 0;
   46740:	e03ff905 	stb	zero,-28(fp)
        set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, ENABLE);
   46744:	01844474 	movhi	r6,4369
   46748:	31844444 	addi	r6,r6,4369
   4674c:	016c0014 	movui	r5,45056
   46750:	d1201604 	addi	r4,gp,-32680
   46754:	0042ebc0 	call	42ebc <set_laser_paramter>
        SysPara.update_pos_flag = true;
   46758:	008001b4 	movhi	r2,6
   4675c:	10a46e04 	addi	r2,r2,-28232
   46760:	00c00044 	movi	r3,1
   46764:	10c00005 	stb	r3,0(r2)
    {
        enable_flag = 0;
        set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, DISABLE);
        SysPara.update_pos_flag = false;
    }
}
   46768:	00000c06 	br	4679c <sick_protocol_process+0x7b0>
    {
        enable_flag = 0;
        set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, ENABLE);
        SysPara.update_pos_flag = true;
    }
    else if(enable_flag == 2)
   4676c:	e0bff903 	ldbu	r2,-28(fp)
   46770:	10800098 	cmpnei	r2,r2,2
   46774:	1000091e 	bne	r2,zero,4679c <sick_protocol_process+0x7b0>
    {
        enable_flag = 0;
   46778:	e03ff905 	stb	zero,-28(fp)
        set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, DISABLE);
   4677c:	018888b4 	movhi	r6,8738
   46780:	31888884 	addi	r6,r6,8738
   46784:	016c0014 	movui	r5,45056
   46788:	d1201604 	addi	r4,gp,-32680
   4678c:	0042ebc0 	call	42ebc <set_laser_paramter>
        SysPara.update_pos_flag = false;
   46790:	008001b4 	movhi	r2,6
   46794:	10a46e04 	addi	r2,r2,-28232
   46798:	10000005 	stb	zero,0(r2)
    }
}
   4679c:	0001883a 	nop
   467a0:	e037883a 	mov	sp,fp
   467a4:	dfc00117 	ldw	ra,4(sp)
   467a8:	df000017 	ldw	fp,0(sp)
   467ac:	dec00204 	addi	sp,sp,8
   467b0:	f800283a 	ret

000467b4 <sick_pos_packet>:

void sick_pos_packet(void)
{
   467b4:	defffc04 	addi	sp,sp,-16
   467b8:	dfc00315 	stw	ra,12(sp)
   467bc:	df000215 	stw	fp,8(sp)
   467c0:	df000204 	addi	fp,sp,8
    int offset = 0;
   467c4:	e03ffe15 	stw	zero,-8(fp)
    int len    = 0;
   467c8:	e03fff15 	stw	zero,-4(fp)
    memset(send_buffer, 0, 8448);
   467cc:	01884004 	movi	r6,8448
   467d0:	000b883a 	mov	r5,zero
   467d4:	010001b4 	movhi	r4,6
   467d8:	21071504 	addi	r4,r4,7252
   467dc:	004916c0 	call	4916c <memset>
    send_buffer[0] = 0x02;
   467e0:	008001b4 	movhi	r2,6
   467e4:	10871504 	addi	r2,r2,7252
   467e8:	00c00084 	movi	r3,2
   467ec:	10c00005 	stb	r3,0(r2)

    len = strlen(frame_start);  // 108
   467f0:	010001b4 	movhi	r4,6
   467f4:	21268704 	addi	r4,r4,-26084
   467f8:	00493700 	call	49370 <strlen>
   467fc:	e0bfff15 	stw	r2,-4(fp)
    memcpy(send_buffer + 1, frame_start, len);
   46800:	008001b4 	movhi	r2,6
   46804:	10871544 	addi	r2,r2,7253
   46808:	e0ffff17 	ldw	r3,-4(fp)
   4680c:	180d883a 	mov	r6,r3
   46810:	014001b4 	movhi	r5,6
   46814:	29668704 	addi	r5,r5,-26084
   46818:	1009883a 	mov	r4,r2
   4681c:	00490240 	call	49024 <memcpy>
    offset = offset + len + 1;
   46820:	e0fffe17 	ldw	r3,-8(fp)
   46824:	e0bfff17 	ldw	r2,-4(fp)
   46828:	1885883a 	add	r2,r3,r2
   4682c:	10800044 	addi	r2,r2,1
   46830:	e0bffe15 	stw	r2,-8(fp)

    memcpy(send_buffer + offset, CycleData.distance_data,
   46834:	e0fffe17 	ldw	r3,-8(fp)
   46838:	008001b4 	movhi	r2,6
   4683c:	10871504 	addi	r2,r2,7252
   46840:	1887883a 	add	r3,r3,r2
   46844:	008001b4 	movhi	r2,6
   46848:	10bf2604 	addi	r2,r2,-872
   4684c:	10800117 	ldw	r2,4(r2)
   46850:	100d883a 	mov	r6,r2
   46854:	014001b4 	movhi	r5,6
   46858:	297f2904 	addi	r5,r5,-860
   4685c:	1809883a 	mov	r4,r3
   46860:	00490240 	call	49024 <memcpy>
           CycleData.distance_len);  // 4055
    offset = offset + CycleData.distance_len;
   46864:	008001b4 	movhi	r2,6
   46868:	10bf2604 	addi	r2,r2,-872
   4686c:	10c00117 	ldw	r3,4(r2)
   46870:	e0bffe17 	ldw	r2,-8(fp)
   46874:	1885883a 	add	r2,r3,r2
   46878:	e0bffe15 	stw	r2,-8(fp)

    len = strlen(RSSI_Field_start);                       // 41
   4687c:	010001b4 	movhi	r4,6
   46880:	2126a304 	addi	r4,r4,-25972
   46884:	00493700 	call	49370 <strlen>
   46888:	e0bfff15 	stw	r2,-4(fp)
    memcpy(send_buffer + offset, RSSI_Field_start, len);  // frame_end放到后面
   4688c:	e0fffe17 	ldw	r3,-8(fp)
   46890:	008001b4 	movhi	r2,6
   46894:	10871504 	addi	r2,r2,7252
   46898:	1885883a 	add	r2,r3,r2
   4689c:	e0ffff17 	ldw	r3,-4(fp)
   468a0:	180d883a 	mov	r6,r3
   468a4:	014001b4 	movhi	r5,6
   468a8:	2966a304 	addi	r5,r5,-25972
   468ac:	1009883a 	mov	r4,r2
   468b0:	00490240 	call	49024 <memcpy>
    offset = offset + len;
   468b4:	e0fffe17 	ldw	r3,-8(fp)
   468b8:	e0bfff17 	ldw	r2,-4(fp)
   468bc:	1885883a 	add	r2,r3,r2
   468c0:	e0bffe15 	stw	r2,-8(fp)

    memcpy(send_buffer + offset, CycleData.gray_data,
   468c4:	e0fffe17 	ldw	r3,-8(fp)
   468c8:	008001b4 	movhi	r2,6
   468cc:	10871504 	addi	r2,r2,7252
   468d0:	1887883a 	add	r3,r3,r2
   468d4:	008001b4 	movhi	r2,6
   468d8:	10bf2604 	addi	r2,r2,-872
   468dc:	10800217 	ldw	r2,8(r2)
   468e0:	100d883a 	mov	r6,r2
   468e4:	014001b4 	movhi	r5,6
   468e8:	29431ec4 	addi	r5,r5,3195
   468ec:	1809883a 	mov	r4,r3
   468f0:	00490240 	call	49024 <memcpy>
           CycleData.gray_len);  // 4055
    offset = offset + CycleData.gray_len;
   468f4:	008001b4 	movhi	r2,6
   468f8:	10bf2604 	addi	r2,r2,-872
   468fc:	10c00217 	ldw	r3,8(r2)
   46900:	e0bffe17 	ldw	r2,-8(fp)
   46904:	1885883a 	add	r2,r3,r2
   46908:	e0bffe15 	stw	r2,-8(fp)

    len = strlen(RSSI_Field_end);                       // 12
   4690c:	010001b4 	movhi	r4,6
   46910:	2126ae04 	addi	r4,r4,-25928
   46914:	00493700 	call	49370 <strlen>
   46918:	e0bfff15 	stw	r2,-4(fp)
    memcpy(send_buffer + offset, RSSI_Field_end, len);  // frame_end放到后面
   4691c:	e0fffe17 	ldw	r3,-8(fp)
   46920:	008001b4 	movhi	r2,6
   46924:	10871504 	addi	r2,r2,7252
   46928:	1885883a 	add	r2,r3,r2
   4692c:	e0ffff17 	ldw	r3,-4(fp)
   46930:	180d883a 	mov	r6,r3
   46934:	014001b4 	movhi	r5,6
   46938:	2966ae04 	addi	r5,r5,-25928
   4693c:	1009883a 	mov	r4,r2
   46940:	00490240 	call	49024 <memcpy>
    offset = offset + len;
   46944:	e0fffe17 	ldw	r3,-8(fp)
   46948:	e0bfff17 	ldw	r2,-4(fp)
   4694c:	1885883a 	add	r2,r3,r2
   46950:	e0bffe15 	stw	r2,-8(fp)

    send_buffer[offset] = 0x03;
   46954:	008001b4 	movhi	r2,6
   46958:	10871504 	addi	r2,r2,7252
   4695c:	e0fffe17 	ldw	r3,-8(fp)
   46960:	10c5883a 	add	r2,r2,r3
   46964:	00c000c4 	movi	r3,3
   46968:	10c00005 	stb	r3,0(r2)
}
   4696c:	0001883a 	nop
   46970:	e037883a 	mov	sp,fp
   46974:	dfc00117 	ldw	ra,4(sp)
   46978:	df000017 	ldw	fp,0(sp)
   4697c:	dec00204 	addi	sp,sp,8
   46980:	f800283a 	ret

00046984 <socket>:
/**
  @brief   This Socket function initialize the channel in perticular mode, and set the port and wait for W5200 done it.
  @return  1 for sucess else 0.
  */
uint8 socket(SOCKET s, uint8 protocol, uint16 port, uint8 flag)
{
   46984:	defff904 	addi	sp,sp,-28
   46988:	dfc00615 	stw	ra,24(sp)
   4698c:	df000515 	stw	fp,20(sp)
   46990:	df000504 	addi	fp,sp,20
   46994:	2011883a 	mov	r8,r4
   46998:	2809883a 	mov	r4,r5
   4699c:	3007883a 	mov	r3,r6
   469a0:	3805883a 	mov	r2,r7
   469a4:	e23ffc05 	stb	r8,-16(fp)
   469a8:	e13ffd05 	stb	r4,-12(fp)
   469ac:	e0fffe0d 	sth	r3,-8(fp)
   469b0:	e0bfff05 	stb	r2,-4(fp)
    uint8 ret;
    if (
            ((protocol&0x0F) == Sn_MR_TCP)    ||
   469b4:	e0bffd03 	ldbu	r2,-12(fp)
   469b8:	108003cc 	andi	r2,r2,15
  @return  1 for sucess else 0.
  */
uint8 socket(SOCKET s, uint8 protocol, uint16 port, uint8 flag)
{
    uint8 ret;
    if (
   469bc:	10800060 	cmpeqi	r2,r2,1
   469c0:	1000101e 	bne	r2,zero,46a04 <socket+0x80>
            ((protocol&0x0F) == Sn_MR_TCP)    ||
            ((protocol&0x0F) == Sn_MR_UDP)    ||
   469c4:	e0bffd03 	ldbu	r2,-12(fp)
   469c8:	108003cc 	andi	r2,r2,15
  */
uint8 socket(SOCKET s, uint8 protocol, uint16 port, uint8 flag)
{
    uint8 ret;
    if (
            ((protocol&0x0F) == Sn_MR_TCP)    ||
   469cc:	108000a0 	cmpeqi	r2,r2,2
   469d0:	10000c1e 	bne	r2,zero,46a04 <socket+0x80>
            ((protocol&0x0F) == Sn_MR_UDP)    ||
            ((protocol&0x0F) == Sn_MR_IPRAW)  ||
   469d4:	e0bffd03 	ldbu	r2,-12(fp)
   469d8:	108003cc 	andi	r2,r2,15
uint8 socket(SOCKET s, uint8 protocol, uint16 port, uint8 flag)
{
    uint8 ret;
    if (
            ((protocol&0x0F) == Sn_MR_TCP)    ||
            ((protocol&0x0F) == Sn_MR_UDP)    ||
   469dc:	108000e0 	cmpeqi	r2,r2,3
   469e0:	1000081e 	bne	r2,zero,46a04 <socket+0x80>
            ((protocol&0x0F) == Sn_MR_IPRAW)  ||
            ((protocol&0x0F) == Sn_MR_MACRAW) ||
   469e4:	e0bffd03 	ldbu	r2,-12(fp)
   469e8:	108003cc 	andi	r2,r2,15
{
    uint8 ret;
    if (
            ((protocol&0x0F) == Sn_MR_TCP)    ||
            ((protocol&0x0F) == Sn_MR_UDP)    ||
            ((protocol&0x0F) == Sn_MR_IPRAW)  ||
   469ec:	10800120 	cmpeqi	r2,r2,4
   469f0:	1000041e 	bne	r2,zero,46a04 <socket+0x80>
            ((protocol&0x0F) == Sn_MR_MACRAW) ||
            ((protocol&0x0F) == Sn_MR_PPPOE)
   469f4:	e0bffd03 	ldbu	r2,-12(fp)
   469f8:	108003cc 	andi	r2,r2,15
    uint8 ret;
    if (
            ((protocol&0x0F) == Sn_MR_TCP)    ||
            ((protocol&0x0F) == Sn_MR_UDP)    ||
            ((protocol&0x0F) == Sn_MR_IPRAW)  ||
            ((protocol&0x0F) == Sn_MR_MACRAW) ||
   469fc:	10800158 	cmpnei	r2,r2,5
   46a00:	10004b1e 	bne	r2,zero,46b30 <socket+0x1ac>
            ((protocol&0x0F) == Sn_MR_PPPOE)
       )
    {
        close_socket(s);
   46a04:	e0bffc03 	ldbu	r2,-16(fp)
   46a08:	1009883a 	mov	r4,r2
   46a0c:	0046b4c0 	call	46b4c <close_socket>
        IINCHIP_WRITE(Sn_MR(s) ,protocol | flag);
   46a10:	e0bffc03 	ldbu	r2,-16(fp)
   46a14:	1004917a 	slli	r2,r2,5
   46a18:	10800204 	addi	r2,r2,8
   46a1c:	1009883a 	mov	r4,r2
   46a20:	e0fffd03 	ldbu	r3,-12(fp)
   46a24:	e0bfff03 	ldbu	r2,-4(fp)
   46a28:	1884b03a 	or	r2,r3,r2
   46a2c:	10803fcc 	andi	r2,r2,255
   46a30:	100b883a 	mov	r5,r2
   46a34:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        if (port != 0) {
   46a38:	e0bffe0b 	ldhu	r2,-8(fp)
   46a3c:	10001426 	beq	r2,zero,46a90 <socket+0x10c>
            IINCHIP_WRITE( Sn_PORT0(s) ,(uint8)((port & 0xff00) >> 8));
   46a40:	e0bffc03 	ldbu	r2,-16(fp)
   46a44:	1004917a 	slli	r2,r2,5
   46a48:	10810204 	addi	r2,r2,1032
   46a4c:	1007883a 	mov	r3,r2
   46a50:	e0bffe0b 	ldhu	r2,-8(fp)
   46a54:	1004d23a 	srli	r2,r2,8
   46a58:	10803fcc 	andi	r2,r2,255
   46a5c:	100b883a 	mov	r5,r2
   46a60:	1809883a 	mov	r4,r3
   46a64:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
            IINCHIP_WRITE( Sn_PORT1(s) ,(uint8)(port & 0x00ff));
   46a68:	e0bffc03 	ldbu	r2,-16(fp)
   46a6c:	1004917a 	slli	r2,r2,5
   46a70:	10814204 	addi	r2,r2,1288
   46a74:	1007883a 	mov	r3,r2
   46a78:	e0bffe0b 	ldhu	r2,-8(fp)
   46a7c:	10803fcc 	andi	r2,r2,255
   46a80:	100b883a 	mov	r5,r2
   46a84:	1809883a 	mov	r4,r3
   46a88:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
   46a8c:	00001706 	br	46aec <socket+0x168>
        } else {
            local_port++; // if don't set the source port, set local_port number.
   46a90:	d0a0178b 	ldhu	r2,-32674(gp)
   46a94:	10800044 	addi	r2,r2,1
   46a98:	d0a0178d 	sth	r2,-32674(gp)
            IINCHIP_WRITE(Sn_PORT0(s) ,(uint8)((local_port & 0xff00) >> 8));
   46a9c:	e0bffc03 	ldbu	r2,-16(fp)
   46aa0:	1004917a 	slli	r2,r2,5
   46aa4:	10810204 	addi	r2,r2,1032
   46aa8:	1007883a 	mov	r3,r2
   46aac:	d0a0178b 	ldhu	r2,-32674(gp)
   46ab0:	10bfffcc 	andi	r2,r2,65535
   46ab4:	1004d23a 	srli	r2,r2,8
   46ab8:	10803fcc 	andi	r2,r2,255
   46abc:	100b883a 	mov	r5,r2
   46ac0:	1809883a 	mov	r4,r3
   46ac4:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
            IINCHIP_WRITE(Sn_PORT1(s) ,(uint8)(local_port & 0x00ff));
   46ac8:	e0bffc03 	ldbu	r2,-16(fp)
   46acc:	1004917a 	slli	r2,r2,5
   46ad0:	10814204 	addi	r2,r2,1288
   46ad4:	1007883a 	mov	r3,r2
   46ad8:	d0a0178b 	ldhu	r2,-32674(gp)
   46adc:	10803fcc 	andi	r2,r2,255
   46ae0:	100b883a 	mov	r5,r2
   46ae4:	1809883a 	mov	r4,r3
   46ae8:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        }
        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_OPEN); // run sockinit Sn_CR
   46aec:	e0bffc03 	ldbu	r2,-16(fp)
   46af0:	1004917a 	slli	r2,r2,5
   46af4:	10804204 	addi	r2,r2,264
   46af8:	01400044 	movi	r5,1
   46afc:	1009883a 	mov	r4,r2
   46b00:	0047dd40 	call	47dd4 <IINCHIP_WRITE>

        /* wait to process the command... */
        while( IINCHIP_READ(Sn_CR(s)) )
   46b04:	0001883a 	nop
   46b08:	e0bffc03 	ldbu	r2,-16(fp)
   46b0c:	1004917a 	slli	r2,r2,5
   46b10:	10804204 	addi	r2,r2,264
   46b14:	1009883a 	mov	r4,r2
   46b18:	0047e600 	call	47e60 <IINCHIP_READ>
   46b1c:	10803fcc 	andi	r2,r2,255
   46b20:	103ff91e 	bne	r2,zero,46b08 <__alt_mem_epcs_flash+0xfffc5b08>
            ;
        /* ------- */
        ret = 1;
   46b24:	00800044 	movi	r2,1
   46b28:	e0bffb05 	stb	r2,-20(fp)
   46b2c:	00000106 	br	46b34 <socket+0x1b0>
    }
    else
    {
        ret = 0;
   46b30:	e03ffb05 	stb	zero,-20(fp)
    }
    return ret;
   46b34:	e0bffb03 	ldbu	r2,-20(fp)
}
   46b38:	e037883a 	mov	sp,fp
   46b3c:	dfc00117 	ldw	ra,4(sp)
   46b40:	df000017 	ldw	fp,0(sp)
   46b44:	dec00204 	addi	sp,sp,8
   46b48:	f800283a 	ret

00046b4c <close_socket>:

/**
  @brief   This function close_socket the socket and parameter is "s" which represent the socket number
  */
void close_socket(SOCKET s)
{
   46b4c:	defffd04 	addi	sp,sp,-12
   46b50:	dfc00215 	stw	ra,8(sp)
   46b54:	df000115 	stw	fp,4(sp)
   46b58:	df000104 	addi	fp,sp,4
   46b5c:	2005883a 	mov	r2,r4
   46b60:	e0bfff05 	stb	r2,-4(fp)

    IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_CLOSE);
   46b64:	e0bfff03 	ldbu	r2,-4(fp)
   46b68:	1004917a 	slli	r2,r2,5
   46b6c:	10804204 	addi	r2,r2,264
   46b70:	01400404 	movi	r5,16
   46b74:	1009883a 	mov	r4,r2
   46b78:	0047dd40 	call	47dd4 <IINCHIP_WRITE>

    /* wait to process the command... */
    while( IINCHIP_READ(Sn_CR(s) ) )
   46b7c:	0001883a 	nop
   46b80:	e0bfff03 	ldbu	r2,-4(fp)
   46b84:	1004917a 	slli	r2,r2,5
   46b88:	10804204 	addi	r2,r2,264
   46b8c:	1009883a 	mov	r4,r2
   46b90:	0047e600 	call	47e60 <IINCHIP_READ>
   46b94:	10803fcc 	andi	r2,r2,255
   46b98:	103ff91e 	bne	r2,zero,46b80 <__alt_mem_epcs_flash+0xfffc5b80>
        ;
    /* ------- */
    /* all clear */
    IINCHIP_WRITE( Sn_IR(s) , 0xFF);
   46b9c:	e0bfff03 	ldbu	r2,-4(fp)
   46ba0:	1004917a 	slli	r2,r2,5
   46ba4:	10808204 	addi	r2,r2,520
   46ba8:	01403fc4 	movi	r5,255
   46bac:	1009883a 	mov	r4,r2
   46bb0:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
}
   46bb4:	0001883a 	nop
   46bb8:	e037883a 	mov	sp,fp
   46bbc:	dfc00117 	ldw	ra,4(sp)
   46bc0:	df000017 	ldw	fp,0(sp)
   46bc4:	dec00204 	addi	sp,sp,8
   46bc8:	f800283a 	ret

00046bcc <listen>:
/**
  @brief   This function established  the connection for the channel in passive (server) mode. This function waits for the request from the peer.
  @return  1 for success else 0.
  */
uint8 listen(SOCKET s)
{
   46bcc:	defffc04 	addi	sp,sp,-16
   46bd0:	dfc00315 	stw	ra,12(sp)
   46bd4:	df000215 	stw	fp,8(sp)
   46bd8:	df000204 	addi	fp,sp,8
   46bdc:	2005883a 	mov	r2,r4
   46be0:	e0bfff05 	stb	r2,-4(fp)
    uint8 ret;			// 定义一个监听标志位，若Sn_CR的LISTEN命令发送成功，其值为1，否则为0

    if (IINCHIP_READ( Sn_SR(s) ) == SOCK_INIT)		// 若Sn_SR处于初始化状态，进入循环
   46be4:	e0bfff03 	ldbu	r2,-4(fp)
   46be8:	1004917a 	slli	r2,r2,5
   46bec:	1080c204 	addi	r2,r2,776
   46bf0:	1009883a 	mov	r4,r2
   46bf4:	0047e600 	call	47e60 <IINCHIP_READ>
   46bf8:	10803fcc 	andi	r2,r2,255
   46bfc:	108004d8 	cmpnei	r2,r2,19
   46c00:	1000111e 	bne	r2,zero,46c48 <listen+0x7c>
    {
        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_LISTEN);		// MCU配置W5500为监听状态
   46c04:	e0bfff03 	ldbu	r2,-4(fp)
   46c08:	1004917a 	slli	r2,r2,5
   46c0c:	10804204 	addi	r2,r2,264
   46c10:	01400084 	movi	r5,2
   46c14:	1009883a 	mov	r4,r2
   46c18:	0047dd40 	call	47dd4 <IINCHIP_WRITE>

        while( IINCHIP_READ(Sn_CR(s) ) )					// 配置完成，Sn_CR自动清零
   46c1c:	0001883a 	nop
   46c20:	e0bfff03 	ldbu	r2,-4(fp)
   46c24:	1004917a 	slli	r2,r2,5
   46c28:	10804204 	addi	r2,r2,264
   46c2c:	1009883a 	mov	r4,r2
   46c30:	0047e600 	call	47e60 <IINCHIP_READ>
   46c34:	10803fcc 	andi	r2,r2,255
   46c38:	103ff91e 	bne	r2,zero,46c20 <__alt_mem_epcs_flash+0xfffc5c20>
            ;
        ret = 1;																	// LISTEN命令发送成功，ret=1
   46c3c:	00800044 	movi	r2,1
   46c40:	e0bffe05 	stb	r2,-8(fp)
   46c44:	00000106 	br	46c4c <listen+0x80>
    }
    else
    {
        ret = 0;																	// 否则，ret=0
   46c48:	e03ffe05 	stb	zero,-8(fp)
    }
    return ret;
   46c4c:	e0bffe03 	ldbu	r2,-8(fp)
}
   46c50:	e037883a 	mov	sp,fp
   46c54:	dfc00117 	ldw	ra,4(sp)
   46c58:	df000017 	ldw	fp,0(sp)
   46c5c:	dec00204 	addi	sp,sp,8
   46c60:	f800283a 	ret

00046c64 <connect>:
  This function waits for the untill the connection is established.

  @return  1 for success else 0.
  */
uint8 connect(SOCKET s, uint8 * addr, uint16 port)
{
   46c64:	defffa04 	addi	sp,sp,-24
   46c68:	dfc00515 	stw	ra,20(sp)
   46c6c:	df000415 	stw	fp,16(sp)
   46c70:	df000404 	addi	fp,sp,16
   46c74:	2007883a 	mov	r3,r4
   46c78:	e17ffe15 	stw	r5,-8(fp)
   46c7c:	3005883a 	mov	r2,r6
   46c80:	e0fffd05 	stb	r3,-12(fp)
   46c84:	e0bfff0d 	sth	r2,-4(fp)
    uint8 ret;
    if
        (
         ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
   46c88:	e0bffe17 	ldw	r2,-8(fp)
   46c8c:	10800003 	ldbu	r2,0(r2)
  */
uint8 connect(SOCKET s, uint8 * addr, uint16 port)
{
    uint8 ret;
    if
        (
   46c90:	10803fcc 	andi	r2,r2,255
   46c94:	10803fd8 	cmpnei	r2,r2,255
   46c98:	1000121e 	bne	r2,zero,46ce4 <connect+0x80>
         ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
   46c9c:	e0bffe17 	ldw	r2,-8(fp)
   46ca0:	10800044 	addi	r2,r2,1
   46ca4:	10800003 	ldbu	r2,0(r2)
   46ca8:	10803fcc 	andi	r2,r2,255
   46cac:	10803fd8 	cmpnei	r2,r2,255
   46cb0:	10000c1e 	bne	r2,zero,46ce4 <connect+0x80>
   46cb4:	e0bffe17 	ldw	r2,-8(fp)
   46cb8:	10800084 	addi	r2,r2,2
   46cbc:	10800003 	ldbu	r2,0(r2)
   46cc0:	10803fcc 	andi	r2,r2,255
   46cc4:	10803fd8 	cmpnei	r2,r2,255
   46cc8:	1000061e 	bne	r2,zero,46ce4 <connect+0x80>
   46ccc:	e0bffe17 	ldw	r2,-8(fp)
   46cd0:	108000c4 	addi	r2,r2,3
   46cd4:	10800003 	ldbu	r2,0(r2)
   46cd8:	10803fcc 	andi	r2,r2,255
   46cdc:	10803fe0 	cmpeqi	r2,r2,255
   46ce0:	1000151e 	bne	r2,zero,46d38 <connect+0xd4>
         ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   46ce4:	e0bffe17 	ldw	r2,-8(fp)
   46ce8:	10800003 	ldbu	r2,0(r2)
uint8 connect(SOCKET s, uint8 * addr, uint16 port)
{
    uint8 ret;
    if
        (
         ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
   46cec:	10803fcc 	andi	r2,r2,255
   46cf0:	10000f1e 	bne	r2,zero,46d30 <connect+0xcc>
         ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   46cf4:	e0bffe17 	ldw	r2,-8(fp)
   46cf8:	10800044 	addi	r2,r2,1
   46cfc:	10800003 	ldbu	r2,0(r2)
   46d00:	10803fcc 	andi	r2,r2,255
   46d04:	10000a1e 	bne	r2,zero,46d30 <connect+0xcc>
   46d08:	e0bffe17 	ldw	r2,-8(fp)
   46d0c:	10800084 	addi	r2,r2,2
   46d10:	10800003 	ldbu	r2,0(r2)
   46d14:	10803fcc 	andi	r2,r2,255
   46d18:	1000051e 	bne	r2,zero,46d30 <connect+0xcc>
   46d1c:	e0bffe17 	ldw	r2,-8(fp)
   46d20:	108000c4 	addi	r2,r2,3
   46d24:	10800003 	ldbu	r2,0(r2)
   46d28:	10803fcc 	andi	r2,r2,255
   46d2c:	10000226 	beq	r2,zero,46d38 <connect+0xd4>
   46d30:	e0bfff0b 	ldhu	r2,-4(fp)
   46d34:	1000021e 	bne	r2,zero,46d40 <connect+0xdc>
         (port == 0x00)
        )
        {
            ret = 0;
   46d38:	e03ffc05 	stb	zero,-16(fp)
   46d3c:	00006f06 	br	46efc <connect+0x298>
        }
    else
    {
        ret = 1;
   46d40:	00800044 	movi	r2,1
   46d44:	e0bffc05 	stb	r2,-16(fp)
        // set destination IP
        IINCHIP_WRITE( Sn_DIPR0(s), addr[0]);
   46d48:	e0bffd03 	ldbu	r2,-12(fp)
   46d4c:	1004917a 	slli	r2,r2,5
   46d50:	10830204 	addi	r2,r2,3080
   46d54:	1007883a 	mov	r3,r2
   46d58:	e0bffe17 	ldw	r2,-8(fp)
   46d5c:	10800003 	ldbu	r2,0(r2)
   46d60:	10803fcc 	andi	r2,r2,255
   46d64:	100b883a 	mov	r5,r2
   46d68:	1809883a 	mov	r4,r3
   46d6c:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DIPR1(s), addr[1]);
   46d70:	e0bffd03 	ldbu	r2,-12(fp)
   46d74:	1004917a 	slli	r2,r2,5
   46d78:	10834204 	addi	r2,r2,3336
   46d7c:	1007883a 	mov	r3,r2
   46d80:	e0bffe17 	ldw	r2,-8(fp)
   46d84:	10800044 	addi	r2,r2,1
   46d88:	10800003 	ldbu	r2,0(r2)
   46d8c:	10803fcc 	andi	r2,r2,255
   46d90:	100b883a 	mov	r5,r2
   46d94:	1809883a 	mov	r4,r3
   46d98:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DIPR2(s), addr[2]);
   46d9c:	e0bffd03 	ldbu	r2,-12(fp)
   46da0:	1004917a 	slli	r2,r2,5
   46da4:	10838204 	addi	r2,r2,3592
   46da8:	1007883a 	mov	r3,r2
   46dac:	e0bffe17 	ldw	r2,-8(fp)
   46db0:	10800084 	addi	r2,r2,2
   46db4:	10800003 	ldbu	r2,0(r2)
   46db8:	10803fcc 	andi	r2,r2,255
   46dbc:	100b883a 	mov	r5,r2
   46dc0:	1809883a 	mov	r4,r3
   46dc4:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DIPR3(s), addr[3]);
   46dc8:	e0bffd03 	ldbu	r2,-12(fp)
   46dcc:	1004917a 	slli	r2,r2,5
   46dd0:	1083c204 	addi	r2,r2,3848
   46dd4:	1007883a 	mov	r3,r2
   46dd8:	e0bffe17 	ldw	r2,-8(fp)
   46ddc:	108000c4 	addi	r2,r2,3
   46de0:	10800003 	ldbu	r2,0(r2)
   46de4:	10803fcc 	andi	r2,r2,255
   46de8:	100b883a 	mov	r5,r2
   46dec:	1809883a 	mov	r4,r3
   46df0:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DPORT0(s), (uint8)((port & 0xff00) >> 8));
   46df4:	e0bffd03 	ldbu	r2,-12(fp)
   46df8:	1004917a 	slli	r2,r2,5
   46dfc:	10840204 	addi	r2,r2,4104
   46e00:	1007883a 	mov	r3,r2
   46e04:	e0bfff0b 	ldhu	r2,-4(fp)
   46e08:	1004d23a 	srli	r2,r2,8
   46e0c:	10803fcc 	andi	r2,r2,255
   46e10:	100b883a 	mov	r5,r2
   46e14:	1809883a 	mov	r4,r3
   46e18:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DPORT1(s), (uint8)(port & 0x00ff));
   46e1c:	e0bffd03 	ldbu	r2,-12(fp)
   46e20:	1004917a 	slli	r2,r2,5
   46e24:	10844204 	addi	r2,r2,4360
   46e28:	1007883a 	mov	r3,r2
   46e2c:	e0bfff0b 	ldhu	r2,-4(fp)
   46e30:	10803fcc 	andi	r2,r2,255
   46e34:	100b883a 	mov	r5,r2
   46e38:	1809883a 	mov	r4,r3
   46e3c:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_CONNECT);
   46e40:	e0bffd03 	ldbu	r2,-12(fp)
   46e44:	1004917a 	slli	r2,r2,5
   46e48:	10804204 	addi	r2,r2,264
   46e4c:	01400104 	movi	r5,4
   46e50:	1009883a 	mov	r4,r2
   46e54:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        /* wait for completion */
        while ( IINCHIP_READ(Sn_CR(s) ) ) ;
   46e58:	0001883a 	nop
   46e5c:	e0bffd03 	ldbu	r2,-12(fp)
   46e60:	1004917a 	slli	r2,r2,5
   46e64:	10804204 	addi	r2,r2,264
   46e68:	1009883a 	mov	r4,r2
   46e6c:	0047e600 	call	47e60 <IINCHIP_READ>
   46e70:	10803fcc 	andi	r2,r2,255
   46e74:	103ff91e 	bne	r2,zero,46e5c <__alt_mem_epcs_flash+0xfffc5e5c>

        while ( IINCHIP_READ(Sn_SR(s)) != SOCK_SYNSENT )
   46e78:	00001606 	br	46ed4 <connect+0x270>
        {
            if(IINCHIP_READ(Sn_SR(s)) == SOCK_ESTABLISHED)
   46e7c:	e0bffd03 	ldbu	r2,-12(fp)
   46e80:	1004917a 	slli	r2,r2,5
   46e84:	1080c204 	addi	r2,r2,776
   46e88:	1009883a 	mov	r4,r2
   46e8c:	0047e600 	call	47e60 <IINCHIP_READ>
   46e90:	10803fcc 	andi	r2,r2,255
   46e94:	108005d8 	cmpnei	r2,r2,23
   46e98:	10001726 	beq	r2,zero,46ef8 <connect+0x294>
            {
                break;
            }
            if (getSn_IR(s) & Sn_IR_TIMEOUT)
   46e9c:	e0bffd03 	ldbu	r2,-12(fp)
   46ea0:	1009883a 	mov	r4,r2
   46ea4:	00489700 	call	48970 <getSn_IR>
   46ea8:	10803fcc 	andi	r2,r2,255
   46eac:	1080020c 	andi	r2,r2,8
   46eb0:	10000826 	beq	r2,zero,46ed4 <connect+0x270>
            {
                IINCHIP_WRITE(Sn_IR(s), (Sn_IR_TIMEOUT));  // clear TIMEOUT Interrupt
   46eb4:	e0bffd03 	ldbu	r2,-12(fp)
   46eb8:	1004917a 	slli	r2,r2,5
   46ebc:	10808204 	addi	r2,r2,520
   46ec0:	01400204 	movi	r5,8
   46ec4:	1009883a 	mov	r4,r2
   46ec8:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
                ret = 0;
   46ecc:	e03ffc05 	stb	zero,-16(fp)
                break;
   46ed0:	00000a06 	br	46efc <connect+0x298>
        IINCHIP_WRITE( Sn_DPORT1(s), (uint8)(port & 0x00ff));
        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_CONNECT);
        /* wait for completion */
        while ( IINCHIP_READ(Sn_CR(s) ) ) ;

        while ( IINCHIP_READ(Sn_SR(s)) != SOCK_SYNSENT )
   46ed4:	e0bffd03 	ldbu	r2,-12(fp)
   46ed8:	1004917a 	slli	r2,r2,5
   46edc:	1080c204 	addi	r2,r2,776
   46ee0:	1009883a 	mov	r4,r2
   46ee4:	0047e600 	call	47e60 <IINCHIP_READ>
   46ee8:	10803fcc 	andi	r2,r2,255
   46eec:	10800558 	cmpnei	r2,r2,21
   46ef0:	103fe21e 	bne	r2,zero,46e7c <__alt_mem_epcs_flash+0xfffc5e7c>
   46ef4:	00000106 	br	46efc <connect+0x298>
        {
            if(IINCHIP_READ(Sn_SR(s)) == SOCK_ESTABLISHED)
            {
                break;
   46ef8:	0001883a 	nop
                break;
            }
        }
    }

    return ret;
   46efc:	e0bffc03 	ldbu	r2,-16(fp)
}
   46f00:	e037883a 	mov	sp,fp
   46f04:	dfc00117 	ldw	ra,4(sp)
   46f08:	df000017 	ldw	fp,0(sp)
   46f0c:	dec00204 	addi	sp,sp,8
   46f10:	f800283a 	ret

00046f14 <disconnect>:
/**
  @brief   This function used for disconnect the socket and parameter is "s" which represent the socket number
  @return  1 for success else 0.
  */
void disconnect(SOCKET s)
{
   46f14:	defffd04 	addi	sp,sp,-12
   46f18:	dfc00215 	stw	ra,8(sp)
   46f1c:	df000115 	stw	fp,4(sp)
   46f20:	df000104 	addi	fp,sp,4
   46f24:	2005883a 	mov	r2,r4
   46f28:	e0bfff05 	stb	r2,-4(fp)
    IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_DISCON);
   46f2c:	e0bfff03 	ldbu	r2,-4(fp)
   46f30:	1004917a 	slli	r2,r2,5
   46f34:	10804204 	addi	r2,r2,264
   46f38:	01400204 	movi	r5,8
   46f3c:	1009883a 	mov	r4,r2
   46f40:	0047dd40 	call	47dd4 <IINCHIP_WRITE>

    /* wait to process the command... */
    while( IINCHIP_READ(Sn_CR(s) ) )
   46f44:	0001883a 	nop
   46f48:	e0bfff03 	ldbu	r2,-4(fp)
   46f4c:	1004917a 	slli	r2,r2,5
   46f50:	10804204 	addi	r2,r2,264
   46f54:	1009883a 	mov	r4,r2
   46f58:	0047e600 	call	47e60 <IINCHIP_READ>
   46f5c:	10803fcc 	andi	r2,r2,255
   46f60:	103ff91e 	bne	r2,zero,46f48 <__alt_mem_epcs_flash+0xfffc5f48>
        ;
    /* ------- */
}
   46f64:	0001883a 	nop
   46f68:	e037883a 	mov	sp,fp
   46f6c:	dfc00117 	ldw	ra,4(sp)
   46f70:	df000017 	ldw	fp,0(sp)
   46f74:	dec00204 	addi	sp,sp,8
   46f78:	f800283a 	ret

00046f7c <send>:
/**
  @brief   This function used to send the data in TCP mode
  @return  1 for success else 0.
  */
uint16 send(SOCKET s, const uint8 * buf, uint16 len)
{
   46f7c:	defff904 	addi	sp,sp,-28
   46f80:	dfc00615 	stw	ra,24(sp)
   46f84:	df000515 	stw	fp,20(sp)
   46f88:	df000504 	addi	fp,sp,20
   46f8c:	2007883a 	mov	r3,r4
   46f90:	e17ffe15 	stw	r5,-8(fp)
   46f94:	3005883a 	mov	r2,r6
   46f98:	e0fffd05 	stb	r3,-12(fp)
   46f9c:	e0bfff0d 	sth	r2,-4(fp)
    uint8 status=0;
   46fa0:	e03ffb85 	stb	zero,-18(fp)
    uint16 ret=0;
   46fa4:	e03ffb0d 	sth	zero,-20(fp)
    uint16 freesize=0;
   46fa8:	e03ffc0d 	sth	zero,-16(fp)

    if (len > getIINCHIP_TxMAX(s))
   46fac:	e0bffd03 	ldbu	r2,-12(fp)
   46fb0:	1009883a 	mov	r4,r2
   46fb4:	0047cc40 	call	47cc4 <getIINCHIP_TxMAX>
   46fb8:	10ffffcc 	andi	r3,r2,65535
   46fbc:	e0bfff0b 	ldhu	r2,-4(fp)
   46fc0:	1880052e 	bgeu	r3,r2,46fd8 <send+0x5c>
    	ret = getIINCHIP_TxMAX(s);
   46fc4:	e0bffd03 	ldbu	r2,-12(fp)
   46fc8:	1009883a 	mov	r4,r2
   46fcc:	0047cc40 	call	47cc4 <getIINCHIP_TxMAX>
   46fd0:	e0bffb0d 	sth	r2,-20(fp)
   46fd4:	00000206 	br	46fe0 <send+0x64>
    else
    	ret = len;
   46fd8:	e0bfff0b 	ldhu	r2,-4(fp)
   46fdc:	e0bffb0d 	sth	r2,-20(fp)

    do
    {
        freesize = getSn_TX_FSR(s);
   46fe0:	e0bffd03 	ldbu	r2,-12(fp)
   46fe4:	1009883a 	mov	r4,r2
   46fe8:	00489f00 	call	489f0 <getSn_TX_FSR>
   46fec:	e0bffc0d 	sth	r2,-16(fp)
        status = IINCHIP_READ(Sn_SR(s));
   46ff0:	e0bffd03 	ldbu	r2,-12(fp)
   46ff4:	1004917a 	slli	r2,r2,5
   46ff8:	1080c204 	addi	r2,r2,776
   46ffc:	1009883a 	mov	r4,r2
   47000:	0047e600 	call	47e60 <IINCHIP_READ>
   47004:	e0bffb85 	stb	r2,-18(fp)
        if ((status != SOCK_ESTABLISHED) && (status != SOCK_CLOSE_WAIT))
   47008:	e0bffb83 	ldbu	r2,-18(fp)
   4700c:	108005e0 	cmpeqi	r2,r2,23
   47010:	1000051e 	bne	r2,zero,47028 <send+0xac>
   47014:	e0bffb83 	ldbu	r2,-18(fp)
   47018:	10800720 	cmpeqi	r2,r2,28
   4701c:	1000021e 	bne	r2,zero,47028 <send+0xac>
        {
            ret = 0;
   47020:	e03ffb0d 	sth	zero,-20(fp)
            break;
   47024:	00000306 	br	47034 <send+0xb8>
        }
    } while (freesize < ret);
   47028:	e0fffc0b 	ldhu	r3,-16(fp)
   4702c:	e0bffb0b 	ldhu	r2,-20(fp)
   47030:	18bfeb36 	bltu	r3,r2,46fe0 <__alt_mem_epcs_flash+0xfffc5fe0>

    send_data_processing(s, (uint8 *)buf, ret);
   47034:	e0bffd03 	ldbu	r2,-12(fp)
   47038:	e0fffb0b 	ldhu	r3,-20(fp)
   4703c:	180d883a 	mov	r6,r3
   47040:	e17ffe17 	ldw	r5,-8(fp)
   47044:	1009883a 	mov	r4,r2
   47048:	0048bb80 	call	48bb8 <send_data_processing>
    IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_SEND);
   4704c:	e0bffd03 	ldbu	r2,-12(fp)
   47050:	1004917a 	slli	r2,r2,5
   47054:	10804204 	addi	r2,r2,264
   47058:	01400804 	movi	r5,32
   4705c:	1009883a 	mov	r4,r2
   47060:	0047dd40 	call	47dd4 <IINCHIP_WRITE>

    while( IINCHIP_READ(Sn_CR(s) ) );
   47064:	0001883a 	nop
   47068:	e0bffd03 	ldbu	r2,-12(fp)
   4706c:	1004917a 	slli	r2,r2,5
   47070:	10804204 	addi	r2,r2,264
   47074:	1009883a 	mov	r4,r2
   47078:	0047e600 	call	47e60 <IINCHIP_READ>
   4707c:	10803fcc 	andi	r2,r2,255
   47080:	103ff91e 	bne	r2,zero,47068 <__alt_mem_epcs_flash+0xfffc6068>

    while ( (IINCHIP_READ(Sn_IR(s) ) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK )
   47084:	00001106 	br	470cc <send+0x150>
    {
        status = IINCHIP_READ(Sn_SR(s));
   47088:	e0bffd03 	ldbu	r2,-12(fp)
   4708c:	1004917a 	slli	r2,r2,5
   47090:	1080c204 	addi	r2,r2,776
   47094:	1009883a 	mov	r4,r2
   47098:	0047e600 	call	47e60 <IINCHIP_READ>
   4709c:	e0bffb85 	stb	r2,-18(fp)
        if ((status != SOCK_ESTABLISHED) && (status != SOCK_CLOSE_WAIT) )
   470a0:	e0bffb83 	ldbu	r2,-18(fp)
   470a4:	108005e0 	cmpeqi	r2,r2,23
   470a8:	1000081e 	bne	r2,zero,470cc <send+0x150>
   470ac:	e0bffb83 	ldbu	r2,-18(fp)
   470b0:	10800720 	cmpeqi	r2,r2,28
   470b4:	1000051e 	bne	r2,zero,470cc <send+0x150>
        {
            close_socket(s);
   470b8:	e0bffd03 	ldbu	r2,-12(fp)
   470bc:	1009883a 	mov	r4,r2
   470c0:	0046b4c0 	call	46b4c <close_socket>
            return 0;
   470c4:	0005883a 	mov	r2,zero
   470c8:	00001506 	br	47120 <send+0x1a4>
    send_data_processing(s, (uint8 *)buf, ret);
    IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_SEND);

    while( IINCHIP_READ(Sn_CR(s) ) );

    while ( (IINCHIP_READ(Sn_IR(s) ) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK )
   470cc:	e0bffd03 	ldbu	r2,-12(fp)
   470d0:	1004917a 	slli	r2,r2,5
   470d4:	10808204 	addi	r2,r2,520
   470d8:	1009883a 	mov	r4,r2
   470dc:	0047e600 	call	47e60 <IINCHIP_READ>
   470e0:	10803fcc 	andi	r2,r2,255
   470e4:	1080040c 	andi	r2,r2,16
   470e8:	103fe726 	beq	r2,zero,47088 <__alt_mem_epcs_flash+0xfffc6088>
        {
            close_socket(s);
            return 0;
        }
    }
    IINCHIP_WRITE( Sn_IR(s) , Sn_IR_SEND_OK);
   470ec:	e0bffd03 	ldbu	r2,-12(fp)
   470f0:	1004917a 	slli	r2,r2,5
   470f4:	10808204 	addi	r2,r2,520
   470f8:	01400404 	movi	r5,16
   470fc:	1009883a 	mov	r4,r2
   47100:	0047dd40 	call	47dd4 <IINCHIP_WRITE>

#ifdef __DEF_IINCHIP_INT__
    putISR(s, getISR(s) & (~Sn_IR_SEND_OK));
#else
    IINCHIP_WRITE( Sn_IR(s) , Sn_IR_SEND_OK);
   47104:	e0bffd03 	ldbu	r2,-12(fp)
   47108:	1004917a 	slli	r2,r2,5
   4710c:	10808204 	addi	r2,r2,520
   47110:	01400404 	movi	r5,16
   47114:	1009883a 	mov	r4,r2
   47118:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
#endif

    return ret;
   4711c:	e0bffb0b 	ldhu	r2,-20(fp)
}
   47120:	e037883a 	mov	sp,fp
   47124:	dfc00117 	ldw	ra,4(sp)
   47128:	df000017 	ldw	fp,0(sp)
   4712c:	dec00204 	addi	sp,sp,8
   47130:	f800283a 	ret

00047134 <recv>:
  It continues to wait for data as much as the application wants to receive.

  @return  received data size for success else -1.
  */
uint16 recv(SOCKET s, uint8 * buf, uint16 len)
{
   47134:	defffa04 	addi	sp,sp,-24
   47138:	dfc00515 	stw	ra,20(sp)
   4713c:	df000415 	stw	fp,16(sp)
   47140:	df000404 	addi	fp,sp,16
   47144:	2007883a 	mov	r3,r4
   47148:	e17ffe15 	stw	r5,-8(fp)
   4714c:	3005883a 	mov	r2,r6
   47150:	e0fffd05 	stb	r3,-12(fp)
   47154:	e0bfff0d 	sth	r2,-4(fp)
    uint16 ret=0;
   47158:	e03ffc0d 	sth	zero,-16(fp)
    if ( len > 0 )
   4715c:	e0bfff0b 	ldhu	r2,-4(fp)
   47160:	10001626 	beq	r2,zero,471bc <recv+0x88>
    {
        recv_data_processing(s, buf, len);				// 数据接收进程：将通过Sockets的buf接受的长度为len的数据写入指针对应的MCU的缓存地址
   47164:	e0bffd03 	ldbu	r2,-12(fp)
   47168:	e0ffff0b 	ldhu	r3,-4(fp)
   4716c:	180d883a 	mov	r6,r3
   47170:	e17ffe17 	ldw	r5,-8(fp)
   47174:	1009883a 	mov	r4,r2
   47178:	0048ce80 	call	48ce8 <recv_data_processing>

        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_RECV);			// MCU配置Sn_CR为RECV
   4717c:	e0bffd03 	ldbu	r2,-12(fp)
   47180:	1004917a 	slli	r2,r2,5
   47184:	10804204 	addi	r2,r2,264
   47188:	01401004 	movi	r5,64
   4718c:	1009883a 	mov	r4,r2
   47190:	0047dd40 	call	47dd4 <IINCHIP_WRITE>

        while( IINCHIP_READ(Sn_CR(s) ));					// 配置完成，Sn_CR自动清零
   47194:	0001883a 	nop
   47198:	e0bffd03 	ldbu	r2,-12(fp)
   4719c:	1004917a 	slli	r2,r2,5
   471a0:	10804204 	addi	r2,r2,264
   471a4:	1009883a 	mov	r4,r2
   471a8:	0047e600 	call	47e60 <IINCHIP_READ>
   471ac:	10803fcc 	andi	r2,r2,255
   471b0:	103ff91e 	bne	r2,zero,47198 <__alt_mem_epcs_flash+0xfffc6198>

        ret = len;																// 将接收数据长度值赋给ret
   471b4:	e0bfff0b 	ldhu	r2,-4(fp)
   471b8:	e0bffc0d 	sth	r2,-16(fp)
    }
    return ret;																	// 返回ret的值。有返回值说明W5500有数据接收，并不断重复接收这一进程
   471bc:	e0bffc0b 	ldhu	r2,-16(fp)
}
   471c0:	e037883a 	mov	sp,fp
   471c4:	dfc00117 	ldw	ra,4(sp)
   471c8:	df000017 	ldw	fp,0(sp)
   471cc:	dec00204 	addi	sp,sp,8
   471d0:	f800283a 	ret

000471d4 <sendto>:
  Unlike TCP transmission, The peer's destination address and the port is needed.

  @return  This function return send data size for success else -1.
  */
uint16 sendto(SOCKET s, const uint8 * buf, uint16 len, uint8 * addr, uint16 port)
{
   471d4:	defff804 	addi	sp,sp,-32
   471d8:	dfc00715 	stw	ra,28(sp)
   471dc:	df000615 	stw	fp,24(sp)
   471e0:	df000604 	addi	fp,sp,24
   471e4:	e17ffc15 	stw	r5,-16(fp)
   471e8:	3007883a 	mov	r3,r6
   471ec:	e1fffe15 	stw	r7,-8(fp)
   471f0:	e0800217 	ldw	r2,8(fp)
   471f4:	e13ffb05 	stb	r4,-20(fp)
   471f8:	e0fffd0d 	sth	r3,-12(fp)
   471fc:	e0bfff0d 	sth	r2,-4(fp)
    uint16 ret=0;
   47200:	e03ffa0d 	sth	zero,-24(fp)

    if (len > getIINCHIP_TxMAX(s)) 
   47204:	e0bffb03 	ldbu	r2,-20(fp)
   47208:	1009883a 	mov	r4,r2
   4720c:	0047cc40 	call	47cc4 <getIINCHIP_TxMAX>
   47210:	10ffffcc 	andi	r3,r2,65535
   47214:	e0bffd0b 	ldhu	r2,-12(fp)
   47218:	1880052e 	bgeu	r3,r2,47230 <sendto+0x5c>
        ret = getIINCHIP_TxMAX(s); // check size not to exceed MAX size.
   4721c:	e0bffb03 	ldbu	r2,-20(fp)
   47220:	1009883a 	mov	r4,r2
   47224:	0047cc40 	call	47cc4 <getIINCHIP_TxMAX>
   47228:	e0bffa0d 	sth	r2,-24(fp)
   4722c:	00000206 	br	47238 <sendto+0x64>
    else ret = len;
   47230:	e0bffd0b 	ldhu	r2,-12(fp)
   47234:	e0bffa0d 	sth	r2,-24(fp)

    if( ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) || ((port == 0x00)) )//||(ret == 0) )
   47238:	e0bffe17 	ldw	r2,-8(fp)
   4723c:	10800003 	ldbu	r2,0(r2)
   47240:	10803fcc 	andi	r2,r2,255
   47244:	10000f1e 	bne	r2,zero,47284 <sendto+0xb0>
   47248:	e0bffe17 	ldw	r2,-8(fp)
   4724c:	10800044 	addi	r2,r2,1
   47250:	10800003 	ldbu	r2,0(r2)
   47254:	10803fcc 	andi	r2,r2,255
   47258:	10000a1e 	bne	r2,zero,47284 <sendto+0xb0>
   4725c:	e0bffe17 	ldw	r2,-8(fp)
   47260:	10800084 	addi	r2,r2,2
   47264:	10800003 	ldbu	r2,0(r2)
   47268:	10803fcc 	andi	r2,r2,255
   4726c:	1000051e 	bne	r2,zero,47284 <sendto+0xb0>
   47270:	e0bffe17 	ldw	r2,-8(fp)
   47274:	108000c4 	addi	r2,r2,3
   47278:	10800003 	ldbu	r2,0(r2)
   4727c:	10803fcc 	andi	r2,r2,255
   47280:	10000226 	beq	r2,zero,4728c <sendto+0xb8>
   47284:	e0bfff0b 	ldhu	r2,-4(fp)
   47288:	1000021e 	bne	r2,zero,47294 <sendto+0xc0>
    {
        /* added return value */
        ret = 0;
   4728c:	e03ffa0d 	sth	zero,-24(fp)
   47290:	00007106 	br	47458 <sendto+0x284>
    }
    else
    {
        IINCHIP_WRITE( Sn_DIPR0(s), addr[0]);
   47294:	e0bffb03 	ldbu	r2,-20(fp)
   47298:	1004917a 	slli	r2,r2,5
   4729c:	10830204 	addi	r2,r2,3080
   472a0:	1007883a 	mov	r3,r2
   472a4:	e0bffe17 	ldw	r2,-8(fp)
   472a8:	10800003 	ldbu	r2,0(r2)
   472ac:	10803fcc 	andi	r2,r2,255
   472b0:	100b883a 	mov	r5,r2
   472b4:	1809883a 	mov	r4,r3
   472b8:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DIPR1(s), addr[1]);
   472bc:	e0bffb03 	ldbu	r2,-20(fp)
   472c0:	1004917a 	slli	r2,r2,5
   472c4:	10834204 	addi	r2,r2,3336
   472c8:	1007883a 	mov	r3,r2
   472cc:	e0bffe17 	ldw	r2,-8(fp)
   472d0:	10800044 	addi	r2,r2,1
   472d4:	10800003 	ldbu	r2,0(r2)
   472d8:	10803fcc 	andi	r2,r2,255
   472dc:	100b883a 	mov	r5,r2
   472e0:	1809883a 	mov	r4,r3
   472e4:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DIPR2(s), addr[2]);
   472e8:	e0bffb03 	ldbu	r2,-20(fp)
   472ec:	1004917a 	slli	r2,r2,5
   472f0:	10838204 	addi	r2,r2,3592
   472f4:	1007883a 	mov	r3,r2
   472f8:	e0bffe17 	ldw	r2,-8(fp)
   472fc:	10800084 	addi	r2,r2,2
   47300:	10800003 	ldbu	r2,0(r2)
   47304:	10803fcc 	andi	r2,r2,255
   47308:	100b883a 	mov	r5,r2
   4730c:	1809883a 	mov	r4,r3
   47310:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DIPR3(s), addr[3]);
   47314:	e0bffb03 	ldbu	r2,-20(fp)
   47318:	1004917a 	slli	r2,r2,5
   4731c:	1083c204 	addi	r2,r2,3848
   47320:	1007883a 	mov	r3,r2
   47324:	e0bffe17 	ldw	r2,-8(fp)
   47328:	108000c4 	addi	r2,r2,3
   4732c:	10800003 	ldbu	r2,0(r2)
   47330:	10803fcc 	andi	r2,r2,255
   47334:	100b883a 	mov	r5,r2
   47338:	1809883a 	mov	r4,r3
   4733c:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DPORT0(s),(uint8)((port & 0xff00) >> 8));
   47340:	e0bffb03 	ldbu	r2,-20(fp)
   47344:	1004917a 	slli	r2,r2,5
   47348:	10840204 	addi	r2,r2,4104
   4734c:	1007883a 	mov	r3,r2
   47350:	e0bfff0b 	ldhu	r2,-4(fp)
   47354:	1004d23a 	srli	r2,r2,8
   47358:	10803fcc 	andi	r2,r2,255
   4735c:	100b883a 	mov	r5,r2
   47360:	1809883a 	mov	r4,r3
   47364:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DPORT1(s),(uint8)(port & 0x00ff));
   47368:	e0bffb03 	ldbu	r2,-20(fp)
   4736c:	1004917a 	slli	r2,r2,5
   47370:	10844204 	addi	r2,r2,4360
   47374:	1007883a 	mov	r3,r2
   47378:	e0bfff0b 	ldhu	r2,-4(fp)
   4737c:	10803fcc 	andi	r2,r2,255
   47380:	100b883a 	mov	r5,r2
   47384:	1809883a 	mov	r4,r3
   47388:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        // copy data
        send_data_processing(s, (uint8 *)buf, ret);
   4738c:	e0bffb03 	ldbu	r2,-20(fp)
   47390:	e0fffa0b 	ldhu	r3,-24(fp)
   47394:	180d883a 	mov	r6,r3
   47398:	e17ffc17 	ldw	r5,-16(fp)
   4739c:	1009883a 	mov	r4,r2
   473a0:	0048bb80 	call	48bb8 <send_data_processing>
        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_SEND);
   473a4:	e0bffb03 	ldbu	r2,-20(fp)
   473a8:	1004917a 	slli	r2,r2,5
   473ac:	10804204 	addi	r2,r2,264
   473b0:	01400804 	movi	r5,32
   473b4:	1009883a 	mov	r4,r2
   473b8:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        /* wait to process the command... */
        while( IINCHIP_READ( Sn_CR(s) ) )
   473bc:	0001883a 	nop
   473c0:	e0bffb03 	ldbu	r2,-20(fp)
   473c4:	1004917a 	slli	r2,r2,5
   473c8:	10804204 	addi	r2,r2,264
   473cc:	1009883a 	mov	r4,r2
   473d0:	0047e600 	call	47e60 <IINCHIP_READ>
   473d4:	10803fcc 	andi	r2,r2,255
   473d8:	103ff91e 	bne	r2,zero,473c0 <__alt_mem_epcs_flash+0xfffc63c0>
            ;
        /* ------- */
        while( (IINCHIP_READ( Sn_IR(s) ) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK )
   473dc:	00001006 	br	47420 <sendto+0x24c>
        {
            if (IINCHIP_READ( Sn_IR(s) ) & Sn_IR_TIMEOUT)
   473e0:	e0bffb03 	ldbu	r2,-20(fp)
   473e4:	1004917a 	slli	r2,r2,5
   473e8:	10808204 	addi	r2,r2,520
   473ec:	1009883a 	mov	r4,r2
   473f0:	0047e600 	call	47e60 <IINCHIP_READ>
   473f4:	10803fcc 	andi	r2,r2,255
   473f8:	1080020c 	andi	r2,r2,8
   473fc:	10000826 	beq	r2,zero,47420 <sendto+0x24c>
            {
                /* clear interrupt */
                IINCHIP_WRITE( Sn_IR(s) , (Sn_IR_SEND_OK | Sn_IR_TIMEOUT)); /* clear SEND_OK & TIMEOUT */
   47400:	e0bffb03 	ldbu	r2,-20(fp)
   47404:	1004917a 	slli	r2,r2,5
   47408:	10808204 	addi	r2,r2,520
   4740c:	01400604 	movi	r5,24
   47410:	1009883a 	mov	r4,r2
   47414:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
                return 0;
   47418:	0005883a 	mov	r2,zero
   4741c:	00000f06 	br	4745c <sendto+0x288>
        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_SEND);
        /* wait to process the command... */
        while( IINCHIP_READ( Sn_CR(s) ) )
            ;
        /* ------- */
        while( (IINCHIP_READ( Sn_IR(s) ) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK )
   47420:	e0bffb03 	ldbu	r2,-20(fp)
   47424:	1004917a 	slli	r2,r2,5
   47428:	10808204 	addi	r2,r2,520
   4742c:	1009883a 	mov	r4,r2
   47430:	0047e600 	call	47e60 <IINCHIP_READ>
   47434:	10803fcc 	andi	r2,r2,255
   47438:	1080040c 	andi	r2,r2,16
   4743c:	103fe826 	beq	r2,zero,473e0 <__alt_mem_epcs_flash+0xfffc63e0>
                /* clear interrupt */
                IINCHIP_WRITE( Sn_IR(s) , (Sn_IR_SEND_OK | Sn_IR_TIMEOUT)); /* clear SEND_OK & TIMEOUT */
                return 0;
            }
        }
        IINCHIP_WRITE( Sn_IR(s) , Sn_IR_SEND_OK);
   47440:	e0bffb03 	ldbu	r2,-20(fp)
   47444:	1004917a 	slli	r2,r2,5
   47448:	10808204 	addi	r2,r2,520
   4744c:	01400404 	movi	r5,16
   47450:	1009883a 	mov	r4,r2
   47454:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
    }
    return ret;
   47458:	e0bffa0b 	ldhu	r2,-24(fp)
}
   4745c:	e037883a 	mov	sp,fp
   47460:	dfc00117 	ldw	ra,4(sp)
   47464:	df000017 	ldw	fp,0(sp)
   47468:	dec00204 	addi	sp,sp,8
   4746c:	f800283a 	ret

00047470 <recvfrom>:
  TCP mode. This function is used to receive UDP, IP_RAW and MAC_RAW mode, and handle the header as well.

  @return  This function return received data size for success else -1.
  */
uint16 recvfrom(SOCKET s, uint8 * buf, uint16 len, uint8 * addr, uint16 *port)
{
   47470:	defff504 	addi	sp,sp,-44
   47474:	dfc00a15 	stw	ra,40(sp)
   47478:	df000915 	stw	fp,36(sp)
   4747c:	dc000815 	stw	r16,32(sp)
   47480:	df000904 	addi	fp,sp,36
   47484:	2007883a 	mov	r3,r4
   47488:	e17ffc15 	stw	r5,-16(fp)
   4748c:	3005883a 	mov	r2,r6
   47490:	e1fffe15 	stw	r7,-8(fp)
   47494:	e0fffb05 	stb	r3,-20(fp)
   47498:	e0bffd0d 	sth	r2,-12(fp)
    uint8 head[8];
    uint16 data_len=0;
   4749c:	e03ff70d 	sth	zero,-36(fp)
    uint16 ptr=0;
   474a0:	e03ff78d 	sth	zero,-34(fp)
    uint32 addrbsb =0;
   474a4:	e03ff815 	stw	zero,-32(fp)
    if ( len > 0 )
   474a8:	e0bffd0b 	ldhu	r2,-12(fp)
   474ac:	10010c26 	beq	r2,zero,478e0 <recvfrom+0x470>
    {
        ptr     = IINCHIP_READ(Sn_RX_RD0(s) );
   474b0:	e0bffb03 	ldbu	r2,-20(fp)
   474b4:	1004917a 	slli	r2,r2,5
   474b8:	108a0204 	addi	r2,r2,10248
   474bc:	1009883a 	mov	r4,r2
   474c0:	0047e600 	call	47e60 <IINCHIP_READ>
   474c4:	10803fcc 	andi	r2,r2,255
   474c8:	e0bff78d 	sth	r2,-34(fp)
        ptr     = ((ptr & 0x00ff) << 8) + IINCHIP_READ(Sn_RX_RD1(s));
   474cc:	e0bff78b 	ldhu	r2,-34(fp)
   474d0:	1004923a 	slli	r2,r2,8
   474d4:	1021883a 	mov	r16,r2
   474d8:	e0bffb03 	ldbu	r2,-20(fp)
   474dc:	1004917a 	slli	r2,r2,5
   474e0:	108a4204 	addi	r2,r2,10504
   474e4:	1009883a 	mov	r4,r2
   474e8:	0047e600 	call	47e60 <IINCHIP_READ>
   474ec:	10803fcc 	andi	r2,r2,255
   474f0:	8085883a 	add	r2,r16,r2
   474f4:	e0bff78d 	sth	r2,-34(fp)
        addrbsb = (uint32)(ptr<<8) +  (s<<5) + 0x18;
   474f8:	e0bff78b 	ldhu	r2,-34(fp)
   474fc:	1004923a 	slli	r2,r2,8
   47500:	1007883a 	mov	r3,r2
   47504:	e0bffb03 	ldbu	r2,-20(fp)
   47508:	1004917a 	slli	r2,r2,5
   4750c:	1885883a 	add	r2,r3,r2
   47510:	10800604 	addi	r2,r2,24
   47514:	e0bff815 	stw	r2,-32(fp)

        switch (IINCHIP_READ(Sn_MR(s) ) & 0x07)
   47518:	e0bffb03 	ldbu	r2,-20(fp)
   4751c:	1004917a 	slli	r2,r2,5
   47520:	10800204 	addi	r2,r2,8
   47524:	1009883a 	mov	r4,r2
   47528:	0047e600 	call	47e60 <IINCHIP_READ>
   4752c:	10803fcc 	andi	r2,r2,255
   47530:	108001cc 	andi	r2,r2,7
   47534:	10c000e0 	cmpeqi	r3,r2,3
   47538:	1800591e 	bne	r3,zero,476a0 <recvfrom+0x230>
   4753c:	10c00120 	cmpeqi	r3,r2,4
   47540:	18009d1e 	bne	r3,zero,477b8 <recvfrom+0x348>
   47544:	108000a0 	cmpeqi	r2,r2,2
   47548:	1000011e 	bne	r2,zero,47550 <recvfrom+0xe0>
                IINCHIP_WRITE( Sn_RX_RD0(s), (uint8)((ptr & 0xff00) >> 8));
                IINCHIP_WRITE( Sn_RX_RD1(s), (uint8)(ptr & 0x00ff));
                break;

            default :
                break;
   4754c:	0000d606 	br	478a8 <recvfrom+0x438>
        addrbsb = (uint32)(ptr<<8) +  (s<<5) + 0x18;

        switch (IINCHIP_READ(Sn_MR(s) ) & 0x07)
        {
            case Sn_MR_UDP :
                wiz_read_buf(addrbsb, head, 0x08);        
   47550:	e0bff904 	addi	r2,fp,-28
   47554:	01800204 	movi	r6,8
   47558:	100b883a 	mov	r5,r2
   4755c:	e13ff817 	ldw	r4,-32(fp)
   47560:	0047fc80 	call	47fc8 <wiz_read_buf>
                ptr += 8;
   47564:	e0bff78b 	ldhu	r2,-34(fp)
   47568:	10800204 	addi	r2,r2,8
   4756c:	e0bff78d 	sth	r2,-34(fp)
                // read peer's IP address, port number.
                addr[0]  = head[0];
   47570:	e0fff903 	ldbu	r3,-28(fp)
   47574:	e0bffe17 	ldw	r2,-8(fp)
   47578:	10c00005 	stb	r3,0(r2)
                addr[1]  = head[1];
   4757c:	e0bffe17 	ldw	r2,-8(fp)
   47580:	10800044 	addi	r2,r2,1
   47584:	e0fff943 	ldbu	r3,-27(fp)
   47588:	10c00005 	stb	r3,0(r2)
                addr[2]  = head[2];
   4758c:	e0bffe17 	ldw	r2,-8(fp)
   47590:	10800084 	addi	r2,r2,2
   47594:	e0fff983 	ldbu	r3,-26(fp)
   47598:	10c00005 	stb	r3,0(r2)
                addr[3]  = head[3];
   4759c:	e0bffe17 	ldw	r2,-8(fp)
   475a0:	108000c4 	addi	r2,r2,3
   475a4:	e0fff9c3 	ldbu	r3,-25(fp)
   475a8:	10c00005 	stb	r3,0(r2)
                *port    = head[4];
   475ac:	e0bffa03 	ldbu	r2,-24(fp)
   475b0:	10c03fcc 	andi	r3,r2,255
   475b4:	e0800217 	ldw	r2,8(fp)
   475b8:	10c0000d 	sth	r3,0(r2)
                *port    = (*port << 8) + head[5];
   475bc:	e0800217 	ldw	r2,8(fp)
   475c0:	1080000b 	ldhu	r2,0(r2)
   475c4:	1004923a 	slli	r2,r2,8
   475c8:	1007883a 	mov	r3,r2
   475cc:	e0bffa43 	ldbu	r2,-23(fp)
   475d0:	10803fcc 	andi	r2,r2,255
   475d4:	1885883a 	add	r2,r3,r2
   475d8:	1007883a 	mov	r3,r2
   475dc:	e0800217 	ldw	r2,8(fp)
   475e0:	10c0000d 	sth	r3,0(r2)
                data_len = head[6];
   475e4:	e0bffa83 	ldbu	r2,-22(fp)
   475e8:	10803fcc 	andi	r2,r2,255
   475ec:	e0bff70d 	sth	r2,-36(fp)
                data_len = (data_len << 8) + head[7];
   475f0:	e0bff70b 	ldhu	r2,-36(fp)
   475f4:	1004923a 	slli	r2,r2,8
   475f8:	1007883a 	mov	r3,r2
   475fc:	e0bffac3 	ldbu	r2,-21(fp)
   47600:	10803fcc 	andi	r2,r2,255
   47604:	1885883a 	add	r2,r3,r2
   47608:	e0bff70d 	sth	r2,-36(fp)

                addrbsb = (uint32)(ptr<<8) +  (s<<5) + 0x18;
   4760c:	e0bff78b 	ldhu	r2,-34(fp)
   47610:	1004923a 	slli	r2,r2,8
   47614:	1007883a 	mov	r3,r2
   47618:	e0bffb03 	ldbu	r2,-20(fp)
   4761c:	1004917a 	slli	r2,r2,5
   47620:	1885883a 	add	r2,r3,r2
   47624:	10800604 	addi	r2,r2,24
   47628:	e0bff815 	stw	r2,-32(fp)
                wiz_read_buf(addrbsb, buf, data_len);                
   4762c:	e0bff70b 	ldhu	r2,-36(fp)
   47630:	100d883a 	mov	r6,r2
   47634:	e17ffc17 	ldw	r5,-16(fp)
   47638:	e13ff817 	ldw	r4,-32(fp)
   4763c:	0047fc80 	call	47fc8 <wiz_read_buf>
                ptr += data_len;
   47640:	e0fff78b 	ldhu	r3,-34(fp)
   47644:	e0bff70b 	ldhu	r2,-36(fp)
   47648:	1885883a 	add	r2,r3,r2
   4764c:	e0bff78d 	sth	r2,-34(fp)

                IINCHIP_WRITE( Sn_RX_RD0(s), (uint8)((ptr & 0xff00) >> 8));
   47650:	e0bffb03 	ldbu	r2,-20(fp)
   47654:	1004917a 	slli	r2,r2,5
   47658:	108a0204 	addi	r2,r2,10248
   4765c:	1007883a 	mov	r3,r2
   47660:	e0bff78b 	ldhu	r2,-34(fp)
   47664:	1004d23a 	srli	r2,r2,8
   47668:	10803fcc 	andi	r2,r2,255
   4766c:	100b883a 	mov	r5,r2
   47670:	1809883a 	mov	r4,r3
   47674:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
                IINCHIP_WRITE( Sn_RX_RD1(s), (uint8)(ptr & 0x00ff));
   47678:	e0bffb03 	ldbu	r2,-20(fp)
   4767c:	1004917a 	slli	r2,r2,5
   47680:	108a4204 	addi	r2,r2,10504
   47684:	1007883a 	mov	r3,r2
   47688:	e0bff78b 	ldhu	r2,-34(fp)
   4768c:	10803fcc 	andi	r2,r2,255
   47690:	100b883a 	mov	r5,r2
   47694:	1809883a 	mov	r4,r3
   47698:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
                break;
   4769c:	00008206 	br	478a8 <recvfrom+0x438>

            case Sn_MR_IPRAW :
                wiz_read_buf(addrbsb, head, 0x06);        
   476a0:	e0bff904 	addi	r2,fp,-28
   476a4:	01800184 	movi	r6,6
   476a8:	100b883a 	mov	r5,r2
   476ac:	e13ff817 	ldw	r4,-32(fp)
   476b0:	0047fc80 	call	47fc8 <wiz_read_buf>
                ptr += 6;
   476b4:	e0bff78b 	ldhu	r2,-34(fp)
   476b8:	10800184 	addi	r2,r2,6
   476bc:	e0bff78d 	sth	r2,-34(fp)
                addr[0]  = head[0];
   476c0:	e0fff903 	ldbu	r3,-28(fp)
   476c4:	e0bffe17 	ldw	r2,-8(fp)
   476c8:	10c00005 	stb	r3,0(r2)
                addr[1]  = head[1];
   476cc:	e0bffe17 	ldw	r2,-8(fp)
   476d0:	10800044 	addi	r2,r2,1
   476d4:	e0fff943 	ldbu	r3,-27(fp)
   476d8:	10c00005 	stb	r3,0(r2)
                addr[2]  = head[2];
   476dc:	e0bffe17 	ldw	r2,-8(fp)
   476e0:	10800084 	addi	r2,r2,2
   476e4:	e0fff983 	ldbu	r3,-26(fp)
   476e8:	10c00005 	stb	r3,0(r2)
                addr[3]  = head[3];
   476ec:	e0bffe17 	ldw	r2,-8(fp)
   476f0:	108000c4 	addi	r2,r2,3
   476f4:	e0fff9c3 	ldbu	r3,-25(fp)
   476f8:	10c00005 	stb	r3,0(r2)
                data_len = head[4];
   476fc:	e0bffa03 	ldbu	r2,-24(fp)
   47700:	10803fcc 	andi	r2,r2,255
   47704:	e0bff70d 	sth	r2,-36(fp)
                data_len = (data_len << 8) + head[5];
   47708:	e0bff70b 	ldhu	r2,-36(fp)
   4770c:	1004923a 	slli	r2,r2,8
   47710:	1007883a 	mov	r3,r2
   47714:	e0bffa43 	ldbu	r2,-23(fp)
   47718:	10803fcc 	andi	r2,r2,255
   4771c:	1885883a 	add	r2,r3,r2
   47720:	e0bff70d 	sth	r2,-36(fp)

                addrbsb  = (uint32)(ptr<<8) +  (s<<5) + 0x18;
   47724:	e0bff78b 	ldhu	r2,-34(fp)
   47728:	1004923a 	slli	r2,r2,8
   4772c:	1007883a 	mov	r3,r2
   47730:	e0bffb03 	ldbu	r2,-20(fp)
   47734:	1004917a 	slli	r2,r2,5
   47738:	1885883a 	add	r2,r3,r2
   4773c:	10800604 	addi	r2,r2,24
   47740:	e0bff815 	stw	r2,-32(fp)
                wiz_read_buf(addrbsb, buf, data_len);        
   47744:	e0bff70b 	ldhu	r2,-36(fp)
   47748:	100d883a 	mov	r6,r2
   4774c:	e17ffc17 	ldw	r5,-16(fp)
   47750:	e13ff817 	ldw	r4,-32(fp)
   47754:	0047fc80 	call	47fc8 <wiz_read_buf>
                ptr += data_len;
   47758:	e0fff78b 	ldhu	r3,-34(fp)
   4775c:	e0bff70b 	ldhu	r2,-36(fp)
   47760:	1885883a 	add	r2,r3,r2
   47764:	e0bff78d 	sth	r2,-34(fp)

                IINCHIP_WRITE( Sn_RX_RD0(s), (uint8)((ptr & 0xff00) >> 8));
   47768:	e0bffb03 	ldbu	r2,-20(fp)
   4776c:	1004917a 	slli	r2,r2,5
   47770:	108a0204 	addi	r2,r2,10248
   47774:	1007883a 	mov	r3,r2
   47778:	e0bff78b 	ldhu	r2,-34(fp)
   4777c:	1004d23a 	srli	r2,r2,8
   47780:	10803fcc 	andi	r2,r2,255
   47784:	100b883a 	mov	r5,r2
   47788:	1809883a 	mov	r4,r3
   4778c:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
                IINCHIP_WRITE( Sn_RX_RD1(s), (uint8)(ptr & 0x00ff));
   47790:	e0bffb03 	ldbu	r2,-20(fp)
   47794:	1004917a 	slli	r2,r2,5
   47798:	108a4204 	addi	r2,r2,10504
   4779c:	1007883a 	mov	r3,r2
   477a0:	e0bff78b 	ldhu	r2,-34(fp)
   477a4:	10803fcc 	andi	r2,r2,255
   477a8:	100b883a 	mov	r5,r2
   477ac:	1809883a 	mov	r4,r3
   477b0:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
                break;
   477b4:	00003c06 	br	478a8 <recvfrom+0x438>

            case Sn_MR_MACRAW :
                wiz_read_buf(addrbsb, head, 0x02);
   477b8:	e0bff904 	addi	r2,fp,-28
   477bc:	01800084 	movi	r6,2
   477c0:	100b883a 	mov	r5,r2
   477c4:	e13ff817 	ldw	r4,-32(fp)
   477c8:	0047fc80 	call	47fc8 <wiz_read_buf>
                ptr+=2;
   477cc:	e0bff78b 	ldhu	r2,-34(fp)
   477d0:	10800084 	addi	r2,r2,2
   477d4:	e0bff78d 	sth	r2,-34(fp)
                data_len = head[0];
   477d8:	e0bff903 	ldbu	r2,-28(fp)
   477dc:	10803fcc 	andi	r2,r2,255
   477e0:	e0bff70d 	sth	r2,-36(fp)
                data_len = (data_len<<8) + head[1] - 2;
   477e4:	e0bff70b 	ldhu	r2,-36(fp)
   477e8:	1004923a 	slli	r2,r2,8
   477ec:	1007883a 	mov	r3,r2
   477f0:	e0bff943 	ldbu	r2,-27(fp)
   477f4:	10803fcc 	andi	r2,r2,255
   477f8:	1885883a 	add	r2,r3,r2
   477fc:	10bfff84 	addi	r2,r2,-2
   47800:	e0bff70d 	sth	r2,-36(fp)
                if(data_len > 1514)
   47804:	e0bff70b 	ldhu	r2,-36(fp)
   47808:	10817af0 	cmpltui	r2,r2,1515
   4780c:	1000011e 	bne	r2,zero,47814 <recvfrom+0x3a4>
                {
                    while(1);
   47810:	003fff06 	br	47810 <__alt_mem_epcs_flash+0xfffc6810>
                }

                addrbsb  = (uint32)(ptr<<8) +  (s<<5) + 0x18;
   47814:	e0bff78b 	ldhu	r2,-34(fp)
   47818:	1004923a 	slli	r2,r2,8
   4781c:	1007883a 	mov	r3,r2
   47820:	e0bffb03 	ldbu	r2,-20(fp)
   47824:	1004917a 	slli	r2,r2,5
   47828:	1885883a 	add	r2,r3,r2
   4782c:	10800604 	addi	r2,r2,24
   47830:	e0bff815 	stw	r2,-32(fp)
                wiz_read_buf(addrbsb, buf, data_len);
   47834:	e0bff70b 	ldhu	r2,-36(fp)
   47838:	100d883a 	mov	r6,r2
   4783c:	e17ffc17 	ldw	r5,-16(fp)
   47840:	e13ff817 	ldw	r4,-32(fp)
   47844:	0047fc80 	call	47fc8 <wiz_read_buf>
                ptr += data_len;
   47848:	e0fff78b 	ldhu	r3,-34(fp)
   4784c:	e0bff70b 	ldhu	r2,-36(fp)
   47850:	1885883a 	add	r2,r3,r2
   47854:	e0bff78d 	sth	r2,-34(fp)

                IINCHIP_WRITE( Sn_RX_RD0(s), (uint8)((ptr & 0xff00) >> 8));
   47858:	e0bffb03 	ldbu	r2,-20(fp)
   4785c:	1004917a 	slli	r2,r2,5
   47860:	108a0204 	addi	r2,r2,10248
   47864:	1007883a 	mov	r3,r2
   47868:	e0bff78b 	ldhu	r2,-34(fp)
   4786c:	1004d23a 	srli	r2,r2,8
   47870:	10803fcc 	andi	r2,r2,255
   47874:	100b883a 	mov	r5,r2
   47878:	1809883a 	mov	r4,r3
   4787c:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
                IINCHIP_WRITE( Sn_RX_RD1(s), (uint8)(ptr & 0x00ff));
   47880:	e0bffb03 	ldbu	r2,-20(fp)
   47884:	1004917a 	slli	r2,r2,5
   47888:	108a4204 	addi	r2,r2,10504
   4788c:	1007883a 	mov	r3,r2
   47890:	e0bff78b 	ldhu	r2,-34(fp)
   47894:	10803fcc 	andi	r2,r2,255
   47898:	100b883a 	mov	r5,r2
   4789c:	1809883a 	mov	r4,r3
   478a0:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
                break;
   478a4:	0001883a 	nop

            default :
                break;
        }
        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_RECV);
   478a8:	e0bffb03 	ldbu	r2,-20(fp)
   478ac:	1004917a 	slli	r2,r2,5
   478b0:	10804204 	addi	r2,r2,264
   478b4:	01401004 	movi	r5,64
   478b8:	1009883a 	mov	r4,r2
   478bc:	0047dd40 	call	47dd4 <IINCHIP_WRITE>

        /* wait to process the command... */
        while( IINCHIP_READ( Sn_CR(s)) ) ;
   478c0:	0001883a 	nop
   478c4:	e0bffb03 	ldbu	r2,-20(fp)
   478c8:	1004917a 	slli	r2,r2,5
   478cc:	10804204 	addi	r2,r2,264
   478d0:	1009883a 	mov	r4,r2
   478d4:	0047e600 	call	47e60 <IINCHIP_READ>
   478d8:	10803fcc 	andi	r2,r2,255
   478dc:	103ff91e 	bne	r2,zero,478c4 <__alt_mem_epcs_flash+0xfffc68c4>
        /* ------- */
    }
    return data_len;
   478e0:	e0bff70b 	ldhu	r2,-36(fp)
}
   478e4:	e6ffff04 	addi	sp,fp,-4
   478e8:	dfc00217 	ldw	ra,8(sp)
   478ec:	df000117 	ldw	fp,4(sp)
   478f0:	dc000017 	ldw	r16,0(sp)
   478f4:	dec00304 	addi	sp,sp,12
   478f8:	f800283a 	ret

000478fc <power_led_light>:

led_time_flag_t led_time_flag;

// 电源指示灯 绿色
void power_led_light(unsigned char status)
{
   478fc:	defffe04 	addi	sp,sp,-8
   47900:	df000115 	stw	fp,4(sp)
   47904:	df000104 	addi	fp,sp,4
   47908:	2005883a 	mov	r2,r4
   4790c:	e0bfff05 	stb	r2,-4(fp)
    IOWR_ALTERA_AVALON_PIO_DATA(POWER_LED_BASE, status);
   47910:	e0ffff03 	ldbu	r3,-4(fp)
   47914:	00800234 	movhi	r2,8
   47918:	10885804 	addi	r2,r2,8544
   4791c:	10c00035 	stwio	r3,0(r2)
}
   47920:	0001883a 	nop
   47924:	e037883a 	mov	sp,fp
   47928:	df000017 	ldw	fp,0(sp)
   4792c:	dec00104 	addi	sp,sp,4
   47930:	f800283a 	ret

00047934 <status_led_light>:

// 状态指示灯 红色
void status_led_light(unsigned char status)
{
   47934:	defffe04 	addi	sp,sp,-8
   47938:	df000115 	stw	fp,4(sp)
   4793c:	df000104 	addi	fp,sp,4
   47940:	2005883a 	mov	r2,r4
   47944:	e0bfff05 	stb	r2,-4(fp)
    IOWR_ALTERA_AVALON_PIO_DATA(STATUS_LED_BASE, status);
   47948:	e0ffff03 	ldbu	r3,-4(fp)
   4794c:	00800234 	movhi	r2,8
   47950:	10885404 	addi	r2,r2,8528
   47954:	10c00035 	stwio	r3,0(r2)
}
   47958:	0001883a 	nop
   4795c:	e037883a 	mov	sp,fp
   47960:	df000017 	ldw	fp,0(sp)
   47964:	dec00104 	addi	sp,sp,4
   47968:	f800283a 	ret

0004796c <find_index_old>:


// string
// return position
int find_index_old(char * str, char ** array, int length)
{
   4796c:	defffa04 	addi	sp,sp,-24
   47970:	dfc00515 	stw	ra,20(sp)
   47974:	df000415 	stw	fp,16(sp)
   47978:	df000404 	addi	fp,sp,16
   4797c:	e13ffd15 	stw	r4,-12(fp)
   47980:	e17ffe15 	stw	r5,-8(fp)
   47984:	e1bfff15 	stw	r6,-4(fp)
    int i ;
    for (i = 0; i < length; i++)
   47988:	e03ffc15 	stw	zero,-16(fp)
   4798c:	00001006 	br	479d0 <find_index_old+0x64>
    {
        if (strcmp(str, array[i]) == 0)
   47990:	e0bffc17 	ldw	r2,-16(fp)
   47994:	1085883a 	add	r2,r2,r2
   47998:	1085883a 	add	r2,r2,r2
   4799c:	1007883a 	mov	r3,r2
   479a0:	e0bffe17 	ldw	r2,-8(fp)
   479a4:	10c5883a 	add	r2,r2,r3
   479a8:	10800017 	ldw	r2,0(r2)
   479ac:	100b883a 	mov	r5,r2
   479b0:	e13ffd17 	ldw	r4,-12(fp)
   479b4:	00492940 	call	49294 <strcmp>
   479b8:	1000021e 	bne	r2,zero,479c4 <find_index_old+0x58>
            return i;
   479bc:	e0bffc17 	ldw	r2,-16(fp)
   479c0:	00000706 	br	479e0 <find_index_old+0x74>
// string
// return position
int find_index_old(char * str, char ** array, int length)
{
    int i ;
    for (i = 0; i < length; i++)
   479c4:	e0bffc17 	ldw	r2,-16(fp)
   479c8:	10800044 	addi	r2,r2,1
   479cc:	e0bffc15 	stw	r2,-16(fp)
   479d0:	e0fffc17 	ldw	r3,-16(fp)
   479d4:	e0bfff17 	ldw	r2,-4(fp)
   479d8:	18bfed16 	blt	r3,r2,47990 <__alt_mem_epcs_flash+0xfffc6990>
    {
        if (strcmp(str, array[i]) == 0)
            return i;
    }
    return -1;
   479dc:	00bfffc4 	movi	r2,-1
}
   479e0:	e037883a 	mov	sp,fp
   479e4:	dfc00117 	ldw	ra,4(sp)
   479e8:	df000017 	ldw	fp,0(sp)
   479ec:	dec00204 	addi	sp,sp,8
   479f0:	f800283a 	ret

000479f4 <timer_initial>:
#include "user_interrupt.h"

alt_u32 timer_isr_context;

void timer_initial(void)
{
   479f4:	defffc04 	addi	sp,sp,-16
   479f8:	dfc00315 	stw	ra,12(sp)
   479fc:	df000215 	stw	fp,8(sp)
   47a00:	df000204 	addi	fp,sp,8
    // 1s/8-1
    // 100ms/8-1 = 0xbebc1f
    // 10ms/8-1 = 0x1312cf
    // 1ms/10-1 = 0xf4240
    void *isr_context_ptr = (void *)&timer_isr_context;
   47a04:	d0a01a04 	addi	r2,gp,-32664
   47a08:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(LED_TIMER_BASE, 0x000f);
   47a0c:	00c003c4 	movi	r3,15
   47a10:	00800234 	movhi	r2,8
   47a14:	10882b04 	addi	r2,r2,8364
   47a18:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(LED_TIMER_BASE, 0x4240);
   47a1c:	00d09004 	movi	r3,16960
   47a20:	00800234 	movhi	r2,8
   47a24:	10882a04 	addi	r2,r2,8360
   47a28:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(
   47a2c:	00c001c4 	movi	r3,7
   47a30:	00800234 	movhi	r2,8
   47a34:	10882904 	addi	r2,r2,8356
   47a38:	10c00035 	stwio	r3,0(r2)
        LED_TIMER_BASE,
        ALTERA_AVALON_TIMER_CONTROL_START_MSK |
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);

    alt_ic_isr_register(
   47a3c:	d8000015 	stw	zero,0(sp)
   47a40:	e1ffff17 	ldw	r7,-4(fp)
   47a44:	01800134 	movhi	r6,4
   47a48:	319e9c04 	addi	r6,r6,31344
   47a4c:	01400084 	movi	r5,2
   47a50:	0009883a 	mov	r4,zero
   47a54:	00495940 	call	49594 <alt_ic_isr_register>
        LED_TIMER_IRQ_INTERRUPT_CONTROLLER_ID,
        LED_TIMER_IRQ,
        timer_isr_interrupt,
        isr_context_ptr,
        0x00);
}
   47a58:	0001883a 	nop
   47a5c:	e037883a 	mov	sp,fp
   47a60:	dfc00117 	ldw	ra,4(sp)
   47a64:	df000017 	ldw	fp,0(sp)
   47a68:	dec00204 	addi	sp,sp,8
   47a6c:	f800283a 	ret

00047a70 <timer_isr_interrupt>:

void timer_isr_interrupt(void *isr_context, alt_u32 id)
{
   47a70:	defffc04 	addi	sp,sp,-16
   47a74:	dfc00315 	stw	ra,12(sp)
   47a78:	df000215 	stw	fp,8(sp)
   47a7c:	df000204 	addi	fp,sp,8
   47a80:	e13ffe15 	stw	r4,-8(fp)
   47a84:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(LED_TIMER_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK);
   47a88:	00ffff84 	movi	r3,-2
   47a8c:	00800234 	movhi	r2,8
   47a90:	10882804 	addi	r2,r2,8352
   47a94:	10c00035 	stwio	r3,0(r2)

    if(led_time_flag.cnt_1s == 50)
   47a98:	d0a018c3 	ldbu	r2,-32669(gp)
   47a9c:	10803fcc 	andi	r2,r2,255
   47aa0:	10800c98 	cmpnei	r2,r2,50
   47aa4:	10000d1e 	bne	r2,zero,47adc <timer_isr_interrupt+0x6c>
    {
        led_time_flag.cnt_1s             = 0;
   47aa8:	d02018c5 	stb	zero,-32669(gp)
        led_time_flag.status_led_1s_flag = 0x01;
   47aac:	00800044 	movi	r2,1
   47ab0:	d0a01905 	stb	r2,-32668(gp)

        led_time_flag.power_led_value = (~led_time_flag.power_led_value) & 0x01;
   47ab4:	d0a01803 	ldbu	r2,-32672(gp)
   47ab8:	10803fcc 	andi	r2,r2,255
   47abc:	1080004c 	andi	r2,r2,1
   47ac0:	1005003a 	cmpeq	r2,r2,zero
   47ac4:	d0a01805 	stb	r2,-32672(gp)
        power_led_light(led_time_flag.power_led_value);
   47ac8:	d0a01803 	ldbu	r2,-32672(gp)
   47acc:	10803fcc 	andi	r2,r2,255
   47ad0:	1009883a 	mov	r4,r2
   47ad4:	00478fc0 	call	478fc <power_led_light>
   47ad8:	00000306 	br	47ae8 <timer_isr_interrupt+0x78>
    }
    else
        led_time_flag.cnt_1s++;
   47adc:	d0a018c3 	ldbu	r2,-32669(gp)
   47ae0:	10800044 	addi	r2,r2,1
   47ae4:	d0a018c5 	stb	r2,-32669(gp)

    if(led_time_flag.cnt_300ms == 15)
   47ae8:	d0a01983 	ldbu	r2,-32666(gp)
   47aec:	10803fcc 	andi	r2,r2,255
   47af0:	108003d8 	cmpnei	r2,r2,15
   47af4:	1000041e 	bne	r2,zero,47b08 <timer_isr_interrupt+0x98>
    {
        led_time_flag.cnt_300ms             = 0;
   47af8:	d0201985 	stb	zero,-32666(gp)
        led_time_flag.status_led_300ms_flag = 0x01;
   47afc:	00800044 	movi	r2,1
   47b00:	d0a01945 	stb	r2,-32667(gp)
   47b04:	00000306 	br	47b14 <timer_isr_interrupt+0xa4>
    }
    else
        led_time_flag.cnt_300ms++;
   47b08:	d0a01983 	ldbu	r2,-32666(gp)
   47b0c:	10800044 	addi	r2,r2,1
   47b10:	d0a01985 	stb	r2,-32666(gp)

    if(led_time_flag.cnt_30ms == 3)
   47b14:	d0a019c3 	ldbu	r2,-32665(gp)
   47b18:	10803fcc 	andi	r2,r2,255
   47b1c:	108000d8 	cmpnei	r2,r2,3
   47b20:	1000201e 	bne	r2,zero,47ba4 <timer_isr_interrupt+0x134>
    {
        alarm_region.last_io_value[0] = rd_switch_io_value();
   47b24:	0045c1c0 	call	45c1c <rd_switch_io_value>
   47b28:	1007883a 	mov	r3,r2
   47b2c:	008001b4 	movhi	r2,6
   47b30:	10a4c504 	addi	r2,r2,-27884
   47b34:	10c00005 	stb	r3,0(r2)
        if(alarm_region.last_io_value[0] != alarm_region.last_io_value[1])
   47b38:	008001b4 	movhi	r2,6
   47b3c:	10a4c504 	addi	r2,r2,-27884
   47b40:	10c00003 	ldbu	r3,0(r2)
   47b44:	008001b4 	movhi	r2,6
   47b48:	10a4c504 	addi	r2,r2,-27884
   47b4c:	10800043 	ldbu	r2,1(r2)
   47b50:	18c03fcc 	andi	r3,r3,255
   47b54:	10803fcc 	andi	r2,r2,255
   47b58:	18800a26 	beq	r3,r2,47b84 <timer_isr_interrupt+0x114>
        {
            alarm_region.change_region_flag  = 0x01;
   47b5c:	008001b4 	movhi	r2,6
   47b60:	10a4c504 	addi	r2,r2,-27884
   47b64:	00c00044 	movi	r3,1
   47b68:	10c00085 	stb	r3,2(r2)
            alarm_region.change_region_value = alarm_region.last_io_value[0];
   47b6c:	008001b4 	movhi	r2,6
   47b70:	10a4c504 	addi	r2,r2,-27884
   47b74:	10c00003 	ldbu	r3,0(r2)
   47b78:	008001b4 	movhi	r2,6
   47b7c:	10a4c504 	addi	r2,r2,-27884
   47b80:	10c000c5 	stb	r3,3(r2)
        }
        alarm_region.last_io_value[1] = alarm_region.last_io_value[0];
   47b84:	008001b4 	movhi	r2,6
   47b88:	10a4c504 	addi	r2,r2,-27884
   47b8c:	10c00003 	ldbu	r3,0(r2)
   47b90:	008001b4 	movhi	r2,6
   47b94:	10a4c504 	addi	r2,r2,-27884
   47b98:	10c00045 	stb	r3,1(r2)
        led_time_flag.cnt_30ms        = 0;
   47b9c:	d02019c5 	stb	zero,-32665(gp)
    }
    else
        led_time_flag.cnt_30ms++;
}
   47ba0:	00000306 	br	47bb0 <timer_isr_interrupt+0x140>
        }
        alarm_region.last_io_value[1] = alarm_region.last_io_value[0];
        led_time_flag.cnt_30ms        = 0;
    }
    else
        led_time_flag.cnt_30ms++;
   47ba4:	d0a019c3 	ldbu	r2,-32665(gp)
   47ba8:	10800044 	addi	r2,r2,1
   47bac:	d0a019c5 	stb	r2,-32665(gp)
}
   47bb0:	0001883a 	nop
   47bb4:	e037883a 	mov	sp,fp
   47bb8:	dfc00117 	ldw	ra,4(sp)
   47bbc:	df000017 	ldw	fp,0(sp)
   47bc0:	dec00204 	addi	sp,sp,8
   47bc4:	f800283a 	ret

00047bc8 <watchdog_init>:
////    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(ALARM_SELECT_BASE, 0x00);
//    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(ALARM_SELECT_BASE, 0xff);
//}

void watchdog_init(void)
{
   47bc8:	deffff04 	addi	sp,sp,-4
   47bcc:	df000015 	stw	fp,0(sp)
   47bd0:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_TIMER_CONTROL(WATCHDOG_BASE, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
   47bd4:	00c00104 	movi	r3,4
   47bd8:	00800234 	movhi	r2,8
   47bdc:	10882104 	addi	r2,r2,8324
   47be0:	10c00035 	stwio	r3,0(r2)
}
   47be4:	0001883a 	nop
   47be8:	e037883a 	mov	sp,fp
   47bec:	df000017 	ldw	fp,0(sp)
   47bf0:	dec00104 	addi	sp,sp,4
   47bf4:	f800283a 	ret

00047bf8 <watchdog_feed>:

void watchdog_feed(void)
{
   47bf8:	deffff04 	addi	sp,sp,-4
   47bfc:	df000015 	stw	fp,0(sp)
   47c00:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_TIMER_PERIODL(WATCHDOG_BASE, 0x1234);
   47c04:	00c48d04 	movi	r3,4660
   47c08:	00800234 	movhi	r2,8
   47c0c:	10882204 	addi	r2,r2,8328
   47c10:	10c00035 	stwio	r3,0(r2)
}
   47c14:	0001883a 	nop
   47c18:	e037883a 	mov	sp,fp
   47c1c:	df000017 	ldw	fp,0(sp)
   47c20:	dec00104 	addi	sp,sp,4
   47c24:	f800283a 	ret

00047c28 <IINCHIP_CSoff>:

static uint16 SSIZE[MAX_SOCK_NUM]; /**< Max Tx buffer size by each channel */
static uint16 RSIZE[MAX_SOCK_NUM]; /**< Max Rx buffer size by each channel */

void IINCHIP_CSoff()
{
   47c28:	deffff04 	addi	sp,sp,-4
   47c2c:	df000015 	stw	fp,0(sp)
   47c30:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DATA(W5500_CS_BASE, 0);
   47c34:	0007883a 	mov	r3,zero
   47c38:	00800234 	movhi	r2,8
   47c3c:	10886404 	addi	r2,r2,8592
   47c40:	10c00035 	stwio	r3,0(r2)
}
   47c44:	0001883a 	nop
   47c48:	e037883a 	mov	sp,fp
   47c4c:	df000017 	ldw	fp,0(sp)
   47c50:	dec00104 	addi	sp,sp,4
   47c54:	f800283a 	ret

00047c58 <IINCHIP_CSon>:

void IINCHIP_CSon()
{
   47c58:	deffff04 	addi	sp,sp,-4
   47c5c:	df000015 	stw	fp,0(sp)
   47c60:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DATA(W5500_CS_BASE, 1);
   47c64:	00c00044 	movi	r3,1
   47c68:	00800234 	movhi	r2,8
   47c6c:	10886404 	addi	r2,r2,8592
   47c70:	10c00035 	stwio	r3,0(r2)
}
   47c74:	0001883a 	nop
   47c78:	e037883a 	mov	sp,fp
   47c7c:	df000017 	ldw	fp,0(sp)
   47c80:	dec00104 	addi	sp,sp,4
   47c84:	f800283a 	ret

00047c88 <getIINCHIP_RxMAX>:


uint16 getIINCHIP_RxMAX(uint8 s)
{
   47c88:	defffe04 	addi	sp,sp,-8
   47c8c:	df000115 	stw	fp,4(sp)
   47c90:	df000104 	addi	fp,sp,4
   47c94:	2005883a 	mov	r2,r4
   47c98:	e0bfff05 	stb	r2,-4(fp)
    return RSIZE[s];
   47c9c:	e0ffff03 	ldbu	r3,-4(fp)
   47ca0:	008001b4 	movhi	r2,6
   47ca4:	10b38804 	addi	r2,r2,-12768
   47ca8:	18c7883a 	add	r3,r3,r3
   47cac:	10c5883a 	add	r2,r2,r3
   47cb0:	1080000b 	ldhu	r2,0(r2)
}
   47cb4:	e037883a 	mov	sp,fp
   47cb8:	df000017 	ldw	fp,0(sp)
   47cbc:	dec00104 	addi	sp,sp,4
   47cc0:	f800283a 	ret

00047cc4 <getIINCHIP_TxMAX>:
uint16 getIINCHIP_TxMAX(uint8 s)
{
   47cc4:	defffe04 	addi	sp,sp,-8
   47cc8:	df000115 	stw	fp,4(sp)
   47ccc:	df000104 	addi	fp,sp,4
   47cd0:	2005883a 	mov	r2,r4
   47cd4:	e0bfff05 	stb	r2,-4(fp)
    return SSIZE[s];
   47cd8:	e0ffff03 	ldbu	r3,-4(fp)
   47cdc:	008001b4 	movhi	r2,6
   47ce0:	10b38404 	addi	r2,r2,-12784
   47ce4:	18c7883a 	add	r3,r3,r3
   47ce8:	10c5883a 	add	r2,r2,r3
   47cec:	1080000b 	ldhu	r2,0(r2)
}
   47cf0:	e037883a 	mov	sp,fp
   47cf4:	df000017 	ldw	fp,0(sp)
   47cf8:	dec00104 	addi	sp,sp,4
   47cfc:	f800283a 	ret

00047d00 <IINCHIP_SpiSendData>:

unsigned char IINCHIP_SpiSendData(uint16 dat)
{
   47d00:	defffd04 	addi	sp,sp,-12
   47d04:	dfc00215 	stw	ra,8(sp)
   47d08:	df000115 	stw	fp,4(sp)
   47d0c:	df000104 	addi	fp,sp,4
   47d10:	2005883a 	mov	r2,r4
   47d14:	e0bfff0d 	sth	r2,-4(fp)
    // return(alt_avalon_spi_command(SPI_BASE, 0, 1, &dat, 0, NULL, 0));
    altera_avalon_fifo_write_fifo(SPIWR_FIFO_IN_BASE, SPIWR_FIFO_IN_CSR_BASE, (dat>>16) + (dat<<16));
   47d18:	e0bfff0b 	ldhu	r2,-4(fp)
   47d1c:	1007d43a 	srai	r3,r2,16
   47d20:	e0bfff0b 	ldhu	r2,-4(fp)
   47d24:	1004943a 	slli	r2,r2,16
   47d28:	1885883a 	add	r2,r3,r2
   47d2c:	100d883a 	mov	r6,r2
   47d30:	01400234 	movhi	r5,8
   47d34:	29483804 	addi	r5,r5,8416
   47d38:	01000234 	movhi	r4,8
   47d3c:	21087804 	addi	r4,r4,8672
   47d40:	004a90c0 	call	4a90c <altera_avalon_fifo_write_fifo>
    return 0;
   47d44:	0005883a 	mov	r2,zero
}
   47d48:	e037883a 	mov	sp,fp
   47d4c:	dfc00117 	ldw	ra,4(sp)
   47d50:	df000017 	ldw	fp,0(sp)
   47d54:	dec00204 	addi	sp,sp,8
   47d58:	f800283a 	ret

00047d5c <SPI_I2S_ReceiveData>:

unsigned char SPI_I2S_ReceiveData()
{
   47d5c:	defffb04 	addi	sp,sp,-20
   47d60:	dfc00415 	stw	ra,16(sp)
   47d64:	df000315 	stw	fp,12(sp)
   47d68:	df000304 	addi	fp,sp,12
    //unsigned char rxbuf = 0;
    //alt_avalon_spi_command(SPI_BASE, 0, 0, NULL, 1, &rxbuf, 0);
    //return rxbuf;
	int num;
	unsigned int data;
	unsigned char rxbuf = 0;
   47d6c:	e03ffd05 	stb	zero,-12(fp)
	num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);
   47d70:	01000234 	movhi	r4,8
   47d74:	21083004 	addi	r4,r4,8384
   47d78:	004a7700 	call	4a770 <altera_avalon_fifo_read_level>
   47d7c:	e0bffe15 	stw	r2,-8(fp)
	if(num > 0)
   47d80:	e0bffe17 	ldw	r2,-8(fp)
   47d84:	0080090e 	bge	zero,r2,47dac <SPI_I2S_ReceiveData+0x50>
	{
		data = altera_avalon_fifo_read_fifo(SPIRD_FIFO_OUT_BASE, SPIRD_FIFO_IN_CSR_BASE);
   47d88:	01400234 	movhi	r5,8
   47d8c:	29483004 	addi	r5,r5,8384
   47d90:	01000234 	movhi	r4,8
   47d94:	21087604 	addi	r4,r4,8664
   47d98:	004a9d00 	call	4a9d0 <altera_avalon_fifo_read_fifo>
   47d9c:	e0bfff15 	stw	r2,-4(fp)
		rxbuf = (unsigned char)( ((data>>16) + (data<<16))& 0xff);
   47da0:	e0bfff17 	ldw	r2,-4(fp)
   47da4:	1004d43a 	srli	r2,r2,16
   47da8:	e0bffd05 	stb	r2,-12(fp)
	}

	num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);
   47dac:	01000234 	movhi	r4,8
   47db0:	21083004 	addi	r4,r4,8384
   47db4:	004a7700 	call	4a770 <altera_avalon_fifo_read_level>
   47db8:	e0bffe15 	stw	r2,-8(fp)
	return rxbuf;
   47dbc:	e0bffd03 	ldbu	r2,-12(fp)
}
   47dc0:	e037883a 	mov	sp,fp
   47dc4:	dfc00117 	ldw	ra,4(sp)
   47dc8:	df000017 	ldw	fp,0(sp)
   47dcc:	dec00204 	addi	sp,sp,8
   47dd0:	f800283a 	ret

00047dd4 <IINCHIP_WRITE>:

void IINCHIP_WRITE( uint32 addrbsb,  uint8 data)
{
   47dd4:	defffc04 	addi	sp,sp,-16
   47dd8:	dfc00315 	stw	ra,12(sp)
   47ddc:	df000215 	stw	fp,8(sp)
   47de0:	df000204 	addi	fp,sp,8
   47de4:	e13ffe15 	stw	r4,-8(fp)
   47de8:	2805883a 	mov	r2,r5
   47dec:	e0bfff05 	stb	r2,-4(fp)
    IINCHIP_ISR_DISABLE();                        // Interrupt Service Routine Disable
    IINCHIP_CSoff();                              // CS=0, SPI start
   47df0:	0047c280 	call	47c28 <IINCHIP_CSoff>
    IINCHIP_SpiSendData( (addrbsb & 0x00FF0000)>>16);// Address byte 1
   47df4:	e0bffe17 	ldw	r2,-8(fp)
   47df8:	10803fec 	andhi	r2,r2,255
   47dfc:	1004d43a 	srli	r2,r2,16
   47e00:	1009883a 	mov	r4,r2
   47e04:	0047d000 	call	47d00 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x0000FF00)>> 8);// Address byte 2
   47e08:	e0bffe17 	ldw	r2,-8(fp)
   47e0c:	10bfc00c 	andi	r2,r2,65280
   47e10:	1004d23a 	srli	r2,r2,8
   47e14:	10bfffcc 	andi	r2,r2,65535
   47e18:	1009883a 	mov	r4,r2
   47e1c:	0047d000 	call	47d00 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x000000F8) + 4);    // Data write command and Write data length 1
   47e20:	e0bffe17 	ldw	r2,-8(fp)
   47e24:	10803e0c 	andi	r2,r2,248
   47e28:	10800104 	addi	r2,r2,4
   47e2c:	10bfffcc 	andi	r2,r2,65535
   47e30:	1009883a 	mov	r4,r2
   47e34:	0047d000 	call	47d00 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData(data);                    // Data write (write 1byte data)
   47e38:	e0bfff03 	ldbu	r2,-4(fp)
   47e3c:	1009883a 	mov	r4,r2
   47e40:	0047d000 	call	47d00 <IINCHIP_SpiSendData>
    IINCHIP_CSon();                               // CS=1,  SPI end
   47e44:	0047c580 	call	47c58 <IINCHIP_CSon>
    IINCHIP_ISR_ENABLE();                         // Interrupt Service Routine Enable
}
   47e48:	0001883a 	nop
   47e4c:	e037883a 	mov	sp,fp
   47e50:	dfc00117 	ldw	ra,4(sp)
   47e54:	df000017 	ldw	fp,0(sp)
   47e58:	dec00204 	addi	sp,sp,8
   47e5c:	f800283a 	ret

00047e60 <IINCHIP_READ>:

uint8 IINCHIP_READ(uint32 addrbsb)
{
   47e60:	defffc04 	addi	sp,sp,-16
   47e64:	dfc00315 	stw	ra,12(sp)
   47e68:	df000215 	stw	fp,8(sp)
   47e6c:	df000204 	addi	fp,sp,8
   47e70:	e13fff15 	stw	r4,-4(fp)
	uint16 num;
    uint8 data = 0;
   47e74:	e03ffe85 	stb	zero,-6(fp)
    IINCHIP_ISR_DISABLE();                        // Interrupt Service Routine Disable
    IINCHIP_CSoff();                              // CS=0, SPI start
   47e78:	0047c280 	call	47c28 <IINCHIP_CSoff>
    IINCHIP_SpiSendData( (addrbsb & 0x00FF0000)>>16);// Address byte 1
   47e7c:	e0bfff17 	ldw	r2,-4(fp)
   47e80:	10803fec 	andhi	r2,r2,255
   47e84:	1004d43a 	srli	r2,r2,16
   47e88:	1009883a 	mov	r4,r2
   47e8c:	0047d000 	call	47d00 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x0000FF00)>> 8);// Address byte 2
   47e90:	e0bfff17 	ldw	r2,-4(fp)
   47e94:	10bfc00c 	andi	r2,r2,65280
   47e98:	1004d23a 	srli	r2,r2,8
   47e9c:	10bfffcc 	andi	r2,r2,65535
   47ea0:	1009883a 	mov	r4,r2
   47ea4:	0047d000 	call	47d00 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x000000F8))    ;// Data read command and Read data length 1
   47ea8:	e0bfff17 	ldw	r2,-4(fp)
   47eac:	10803e0c 	andi	r2,r2,248
   47eb0:	1009883a 	mov	r4,r2
   47eb4:	0047d000 	call	47d00 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData(1);
   47eb8:	01000044 	movi	r4,1
   47ebc:	0047d000 	call	47d00 <IINCHIP_SpiSendData>
    for( num = 0; num < 2; num++ ) ;
   47ec0:	e03ffe0d 	sth	zero,-8(fp)
   47ec4:	00000306 	br	47ed4 <IINCHIP_READ+0x74>
   47ec8:	e0bffe0b 	ldhu	r2,-8(fp)
   47ecc:	10800044 	addi	r2,r2,1
   47ed0:	e0bffe0d 	sth	r2,-8(fp)
   47ed4:	e0bffe0b 	ldhu	r2,-8(fp)
   47ed8:	108000b0 	cmpltui	r2,r2,2
   47edc:	103ffa1e 	bne	r2,zero,47ec8 <__alt_mem_epcs_flash+0xfffc6ec8>
    data = SPI_I2S_ReceiveData();
   47ee0:	0047d5c0 	call	47d5c <SPI_I2S_ReceiveData>
   47ee4:	e0bffe85 	stb	r2,-6(fp)
    IINCHIP_CSon();                               // CS=1,  SPI end
   47ee8:	0047c580 	call	47c58 <IINCHIP_CSon>
    IINCHIP_ISR_ENABLE();                         // Interrupt Service Routine Enable
    return data;
   47eec:	e0bffe83 	ldbu	r2,-6(fp)
}
   47ef0:	e037883a 	mov	sp,fp
   47ef4:	dfc00117 	ldw	ra,4(sp)
   47ef8:	df000017 	ldw	fp,0(sp)
   47efc:	dec00204 	addi	sp,sp,8
   47f00:	f800283a 	ret

00047f04 <wiz_write_buf>:

uint16 wiz_write_buf(uint32 addrbsb, uint8* buf,uint16 len)
{
   47f04:	defffa04 	addi	sp,sp,-24
   47f08:	dfc00515 	stw	ra,20(sp)
   47f0c:	df000415 	stw	fp,16(sp)
   47f10:	df000404 	addi	fp,sp,16
   47f14:	e13ffd15 	stw	r4,-12(fp)
   47f18:	e17ffe15 	stw	r5,-8(fp)
   47f1c:	3005883a 	mov	r2,r6
   47f20:	e0bfff0d 	sth	r2,-4(fp)
    uint16 idx = 0;
   47f24:	e03ffc0d 	sth	zero,-16(fp)
    // send_buf[0] = (addrbsb & 0x00FF0000)>>16;
    // send_buf[1] = (addrbsb & 0x0000FF00)>> 8;
    // send_buf[2] = (addrbsb & 0x000000F8) + 4;

    IINCHIP_ISR_DISABLE();
    IINCHIP_CSoff();
   47f28:	0047c280 	call	47c28 <IINCHIP_CSoff>
                             // CS=0, SPI start
    IINCHIP_SpiSendData( (addrbsb & 0x00FF0000)>>16);// Address byte 1
   47f2c:	e0bffd17 	ldw	r2,-12(fp)
   47f30:	10803fec 	andhi	r2,r2,255
   47f34:	1004d43a 	srli	r2,r2,16
   47f38:	1009883a 	mov	r4,r2
   47f3c:	0047d000 	call	47d00 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x0000FF00)>> 8);// Address byte 2
   47f40:	e0bffd17 	ldw	r2,-12(fp)
   47f44:	10bfc00c 	andi	r2,r2,65280
   47f48:	1004d23a 	srli	r2,r2,8
   47f4c:	10bfffcc 	andi	r2,r2,65535
   47f50:	1009883a 	mov	r4,r2
   47f54:	0047d000 	call	47d00 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x000000F8) + 4);    // Data write command and Write data length 1
   47f58:	e0bffd17 	ldw	r2,-12(fp)
   47f5c:	10803e0c 	andi	r2,r2,248
   47f60:	10800104 	addi	r2,r2,4
   47f64:	10bfffcc 	andi	r2,r2,65535
   47f68:	1009883a 	mov	r4,r2
   47f6c:	0047d000 	call	47d00 <IINCHIP_SpiSendData>
    for(idx = 0; idx < len; idx++)                // Write data in loop
   47f70:	e03ffc0d 	sth	zero,-16(fp)
   47f74:	00000a06 	br	47fa0 <wiz_write_buf+0x9c>
    {
        IINCHIP_SpiSendData(buf[idx]);
   47f78:	e0bffc0b 	ldhu	r2,-16(fp)
   47f7c:	e0fffe17 	ldw	r3,-8(fp)
   47f80:	1885883a 	add	r2,r3,r2
   47f84:	10800003 	ldbu	r2,0(r2)
   47f88:	10803fcc 	andi	r2,r2,255
   47f8c:	1009883a 	mov	r4,r2
   47f90:	0047d000 	call	47d00 <IINCHIP_SpiSendData>
    IINCHIP_CSoff();
                             // CS=0, SPI start
    IINCHIP_SpiSendData( (addrbsb & 0x00FF0000)>>16);// Address byte 1
    IINCHIP_SpiSendData( (addrbsb & 0x0000FF00)>> 8);// Address byte 2
    IINCHIP_SpiSendData( (addrbsb & 0x000000F8) + 4);    // Data write command and Write data length 1
    for(idx = 0; idx < len; idx++)                // Write data in loop
   47f94:	e0bffc0b 	ldhu	r2,-16(fp)
   47f98:	10800044 	addi	r2,r2,1
   47f9c:	e0bffc0d 	sth	r2,-16(fp)
   47fa0:	e0fffc0b 	ldhu	r3,-16(fp)
   47fa4:	e0bfff0b 	ldhu	r2,-4(fp)
   47fa8:	18bff336 	bltu	r3,r2,47f78 <__alt_mem_epcs_flash+0xfffc6f78>
//		alt_avalon_dma_tx_ioctl(tx, ALT_DMA_TX_ONLY_ON, (void*)(SPI_BASE+4));
//		idx = alt_avalon_dma_send(tx, buf, (len<<1), NULL, NULL);
//	}
    // alt_avalon_spi_command(SPI_BASE, 0, 3, send_buf, 0, NULL, 0);
    // alt_avalon_spi_command(SPI_BASE, 0, len, buf, 0, NULL, 0);
    IINCHIP_CSon();                               // CS=1, SPI end
   47fac:	0047c580 	call	47c58 <IINCHIP_CSon>
    IINCHIP_ISR_ENABLE();                         // Interrupt Service Routine Enable

    return len;
   47fb0:	e0bfff0b 	ldhu	r2,-4(fp)
}
   47fb4:	e037883a 	mov	sp,fp
   47fb8:	dfc00117 	ldw	ra,4(sp)
   47fbc:	df000017 	ldw	fp,0(sp)
   47fc0:	dec00204 	addi	sp,sp,8
   47fc4:	f800283a 	ret

00047fc8 <wiz_read_buf>:


uint16 wiz_read_buf(uint32 addrbsb, uint8* buf,uint16 len)
{
   47fc8:	defff904 	addi	sp,sp,-28
   47fcc:	dfc00615 	stw	ra,24(sp)
   47fd0:	df000515 	stw	fp,20(sp)
   47fd4:	dc000415 	stw	r16,16(sp)
   47fd8:	df000504 	addi	fp,sp,20
   47fdc:	e13ffc15 	stw	r4,-16(fp)
   47fe0:	e17ffd15 	stw	r5,-12(fp)
   47fe4:	3005883a 	mov	r2,r6
   47fe8:	e0bffe0d 	sth	r2,-8(fp)
    uint16 idx = 0;
   47fec:	e03ffb0d 	sth	zero,-20(fp)
    uint16 num = 0;
   47ff0:	e03ffb8d 	sth	zero,-18(fp)
//    uint8 send_buf[3];
//    send_buf[0] = (addrbsb & 0x00FF0000)>>16;
//    send_buf[1] = (addrbsb & 0x0000FF00)>> 8;
//    send_buf[2] = (addrbsb & 0x000000F8);

    num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);  // 清空数据
   47ff4:	01000234 	movhi	r4,8
   47ff8:	21083004 	addi	r4,r4,8384
   47ffc:	004a7700 	call	4a770 <altera_avalon_fifo_read_level>
   48000:	e0bffb8d 	sth	r2,-18(fp)
    while(num > 0)
   48004:	00000a06 	br	48030 <wiz_read_buf+0x68>
    {
        num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);
   48008:	01000234 	movhi	r4,8
   4800c:	21083004 	addi	r4,r4,8384
   48010:	004a7700 	call	4a770 <altera_avalon_fifo_read_level>
   48014:	e0bffb8d 	sth	r2,-18(fp)
        idx = altera_avalon_fifo_read_fifo(SPIRD_FIFO_OUT_BASE, SPIRD_FIFO_IN_CSR_BASE);
   48018:	01400234 	movhi	r5,8
   4801c:	29483004 	addi	r5,r5,8384
   48020:	01000234 	movhi	r4,8
   48024:	21087604 	addi	r4,r4,8664
   48028:	004a9d00 	call	4a9d0 <altera_avalon_fifo_read_fifo>
   4802c:	e0bffb0d 	sth	r2,-20(fp)
//    send_buf[0] = (addrbsb & 0x00FF0000)>>16;
//    send_buf[1] = (addrbsb & 0x0000FF00)>> 8;
//    send_buf[2] = (addrbsb & 0x000000F8);

    num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);  // 清空数据
    while(num > 0)
   48030:	e0bffb8b 	ldhu	r2,-18(fp)
   48034:	103ff41e 	bne	r2,zero,48008 <__alt_mem_epcs_flash+0xfffc7008>
    {
        num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);
        idx = altera_avalon_fifo_read_fifo(SPIRD_FIFO_OUT_BASE, SPIRD_FIFO_IN_CSR_BASE);
    }

    IINCHIP_CSoff();                                      // CS=0, SPI开启
   48038:	0047c280 	call	47c28 <IINCHIP_CSoff>
//    alt_avalon_spi_command(SPI_BASE, 0, 3, send_buf, len, buf, 0);
    IINCHIP_SpiSendData( (addrbsb & 0x00FF0000)>>16);		// 通过SPI发送16位地址段给MCU
   4803c:	e0bffc17 	ldw	r2,-16(fp)
   48040:	10803fec 	andhi	r2,r2,255
   48044:	1004d43a 	srli	r2,r2,16
   48048:	1009883a 	mov	r4,r2
   4804c:	0047d000 	call	47d00 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x0000FF00)>> 8);		//
   48050:	e0bffc17 	ldw	r2,-16(fp)
   48054:	10bfc00c 	andi	r2,r2,65280
   48058:	1004d23a 	srli	r2,r2,8
   4805c:	10bfffcc 	andi	r2,r2,65535
   48060:	1009883a 	mov	r4,r2
   48064:	0047d000 	call	47d00 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x000000F8));    		// 设置SPI为读操作
   48068:	e0bffc17 	ldw	r2,-16(fp)
   4806c:	10803e0c 	andi	r2,r2,248
   48070:	1009883a 	mov	r4,r2
   48074:	0047d000 	call	47d00 <IINCHIP_SpiSendData>

    IINCHIP_SpiSendData(len);
   48078:	e0bffe0b 	ldhu	r2,-8(fp)
   4807c:	1009883a 	mov	r4,r2
   48080:	0047d000 	call	47d00 <IINCHIP_SpiSendData>
    for( num = 0; num < 4; num++ )
   48084:	e03ffb8d 	sth	zero,-18(fp)
   48088:	00000306 	br	48098 <wiz_read_buf+0xd0>
   4808c:	e0bffb8b 	ldhu	r2,-18(fp)
   48090:	10800044 	addi	r2,r2,1
   48094:	e0bffb8d 	sth	r2,-18(fp)
   48098:	e0bffb8b 	ldhu	r2,-18(fp)
   4809c:	10800130 	cmpltui	r2,r2,4
   480a0:	103ffa1e 	bne	r2,zero,4808c <__alt_mem_epcs_flash+0xfffc708c>
    {
        ;
    }
    for(idx = 0; idx < len; idx++)                    	// 将buf中的数据通过SPI发送给MCU
   480a4:	e03ffb0d 	sth	zero,-20(fp)
   480a8:	00000806 	br	480cc <wiz_read_buf+0x104>
    {
        //buf[idx] = IINCHIP_SpiSendData(0x00);
        buf[idx] = SPI_I2S_ReceiveData();
   480ac:	e0bffb0b 	ldhu	r2,-20(fp)
   480b0:	e0fffd17 	ldw	r3,-12(fp)
   480b4:	18a1883a 	add	r16,r3,r2
   480b8:	0047d5c0 	call	47d5c <SPI_I2S_ReceiveData>
   480bc:	80800005 	stb	r2,0(r16)
    IINCHIP_SpiSendData(len);
    for( num = 0; num < 4; num++ )
    {
        ;
    }
    for(idx = 0; idx < len; idx++)                    	// 将buf中的数据通过SPI发送给MCU
   480c0:	e0bffb0b 	ldhu	r2,-20(fp)
   480c4:	10800044 	addi	r2,r2,1
   480c8:	e0bffb0d 	sth	r2,-20(fp)
   480cc:	e0fffb0b 	ldhu	r3,-20(fp)
   480d0:	e0bffe0b 	ldhu	r2,-8(fp)
   480d4:	18bff536 	bltu	r3,r2,480ac <__alt_mem_epcs_flash+0xfffc70ac>
    {
        //buf[idx] = IINCHIP_SpiSendData(0x00);
        buf[idx] = SPI_I2S_ReceiveData();
    }

    num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);  // 清空数据
   480d8:	01000234 	movhi	r4,8
   480dc:	21083004 	addi	r4,r4,8384
   480e0:	004a7700 	call	4a770 <altera_avalon_fifo_read_level>
   480e4:	e0bffb8d 	sth	r2,-18(fp)
    while(num > 0)
   480e8:	00000a06 	br	48114 <wiz_read_buf+0x14c>
    {
        num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);
   480ec:	01000234 	movhi	r4,8
   480f0:	21083004 	addi	r4,r4,8384
   480f4:	004a7700 	call	4a770 <altera_avalon_fifo_read_level>
   480f8:	e0bffb8d 	sth	r2,-18(fp)
        idx = altera_avalon_fifo_read_fifo(SPIRD_FIFO_OUT_BASE, SPIRD_FIFO_IN_CSR_BASE);
   480fc:	01400234 	movhi	r5,8
   48100:	29483004 	addi	r5,r5,8384
   48104:	01000234 	movhi	r4,8
   48108:	21087604 	addi	r4,r4,8664
   4810c:	004a9d00 	call	4a9d0 <altera_avalon_fifo_read_fifo>
   48110:	e0bffb0d 	sth	r2,-20(fp)
        //buf[idx] = IINCHIP_SpiSendData(0x00);
        buf[idx] = SPI_I2S_ReceiveData();
    }

    num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);  // 清空数据
    while(num > 0)
   48114:	e0bffb8b 	ldhu	r2,-18(fp)
   48118:	103ff41e 	bne	r2,zero,480ec <__alt_mem_epcs_flash+0xfffc70ec>
    {
        num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);
        idx = altera_avalon_fifo_read_fifo(SPIRD_FIFO_OUT_BASE, SPIRD_FIFO_IN_CSR_BASE);
    }
    IINCHIP_CSon();                                       // CS=1, SPI关闭
   4811c:	0047c580 	call	47c58 <IINCHIP_CSon>

    return len;                                                                                                                                                                   // 返回已接收数据的长度值
   48120:	e0bffe0b 	ldhu	r2,-8(fp)
}
   48124:	e6ffff04 	addi	sp,fp,-4
   48128:	dfc00217 	ldw	ra,8(sp)
   4812c:	df000117 	ldw	fp,4(sp)
   48130:	dc000017 	ldw	r16,0(sp)
   48134:	dec00304 	addi	sp,sp,12
   48138:	f800283a 	ret

0004813c <iinchip_init>:

/**
  @brief  This function is for resetting of the iinchip. Initializes the iinchip to work in whether DIRECT or INDIRECT mode
  */
void iinchip_init(void)
{
   4813c:	defffe04 	addi	sp,sp,-8
   48140:	dfc00115 	stw	ra,4(sp)
   48144:	df000015 	stw	fp,0(sp)
   48148:	d839883a 	mov	fp,sp
    setMR( MR_RST );
   4814c:	01002004 	movi	r4,128
   48150:	00487880 	call	48788 <setMR>
}
   48154:	0001883a 	nop
   48158:	e037883a 	mov	sp,fp
   4815c:	dfc00117 	ldw	ra,4(sp)
   48160:	df000017 	ldw	fp,0(sp)
   48164:	dec00204 	addi	sp,sp,8
   48168:	f800283a 	ret

0004816c <sysinit>:
  other 3 channels couldn't be used, for there's no available memory.\n
  If two 4KBytes memory are assigned to two each channels, \n
  other 2 channels couldn't be used, for there's no available memory.\n
  */
void sysinit( uint8 * tx_size, uint8 * rx_size  )
{
   4816c:	defff904 	addi	sp,sp,-28
   48170:	dfc00615 	stw	ra,24(sp)
   48174:	df000515 	stw	fp,20(sp)
   48178:	df000504 	addi	fp,sp,20
   4817c:	e13ffe15 	stw	r4,-8(fp)
   48180:	e17fff15 	stw	r5,-4(fp)
    int16 i;
    int16 ssum,rsum;

    ssum = 0;
   48184:	e03ffc15 	stw	zero,-16(fp)
    rsum = 0;
   48188:	e03ffd15 	stw	zero,-12(fp)

    for (i = 0 ; i < MAX_SOCK_NUM; i++)       // Set the size, masking and base address of Tx & Rx memory by each channel
   4818c:	e03ffb15 	stw	zero,-20(fp)
   48190:	0000db06 	br	48500 <sysinit+0x394>
    {
        IINCHIP_WRITE( (Sn_TXMEM_SIZE(i)), tx_size[i]);
   48194:	e0bffb17 	ldw	r2,-20(fp)
   48198:	1004917a 	slli	r2,r2,5
   4819c:	1087c204 	addi	r2,r2,7944
   481a0:	1009883a 	mov	r4,r2
   481a4:	e0bffb17 	ldw	r2,-20(fp)
   481a8:	e0fffe17 	ldw	r3,-8(fp)
   481ac:	1885883a 	add	r2,r3,r2
   481b0:	10800003 	ldbu	r2,0(r2)
   481b4:	10803fcc 	andi	r2,r2,255
   481b8:	100b883a 	mov	r5,r2
   481bc:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        IINCHIP_WRITE( (Sn_RXMEM_SIZE(i)), rx_size[i]);
   481c0:	e0bffb17 	ldw	r2,-20(fp)
   481c4:	1004917a 	slli	r2,r2,5
   481c8:	10878204 	addi	r2,r2,7688
   481cc:	1009883a 	mov	r4,r2
   481d0:	e0bffb17 	ldw	r2,-20(fp)
   481d4:	e0ffff17 	ldw	r3,-4(fp)
   481d8:	1885883a 	add	r2,r3,r2
   481dc:	10800003 	ldbu	r2,0(r2)
   481e0:	10803fcc 	andi	r2,r2,255
   481e4:	100b883a 	mov	r5,r2
   481e8:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
        SSIZE[i] = (int16)(0);
   481ec:	008001b4 	movhi	r2,6
   481f0:	10b38404 	addi	r2,r2,-12784
   481f4:	e0fffb17 	ldw	r3,-20(fp)
   481f8:	18c7883a 	add	r3,r3,r3
   481fc:	10c5883a 	add	r2,r2,r3
   48200:	1000000d 	sth	zero,0(r2)
        RSIZE[i] = (int16)(0);
   48204:	008001b4 	movhi	r2,6
   48208:	10b38804 	addi	r2,r2,-12768
   4820c:	e0fffb17 	ldw	r3,-20(fp)
   48210:	18c7883a 	add	r3,r3,r3
   48214:	10c5883a 	add	r2,r2,r3
   48218:	1000000d 	sth	zero,0(r2)

        // W5500有8个Socket，每个Socket有对应独立的收发缓存区。
        // 每个Socket的发送/接收缓存区都在一个16KB的物理发送内存中，初始化分配为2KB。
        // 无论给每个Socket分配多大的收/发缓存，都必须在16KB以内。

        if (ssum <= 16384)                                                                          // 设置Socket发送缓存空间的大小
   4821c:	e0bffc17 	ldw	r2,-16(fp)
   48220:	10900048 	cmpgei	r2,r2,16385
   48224:	10004e1e 	bne	r2,zero,48360 <sysinit+0x1f4>
        {
            switch( tx_size[i] )
   48228:	e0bffb17 	ldw	r2,-20(fp)
   4822c:	e0fffe17 	ldw	r3,-8(fp)
   48230:	1885883a 	add	r2,r3,r2
   48234:	10800003 	ldbu	r2,0(r2)
   48238:	10803fcc 	andi	r2,r2,255
   4823c:	10c00468 	cmpgeui	r3,r2,17
   48240:	18003f1e 	bne	r3,zero,48340 <sysinit+0x1d4>
   48244:	100690ba 	slli	r3,r2,2
   48248:	00800174 	movhi	r2,5
   4824c:	10a09704 	addi	r2,r2,-32164
   48250:	1885883a 	add	r2,r3,r2
   48254:	10800017 	ldw	r2,0(r2)
   48258:	1000683a 	jmp	r2
   4825c:	00048340 	call	4834 <__alt_mem_onchip_memory-0x3b7cc>
   48260:	000482a0 	cmpeqi	zero,zero,4618
   48264:	000482c0 	call	482c <__alt_mem_onchip_memory-0x3b7d4>
   48268:	00048340 	call	4834 <__alt_mem_onchip_memory-0x3b7cc>
   4826c:	000482e0 	cmpeqi	zero,zero,4619
   48270:	00048340 	call	4834 <__alt_mem_onchip_memory-0x3b7cc>
   48274:	00048340 	call	4834 <__alt_mem_onchip_memory-0x3b7cc>
   48278:	00048340 	call	4834 <__alt_mem_onchip_memory-0x3b7cc>
   4827c:	00048300 	call	4830 <__alt_mem_onchip_memory-0x3b7d0>
   48280:	00048340 	call	4834 <__alt_mem_onchip_memory-0x3b7cc>
   48284:	00048340 	call	4834 <__alt_mem_onchip_memory-0x3b7cc>
   48288:	00048340 	call	4834 <__alt_mem_onchip_memory-0x3b7cc>
   4828c:	00048340 	call	4834 <__alt_mem_onchip_memory-0x3b7cc>
   48290:	00048340 	call	4834 <__alt_mem_onchip_memory-0x3b7cc>
   48294:	00048340 	call	4834 <__alt_mem_onchip_memory-0x3b7cc>
   48298:	00048340 	call	4834 <__alt_mem_onchip_memory-0x3b7cc>
   4829c:	00048320 	cmpeqi	zero,zero,4620
            {
                case 1:
                    SSIZE[i] = (int16)(1024);                       // i=1，tx_size=1KB
   482a0:	008001b4 	movhi	r2,6
   482a4:	10b38404 	addi	r2,r2,-12784
   482a8:	e0fffb17 	ldw	r3,-20(fp)
   482ac:	18c7883a 	add	r3,r3,r3
   482b0:	10c5883a 	add	r2,r2,r3
   482b4:	00c10004 	movi	r3,1024
   482b8:	10c0000d 	sth	r3,0(r2)
                    break;
   482bc:	00002806 	br	48360 <sysinit+0x1f4>
                case 2:
                    SSIZE[i] = (int16)(2048);                       // i=2，tx_size=2KB
   482c0:	008001b4 	movhi	r2,6
   482c4:	10b38404 	addi	r2,r2,-12784
   482c8:	e0fffb17 	ldw	r3,-20(fp)
   482cc:	18c7883a 	add	r3,r3,r3
   482d0:	10c5883a 	add	r2,r2,r3
   482d4:	00c20004 	movi	r3,2048
   482d8:	10c0000d 	sth	r3,0(r2)
                    break;
   482dc:	00002006 	br	48360 <sysinit+0x1f4>
                case 4:
                    SSIZE[i] = (int16)(4096);                       // i=4，tx_size=4KB
   482e0:	008001b4 	movhi	r2,6
   482e4:	10b38404 	addi	r2,r2,-12784
   482e8:	e0fffb17 	ldw	r3,-20(fp)
   482ec:	18c7883a 	add	r3,r3,r3
   482f0:	10c5883a 	add	r2,r2,r3
   482f4:	00c40004 	movi	r3,4096
   482f8:	10c0000d 	sth	r3,0(r2)
                    break;
   482fc:	00001806 	br	48360 <sysinit+0x1f4>
                case 8:
                    SSIZE[i] = (int16)(8192);                       // i=8，tx_size=8KB
   48300:	008001b4 	movhi	r2,6
   48304:	10b38404 	addi	r2,r2,-12784
   48308:	e0fffb17 	ldw	r3,-20(fp)
   4830c:	18c7883a 	add	r3,r3,r3
   48310:	10c5883a 	add	r2,r2,r3
   48314:	00c80004 	movi	r3,8192
   48318:	10c0000d 	sth	r3,0(r2)
                    break;
   4831c:	00001006 	br	48360 <sysinit+0x1f4>
                case 16:
                    SSIZE[i] = (int16)(16384);              // i=16，tx_size=16KB
   48320:	008001b4 	movhi	r2,6
   48324:	10b38404 	addi	r2,r2,-12784
   48328:	e0fffb17 	ldw	r3,-20(fp)
   4832c:	18c7883a 	add	r3,r3,r3
   48330:	10c5883a 	add	r2,r2,r3
   48334:	00d00004 	movi	r3,16384
   48338:	10c0000d 	sth	r3,0(r2)
                    break;
   4833c:	00000806 	br	48360 <sysinit+0x1f4>
                default :
                    RSIZE[i] = (int16)(2048);                       // 默认i=2，tx_size=2KB
   48340:	008001b4 	movhi	r2,6
   48344:	10b38804 	addi	r2,r2,-12768
   48348:	e0fffb17 	ldw	r3,-20(fp)
   4834c:	18c7883a 	add	r3,r3,r3
   48350:	10c5883a 	add	r2,r2,r3
   48354:	00c20004 	movi	r3,2048
   48358:	10c0000d 	sth	r3,0(r2)
                    break;
   4835c:	0001883a 	nop
            }
        }

        if (rsum <= 16384)                                                                      // 设置Socket接收缓存空间的大小
   48360:	e0bffd17 	ldw	r2,-12(fp)
   48364:	10900048 	cmpgei	r2,r2,16385
   48368:	10004e1e 	bne	r2,zero,484a4 <sysinit+0x338>
        {
            switch( rx_size[i] )
   4836c:	e0bffb17 	ldw	r2,-20(fp)
   48370:	e0ffff17 	ldw	r3,-4(fp)
   48374:	1885883a 	add	r2,r3,r2
   48378:	10800003 	ldbu	r2,0(r2)
   4837c:	10803fcc 	andi	r2,r2,255
   48380:	10c00468 	cmpgeui	r3,r2,17
   48384:	18003f1e 	bne	r3,zero,48484 <sysinit+0x318>
   48388:	100690ba 	slli	r3,r2,2
   4838c:	00800174 	movhi	r2,5
   48390:	10a0e804 	addi	r2,r2,-31840
   48394:	1885883a 	add	r2,r3,r2
   48398:	10800017 	ldw	r2,0(r2)
   4839c:	1000683a 	jmp	r2
   483a0:	00048484 	movi	zero,4626
   483a4:	000483e4 	muli	zero,zero,4623
   483a8:	00048404 	movi	zero,4624
   483ac:	00048484 	movi	zero,4626
   483b0:	00048424 	muli	zero,zero,4624
   483b4:	00048484 	movi	zero,4626
   483b8:	00048484 	movi	zero,4626
   483bc:	00048484 	movi	zero,4626
   483c0:	00048444 	movi	zero,4625
   483c4:	00048484 	movi	zero,4626
   483c8:	00048484 	movi	zero,4626
   483cc:	00048484 	movi	zero,4626
   483d0:	00048484 	movi	zero,4626
   483d4:	00048484 	movi	zero,4626
   483d8:	00048484 	movi	zero,4626
   483dc:	00048484 	movi	zero,4626
   483e0:	00048464 	muli	zero,zero,4625
            {
                case 1:
                    RSIZE[i] = (int16)(1024);               // i=1，rx_size=1KB
   483e4:	008001b4 	movhi	r2,6
   483e8:	10b38804 	addi	r2,r2,-12768
   483ec:	e0fffb17 	ldw	r3,-20(fp)
   483f0:	18c7883a 	add	r3,r3,r3
   483f4:	10c5883a 	add	r2,r2,r3
   483f8:	00c10004 	movi	r3,1024
   483fc:	10c0000d 	sth	r3,0(r2)
                    break;
   48400:	00002806 	br	484a4 <sysinit+0x338>
                case 2:
                    RSIZE[i] = (int16)(2048);               // i=2，rx_size=2KB
   48404:	008001b4 	movhi	r2,6
   48408:	10b38804 	addi	r2,r2,-12768
   4840c:	e0fffb17 	ldw	r3,-20(fp)
   48410:	18c7883a 	add	r3,r3,r3
   48414:	10c5883a 	add	r2,r2,r3
   48418:	00c20004 	movi	r3,2048
   4841c:	10c0000d 	sth	r3,0(r2)
                    break;
   48420:	00002006 	br	484a4 <sysinit+0x338>
                case 4:
                    RSIZE[i] = (int16)(4096);               // i=4，rx_size=4KB
   48424:	008001b4 	movhi	r2,6
   48428:	10b38804 	addi	r2,r2,-12768
   4842c:	e0fffb17 	ldw	r3,-20(fp)
   48430:	18c7883a 	add	r3,r3,r3
   48434:	10c5883a 	add	r2,r2,r3
   48438:	00c40004 	movi	r3,4096
   4843c:	10c0000d 	sth	r3,0(r2)
                    break;
   48440:	00001806 	br	484a4 <sysinit+0x338>
                case 8:
                    RSIZE[i] = (int16)(8192);               // i=8，rx_size=8KB
   48444:	008001b4 	movhi	r2,6
   48448:	10b38804 	addi	r2,r2,-12768
   4844c:	e0fffb17 	ldw	r3,-20(fp)
   48450:	18c7883a 	add	r3,r3,r3
   48454:	10c5883a 	add	r2,r2,r3
   48458:	00c80004 	movi	r3,8192
   4845c:	10c0000d 	sth	r3,0(r2)
                    break;
   48460:	00001006 	br	484a4 <sysinit+0x338>
                case 16:
                    RSIZE[i] = (int16)(16384);      // i=16，rx_size=16KB
   48464:	008001b4 	movhi	r2,6
   48468:	10b38804 	addi	r2,r2,-12768
   4846c:	e0fffb17 	ldw	r3,-20(fp)
   48470:	18c7883a 	add	r3,r3,r3
   48474:	10c5883a 	add	r2,r2,r3
   48478:	00d00004 	movi	r3,16384
   4847c:	10c0000d 	sth	r3,0(r2)
                    break;
   48480:	00000806 	br	484a4 <sysinit+0x338>
                default :
                    RSIZE[i] = (int16)(2048);               // 默认i=2，rx_size=2K
   48484:	008001b4 	movhi	r2,6
   48488:	10b38804 	addi	r2,r2,-12768
   4848c:	e0fffb17 	ldw	r3,-20(fp)
   48490:	18c7883a 	add	r3,r3,r3
   48494:	10c5883a 	add	r2,r2,r3
   48498:	00c20004 	movi	r3,2048
   4849c:	10c0000d 	sth	r3,0(r2)
                    break;
   484a0:	0001883a 	nop
            }
        }
        ssum += SSIZE[i];
   484a4:	008001b4 	movhi	r2,6
   484a8:	10b38404 	addi	r2,r2,-12784
   484ac:	e0fffb17 	ldw	r3,-20(fp)
   484b0:	18c7883a 	add	r3,r3,r3
   484b4:	10c5883a 	add	r2,r2,r3
   484b8:	1080000b 	ldhu	r2,0(r2)
   484bc:	10bfffcc 	andi	r2,r2,65535
   484c0:	e0fffc17 	ldw	r3,-16(fp)
   484c4:	1885883a 	add	r2,r3,r2
   484c8:	e0bffc15 	stw	r2,-16(fp)
        rsum += RSIZE[i];
   484cc:	008001b4 	movhi	r2,6
   484d0:	10b38804 	addi	r2,r2,-12768
   484d4:	e0fffb17 	ldw	r3,-20(fp)
   484d8:	18c7883a 	add	r3,r3,r3
   484dc:	10c5883a 	add	r2,r2,r3
   484e0:	1080000b 	ldhu	r2,0(r2)
   484e4:	10bfffcc 	andi	r2,r2,65535
   484e8:	e0fffd17 	ldw	r3,-12(fp)
   484ec:	1885883a 	add	r2,r3,r2
   484f0:	e0bffd15 	stw	r2,-12(fp)
    int16 ssum,rsum;

    ssum = 0;
    rsum = 0;

    for (i = 0 ; i < MAX_SOCK_NUM; i++)       // Set the size, masking and base address of Tx & Rx memory by each channel
   484f4:	e0bffb17 	ldw	r2,-20(fp)
   484f8:	10800044 	addi	r2,r2,1
   484fc:	e0bffb15 	stw	r2,-20(fp)
   48500:	e0bffb17 	ldw	r2,-20(fp)
   48504:	10800210 	cmplti	r2,r2,8
   48508:	103f221e 	bne	r2,zero,48194 <__alt_mem_epcs_flash+0xfffc7194>
            }
        }
        ssum += SSIZE[i];
        rsum += RSIZE[i];
    }
}
   4850c:	0001883a 	nop
   48510:	e037883a 	mov	sp,fp
   48514:	dfc00117 	ldw	ra,4(sp)
   48518:	df000017 	ldw	fp,0(sp)
   4851c:	dec00204 	addi	sp,sp,8
   48520:	f800283a 	ret

00048524 <setGAR>:
  @brief  This function sets up gateway IP address.
  */
void setGAR(
        uint8 * addr  /**< a pointer to a 4 -byte array responsible to set the Gateway IP address. */
        )
{
   48524:	defffd04 	addi	sp,sp,-12
   48528:	dfc00215 	stw	ra,8(sp)
   4852c:	df000115 	stw	fp,4(sp)
   48530:	df000104 	addi	fp,sp,4
   48534:	e13fff15 	stw	r4,-4(fp)
    wiz_write_buf(GAR0, addr, 4);
   48538:	01800104 	movi	r6,4
   4853c:	e17fff17 	ldw	r5,-4(fp)
   48540:	01004004 	movi	r4,256
   48544:	0047f040 	call	47f04 <wiz_write_buf>
}
   48548:	0001883a 	nop
   4854c:	e037883a 	mov	sp,fp
   48550:	dfc00117 	ldw	ra,4(sp)
   48554:	df000017 	ldw	fp,0(sp)
   48558:	dec00204 	addi	sp,sp,8
   4855c:	f800283a 	ret

00048560 <getGWIP>:
void getGWIP(uint8 * addr)
{
   48560:	defffd04 	addi	sp,sp,-12
   48564:	dfc00215 	stw	ra,8(sp)
   48568:	df000115 	stw	fp,4(sp)
   4856c:	df000104 	addi	fp,sp,4
   48570:	e13fff15 	stw	r4,-4(fp)
    wiz_read_buf(GAR0, addr, 4);
   48574:	01800104 	movi	r6,4
   48578:	e17fff17 	ldw	r5,-4(fp)
   4857c:	01004004 	movi	r4,256
   48580:	0047fc80 	call	47fc8 <wiz_read_buf>
}
   48584:	0001883a 	nop
   48588:	e037883a 	mov	sp,fp
   4858c:	dfc00117 	ldw	ra,4(sp)
   48590:	df000017 	ldw	fp,0(sp)
   48594:	dec00204 	addi	sp,sp,8
   48598:	f800283a 	ret

0004859c <setSUBR>:

/**
  @brief  It sets up SubnetMask address
  */
void setSUBR(uint8 * addr)
{
   4859c:	defffd04 	addi	sp,sp,-12
   485a0:	dfc00215 	stw	ra,8(sp)
   485a4:	df000115 	stw	fp,4(sp)
   485a8:	df000104 	addi	fp,sp,4
   485ac:	e13fff15 	stw	r4,-4(fp)
    wiz_write_buf(SUBR0, addr, 4);
   485b0:	01800104 	movi	r6,4
   485b4:	e17fff17 	ldw	r5,-4(fp)
   485b8:	01014004 	movi	r4,1280
   485bc:	0047f040 	call	47f04 <wiz_write_buf>
}
   485c0:	0001883a 	nop
   485c4:	e037883a 	mov	sp,fp
   485c8:	dfc00117 	ldw	ra,4(sp)
   485cc:	df000017 	ldw	fp,0(sp)
   485d0:	dec00204 	addi	sp,sp,8
   485d4:	f800283a 	ret

000485d8 <setSHAR>:
  @brief  This function sets up MAC address.
  */
void setSHAR(
        uint8 * addr  /**< a pointer to a 6 -byte array responsible to set the MAC address. */
        )
{
   485d8:	defffd04 	addi	sp,sp,-12
   485dc:	dfc00215 	stw	ra,8(sp)
   485e0:	df000115 	stw	fp,4(sp)
   485e4:	df000104 	addi	fp,sp,4
   485e8:	e13fff15 	stw	r4,-4(fp)
    wiz_write_buf(SHAR0, addr, 6);
   485ec:	01800184 	movi	r6,6
   485f0:	e17fff17 	ldw	r5,-4(fp)
   485f4:	01024004 	movi	r4,2304
   485f8:	0047f040 	call	47f04 <wiz_write_buf>
}
   485fc:	0001883a 	nop
   48600:	e037883a 	mov	sp,fp
   48604:	dfc00117 	ldw	ra,4(sp)
   48608:	df000017 	ldw	fp,0(sp)
   4860c:	dec00204 	addi	sp,sp,8
   48610:	f800283a 	ret

00048614 <setSIPR>:
  @brief  This function sets up Source IP address.
  */
void setSIPR(
        uint8 * addr  /**< a pointer to a 4 -byte array responsible to set the Source IP address. */
        )
{
   48614:	defffd04 	addi	sp,sp,-12
   48618:	dfc00215 	stw	ra,8(sp)
   4861c:	df000115 	stw	fp,4(sp)
   48620:	df000104 	addi	fp,sp,4
   48624:	e13fff15 	stw	r4,-4(fp)
    wiz_write_buf(SIPR0, addr, 4);
   48628:	01800104 	movi	r6,4
   4862c:	e17fff17 	ldw	r5,-4(fp)
   48630:	0103c004 	movi	r4,3840
   48634:	0047f040 	call	47f04 <wiz_write_buf>
}
   48638:	0001883a 	nop
   4863c:	e037883a 	mov	sp,fp
   48640:	dfc00117 	ldw	ra,4(sp)
   48644:	df000017 	ldw	fp,0(sp)
   48648:	dec00204 	addi	sp,sp,8
   4864c:	f800283a 	ret

00048650 <setkeepalive>:

/**
  @brief  W5500心跳检测程序，设置Socket在线时间寄存器Sn_KPALVTR，单位为5s
  */
void setkeepalive(SOCKET s)
{
   48650:	defffd04 	addi	sp,sp,-12
   48654:	dfc00215 	stw	ra,8(sp)
   48658:	df000115 	stw	fp,4(sp)
   4865c:	df000104 	addi	fp,sp,4
   48660:	2005883a 	mov	r2,r4
   48664:	e0bfff05 	stb	r2,-4(fp)
    IINCHIP_WRITE(Sn_KPALVTR(s),0x02);
   48668:	e0bfff03 	ldbu	r2,-4(fp)
   4866c:	1004917a 	slli	r2,r2,5
   48670:	108bc204 	addi	r2,r2,12040
   48674:	01400084 	movi	r5,2
   48678:	1009883a 	mov	r4,r2
   4867c:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
}
   48680:	0001883a 	nop
   48684:	e037883a 	mov	sp,fp
   48688:	dfc00117 	ldw	ra,4(sp)
   4868c:	df000017 	ldw	fp,0(sp)
   48690:	dec00204 	addi	sp,sp,8
   48694:	f800283a 	ret

00048698 <getGAR>:

/**
  @brief  This function sets up Source IP address.
  */
void getGAR(uint8 * addr)
{
   48698:	defffd04 	addi	sp,sp,-12
   4869c:	dfc00215 	stw	ra,8(sp)
   486a0:	df000115 	stw	fp,4(sp)
   486a4:	df000104 	addi	fp,sp,4
   486a8:	e13fff15 	stw	r4,-4(fp)
    wiz_read_buf(GAR0, addr, 4);
   486ac:	01800104 	movi	r6,4
   486b0:	e17fff17 	ldw	r5,-4(fp)
   486b4:	01004004 	movi	r4,256
   486b8:	0047fc80 	call	47fc8 <wiz_read_buf>
}
   486bc:	0001883a 	nop
   486c0:	e037883a 	mov	sp,fp
   486c4:	dfc00117 	ldw	ra,4(sp)
   486c8:	df000017 	ldw	fp,0(sp)
   486cc:	dec00204 	addi	sp,sp,8
   486d0:	f800283a 	ret

000486d4 <getSUBR>:
void getSUBR(uint8 * addr)
{
   486d4:	defffd04 	addi	sp,sp,-12
   486d8:	dfc00215 	stw	ra,8(sp)
   486dc:	df000115 	stw	fp,4(sp)
   486e0:	df000104 	addi	fp,sp,4
   486e4:	e13fff15 	stw	r4,-4(fp)
    wiz_read_buf(SUBR0, addr, 4);
   486e8:	01800104 	movi	r6,4
   486ec:	e17fff17 	ldw	r5,-4(fp)
   486f0:	01014004 	movi	r4,1280
   486f4:	0047fc80 	call	47fc8 <wiz_read_buf>
}
   486f8:	0001883a 	nop
   486fc:	e037883a 	mov	sp,fp
   48700:	dfc00117 	ldw	ra,4(sp)
   48704:	df000017 	ldw	fp,0(sp)
   48708:	dec00204 	addi	sp,sp,8
   4870c:	f800283a 	ret

00048710 <getSHAR>:
void getSHAR(uint8 * addr)
{
   48710:	defffd04 	addi	sp,sp,-12
   48714:	dfc00215 	stw	ra,8(sp)
   48718:	df000115 	stw	fp,4(sp)
   4871c:	df000104 	addi	fp,sp,4
   48720:	e13fff15 	stw	r4,-4(fp)
    wiz_read_buf(SHAR0, addr, 6);
   48724:	01800184 	movi	r6,6
   48728:	e17fff17 	ldw	r5,-4(fp)
   4872c:	01024004 	movi	r4,2304
   48730:	0047fc80 	call	47fc8 <wiz_read_buf>
}
   48734:	0001883a 	nop
   48738:	e037883a 	mov	sp,fp
   4873c:	dfc00117 	ldw	ra,4(sp)
   48740:	df000017 	ldw	fp,0(sp)
   48744:	dec00204 	addi	sp,sp,8
   48748:	f800283a 	ret

0004874c <getSIPR>:
void getSIPR(uint8 * addr)
{
   4874c:	defffd04 	addi	sp,sp,-12
   48750:	dfc00215 	stw	ra,8(sp)
   48754:	df000115 	stw	fp,4(sp)
   48758:	df000104 	addi	fp,sp,4
   4875c:	e13fff15 	stw	r4,-4(fp)
    wiz_read_buf(SIPR0, addr, 4);
   48760:	01800104 	movi	r6,4
   48764:	e17fff17 	ldw	r5,-4(fp)
   48768:	0103c004 	movi	r4,3840
   4876c:	0047fc80 	call	47fc8 <wiz_read_buf>
}
   48770:	0001883a 	nop
   48774:	e037883a 	mov	sp,fp
   48778:	dfc00117 	ldw	ra,4(sp)
   4877c:	df000017 	ldw	fp,0(sp)
   48780:	dec00204 	addi	sp,sp,8
   48784:	f800283a 	ret

00048788 <setMR>:

void setMR(uint8 val)
{
   48788:	defffd04 	addi	sp,sp,-12
   4878c:	dfc00215 	stw	ra,8(sp)
   48790:	df000115 	stw	fp,4(sp)
   48794:	df000104 	addi	fp,sp,4
   48798:	2005883a 	mov	r2,r4
   4879c:	e0bfff05 	stb	r2,-4(fp)
    IINCHIP_WRITE(MR,val);
   487a0:	e0bfff03 	ldbu	r2,-4(fp)
   487a4:	100b883a 	mov	r5,r2
   487a8:	0009883a 	mov	r4,zero
   487ac:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
}
   487b0:	0001883a 	nop
   487b4:	e037883a 	mov	sp,fp
   487b8:	dfc00117 	ldw	ra,4(sp)
   487bc:	df000017 	ldw	fp,0(sp)
   487c0:	dec00204 	addi	sp,sp,8
   487c4:	f800283a 	ret

000487c8 <getIR>:

/**
  @brief  This function gets Interrupt register in common register.
  */
uint8 getIR( void )
{
   487c8:	defffe04 	addi	sp,sp,-8
   487cc:	dfc00115 	stw	ra,4(sp)
   487d0:	df000015 	stw	fp,0(sp)
   487d4:	d839883a 	mov	fp,sp
    return IINCHIP_READ(IR);
   487d8:	01054004 	movi	r4,5376
   487dc:	0047e600 	call	47e60 <IINCHIP_READ>
}
   487e0:	e037883a 	mov	sp,fp
   487e4:	dfc00117 	ldw	ra,4(sp)
   487e8:	df000017 	ldw	fp,0(sp)
   487ec:	dec00204 	addi	sp,sp,8
   487f0:	f800283a 	ret

000487f4 <setRTR>:

  If there is no response from the peer or delay in response then retransmission
  will be there as per RTR (Retry Time-value Register)setting
  */
void setRTR(uint16 timeout)
{
   487f4:	defffd04 	addi	sp,sp,-12
   487f8:	dfc00215 	stw	ra,8(sp)
   487fc:	df000115 	stw	fp,4(sp)
   48800:	df000104 	addi	fp,sp,4
   48804:	2005883a 	mov	r2,r4
   48808:	e0bfff0d 	sth	r2,-4(fp)
    IINCHIP_WRITE(RTR0,(uint8)((timeout & 0xff00) >> 8));
   4880c:	e0bfff0b 	ldhu	r2,-4(fp)
   48810:	1004d23a 	srli	r2,r2,8
   48814:	10803fcc 	andi	r2,r2,255
   48818:	100b883a 	mov	r5,r2
   4881c:	01064004 	movi	r4,6400
   48820:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
    IINCHIP_WRITE(RTR1,(uint8)(timeout & 0x00ff));
   48824:	e0bfff0b 	ldhu	r2,-4(fp)
   48828:	10803fcc 	andi	r2,r2,255
   4882c:	100b883a 	mov	r5,r2
   48830:	01068004 	movi	r4,6656
   48834:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
}
   48838:	0001883a 	nop
   4883c:	e037883a 	mov	sp,fp
   48840:	dfc00117 	ldw	ra,4(sp)
   48844:	df000017 	ldw	fp,0(sp)
   48848:	dec00204 	addi	sp,sp,8
   4884c:	f800283a 	ret

00048850 <setRCR>:

  If there is no response from the peer or delay in response then recorded time
  as per RTR & RCR register seeting then time out will occur.
  */
void setRCR(uint8 retry)
{
   48850:	defffd04 	addi	sp,sp,-12
   48854:	dfc00215 	stw	ra,8(sp)
   48858:	df000115 	stw	fp,4(sp)
   4885c:	df000104 	addi	fp,sp,4
   48860:	2005883a 	mov	r2,r4
   48864:	e0bfff05 	stb	r2,-4(fp)
    IINCHIP_WRITE(WIZ_RCR,retry);
   48868:	e0bfff03 	ldbu	r2,-4(fp)
   4886c:	100b883a 	mov	r5,r2
   48870:	0106c004 	movi	r4,6912
   48874:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
}
   48878:	0001883a 	nop
   4887c:	e037883a 	mov	sp,fp
   48880:	dfc00117 	ldw	ra,4(sp)
   48884:	df000017 	ldw	fp,0(sp)
   48888:	dec00204 	addi	sp,sp,8
   4888c:	f800283a 	ret

00048890 <clearIR>:

  If any bit in IMR is set as '0' then there is not interrupt signal though the bit is
  set in IR register.
  */
void clearIR(uint8 mask)
{
   48890:	defffc04 	addi	sp,sp,-16
   48894:	dfc00315 	stw	ra,12(sp)
   48898:	df000215 	stw	fp,8(sp)
   4889c:	dc000115 	stw	r16,4(sp)
   488a0:	df000204 	addi	fp,sp,8
   488a4:	2005883a 	mov	r2,r4
   488a8:	e0bffe05 	stb	r2,-8(fp)
    IINCHIP_WRITE(IR, ~mask | getIR() ); // must be setted 0x10.
   488ac:	e0bffe03 	ldbu	r2,-8(fp)
   488b0:	0084303a 	nor	r2,zero,r2
   488b4:	1021883a 	mov	r16,r2
   488b8:	00487c80 	call	487c8 <getIR>
   488bc:	8084b03a 	or	r2,r16,r2
   488c0:	10803fcc 	andi	r2,r2,255
   488c4:	100b883a 	mov	r5,r2
   488c8:	01054004 	movi	r4,5376
   488cc:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
}
   488d0:	0001883a 	nop
   488d4:	e6ffff04 	addi	sp,fp,-4
   488d8:	dfc00217 	ldw	ra,8(sp)
   488dc:	df000117 	ldw	fp,4(sp)
   488e0:	dc000017 	ldw	r16,0(sp)
   488e4:	dec00304 	addi	sp,sp,12
   488e8:	f800283a 	ret

000488ec <setSn_MSS>:

/**
  @brief  This sets the maximum segment size of TCP in Active Mode), while in Passive Mode this is set by peer
  */
void setSn_MSS(SOCKET s, uint16 Sn_MSSR)
{
   488ec:	defffc04 	addi	sp,sp,-16
   488f0:	dfc00315 	stw	ra,12(sp)
   488f4:	df000215 	stw	fp,8(sp)
   488f8:	df000204 	addi	fp,sp,8
   488fc:	2007883a 	mov	r3,r4
   48900:	2805883a 	mov	r2,r5
   48904:	e0fffe05 	stb	r3,-8(fp)
   48908:	e0bfff0d 	sth	r2,-4(fp)
    IINCHIP_WRITE( Sn_MSSR0(s), (uint8)((Sn_MSSR & 0xff00) >> 8));
   4890c:	e0bffe03 	ldbu	r2,-8(fp)
   48910:	1004917a 	slli	r2,r2,5
   48914:	10848204 	addi	r2,r2,4616
   48918:	1007883a 	mov	r3,r2
   4891c:	e0bfff0b 	ldhu	r2,-4(fp)
   48920:	1004d23a 	srli	r2,r2,8
   48924:	10803fcc 	andi	r2,r2,255
   48928:	100b883a 	mov	r5,r2
   4892c:	1809883a 	mov	r4,r3
   48930:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
    IINCHIP_WRITE( Sn_MSSR1(s), (uint8)(Sn_MSSR & 0x00ff));
   48934:	e0bffe03 	ldbu	r2,-8(fp)
   48938:	1004917a 	slli	r2,r2,5
   4893c:	1084c204 	addi	r2,r2,4872
   48940:	1007883a 	mov	r3,r2
   48944:	e0bfff0b 	ldhu	r2,-4(fp)
   48948:	10803fcc 	andi	r2,r2,255
   4894c:	100b883a 	mov	r5,r2
   48950:	1809883a 	mov	r4,r3
   48954:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
}
   48958:	0001883a 	nop
   4895c:	e037883a 	mov	sp,fp
   48960:	dfc00117 	ldw	ra,4(sp)
   48964:	df000017 	ldw	fp,0(sp)
   48968:	dec00204 	addi	sp,sp,8
   4896c:	f800283a 	ret

00048970 <getSn_IR>:
  @brief  get socket interrupt status

  These below functions are used to read the Interrupt & Soket Status register
  */
uint8 getSn_IR(SOCKET s)
{
   48970:	defffd04 	addi	sp,sp,-12
   48974:	dfc00215 	stw	ra,8(sp)
   48978:	df000115 	stw	fp,4(sp)
   4897c:	df000104 	addi	fp,sp,4
   48980:	2005883a 	mov	r2,r4
   48984:	e0bfff05 	stb	r2,-4(fp)
    return IINCHIP_READ(Sn_IR(s));
   48988:	e0bfff03 	ldbu	r2,-4(fp)
   4898c:	1004917a 	slli	r2,r2,5
   48990:	10808204 	addi	r2,r2,520
   48994:	1009883a 	mov	r4,r2
   48998:	0047e600 	call	47e60 <IINCHIP_READ>
}
   4899c:	e037883a 	mov	sp,fp
   489a0:	dfc00117 	ldw	ra,4(sp)
   489a4:	df000017 	ldw	fp,0(sp)
   489a8:	dec00204 	addi	sp,sp,8
   489ac:	f800283a 	ret

000489b0 <getSn_SR>:

/**
  @brief   get socket status
  */
uint8 getSn_SR(SOCKET s)
{
   489b0:	defffd04 	addi	sp,sp,-12
   489b4:	dfc00215 	stw	ra,8(sp)
   489b8:	df000115 	stw	fp,4(sp)
   489bc:	df000104 	addi	fp,sp,4
   489c0:	2005883a 	mov	r2,r4
   489c4:	e0bfff05 	stb	r2,-4(fp)
    return IINCHIP_READ(Sn_SR(s));
   489c8:	e0bfff03 	ldbu	r2,-4(fp)
   489cc:	1004917a 	slli	r2,r2,5
   489d0:	1080c204 	addi	r2,r2,776
   489d4:	1009883a 	mov	r4,r2
   489d8:	0047e600 	call	47e60 <IINCHIP_READ>
}
   489dc:	e037883a 	mov	sp,fp
   489e0:	dfc00117 	ldw	ra,4(sp)
   489e4:	df000017 	ldw	fp,0(sp)
   489e8:	dec00204 	addi	sp,sp,8
   489ec:	f800283a 	ret

000489f0 <getSn_TX_FSR>:

  This gives free buffer size of transmit buffer. This is the data size that user can transmit.
  User shuold check this value first and control the size of transmitting data
  */
uint16 getSn_TX_FSR(SOCKET s)
{
   489f0:	defffb04 	addi	sp,sp,-20
   489f4:	dfc00415 	stw	ra,16(sp)
   489f8:	df000315 	stw	fp,12(sp)
   489fc:	dc000215 	stw	r16,8(sp)
   48a00:	df000304 	addi	fp,sp,12
   48a04:	2005883a 	mov	r2,r4
   48a08:	e0bffe05 	stb	r2,-8(fp)
    uint16 val=0,val1=0;
   48a0c:	e03ffd0d 	sth	zero,-12(fp)
   48a10:	e03ffd8d 	sth	zero,-10(fp)
    do
    {
        val1 = IINCHIP_READ(Sn_TX_FSR0(s));
   48a14:	e0bffe03 	ldbu	r2,-8(fp)
   48a18:	1004917a 	slli	r2,r2,5
   48a1c:	10880204 	addi	r2,r2,8200
   48a20:	1009883a 	mov	r4,r2
   48a24:	0047e600 	call	47e60 <IINCHIP_READ>
   48a28:	10803fcc 	andi	r2,r2,255
   48a2c:	e0bffd8d 	sth	r2,-10(fp)
        val1 = (val1 << 8) + IINCHIP_READ(Sn_TX_FSR1(s));
   48a30:	e0bffd8b 	ldhu	r2,-10(fp)
   48a34:	1004923a 	slli	r2,r2,8
   48a38:	1021883a 	mov	r16,r2
   48a3c:	e0bffe03 	ldbu	r2,-8(fp)
   48a40:	1004917a 	slli	r2,r2,5
   48a44:	10884204 	addi	r2,r2,8456
   48a48:	1009883a 	mov	r4,r2
   48a4c:	0047e600 	call	47e60 <IINCHIP_READ>
   48a50:	10803fcc 	andi	r2,r2,255
   48a54:	8085883a 	add	r2,r16,r2
   48a58:	e0bffd8d 	sth	r2,-10(fp)
        if (val1 != 0)
   48a5c:	e0bffd8b 	ldhu	r2,-10(fp)
   48a60:	10001226 	beq	r2,zero,48aac <getSn_TX_FSR+0xbc>
        {
            val = IINCHIP_READ(Sn_TX_FSR0(s));
   48a64:	e0bffe03 	ldbu	r2,-8(fp)
   48a68:	1004917a 	slli	r2,r2,5
   48a6c:	10880204 	addi	r2,r2,8200
   48a70:	1009883a 	mov	r4,r2
   48a74:	0047e600 	call	47e60 <IINCHIP_READ>
   48a78:	10803fcc 	andi	r2,r2,255
   48a7c:	e0bffd0d 	sth	r2,-12(fp)
            val = (val << 8) + IINCHIP_READ(Sn_TX_FSR1(s));
   48a80:	e0bffd0b 	ldhu	r2,-12(fp)
   48a84:	1004923a 	slli	r2,r2,8
   48a88:	1021883a 	mov	r16,r2
   48a8c:	e0bffe03 	ldbu	r2,-8(fp)
   48a90:	1004917a 	slli	r2,r2,5
   48a94:	10884204 	addi	r2,r2,8456
   48a98:	1009883a 	mov	r4,r2
   48a9c:	0047e600 	call	47e60 <IINCHIP_READ>
   48aa0:	10803fcc 	andi	r2,r2,255
   48aa4:	8085883a 	add	r2,r16,r2
   48aa8:	e0bffd0d 	sth	r2,-12(fp)
        }
    } while (val != val1);
   48aac:	e0fffd0b 	ldhu	r3,-12(fp)
   48ab0:	e0bffd8b 	ldhu	r2,-10(fp)
   48ab4:	18bfd71e 	bne	r3,r2,48a14 <__alt_mem_epcs_flash+0xfffc7a14>
    return val;
   48ab8:	e0bffd0b 	ldhu	r2,-12(fp)
}
   48abc:	e6ffff04 	addi	sp,fp,-4
   48ac0:	dfc00217 	ldw	ra,8(sp)
   48ac4:	df000117 	ldw	fp,4(sp)
   48ac8:	dc000017 	ldw	r16,0(sp)
   48acc:	dec00304 	addi	sp,sp,12
   48ad0:	f800283a 	ret

00048ad4 <getSn_RX_RSR>:
  @brief   get socket RX recv buf size

  This gives size of received data in receive buffer.
  */
uint16 getSn_RX_RSR(SOCKET s)                                                                                                           // 获取空闲接收缓存寄存器的值
{
   48ad4:	defffb04 	addi	sp,sp,-20
   48ad8:	dfc00415 	stw	ra,16(sp)
   48adc:	df000315 	stw	fp,12(sp)
   48ae0:	dc000215 	stw	r16,8(sp)
   48ae4:	df000304 	addi	fp,sp,12
   48ae8:	2005883a 	mov	r2,r4
   48aec:	e0bffe05 	stb	r2,-8(fp)
    uint16 val=0,val1=0;
   48af0:	e03ffd0d 	sth	zero,-12(fp)
   48af4:	e03ffd8d 	sth	zero,-10(fp)
    do
    {
        val1 = IINCHIP_READ(Sn_RX_RSR0(s));                                                                 // MCU读Sn_RX_RSR的低8位，并赋给val1
   48af8:	e0bffe03 	ldbu	r2,-8(fp)
   48afc:	1004917a 	slli	r2,r2,5
   48b00:	10898204 	addi	r2,r2,9736
   48b04:	1009883a 	mov	r4,r2
   48b08:	0047e600 	call	47e60 <IINCHIP_READ>
   48b0c:	10803fcc 	andi	r2,r2,255
   48b10:	e0bffd8d 	sth	r2,-10(fp)
        val1 = (val1 << 8) + IINCHIP_READ(Sn_RX_RSR1(s));           // 读高8位，并与低8位相加赋给val1
   48b14:	e0bffd8b 	ldhu	r2,-10(fp)
   48b18:	1004923a 	slli	r2,r2,8
   48b1c:	1021883a 	mov	r16,r2
   48b20:	e0bffe03 	ldbu	r2,-8(fp)
   48b24:	1004917a 	slli	r2,r2,5
   48b28:	1089c204 	addi	r2,r2,9992
   48b2c:	1009883a 	mov	r4,r2
   48b30:	0047e600 	call	47e60 <IINCHIP_READ>
   48b34:	10803fcc 	andi	r2,r2,255
   48b38:	8085883a 	add	r2,r16,r2
   48b3c:	e0bffd8d 	sth	r2,-10(fp)
        if(val1 != 0)                                                                                                                                                               // 若Sn_RX_RSR的值不为0，将其赋给val
   48b40:	e0bffd8b 	ldhu	r2,-10(fp)
   48b44:	10001226 	beq	r2,zero,48b90 <getSn_RX_RSR+0xbc>
        {
            val = IINCHIP_READ(Sn_RX_RSR0(s));
   48b48:	e0bffe03 	ldbu	r2,-8(fp)
   48b4c:	1004917a 	slli	r2,r2,5
   48b50:	10898204 	addi	r2,r2,9736
   48b54:	1009883a 	mov	r4,r2
   48b58:	0047e600 	call	47e60 <IINCHIP_READ>
   48b5c:	10803fcc 	andi	r2,r2,255
   48b60:	e0bffd0d 	sth	r2,-12(fp)
            val = (val << 8) + IINCHIP_READ(Sn_RX_RSR1(s));
   48b64:	e0bffd0b 	ldhu	r2,-12(fp)
   48b68:	1004923a 	slli	r2,r2,8
   48b6c:	1021883a 	mov	r16,r2
   48b70:	e0bffe03 	ldbu	r2,-8(fp)
   48b74:	1004917a 	slli	r2,r2,5
   48b78:	1089c204 	addi	r2,r2,9992
   48b7c:	1009883a 	mov	r4,r2
   48b80:	0047e600 	call	47e60 <IINCHIP_READ>
   48b84:	10803fcc 	andi	r2,r2,255
   48b88:	8085883a 	add	r2,r16,r2
   48b8c:	e0bffd0d 	sth	r2,-12(fp)
        }
    } while (val != val1);                                                                                                                                // 判断val与val1是否相等，若不等，重新返回do循环，若相等，跳出循环
   48b90:	e0fffd0b 	ldhu	r3,-12(fp)
   48b94:	e0bffd8b 	ldhu	r2,-10(fp)
   48b98:	18bfd71e 	bne	r3,r2,48af8 <__alt_mem_epcs_flash+0xfffc7af8>
    return val;                                                                                                                                                                  // 将val的值返回给getSn_RX_RSR
   48b9c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   48ba0:	e6ffff04 	addi	sp,fp,-4
   48ba4:	dfc00217 	ldw	ra,8(sp)
   48ba8:	df000117 	ldw	fp,4(sp)
   48bac:	dc000017 	ldw	r16,0(sp)
   48bb0:	dec00304 	addi	sp,sp,12
   48bb4:	f800283a 	ret

00048bb8 <send_data_processing>:

  This function read the Tx write pointer register and after copy the data in buffer update the Tx write pointer
  register. User should read upper byte first and lower byte later to get proper value.
  */
void send_data_processing(SOCKET s, uint8 *data, uint16 len)
{
   48bb8:	defff804 	addi	sp,sp,-32
   48bbc:	dfc00715 	stw	ra,28(sp)
   48bc0:	df000615 	stw	fp,24(sp)
   48bc4:	dc000515 	stw	r16,20(sp)
   48bc8:	df000604 	addi	fp,sp,24
   48bcc:	2007883a 	mov	r3,r4
   48bd0:	e17ffd15 	stw	r5,-12(fp)
   48bd4:	3005883a 	mov	r2,r6
   48bd8:	e0fffc05 	stb	r3,-16(fp)
   48bdc:	e0bffe0d 	sth	r2,-8(fp)
    uint16 ptr =0;
   48be0:	e03ffa0d 	sth	zero,-24(fp)
    uint32 addrbsb =0;
   48be4:	e03ffb15 	stw	zero,-20(fp)
    if(len == 0)
   48be8:	e0bffe0b 	ldhu	r2,-8(fp)
   48bec:	10003726 	beq	r2,zero,48ccc <send_data_processing+0x114>
    {
        return;
    }


    ptr = IINCHIP_READ( Sn_TX_WR0(s) );
   48bf0:	e0bffc03 	ldbu	r2,-16(fp)
   48bf4:	1004917a 	slli	r2,r2,5
   48bf8:	10890204 	addi	r2,r2,9224
   48bfc:	1009883a 	mov	r4,r2
   48c00:	0047e600 	call	47e60 <IINCHIP_READ>
   48c04:	10803fcc 	andi	r2,r2,255
   48c08:	e0bffa0d 	sth	r2,-24(fp)
    ptr = ((ptr & 0x00ff) << 8) + IINCHIP_READ(Sn_TX_WR1(s));
   48c0c:	e0bffa0b 	ldhu	r2,-24(fp)
   48c10:	1004923a 	slli	r2,r2,8
   48c14:	1021883a 	mov	r16,r2
   48c18:	e0bffc03 	ldbu	r2,-16(fp)
   48c1c:	1004917a 	slli	r2,r2,5
   48c20:	10894204 	addi	r2,r2,9480
   48c24:	1009883a 	mov	r4,r2
   48c28:	0047e600 	call	47e60 <IINCHIP_READ>
   48c2c:	10803fcc 	andi	r2,r2,255
   48c30:	8085883a 	add	r2,r16,r2
   48c34:	e0bffa0d 	sth	r2,-24(fp)

    addrbsb = (uint32)(ptr<<8) + (s<<5) + 0x10;
   48c38:	e0bffa0b 	ldhu	r2,-24(fp)
   48c3c:	1004923a 	slli	r2,r2,8
   48c40:	1007883a 	mov	r3,r2
   48c44:	e0bffc03 	ldbu	r2,-16(fp)
   48c48:	1004917a 	slli	r2,r2,5
   48c4c:	1885883a 	add	r2,r3,r2
   48c50:	10800404 	addi	r2,r2,16
   48c54:	e0bffb15 	stw	r2,-20(fp)
    wiz_write_buf(addrbsb, data, len);
   48c58:	e0bffe0b 	ldhu	r2,-8(fp)
   48c5c:	100d883a 	mov	r6,r2
   48c60:	e17ffd17 	ldw	r5,-12(fp)
   48c64:	e13ffb17 	ldw	r4,-20(fp)
   48c68:	0047f040 	call	47f04 <wiz_write_buf>

    ptr += len;
   48c6c:	e0fffa0b 	ldhu	r3,-24(fp)
   48c70:	e0bffe0b 	ldhu	r2,-8(fp)
   48c74:	1885883a 	add	r2,r3,r2
   48c78:	e0bffa0d 	sth	r2,-24(fp)
    IINCHIP_WRITE( Sn_TX_WR0(s) ,(uint8)((ptr & 0xff00) >> 8));
   48c7c:	e0bffc03 	ldbu	r2,-16(fp)
   48c80:	1004917a 	slli	r2,r2,5
   48c84:	10890204 	addi	r2,r2,9224
   48c88:	1007883a 	mov	r3,r2
   48c8c:	e0bffa0b 	ldhu	r2,-24(fp)
   48c90:	1004d23a 	srli	r2,r2,8
   48c94:	10803fcc 	andi	r2,r2,255
   48c98:	100b883a 	mov	r5,r2
   48c9c:	1809883a 	mov	r4,r3
   48ca0:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
    IINCHIP_WRITE( Sn_TX_WR1(s),(uint8)(ptr & 0x00ff));
   48ca4:	e0bffc03 	ldbu	r2,-16(fp)
   48ca8:	1004917a 	slli	r2,r2,5
   48cac:	10894204 	addi	r2,r2,9480
   48cb0:	1007883a 	mov	r3,r2
   48cb4:	e0bffa0b 	ldhu	r2,-24(fp)
   48cb8:	10803fcc 	andi	r2,r2,255
   48cbc:	100b883a 	mov	r5,r2
   48cc0:	1809883a 	mov	r4,r3
   48cc4:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
   48cc8:	00000106 	br	48cd0 <send_data_processing+0x118>
{
    uint16 ptr =0;
    uint32 addrbsb =0;
    if(len == 0)
    {
        return;
   48ccc:	0001883a 	nop
    wiz_write_buf(addrbsb, data, len);

    ptr += len;
    IINCHIP_WRITE( Sn_TX_WR0(s) ,(uint8)((ptr & 0xff00) >> 8));
    IINCHIP_WRITE( Sn_TX_WR1(s),(uint8)(ptr & 0x00ff));
}
   48cd0:	e6ffff04 	addi	sp,fp,-4
   48cd4:	dfc00217 	ldw	ra,8(sp)
   48cd8:	df000117 	ldw	fp,4(sp)
   48cdc:	dc000017 	ldw	r16,0(sp)
   48ce0:	dec00304 	addi	sp,sp,12
   48ce4:	f800283a 	ret

00048ce8 <recv_data_processing>:
  This function read the Rx read pointer register
  and after copy the data from receive buffer update the Rx write pointer register.
  User should read upper byte first and lower byte later to get proper value.
  */
void recv_data_processing(SOCKET s, uint8 *data, uint16 len)
{
   48ce8:	defff804 	addi	sp,sp,-32
   48cec:	dfc00715 	stw	ra,28(sp)
   48cf0:	df000615 	stw	fp,24(sp)
   48cf4:	dc000515 	stw	r16,20(sp)
   48cf8:	df000604 	addi	fp,sp,24
   48cfc:	2007883a 	mov	r3,r4
   48d00:	e17ffd15 	stw	r5,-12(fp)
   48d04:	3005883a 	mov	r2,r6
   48d08:	e0fffc05 	stb	r3,-16(fp)
   48d0c:	e0bffe0d 	sth	r2,-8(fp)
    uint16 ptr = 0;
   48d10:	e03ffa0d 	sth	zero,-24(fp)
    uint32 addrbsb = 0;
   48d14:	e03ffb15 	stw	zero,-20(fp)

    if(len == 0)                                          // 若接收数据的长度为0，则串口打印“"CH: 0 Unexpected2 length 0”
   48d18:	e0bffe0b 	ldhu	r2,-8(fp)
   48d1c:	10003726 	beq	r2,zero,48dfc <recv_data_processing+0x114>
        return;
    }

    // MCU读取Sn_RX_RD接收写指针寄存器的值，并赋给ptr
    // Sn_RX_RD保存接收缓存中数据的首地址，若有数据接收，则接收完后该寄存器值要更新
    ptr = IINCHIP_READ( Sn_RX_RD0(s) );
   48d20:	e0bffc03 	ldbu	r2,-16(fp)
   48d24:	1004917a 	slli	r2,r2,5
   48d28:	108a0204 	addi	r2,r2,10248
   48d2c:	1009883a 	mov	r4,r2
   48d30:	0047e600 	call	47e60 <IINCHIP_READ>
   48d34:	10803fcc 	andi	r2,r2,255
   48d38:	e0bffa0d 	sth	r2,-24(fp)
    ptr = ((ptr & 0x00ff) << 8) + IINCHIP_READ( Sn_RX_RD1(s) );
   48d3c:	e0bffa0b 	ldhu	r2,-24(fp)
   48d40:	1004923a 	slli	r2,r2,8
   48d44:	1021883a 	mov	r16,r2
   48d48:	e0bffc03 	ldbu	r2,-16(fp)
   48d4c:	1004917a 	slli	r2,r2,5
   48d50:	108a4204 	addi	r2,r2,10504
   48d54:	1009883a 	mov	r4,r2
   48d58:	0047e600 	call	47e60 <IINCHIP_READ>
   48d5c:	10803fcc 	andi	r2,r2,255
   48d60:	8085883a 	add	r2,r16,r2
   48d64:	e0bffa0d 	sth	r2,-24(fp)

    addrbsb = (uint32)(ptr<<8) + (s<<5) + 0x18;           // 获取接收到的数据的绝对地址
   48d68:	e0bffa0b 	ldhu	r2,-24(fp)
   48d6c:	1004923a 	slli	r2,r2,8
   48d70:	1007883a 	mov	r3,r2
   48d74:	e0bffc03 	ldbu	r2,-16(fp)
   48d78:	1004917a 	slli	r2,r2,5
   48d7c:	1885883a 	add	r2,r3,r2
   48d80:	10800604 	addi	r2,r2,24
   48d84:	e0bffb15 	stw	r2,-20(fp)
    wiz_read_buf(addrbsb, data, len);                                                     // 通过绝对地址，将接收到的数据发给MCU
   48d88:	e0bffe0b 	ldhu	r2,-8(fp)
   48d8c:	100d883a 	mov	r6,r2
   48d90:	e17ffd17 	ldw	r5,-12(fp)
   48d94:	e13ffb17 	ldw	r4,-20(fp)
   48d98:	0047fc80 	call	47fc8 <wiz_read_buf>

    // 更新Sn_RX_RD寄存器的值
    ptr += len;                                                                                                             //
   48d9c:	e0fffa0b 	ldhu	r3,-24(fp)
   48da0:	e0bffe0b 	ldhu	r2,-8(fp)
   48da4:	1885883a 	add	r2,r3,r2
   48da8:	e0bffa0d 	sth	r2,-24(fp)
    IINCHIP_WRITE( Sn_RX_RD0(s), (uint8)((ptr & 0xff00) >> 8));
   48dac:	e0bffc03 	ldbu	r2,-16(fp)
   48db0:	1004917a 	slli	r2,r2,5
   48db4:	108a0204 	addi	r2,r2,10248
   48db8:	1007883a 	mov	r3,r2
   48dbc:	e0bffa0b 	ldhu	r2,-24(fp)
   48dc0:	1004d23a 	srli	r2,r2,8
   48dc4:	10803fcc 	andi	r2,r2,255
   48dc8:	100b883a 	mov	r5,r2
   48dcc:	1809883a 	mov	r4,r3
   48dd0:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
    IINCHIP_WRITE( Sn_RX_RD1(s), (uint8)(ptr & 0x00ff));
   48dd4:	e0bffc03 	ldbu	r2,-16(fp)
   48dd8:	1004917a 	slli	r2,r2,5
   48ddc:	108a4204 	addi	r2,r2,10504
   48de0:	1007883a 	mov	r3,r2
   48de4:	e0bffa0b 	ldhu	r2,-24(fp)
   48de8:	10803fcc 	andi	r2,r2,255
   48dec:	100b883a 	mov	r5,r2
   48df0:	1809883a 	mov	r4,r3
   48df4:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
   48df8:	00000106 	br	48e00 <recv_data_processing+0x118>
    uint16 ptr = 0;
    uint32 addrbsb = 0;

    if(len == 0)                                          // 若接收数据的长度为0，则串口打印“"CH: 0 Unexpected2 length 0”
    {
        return;
   48dfc:	0001883a 	nop

    // 更新Sn_RX_RD寄存器的值
    ptr += len;                                                                                                             //
    IINCHIP_WRITE( Sn_RX_RD0(s), (uint8)((ptr & 0xff00) >> 8));
    IINCHIP_WRITE( Sn_RX_RD1(s), (uint8)(ptr & 0x00ff));
}
   48e00:	e6ffff04 	addi	sp,fp,-4
   48e04:	dfc00217 	ldw	ra,8(sp)
   48e08:	df000117 	ldw	fp,4(sp)
   48e0c:	dc000017 	ldw	r16,0(sp)
   48e10:	dec00304 	addi	sp,sp,12
   48e14:	f800283a 	ret

00048e18 <setSn_IR>:

void setSn_IR(uint8 s, uint8 val)
{
   48e18:	defffc04 	addi	sp,sp,-16
   48e1c:	dfc00315 	stw	ra,12(sp)
   48e20:	df000215 	stw	fp,8(sp)
   48e24:	df000204 	addi	fp,sp,8
   48e28:	2007883a 	mov	r3,r4
   48e2c:	2805883a 	mov	r2,r5
   48e30:	e0fffe05 	stb	r3,-8(fp)
   48e34:	e0bfff05 	stb	r2,-4(fp)
    IINCHIP_WRITE(Sn_IR(s), val);
   48e38:	e0bffe03 	ldbu	r2,-8(fp)
   48e3c:	1004917a 	slli	r2,r2,5
   48e40:	10808204 	addi	r2,r2,520
   48e44:	1007883a 	mov	r3,r2
   48e48:	e0bfff03 	ldbu	r2,-4(fp)
   48e4c:	100b883a 	mov	r5,r2
   48e50:	1809883a 	mov	r4,r3
   48e54:	0047dd40 	call	47dd4 <IINCHIP_WRITE>
}
   48e58:	0001883a 	nop
   48e5c:	e037883a 	mov	sp,fp
   48e60:	dfc00117 	ldw	ra,4(sp)
   48e64:	df000017 	ldw	fp,0(sp)
   48e68:	dec00204 	addi	sp,sp,8
   48e6c:	f800283a 	ret

00048e70 <__divsi3>:
   48e70:	20001b16 	blt	r4,zero,48ee0 <__divsi3+0x70>
   48e74:	000f883a 	mov	r7,zero
   48e78:	28001616 	blt	r5,zero,48ed4 <__divsi3+0x64>
   48e7c:	200d883a 	mov	r6,r4
   48e80:	29001a2e 	bgeu	r5,r4,48eec <__divsi3+0x7c>
   48e84:	00800804 	movi	r2,32
   48e88:	00c00044 	movi	r3,1
   48e8c:	00000106 	br	48e94 <__divsi3+0x24>
   48e90:	10000d26 	beq	r2,zero,48ec8 <__divsi3+0x58>
   48e94:	294b883a 	add	r5,r5,r5
   48e98:	10bfffc4 	addi	r2,r2,-1
   48e9c:	18c7883a 	add	r3,r3,r3
   48ea0:	293ffb36 	bltu	r5,r4,48e90 <__alt_mem_epcs_flash+0xfffc7e90>
   48ea4:	0005883a 	mov	r2,zero
   48ea8:	18000726 	beq	r3,zero,48ec8 <__divsi3+0x58>
   48eac:	0005883a 	mov	r2,zero
   48eb0:	31400236 	bltu	r6,r5,48ebc <__divsi3+0x4c>
   48eb4:	314dc83a 	sub	r6,r6,r5
   48eb8:	10c4b03a 	or	r2,r2,r3
   48ebc:	1806d07a 	srli	r3,r3,1
   48ec0:	280ad07a 	srli	r5,r5,1
   48ec4:	183ffa1e 	bne	r3,zero,48eb0 <__alt_mem_epcs_flash+0xfffc7eb0>
   48ec8:	38000126 	beq	r7,zero,48ed0 <__divsi3+0x60>
   48ecc:	0085c83a 	sub	r2,zero,r2
   48ed0:	f800283a 	ret
   48ed4:	014bc83a 	sub	r5,zero,r5
   48ed8:	39c0005c 	xori	r7,r7,1
   48edc:	003fe706 	br	48e7c <__alt_mem_epcs_flash+0xfffc7e7c>
   48ee0:	0109c83a 	sub	r4,zero,r4
   48ee4:	01c00044 	movi	r7,1
   48ee8:	003fe306 	br	48e78 <__alt_mem_epcs_flash+0xfffc7e78>
   48eec:	00c00044 	movi	r3,1
   48ef0:	003fee06 	br	48eac <__alt_mem_epcs_flash+0xfffc7eac>

00048ef4 <__modsi3>:
   48ef4:	20001716 	blt	r4,zero,48f54 <__modsi3+0x60>
   48ef8:	000f883a 	mov	r7,zero
   48efc:	2005883a 	mov	r2,r4
   48f00:	28001216 	blt	r5,zero,48f4c <__modsi3+0x58>
   48f04:	2900162e 	bgeu	r5,r4,48f60 <__modsi3+0x6c>
   48f08:	01800804 	movi	r6,32
   48f0c:	00c00044 	movi	r3,1
   48f10:	00000106 	br	48f18 <__modsi3+0x24>
   48f14:	30000a26 	beq	r6,zero,48f40 <__modsi3+0x4c>
   48f18:	294b883a 	add	r5,r5,r5
   48f1c:	31bfffc4 	addi	r6,r6,-1
   48f20:	18c7883a 	add	r3,r3,r3
   48f24:	293ffb36 	bltu	r5,r4,48f14 <__alt_mem_epcs_flash+0xfffc7f14>
   48f28:	18000526 	beq	r3,zero,48f40 <__modsi3+0x4c>
   48f2c:	1806d07a 	srli	r3,r3,1
   48f30:	11400136 	bltu	r2,r5,48f38 <__modsi3+0x44>
   48f34:	1145c83a 	sub	r2,r2,r5
   48f38:	280ad07a 	srli	r5,r5,1
   48f3c:	183ffb1e 	bne	r3,zero,48f2c <__alt_mem_epcs_flash+0xfffc7f2c>
   48f40:	38000126 	beq	r7,zero,48f48 <__modsi3+0x54>
   48f44:	0085c83a 	sub	r2,zero,r2
   48f48:	f800283a 	ret
   48f4c:	014bc83a 	sub	r5,zero,r5
   48f50:	003fec06 	br	48f04 <__alt_mem_epcs_flash+0xfffc7f04>
   48f54:	0109c83a 	sub	r4,zero,r4
   48f58:	01c00044 	movi	r7,1
   48f5c:	003fe706 	br	48efc <__alt_mem_epcs_flash+0xfffc7efc>
   48f60:	00c00044 	movi	r3,1
   48f64:	003ff106 	br	48f2c <__alt_mem_epcs_flash+0xfffc7f2c>

00048f68 <__udivsi3>:
   48f68:	200d883a 	mov	r6,r4
   48f6c:	2900152e 	bgeu	r5,r4,48fc4 <__udivsi3+0x5c>
   48f70:	28001416 	blt	r5,zero,48fc4 <__udivsi3+0x5c>
   48f74:	00800804 	movi	r2,32
   48f78:	00c00044 	movi	r3,1
   48f7c:	00000206 	br	48f88 <__udivsi3+0x20>
   48f80:	10000e26 	beq	r2,zero,48fbc <__udivsi3+0x54>
   48f84:	28000516 	blt	r5,zero,48f9c <__udivsi3+0x34>
   48f88:	294b883a 	add	r5,r5,r5
   48f8c:	10bfffc4 	addi	r2,r2,-1
   48f90:	18c7883a 	add	r3,r3,r3
   48f94:	293ffa36 	bltu	r5,r4,48f80 <__alt_mem_epcs_flash+0xfffc7f80>
   48f98:	18000826 	beq	r3,zero,48fbc <__udivsi3+0x54>
   48f9c:	0005883a 	mov	r2,zero
   48fa0:	31400236 	bltu	r6,r5,48fac <__udivsi3+0x44>
   48fa4:	314dc83a 	sub	r6,r6,r5
   48fa8:	10c4b03a 	or	r2,r2,r3
   48fac:	1806d07a 	srli	r3,r3,1
   48fb0:	280ad07a 	srli	r5,r5,1
   48fb4:	183ffa1e 	bne	r3,zero,48fa0 <__alt_mem_epcs_flash+0xfffc7fa0>
   48fb8:	f800283a 	ret
   48fbc:	0005883a 	mov	r2,zero
   48fc0:	f800283a 	ret
   48fc4:	00c00044 	movi	r3,1
   48fc8:	003ff406 	br	48f9c <__alt_mem_epcs_flash+0xfffc7f9c>

00048fcc <__umodsi3>:
   48fcc:	2005883a 	mov	r2,r4
   48fd0:	2900122e 	bgeu	r5,r4,4901c <__umodsi3+0x50>
   48fd4:	28001116 	blt	r5,zero,4901c <__umodsi3+0x50>
   48fd8:	01800804 	movi	r6,32
   48fdc:	00c00044 	movi	r3,1
   48fe0:	00000206 	br	48fec <__umodsi3+0x20>
   48fe4:	30000c26 	beq	r6,zero,49018 <__umodsi3+0x4c>
   48fe8:	28000516 	blt	r5,zero,49000 <__umodsi3+0x34>
   48fec:	294b883a 	add	r5,r5,r5
   48ff0:	31bfffc4 	addi	r6,r6,-1
   48ff4:	18c7883a 	add	r3,r3,r3
   48ff8:	293ffa36 	bltu	r5,r4,48fe4 <__alt_mem_epcs_flash+0xfffc7fe4>
   48ffc:	18000626 	beq	r3,zero,49018 <__umodsi3+0x4c>
   49000:	1806d07a 	srli	r3,r3,1
   49004:	11400136 	bltu	r2,r5,4900c <__umodsi3+0x40>
   49008:	1145c83a 	sub	r2,r2,r5
   4900c:	280ad07a 	srli	r5,r5,1
   49010:	183ffb1e 	bne	r3,zero,49000 <__alt_mem_epcs_flash+0xfffc8000>
   49014:	f800283a 	ret
   49018:	f800283a 	ret
   4901c:	00c00044 	movi	r3,1
   49020:	003ff706 	br	49000 <__alt_mem_epcs_flash+0xfffc8000>

00049024 <memcpy>:
   49024:	defffd04 	addi	sp,sp,-12
   49028:	dfc00215 	stw	ra,8(sp)
   4902c:	dc400115 	stw	r17,4(sp)
   49030:	dc000015 	stw	r16,0(sp)
   49034:	00c003c4 	movi	r3,15
   49038:	2005883a 	mov	r2,r4
   4903c:	1980452e 	bgeu	r3,r6,49154 <memcpy+0x130>
   49040:	2906b03a 	or	r3,r5,r4
   49044:	18c000cc 	andi	r3,r3,3
   49048:	1800441e 	bne	r3,zero,4915c <memcpy+0x138>
   4904c:	347ffc04 	addi	r17,r6,-16
   49050:	8822d13a 	srli	r17,r17,4
   49054:	28c00104 	addi	r3,r5,4
   49058:	23400104 	addi	r13,r4,4
   4905c:	8820913a 	slli	r16,r17,4
   49060:	2b000204 	addi	r12,r5,8
   49064:	22c00204 	addi	r11,r4,8
   49068:	84000504 	addi	r16,r16,20
   4906c:	2a800304 	addi	r10,r5,12
   49070:	22400304 	addi	r9,r4,12
   49074:	2c21883a 	add	r16,r5,r16
   49078:	2811883a 	mov	r8,r5
   4907c:	200f883a 	mov	r7,r4
   49080:	41000017 	ldw	r4,0(r8)
   49084:	1fc00017 	ldw	ra,0(r3)
   49088:	63c00017 	ldw	r15,0(r12)
   4908c:	39000015 	stw	r4,0(r7)
   49090:	53800017 	ldw	r14,0(r10)
   49094:	6fc00015 	stw	ra,0(r13)
   49098:	5bc00015 	stw	r15,0(r11)
   4909c:	4b800015 	stw	r14,0(r9)
   490a0:	18c00404 	addi	r3,r3,16
   490a4:	39c00404 	addi	r7,r7,16
   490a8:	42000404 	addi	r8,r8,16
   490ac:	6b400404 	addi	r13,r13,16
   490b0:	63000404 	addi	r12,r12,16
   490b4:	5ac00404 	addi	r11,r11,16
   490b8:	52800404 	addi	r10,r10,16
   490bc:	4a400404 	addi	r9,r9,16
   490c0:	1c3fef1e 	bne	r3,r16,49080 <__alt_mem_epcs_flash+0xfffc8080>
   490c4:	89c00044 	addi	r7,r17,1
   490c8:	380e913a 	slli	r7,r7,4
   490cc:	310003cc 	andi	r4,r6,15
   490d0:	02c000c4 	movi	r11,3
   490d4:	11c7883a 	add	r3,r2,r7
   490d8:	29cb883a 	add	r5,r5,r7
   490dc:	5900212e 	bgeu	r11,r4,49164 <memcpy+0x140>
   490e0:	1813883a 	mov	r9,r3
   490e4:	2811883a 	mov	r8,r5
   490e8:	200f883a 	mov	r7,r4
   490ec:	42800017 	ldw	r10,0(r8)
   490f0:	4a400104 	addi	r9,r9,4
   490f4:	39ffff04 	addi	r7,r7,-4
   490f8:	4abfff15 	stw	r10,-4(r9)
   490fc:	42000104 	addi	r8,r8,4
   49100:	59fffa36 	bltu	r11,r7,490ec <__alt_mem_epcs_flash+0xfffc80ec>
   49104:	213fff04 	addi	r4,r4,-4
   49108:	2008d0ba 	srli	r4,r4,2
   4910c:	318000cc 	andi	r6,r6,3
   49110:	21000044 	addi	r4,r4,1
   49114:	2109883a 	add	r4,r4,r4
   49118:	2109883a 	add	r4,r4,r4
   4911c:	1907883a 	add	r3,r3,r4
   49120:	290b883a 	add	r5,r5,r4
   49124:	30000626 	beq	r6,zero,49140 <memcpy+0x11c>
   49128:	198d883a 	add	r6,r3,r6
   4912c:	29c00003 	ldbu	r7,0(r5)
   49130:	18c00044 	addi	r3,r3,1
   49134:	29400044 	addi	r5,r5,1
   49138:	19ffffc5 	stb	r7,-1(r3)
   4913c:	19bffb1e 	bne	r3,r6,4912c <__alt_mem_epcs_flash+0xfffc812c>
   49140:	dfc00217 	ldw	ra,8(sp)
   49144:	dc400117 	ldw	r17,4(sp)
   49148:	dc000017 	ldw	r16,0(sp)
   4914c:	dec00304 	addi	sp,sp,12
   49150:	f800283a 	ret
   49154:	2007883a 	mov	r3,r4
   49158:	003ff206 	br	49124 <__alt_mem_epcs_flash+0xfffc8124>
   4915c:	2007883a 	mov	r3,r4
   49160:	003ff106 	br	49128 <__alt_mem_epcs_flash+0xfffc8128>
   49164:	200d883a 	mov	r6,r4
   49168:	003fee06 	br	49124 <__alt_mem_epcs_flash+0xfffc8124>

0004916c <memset>:
   4916c:	20c000cc 	andi	r3,r4,3
   49170:	2005883a 	mov	r2,r4
   49174:	18004426 	beq	r3,zero,49288 <memset+0x11c>
   49178:	31ffffc4 	addi	r7,r6,-1
   4917c:	30004026 	beq	r6,zero,49280 <memset+0x114>
   49180:	2813883a 	mov	r9,r5
   49184:	200d883a 	mov	r6,r4
   49188:	2007883a 	mov	r3,r4
   4918c:	00000406 	br	491a0 <memset+0x34>
   49190:	3a3fffc4 	addi	r8,r7,-1
   49194:	31800044 	addi	r6,r6,1
   49198:	38003926 	beq	r7,zero,49280 <memset+0x114>
   4919c:	400f883a 	mov	r7,r8
   491a0:	18c00044 	addi	r3,r3,1
   491a4:	32400005 	stb	r9,0(r6)
   491a8:	1a0000cc 	andi	r8,r3,3
   491ac:	403ff81e 	bne	r8,zero,49190 <__alt_mem_epcs_flash+0xfffc8190>
   491b0:	010000c4 	movi	r4,3
   491b4:	21c02d2e 	bgeu	r4,r7,4926c <memset+0x100>
   491b8:	29003fcc 	andi	r4,r5,255
   491bc:	200c923a 	slli	r6,r4,8
   491c0:	3108b03a 	or	r4,r6,r4
   491c4:	200c943a 	slli	r6,r4,16
   491c8:	218cb03a 	or	r6,r4,r6
   491cc:	010003c4 	movi	r4,15
   491d0:	21c0182e 	bgeu	r4,r7,49234 <memset+0xc8>
   491d4:	3b3ffc04 	addi	r12,r7,-16
   491d8:	6018d13a 	srli	r12,r12,4
   491dc:	1a000104 	addi	r8,r3,4
   491e0:	1ac00204 	addi	r11,r3,8
   491e4:	6008913a 	slli	r4,r12,4
   491e8:	1a800304 	addi	r10,r3,12
   491ec:	1813883a 	mov	r9,r3
   491f0:	21000504 	addi	r4,r4,20
   491f4:	1909883a 	add	r4,r3,r4
   491f8:	49800015 	stw	r6,0(r9)
   491fc:	41800015 	stw	r6,0(r8)
   49200:	59800015 	stw	r6,0(r11)
   49204:	51800015 	stw	r6,0(r10)
   49208:	42000404 	addi	r8,r8,16
   4920c:	4a400404 	addi	r9,r9,16
   49210:	5ac00404 	addi	r11,r11,16
   49214:	52800404 	addi	r10,r10,16
   49218:	413ff71e 	bne	r8,r4,491f8 <__alt_mem_epcs_flash+0xfffc81f8>
   4921c:	63000044 	addi	r12,r12,1
   49220:	6018913a 	slli	r12,r12,4
   49224:	39c003cc 	andi	r7,r7,15
   49228:	010000c4 	movi	r4,3
   4922c:	1b07883a 	add	r3,r3,r12
   49230:	21c00e2e 	bgeu	r4,r7,4926c <memset+0x100>
   49234:	1813883a 	mov	r9,r3
   49238:	3811883a 	mov	r8,r7
   4923c:	010000c4 	movi	r4,3
   49240:	49800015 	stw	r6,0(r9)
   49244:	423fff04 	addi	r8,r8,-4
   49248:	4a400104 	addi	r9,r9,4
   4924c:	223ffc36 	bltu	r4,r8,49240 <__alt_mem_epcs_flash+0xfffc8240>
   49250:	393fff04 	addi	r4,r7,-4
   49254:	2008d0ba 	srli	r4,r4,2
   49258:	39c000cc 	andi	r7,r7,3
   4925c:	21000044 	addi	r4,r4,1
   49260:	2109883a 	add	r4,r4,r4
   49264:	2109883a 	add	r4,r4,r4
   49268:	1907883a 	add	r3,r3,r4
   4926c:	38000526 	beq	r7,zero,49284 <memset+0x118>
   49270:	19cf883a 	add	r7,r3,r7
   49274:	19400005 	stb	r5,0(r3)
   49278:	18c00044 	addi	r3,r3,1
   4927c:	38fffd1e 	bne	r7,r3,49274 <__alt_mem_epcs_flash+0xfffc8274>
   49280:	f800283a 	ret
   49284:	f800283a 	ret
   49288:	2007883a 	mov	r3,r4
   4928c:	300f883a 	mov	r7,r6
   49290:	003fc706 	br	491b0 <__alt_mem_epcs_flash+0xfffc81b0>

00049294 <strcmp>:
   49294:	2144b03a 	or	r2,r4,r5
   49298:	108000cc 	andi	r2,r2,3
   4929c:	1000171e 	bne	r2,zero,492fc <strcmp+0x68>
   492a0:	20800017 	ldw	r2,0(r4)
   492a4:	28c00017 	ldw	r3,0(r5)
   492a8:	10c0141e 	bne	r2,r3,492fc <strcmp+0x68>
   492ac:	027fbff4 	movhi	r9,65279
   492b0:	4a7fbfc4 	addi	r9,r9,-257
   492b4:	0086303a 	nor	r3,zero,r2
   492b8:	02202074 	movhi	r8,32897
   492bc:	1245883a 	add	r2,r2,r9
   492c0:	42202004 	addi	r8,r8,-32640
   492c4:	10c4703a 	and	r2,r2,r3
   492c8:	1204703a 	and	r2,r2,r8
   492cc:	10000226 	beq	r2,zero,492d8 <strcmp+0x44>
   492d0:	00002306 	br	49360 <strcmp+0xcc>
   492d4:	1000221e 	bne	r2,zero,49360 <strcmp+0xcc>
   492d8:	21000104 	addi	r4,r4,4
   492dc:	20c00017 	ldw	r3,0(r4)
   492e0:	29400104 	addi	r5,r5,4
   492e4:	29800017 	ldw	r6,0(r5)
   492e8:	1a4f883a 	add	r7,r3,r9
   492ec:	00c4303a 	nor	r2,zero,r3
   492f0:	3884703a 	and	r2,r7,r2
   492f4:	1204703a 	and	r2,r2,r8
   492f8:	19bff626 	beq	r3,r6,492d4 <__alt_mem_epcs_flash+0xfffc82d4>
   492fc:	20800003 	ldbu	r2,0(r4)
   49300:	10c03fcc 	andi	r3,r2,255
   49304:	18c0201c 	xori	r3,r3,128
   49308:	18ffe004 	addi	r3,r3,-128
   4930c:	18000c26 	beq	r3,zero,49340 <strcmp+0xac>
   49310:	29800007 	ldb	r6,0(r5)
   49314:	19800326 	beq	r3,r6,49324 <strcmp+0x90>
   49318:	00001306 	br	49368 <strcmp+0xd4>
   4931c:	29800007 	ldb	r6,0(r5)
   49320:	11800b1e 	bne	r2,r6,49350 <strcmp+0xbc>
   49324:	21000044 	addi	r4,r4,1
   49328:	20c00003 	ldbu	r3,0(r4)
   4932c:	29400044 	addi	r5,r5,1
   49330:	18803fcc 	andi	r2,r3,255
   49334:	1080201c 	xori	r2,r2,128
   49338:	10bfe004 	addi	r2,r2,-128
   4933c:	103ff71e 	bne	r2,zero,4931c <__alt_mem_epcs_flash+0xfffc831c>
   49340:	0007883a 	mov	r3,zero
   49344:	28800003 	ldbu	r2,0(r5)
   49348:	1885c83a 	sub	r2,r3,r2
   4934c:	f800283a 	ret
   49350:	28800003 	ldbu	r2,0(r5)
   49354:	18c03fcc 	andi	r3,r3,255
   49358:	1885c83a 	sub	r2,r3,r2
   4935c:	f800283a 	ret
   49360:	0005883a 	mov	r2,zero
   49364:	f800283a 	ret
   49368:	10c03fcc 	andi	r3,r2,255
   4936c:	003ff506 	br	49344 <__alt_mem_epcs_flash+0xfffc8344>

00049370 <strlen>:
   49370:	208000cc 	andi	r2,r4,3
   49374:	10002026 	beq	r2,zero,493f8 <strlen+0x88>
   49378:	20800007 	ldb	r2,0(r4)
   4937c:	10002026 	beq	r2,zero,49400 <strlen+0x90>
   49380:	2005883a 	mov	r2,r4
   49384:	00000206 	br	49390 <strlen+0x20>
   49388:	10c00007 	ldb	r3,0(r2)
   4938c:	18001826 	beq	r3,zero,493f0 <strlen+0x80>
   49390:	10800044 	addi	r2,r2,1
   49394:	10c000cc 	andi	r3,r2,3
   49398:	183ffb1e 	bne	r3,zero,49388 <__alt_mem_epcs_flash+0xfffc8388>
   4939c:	10c00017 	ldw	r3,0(r2)
   493a0:	01ffbff4 	movhi	r7,65279
   493a4:	39ffbfc4 	addi	r7,r7,-257
   493a8:	00ca303a 	nor	r5,zero,r3
   493ac:	01a02074 	movhi	r6,32897
   493b0:	19c7883a 	add	r3,r3,r7
   493b4:	31a02004 	addi	r6,r6,-32640
   493b8:	1946703a 	and	r3,r3,r5
   493bc:	1986703a 	and	r3,r3,r6
   493c0:	1800091e 	bne	r3,zero,493e8 <strlen+0x78>
   493c4:	10800104 	addi	r2,r2,4
   493c8:	10c00017 	ldw	r3,0(r2)
   493cc:	19cb883a 	add	r5,r3,r7
   493d0:	00c6303a 	nor	r3,zero,r3
   493d4:	28c6703a 	and	r3,r5,r3
   493d8:	1986703a 	and	r3,r3,r6
   493dc:	183ff926 	beq	r3,zero,493c4 <__alt_mem_epcs_flash+0xfffc83c4>
   493e0:	00000106 	br	493e8 <strlen+0x78>
   493e4:	10800044 	addi	r2,r2,1
   493e8:	10c00007 	ldb	r3,0(r2)
   493ec:	183ffd1e 	bne	r3,zero,493e4 <__alt_mem_epcs_flash+0xfffc83e4>
   493f0:	1105c83a 	sub	r2,r2,r4
   493f4:	f800283a 	ret
   493f8:	2005883a 	mov	r2,r4
   493fc:	003fe706 	br	4939c <__alt_mem_epcs_flash+0xfffc839c>
   49400:	0005883a 	mov	r2,zero
   49404:	f800283a 	ret

00049408 <strncmp>:
   49408:	30003126 	beq	r6,zero,494d0 <strncmp+0xc8>
   4940c:	2144b03a 	or	r2,r4,r5
   49410:	108000cc 	andi	r2,r2,3
   49414:	10001e1e 	bne	r2,zero,49490 <strncmp+0x88>
   49418:	024000c4 	movi	r9,3
   4941c:	49801c2e 	bgeu	r9,r6,49490 <strncmp+0x88>
   49420:	20800017 	ldw	r2,0(r4)
   49424:	28c00017 	ldw	r3,0(r5)
   49428:	10c0191e 	bne	r2,r3,49490 <strncmp+0x88>
   4942c:	31bfff04 	addi	r6,r6,-4
   49430:	30002726 	beq	r6,zero,494d0 <strncmp+0xc8>
   49434:	02ffbff4 	movhi	r11,65279
   49438:	5affbfc4 	addi	r11,r11,-257
   4943c:	0086303a 	nor	r3,zero,r2
   49440:	02a02074 	movhi	r10,32897
   49444:	12c5883a 	add	r2,r2,r11
   49448:	52a02004 	addi	r10,r10,-32640
   4944c:	10c4703a 	and	r2,r2,r3
   49450:	1284703a 	and	r2,r2,r10
   49454:	10000b26 	beq	r2,zero,49484 <strncmp+0x7c>
   49458:	00001d06 	br	494d0 <strncmp+0xc8>
   4945c:	20c00017 	ldw	r3,0(r4)
   49460:	29c00017 	ldw	r7,0(r5)
   49464:	1ad1883a 	add	r8,r3,r11
   49468:	00c4303a 	nor	r2,zero,r3
   4946c:	4084703a 	and	r2,r8,r2
   49470:	1284703a 	and	r2,r2,r10
   49474:	19c0061e 	bne	r3,r7,49490 <strncmp+0x88>
   49478:	31bfff04 	addi	r6,r6,-4
   4947c:	30001426 	beq	r6,zero,494d0 <strncmp+0xc8>
   49480:	1000131e 	bne	r2,zero,494d0 <strncmp+0xc8>
   49484:	21000104 	addi	r4,r4,4
   49488:	29400104 	addi	r5,r5,4
   4948c:	49bff336 	bltu	r9,r6,4945c <__alt_mem_epcs_flash+0xfffc845c>
   49490:	28800007 	ldb	r2,0(r5)
   49494:	20c00007 	ldb	r3,0(r4)
   49498:	31bfffc4 	addi	r6,r6,-1
   4949c:	10c0081e 	bne	r2,r3,494c0 <strncmp+0xb8>
   494a0:	30000b26 	beq	r6,zero,494d0 <strncmp+0xc8>
   494a4:	10000a26 	beq	r2,zero,494d0 <strncmp+0xc8>
   494a8:	21000044 	addi	r4,r4,1
   494ac:	29400044 	addi	r5,r5,1
   494b0:	20800007 	ldb	r2,0(r4)
   494b4:	28c00007 	ldb	r3,0(r5)
   494b8:	31bfffc4 	addi	r6,r6,-1
   494bc:	10fff826 	beq	r2,r3,494a0 <__alt_mem_epcs_flash+0xfffc84a0>
   494c0:	20800003 	ldbu	r2,0(r4)
   494c4:	28c00003 	ldbu	r3,0(r5)
   494c8:	10c5c83a 	sub	r2,r2,r3
   494cc:	f800283a 	ret
   494d0:	0005883a 	mov	r2,zero
   494d4:	f800283a 	ret

000494d8 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   494d8:	defffc04 	addi	sp,sp,-16
   494dc:	dfc00315 	stw	ra,12(sp)
   494e0:	df000215 	stw	fp,8(sp)
   494e4:	df000204 	addi	fp,sp,8
   494e8:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   494ec:	d1600604 	addi	r5,gp,-32744
   494f0:	e13fff17 	ldw	r4,-4(fp)
   494f4:	004c08c0 	call	4c08c <alt_find_dev>
   494f8:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
   494fc:	e0bffe17 	ldw	r2,-8(fp)
   49500:	10000926 	beq	r2,zero,49528 <alt_flash_open_dev+0x50>
   49504:	e0bffe17 	ldw	r2,-8(fp)
   49508:	10800317 	ldw	r2,12(r2)
   4950c:	10000626 	beq	r2,zero,49528 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
   49510:	e0bffe17 	ldw	r2,-8(fp)
   49514:	10800317 	ldw	r2,12(r2)
   49518:	e17fff17 	ldw	r5,-4(fp)
   4951c:	e13ffe17 	ldw	r4,-8(fp)
   49520:	103ee83a 	callr	r2
   49524:	00000106 	br	4952c <alt_flash_open_dev+0x54>
  }

  return dev;
   49528:	e0bffe17 	ldw	r2,-8(fp)
}
   4952c:	e037883a 	mov	sp,fp
   49530:	dfc00117 	ldw	ra,4(sp)
   49534:	df000017 	ldw	fp,0(sp)
   49538:	dec00204 	addi	sp,sp,8
   4953c:	f800283a 	ret

00049540 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   49540:	defffd04 	addi	sp,sp,-12
   49544:	dfc00215 	stw	ra,8(sp)
   49548:	df000115 	stw	fp,4(sp)
   4954c:	df000104 	addi	fp,sp,4
   49550:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   49554:	e0bfff17 	ldw	r2,-4(fp)
   49558:	10000826 	beq	r2,zero,4957c <alt_flash_close_dev+0x3c>
   4955c:	e0bfff17 	ldw	r2,-4(fp)
   49560:	10800417 	ldw	r2,16(r2)
   49564:	10000526 	beq	r2,zero,4957c <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
   49568:	e0bfff17 	ldw	r2,-4(fp)
   4956c:	10800417 	ldw	r2,16(r2)
   49570:	e13fff17 	ldw	r4,-4(fp)
   49574:	103ee83a 	callr	r2
  }
  return;
   49578:	0001883a 	nop
   4957c:	0001883a 	nop
}
   49580:	e037883a 	mov	sp,fp
   49584:	dfc00117 	ldw	ra,4(sp)
   49588:	df000017 	ldw	fp,0(sp)
   4958c:	dec00204 	addi	sp,sp,8
   49590:	f800283a 	ret

00049594 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   49594:	defff904 	addi	sp,sp,-28
   49598:	dfc00615 	stw	ra,24(sp)
   4959c:	df000515 	stw	fp,20(sp)
   495a0:	df000504 	addi	fp,sp,20
   495a4:	e13ffc15 	stw	r4,-16(fp)
   495a8:	e17ffd15 	stw	r5,-12(fp)
   495ac:	e1bffe15 	stw	r6,-8(fp)
   495b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   495b4:	e0800217 	ldw	r2,8(fp)
   495b8:	d8800015 	stw	r2,0(sp)
   495bc:	e1ffff17 	ldw	r7,-4(fp)
   495c0:	e1bffe17 	ldw	r6,-8(fp)
   495c4:	e17ffd17 	ldw	r5,-12(fp)
   495c8:	e13ffc17 	ldw	r4,-16(fp)
   495cc:	00497440 	call	49744 <alt_iic_isr_register>
}  
   495d0:	e037883a 	mov	sp,fp
   495d4:	dfc00117 	ldw	ra,4(sp)
   495d8:	df000017 	ldw	fp,0(sp)
   495dc:	dec00204 	addi	sp,sp,8
   495e0:	f800283a 	ret

000495e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   495e4:	defff904 	addi	sp,sp,-28
   495e8:	df000615 	stw	fp,24(sp)
   495ec:	df000604 	addi	fp,sp,24
   495f0:	e13ffe15 	stw	r4,-8(fp)
   495f4:	e17fff15 	stw	r5,-4(fp)
   495f8:	e0bfff17 	ldw	r2,-4(fp)
   495fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49600:	0005303a 	rdctl	r2,status
   49604:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49608:	e0fffb17 	ldw	r3,-20(fp)
   4960c:	00bfff84 	movi	r2,-2
   49610:	1884703a 	and	r2,r3,r2
   49614:	1001703a 	wrctl	status,r2
  
  return context;
   49618:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4961c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   49620:	00c00044 	movi	r3,1
   49624:	e0bffa17 	ldw	r2,-24(fp)
   49628:	1884983a 	sll	r2,r3,r2
   4962c:	1007883a 	mov	r3,r2
   49630:	d0a01b17 	ldw	r2,-32660(gp)
   49634:	1884b03a 	or	r2,r3,r2
   49638:	d0a01b15 	stw	r2,-32660(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4963c:	d0a01b17 	ldw	r2,-32660(gp)
   49640:	100170fa 	wrctl	ienable,r2
   49644:	e0bffc17 	ldw	r2,-16(fp)
   49648:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4964c:	e0bffd17 	ldw	r2,-12(fp)
   49650:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   49654:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   49658:	0001883a 	nop
}
   4965c:	e037883a 	mov	sp,fp
   49660:	df000017 	ldw	fp,0(sp)
   49664:	dec00104 	addi	sp,sp,4
   49668:	f800283a 	ret

0004966c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4966c:	defff904 	addi	sp,sp,-28
   49670:	df000615 	stw	fp,24(sp)
   49674:	df000604 	addi	fp,sp,24
   49678:	e13ffe15 	stw	r4,-8(fp)
   4967c:	e17fff15 	stw	r5,-4(fp)
   49680:	e0bfff17 	ldw	r2,-4(fp)
   49684:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49688:	0005303a 	rdctl	r2,status
   4968c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49690:	e0fffb17 	ldw	r3,-20(fp)
   49694:	00bfff84 	movi	r2,-2
   49698:	1884703a 	and	r2,r3,r2
   4969c:	1001703a 	wrctl	status,r2
  
  return context;
   496a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   496a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   496a8:	00c00044 	movi	r3,1
   496ac:	e0bffa17 	ldw	r2,-24(fp)
   496b0:	1884983a 	sll	r2,r3,r2
   496b4:	0084303a 	nor	r2,zero,r2
   496b8:	1007883a 	mov	r3,r2
   496bc:	d0a01b17 	ldw	r2,-32660(gp)
   496c0:	1884703a 	and	r2,r3,r2
   496c4:	d0a01b15 	stw	r2,-32660(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   496c8:	d0a01b17 	ldw	r2,-32660(gp)
   496cc:	100170fa 	wrctl	ienable,r2
   496d0:	e0bffc17 	ldw	r2,-16(fp)
   496d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   496d8:	e0bffd17 	ldw	r2,-12(fp)
   496dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   496e0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   496e4:	0001883a 	nop
}
   496e8:	e037883a 	mov	sp,fp
   496ec:	df000017 	ldw	fp,0(sp)
   496f0:	dec00104 	addi	sp,sp,4
   496f4:	f800283a 	ret

000496f8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   496f8:	defffc04 	addi	sp,sp,-16
   496fc:	df000315 	stw	fp,12(sp)
   49700:	df000304 	addi	fp,sp,12
   49704:	e13ffe15 	stw	r4,-8(fp)
   49708:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4970c:	000530fa 	rdctl	r2,ienable
   49710:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   49714:	00c00044 	movi	r3,1
   49718:	e0bfff17 	ldw	r2,-4(fp)
   4971c:	1884983a 	sll	r2,r3,r2
   49720:	1007883a 	mov	r3,r2
   49724:	e0bffd17 	ldw	r2,-12(fp)
   49728:	1884703a 	and	r2,r3,r2
   4972c:	1004c03a 	cmpne	r2,r2,zero
   49730:	10803fcc 	andi	r2,r2,255
}
   49734:	e037883a 	mov	sp,fp
   49738:	df000017 	ldw	fp,0(sp)
   4973c:	dec00104 	addi	sp,sp,4
   49740:	f800283a 	ret

00049744 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   49744:	defff504 	addi	sp,sp,-44
   49748:	dfc00a15 	stw	ra,40(sp)
   4974c:	df000915 	stw	fp,36(sp)
   49750:	df000904 	addi	fp,sp,36
   49754:	e13ffc15 	stw	r4,-16(fp)
   49758:	e17ffd15 	stw	r5,-12(fp)
   4975c:	e1bffe15 	stw	r6,-8(fp)
   49760:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   49764:	00bffa84 	movi	r2,-22
   49768:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4976c:	e0bffd17 	ldw	r2,-12(fp)
   49770:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   49774:	e0bff817 	ldw	r2,-32(fp)
   49778:	10800808 	cmpgei	r2,r2,32
   4977c:	1000271e 	bne	r2,zero,4981c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49780:	0005303a 	rdctl	r2,status
   49784:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49788:	e0fffb17 	ldw	r3,-20(fp)
   4978c:	00bfff84 	movi	r2,-2
   49790:	1884703a 	and	r2,r3,r2
   49794:	1001703a 	wrctl	status,r2
  
  return context;
   49798:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4979c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   497a0:	008001b4 	movhi	r2,6
   497a4:	108f9604 	addi	r2,r2,15960
   497a8:	e0fff817 	ldw	r3,-32(fp)
   497ac:	180690fa 	slli	r3,r3,3
   497b0:	10c5883a 	add	r2,r2,r3
   497b4:	e0fffe17 	ldw	r3,-8(fp)
   497b8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   497bc:	008001b4 	movhi	r2,6
   497c0:	108f9604 	addi	r2,r2,15960
   497c4:	e0fff817 	ldw	r3,-32(fp)
   497c8:	180690fa 	slli	r3,r3,3
   497cc:	10c5883a 	add	r2,r2,r3
   497d0:	10800104 	addi	r2,r2,4
   497d4:	e0ffff17 	ldw	r3,-4(fp)
   497d8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   497dc:	e0bffe17 	ldw	r2,-8(fp)
   497e0:	10000526 	beq	r2,zero,497f8 <alt_iic_isr_register+0xb4>
   497e4:	e0bff817 	ldw	r2,-32(fp)
   497e8:	100b883a 	mov	r5,r2
   497ec:	e13ffc17 	ldw	r4,-16(fp)
   497f0:	00495e40 	call	495e4 <alt_ic_irq_enable>
   497f4:	00000406 	br	49808 <alt_iic_isr_register+0xc4>
   497f8:	e0bff817 	ldw	r2,-32(fp)
   497fc:	100b883a 	mov	r5,r2
   49800:	e13ffc17 	ldw	r4,-16(fp)
   49804:	004966c0 	call	4966c <alt_ic_irq_disable>
   49808:	e0bff715 	stw	r2,-36(fp)
   4980c:	e0bffa17 	ldw	r2,-24(fp)
   49810:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49814:	e0bff917 	ldw	r2,-28(fp)
   49818:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4981c:	e0bff717 	ldw	r2,-36(fp)
}
   49820:	e037883a 	mov	sp,fp
   49824:	dfc00117 	ldw	ra,4(sp)
   49828:	df000017 	ldw	fp,0(sp)
   4982c:	dec00204 	addi	sp,sp,8
   49830:	f800283a 	ret

00049834 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   49834:	defffc04 	addi	sp,sp,-16
   49838:	df000315 	stw	fp,12(sp)
   4983c:	df000304 	addi	fp,sp,12
   49840:	e13ffd15 	stw	r4,-12(fp)
   49844:	e17ffe15 	stw	r5,-8(fp)
   49848:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4984c:	e0fffe17 	ldw	r3,-8(fp)
   49850:	e0bffd17 	ldw	r2,-12(fp)
   49854:	18800c26 	beq	r3,r2,49888 <alt_load_section+0x54>
  {
    while( to != end )
   49858:	00000806 	br	4987c <alt_load_section+0x48>
    {
      *to++ = *from++;
   4985c:	e0bffe17 	ldw	r2,-8(fp)
   49860:	10c00104 	addi	r3,r2,4
   49864:	e0fffe15 	stw	r3,-8(fp)
   49868:	e0fffd17 	ldw	r3,-12(fp)
   4986c:	19000104 	addi	r4,r3,4
   49870:	e13ffd15 	stw	r4,-12(fp)
   49874:	18c00017 	ldw	r3,0(r3)
   49878:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4987c:	e0fffe17 	ldw	r3,-8(fp)
   49880:	e0bfff17 	ldw	r2,-4(fp)
   49884:	18bff51e 	bne	r3,r2,4985c <__alt_mem_epcs_flash+0xfffc885c>
    {
      *to++ = *from++;
    }
  }
}
   49888:	0001883a 	nop
   4988c:	e037883a 	mov	sp,fp
   49890:	df000017 	ldw	fp,0(sp)
   49894:	dec00104 	addi	sp,sp,4
   49898:	f800283a 	ret

0004989c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4989c:	defffe04 	addi	sp,sp,-8
   498a0:	dfc00115 	stw	ra,4(sp)
   498a4:	df000015 	stw	fp,0(sp)
   498a8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   498ac:	018001b4 	movhi	r6,6
   498b0:	31b35a04 	addi	r6,r6,-12952
   498b4:	014001b4 	movhi	r5,6
   498b8:	29646e04 	addi	r5,r5,-28232
   498bc:	010001b4 	movhi	r4,6
   498c0:	21246e04 	addi	r4,r4,-28232
   498c4:	00498340 	call	49834 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   498c8:	01800134 	movhi	r6,4
   498cc:	31809104 	addi	r6,r6,580
   498d0:	01400134 	movhi	r5,4
   498d4:	29400804 	addi	r5,r5,32
   498d8:	01000134 	movhi	r4,4
   498dc:	21000804 	addi	r4,r4,32
   498e0:	00498340 	call	49834 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   498e4:	018001b4 	movhi	r6,6
   498e8:	31a46e04 	addi	r6,r6,-28232
   498ec:	01400174 	movhi	r5,5
   498f0:	2973de04 	addi	r5,r5,-12424
   498f4:	01000174 	movhi	r4,5
   498f8:	2133de04 	addi	r4,r4,-12424
   498fc:	00498340 	call	49834 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   49900:	004bea00 	call	4bea0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   49904:	004c11c0 	call	4c11c <alt_icache_flush_all>
}
   49908:	0001883a 	nop
   4990c:	e037883a 	mov	sp,fp
   49910:	dfc00117 	ldw	ra,4(sp)
   49914:	df000017 	ldw	fp,0(sp)
   49918:	dec00204 	addi	sp,sp,8
   4991c:	f800283a 	ret

00049920 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   49920:	defffd04 	addi	sp,sp,-12
   49924:	dfc00215 	stw	ra,8(sp)
   49928:	df000115 	stw	fp,4(sp)
   4992c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   49930:	0009883a 	mov	r4,zero
   49934:	00499d00 	call	499d0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   49938:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4993c:	0049a080 	call	49a08 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   49940:	018001b4 	movhi	r6,6
   49944:	31a45e04 	addi	r6,r6,-28296
   49948:	014001b4 	movhi	r5,6
   4994c:	29645e04 	addi	r5,r5,-28296
   49950:	010001b4 	movhi	r4,6
   49954:	21245e04 	addi	r4,r4,-28296
   49958:	004c2b00 	call	4c2b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4995c:	004bfcc0 	call	4bfcc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   49960:	01000174 	movhi	r4,5
   49964:	21300b04 	addi	r4,r4,-16340
   49968:	004cbe40 	call	4cbe4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4996c:	d0a01c17 	ldw	r2,-32656(gp)
   49970:	d0e01d17 	ldw	r3,-32652(gp)
   49974:	d1201e17 	ldw	r4,-32648(gp)
   49978:	200d883a 	mov	r6,r4
   4997c:	180b883a 	mov	r5,r3
   49980:	1009883a 	mov	r4,r2
   49984:	00424580 	call	42458 <main>
   49988:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4998c:	01000044 	movi	r4,1
   49990:	004bdd00 	call	4bdd0 <close>
  exit (result);
   49994:	e13fff17 	ldw	r4,-4(fp)
   49998:	004cbf80 	call	4cbf8 <exit>

0004999c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4999c:	defffd04 	addi	sp,sp,-12
   499a0:	dfc00215 	stw	ra,8(sp)
   499a4:	df000115 	stw	fp,4(sp)
   499a8:	df000104 	addi	fp,sp,4
   499ac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   499b0:	d1600b04 	addi	r5,gp,-32724
   499b4:	e13fff17 	ldw	r4,-4(fp)
   499b8:	004bf280 	call	4bf28 <alt_dev_llist_insert>
}
   499bc:	e037883a 	mov	sp,fp
   499c0:	dfc00117 	ldw	ra,4(sp)
   499c4:	df000017 	ldw	fp,0(sp)
   499c8:	dec00204 	addi	sp,sp,8
   499cc:	f800283a 	ret

000499d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   499d0:	defffd04 	addi	sp,sp,-12
   499d4:	dfc00215 	stw	ra,8(sp)
   499d8:	df000115 	stw	fp,4(sp)
   499dc:	df000104 	addi	fp,sp,4
   499e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   499e4:	004c7880 	call	4c788 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   499e8:	00800044 	movi	r2,1
   499ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   499f0:	0001883a 	nop
   499f4:	e037883a 	mov	sp,fp
   499f8:	dfc00117 	ldw	ra,4(sp)
   499fc:	df000017 	ldw	fp,0(sp)
   49a00:	dec00204 	addi	sp,sp,8
   49a04:	f800283a 	ret

00049a08 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   49a08:	defffe04 	addi	sp,sp,-8
   49a0c:	dfc00115 	stw	ra,4(sp)
   49a10:	df000015 	stw	fp,0(sp)
   49a14:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( LED_TIMER, led_timer);
   49a18:	01c0fa04 	movi	r7,1000
   49a1c:	01800084 	movi	r6,2
   49a20:	000b883a 	mov	r5,zero
   49a24:	01000234 	movhi	r4,8
   49a28:	21082804 	addi	r4,r4,8352
   49a2c:	004b5b00 	call	4b5b0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( WATCHDOG, watchdog);
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH, epcs_flash);
   49a30:	010001b4 	movhi	r4,6
   49a34:	212d8904 	addi	r4,r4,-18908
   49a38:	0049abc0 	call	49abc <alt_epcs_flash_init>
    ALTERA_AVALON_FIFO_INIT ( LASER_FIFO, laser_fifo);
   49a3c:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( PROTOCOL_FIFO, protocol_fifo);
   49a40:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( SPIRD_FIFO, spird_fifo);
   49a44:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( SPIWR_FIFO, spiwr_fifo);
   49a48:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   49a4c:	000d883a 	mov	r6,zero
   49a50:	000b883a 	mov	r5,zero
   49a54:	010001b4 	movhi	r4,6
   49a58:	212dc604 	addi	r4,r4,-18664
   49a5c:	004ac340 	call	4ac34 <altera_avalon_jtag_uart_init>
   49a60:	010001b4 	movhi	r4,6
   49a64:	212dbc04 	addi	r4,r4,-18704
   49a68:	004999c0 	call	4999c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   49a6c:	0001883a 	nop
}
   49a70:	0001883a 	nop
   49a74:	e037883a 	mov	sp,fp
   49a78:	dfc00117 	ldw	ra,4(sp)
   49a7c:	df000017 	ldw	fp,0(sp)
   49a80:	dec00204 	addi	sp,sp,8
   49a84:	f800283a 	ret

00049a88 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
   49a88:	defffd04 	addi	sp,sp,-12
   49a8c:	dfc00215 	stw	ra,8(sp)
   49a90:	df000115 	stw	fp,4(sp)
   49a94:	df000104 	addi	fp,sp,4
   49a98:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
   49a9c:	d1600604 	addi	r5,gp,-32744
   49aa0:	e13fff17 	ldw	r4,-4(fp)
   49aa4:	004bf280 	call	4bf28 <alt_dev_llist_insert>
}
   49aa8:	e037883a 	mov	sp,fp
   49aac:	dfc00117 	ldw	ra,4(sp)
   49ab0:	df000017 	ldw	fp,0(sp)
   49ab4:	dec00204 	addi	sp,sp,8
   49ab8:	f800283a 	ret

00049abc <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
   49abc:	defffc04 	addi	sp,sp,-16
   49ac0:	dfc00315 	stw	ra,12(sp)
   49ac4:	df000215 	stw	fp,8(sp)
   49ac8:	df000204 	addi	fp,sp,8
   49acc:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
   49ad0:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
   49ad4:	e13fff17 	ldw	r4,-4(fp)
   49ad8:	0049b100 	call	49b10 <alt_epcs_flash_query>
   49adc:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
   49ae0:	e0bffe17 	ldw	r2,-8(fp)
   49ae4:	1000041e 	bne	r2,zero,49af8 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
   49ae8:	e0bfff17 	ldw	r2,-4(fp)
   49aec:	1009883a 	mov	r4,r2
   49af0:	0049a880 	call	49a88 <alt_flash_device_register>
   49af4:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
   49af8:	e0bffe17 	ldw	r2,-8(fp)
}
   49afc:	e037883a 	mov	sp,fp
   49b00:	dfc00117 	ldw	ra,4(sp)
   49b04:	df000017 	ldw	fp,0(sp)
   49b08:	dec00204 	addi	sp,sp,8
   49b0c:	f800283a 	ret

00049b10 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
   49b10:	defffc04 	addi	sp,sp,-16
   49b14:	dfc00315 	stw	ra,12(sp)
   49b18:	df000215 	stw	fp,8(sp)
   49b1c:	df000204 	addi	fp,sp,8
   49b20:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
   49b24:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
   49b28:	e0bfff17 	ldw	r2,-4(fp)
   49b2c:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
   49b30:	e0bfff17 	ldw	r2,-4(fp)
   49b34:	10802e17 	ldw	r2,184(r2)
   49b38:	1009883a 	mov	r4,r2
   49b3c:	004bac80 	call	4bac8 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
   49b40:	10c03fcc 	andi	r3,r2,255
   49b44:	e0bfff17 	ldw	r2,-4(fp)
   49b48:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
   49b4c:	e0bfff17 	ldw	r2,-4(fp)
   49b50:	10803017 	ldw	r2,192(r2)
   49b54:	10800598 	cmpnei	r2,r2,22
   49b58:	10000a1e 	bne	r2,zero,49b84 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
   49b5c:	e0bfff17 	ldw	r2,-4(fp)
   49b60:	00c02034 	movhi	r3,128
   49b64:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
   49b68:	e0bfff17 	ldw	r2,-4(fp)
   49b6c:	00c02004 	movi	r3,128
   49b70:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   49b74:	e0bfff17 	ldw	r2,-4(fp)
   49b78:	00c00074 	movhi	r3,1
   49b7c:	10c01015 	stw	r3,64(r2)
   49b80:	0000e006 	br	49f04 <alt_epcs_flash_query+0x3f4>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
   49b84:	e0bfff17 	ldw	r2,-4(fp)
   49b88:	10803017 	ldw	r2,192(r2)
   49b8c:	10800518 	cmpnei	r2,r2,20
   49b90:	10000a1e 	bne	r2,zero,49bbc <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
   49b94:	e0bfff17 	ldw	r2,-4(fp)
   49b98:	00c00834 	movhi	r3,32
   49b9c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
   49ba0:	e0bfff17 	ldw	r2,-4(fp)
   49ba4:	00c00804 	movi	r3,32
   49ba8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   49bac:	e0bfff17 	ldw	r2,-4(fp)
   49bb0:	00c00074 	movhi	r3,1
   49bb4:	10c01015 	stw	r3,64(r2)
   49bb8:	0000d206 	br	49f04 <alt_epcs_flash_query+0x3f4>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
   49bbc:	e0bfff17 	ldw	r2,-4(fp)
   49bc0:	10803017 	ldw	r2,192(r2)
   49bc4:	108004d8 	cmpnei	r2,r2,19
   49bc8:	10000a1e 	bne	r2,zero,49bf4 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
   49bcc:	e0bfff17 	ldw	r2,-4(fp)
   49bd0:	00c00434 	movhi	r3,16
   49bd4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
   49bd8:	e0bfff17 	ldw	r2,-4(fp)
   49bdc:	00c00404 	movi	r3,16
   49be0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   49be4:	e0bfff17 	ldw	r2,-4(fp)
   49be8:	00c00074 	movhi	r3,1
   49bec:	10c01015 	stw	r3,64(r2)
   49bf0:	0000c406 	br	49f04 <alt_epcs_flash_query+0x3f4>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
   49bf4:	e0bfff17 	ldw	r2,-4(fp)
   49bf8:	10803017 	ldw	r2,192(r2)
   49bfc:	10800498 	cmpnei	r2,r2,18
   49c00:	10000a1e 	bne	r2,zero,49c2c <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
   49c04:	e0bfff17 	ldw	r2,-4(fp)
   49c08:	00c00234 	movhi	r3,8
   49c0c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
   49c10:	e0bfff17 	ldw	r2,-4(fp)
   49c14:	00c00204 	movi	r3,8
   49c18:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   49c1c:	e0bfff17 	ldw	r2,-4(fp)
   49c20:	00c00074 	movhi	r3,1
   49c24:	10c01015 	stw	r3,64(r2)
   49c28:	0000b606 	br	49f04 <alt_epcs_flash_query+0x3f4>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
   49c2c:	e0bfff17 	ldw	r2,-4(fp)
   49c30:	10803017 	ldw	r2,192(r2)
   49c34:	10800418 	cmpnei	r2,r2,16
   49c38:	10000a1e 	bne	r2,zero,49c64 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
   49c3c:	e0bfff17 	ldw	r2,-4(fp)
   49c40:	00c000b4 	movhi	r3,2
   49c44:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
   49c48:	e0bfff17 	ldw	r2,-4(fp)
   49c4c:	00c00104 	movi	r3,4
   49c50:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
   49c54:	e0bfff17 	ldw	r2,-4(fp)
   49c58:	00e00014 	movui	r3,32768
   49c5c:	10c01015 	stw	r3,64(r2)
   49c60:	0000a806 	br	49f04 <alt_epcs_flash_query+0x3f4>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
   49c64:	e0bfff17 	ldw	r2,-4(fp)
   49c68:	10802e17 	ldw	r2,184(r2)
   49c6c:	1009883a 	mov	r4,r2
   49c70:	004bb300 	call	4bb30 <epcs_read_device_id>
   49c74:	1007883a 	mov	r3,r2
   49c78:	e0bfff17 	ldw	r2,-4(fp)
   49c7c:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
   49c80:	e0bfff17 	ldw	r2,-4(fp)
   49c84:	10c03017 	ldw	r3,192(r2)
   49c88:	00804034 	movhi	r2,256
   49c8c:	10bfffc4 	addi	r2,r2,-1
   49c90:	1886703a 	and	r3,r3,r2
   49c94:	00800874 	movhi	r2,33
   49c98:	10ae8544 	addi	r2,r2,-17899
   49c9c:	18800a1e 	bne	r3,r2,49cc8 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
   49ca0:	e0bfff17 	ldw	r2,-4(fp)
   49ca4:	00c00834 	movhi	r3,32
   49ca8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
   49cac:	e0bfff17 	ldw	r2,-4(fp)
   49cb0:	00c00804 	movi	r3,32
   49cb4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49cb8:	e0bfff17 	ldw	r2,-4(fp)
   49cbc:	00c00074 	movhi	r3,1
   49cc0:	10c01015 	stw	r3,64(r2)
   49cc4:	00008f06 	br	49f04 <alt_epcs_flash_query+0x3f4>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
   49cc8:	e0bfff17 	ldw	r2,-4(fp)
   49ccc:	10c03017 	ldw	r3,192(r2)
   49cd0:	00804034 	movhi	r2,256
   49cd4:	10bfffc4 	addi	r2,r2,-1
   49cd8:	1886703a 	and	r3,r3,r2
   49cdc:	00800874 	movhi	r2,33
   49ce0:	10ae8584 	addi	r2,r2,-17898
   49ce4:	18800a1e 	bne	r3,r2,49d10 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
   49ce8:	e0bfff17 	ldw	r2,-4(fp)
   49cec:	00c01034 	movhi	r3,64
   49cf0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
   49cf4:	e0bfff17 	ldw	r2,-4(fp)
   49cf8:	00c01004 	movi	r3,64
   49cfc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49d00:	e0bfff17 	ldw	r2,-4(fp)
   49d04:	00c00074 	movhi	r3,1
   49d08:	10c01015 	stw	r3,64(r2)
   49d0c:	00007d06 	br	49f04 <alt_epcs_flash_query+0x3f4>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0xEF4016) /* EPCQ32 */
   49d10:	e0bfff17 	ldw	r2,-4(fp)
   49d14:	10c03017 	ldw	r3,192(r2)
   49d18:	00804034 	movhi	r2,256
   49d1c:	10bfffc4 	addi	r2,r2,-1
   49d20:	1886703a 	and	r3,r3,r2
   49d24:	00803bf4 	movhi	r2,239
   49d28:	10900584 	addi	r2,r2,16406
   49d2c:	18800a1e 	bne	r3,r2,49d58 <alt_epcs_flash_query+0x248>
        {
          flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
   49d30:	e0bfff17 	ldw	r2,-4(fp)
   49d34:	00c01034 	movhi	r3,64
   49d38:	10c00e15 	stw	r3,56(r2)
          flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
   49d3c:	e0bfff17 	ldw	r2,-4(fp)
   49d40:	00c01004 	movi	r3,64
   49d44:	10c00f15 	stw	r3,60(r2)
          flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49d48:	e0bfff17 	ldw	r2,-4(fp)
   49d4c:	00c00074 	movhi	r3,1
   49d50:	10c01015 	stw	r3,64(r2)
   49d54:	00006b06 	br	49f04 <alt_epcs_flash_query+0x3f4>
        }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
   49d58:	e0bfff17 	ldw	r2,-4(fp)
   49d5c:	10c03017 	ldw	r3,192(r2)
   49d60:	00804034 	movhi	r2,256
   49d64:	10bfffc4 	addi	r2,r2,-1
   49d68:	1886703a 	and	r3,r3,r2
   49d6c:	00800874 	movhi	r2,33
   49d70:	10ae85c4 	addi	r2,r2,-17897
   49d74:	18800a1e 	bne	r3,r2,49da0 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
   49d78:	e0bfff17 	ldw	r2,-4(fp)
   49d7c:	00c02034 	movhi	r3,128
   49d80:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
   49d84:	e0bfff17 	ldw	r2,-4(fp)
   49d88:	00c02004 	movi	r3,128
   49d8c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49d90:	e0bfff17 	ldw	r2,-4(fp)
   49d94:	00c00074 	movhi	r3,1
   49d98:	10c01015 	stw	r3,64(r2)
   49d9c:	00005906 	br	49f04 <alt_epcs_flash_query+0x3f4>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
   49da0:	e0bfff17 	ldw	r2,-4(fp)
   49da4:	10c03017 	ldw	r3,192(r2)
   49da8:	00804034 	movhi	r2,256
   49dac:	10bfffc4 	addi	r2,r2,-1
   49db0:	1886703a 	and	r3,r3,r2
   49db4:	00800874 	movhi	r2,33
   49db8:	10ae8604 	addi	r2,r2,-17896
   49dbc:	18800a1e 	bne	r3,r2,49de8 <alt_epcs_flash_query+0x2d8>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   49dc0:	e0bfff17 	ldw	r2,-4(fp)
   49dc4:	00c04034 	movhi	r3,256
   49dc8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
   49dcc:	e0bfff17 	ldw	r2,-4(fp)
   49dd0:	00c04004 	movi	r3,256
   49dd4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49dd8:	e0bfff17 	ldw	r2,-4(fp)
   49ddc:	00c00074 	movhi	r3,1
   49de0:	10c01015 	stw	r3,64(r2)
   49de4:	00004706 	br	49f04 <alt_epcs_flash_query+0x3f4>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
   49de8:	e0bfff17 	ldw	r2,-4(fp)
   49dec:	10803017 	ldw	r2,192(r2)
   49df0:	10803fcc 	andi	r2,r2,255
   49df4:	10800618 	cmpnei	r2,r2,24
   49df8:	10000a1e 	bne	r2,zero,49e24 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   49dfc:	e0bfff17 	ldw	r2,-4(fp)
   49e00:	00c04034 	movhi	r3,256
   49e04:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
   49e08:	e0bfff17 	ldw	r2,-4(fp)
   49e0c:	00c01004 	movi	r3,64
   49e10:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
   49e14:	e0bfff17 	ldw	r2,-4(fp)
   49e18:	00c00134 	movhi	r3,4
   49e1c:	10c01015 	stw	r3,64(r2)
   49e20:	00003806 	br	49f04 <alt_epcs_flash_query+0x3f4>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
   49e24:	e0bfff17 	ldw	r2,-4(fp)
   49e28:	10803017 	ldw	r2,192(r2)
   49e2c:	10803fcc 	andi	r2,r2,255
   49e30:	10800658 	cmpnei	r2,r2,25
   49e34:	10000d1e 	bne	r2,zero,49e6c <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
   49e38:	e0bfff17 	ldw	r2,-4(fp)
   49e3c:	00c08034 	movhi	r3,512
   49e40:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
   49e44:	e0bfff17 	ldw	r2,-4(fp)
   49e48:	00c08004 	movi	r3,512
   49e4c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49e50:	e0bfff17 	ldw	r2,-4(fp)
   49e54:	00c00074 	movhi	r3,1
   49e58:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
   49e5c:	e0bfff17 	ldw	r2,-4(fp)
   49e60:	00c00044 	movi	r3,1
   49e64:	10c03215 	stw	r3,200(r2)
   49e68:	00002606 	br	49f04 <alt_epcs_flash_query+0x3f4>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
   49e6c:	e0bfff17 	ldw	r2,-4(fp)
   49e70:	10803017 	ldw	r2,192(r2)
   49e74:	10803fcc 	andi	r2,r2,255
   49e78:	10800818 	cmpnei	r2,r2,32
   49e7c:	10000d1e 	bne	r2,zero,49eb4 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
   49e80:	e0bfff17 	ldw	r2,-4(fp)
   49e84:	00c10034 	movhi	r3,1024
   49e88:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
   49e8c:	e0bfff17 	ldw	r2,-4(fp)
   49e90:	00c10004 	movi	r3,1024
   49e94:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49e98:	e0bfff17 	ldw	r2,-4(fp)
   49e9c:	00c00074 	movhi	r3,1
   49ea0:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
   49ea4:	e0bfff17 	ldw	r2,-4(fp)
   49ea8:	00c00044 	movi	r3,1
   49eac:	10c03215 	stw	r3,200(r2)
   49eb0:	00001406 	br	49f04 <alt_epcs_flash_query+0x3f4>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
   49eb4:	e0bfff17 	ldw	r2,-4(fp)
   49eb8:	10803017 	ldw	r2,192(r2)
   49ebc:	10803fcc 	andi	r2,r2,255
   49ec0:	10800858 	cmpnei	r2,r2,33
   49ec4:	10000d1e 	bne	r2,zero,49efc <alt_epcs_flash_query+0x3ec>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
   49ec8:	e0bfff17 	ldw	r2,-4(fp)
   49ecc:	00c20034 	movhi	r3,2048
   49ed0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
   49ed4:	e0bfff17 	ldw	r2,-4(fp)
   49ed8:	00c20004 	movi	r3,2048
   49edc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49ee0:	e0bfff17 	ldw	r2,-4(fp)
   49ee4:	00c00074 	movhi	r3,1
   49ee8:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
   49eec:	e0bfff17 	ldw	r2,-4(fp)
   49ef0:	00c00044 	movi	r3,1
   49ef4:	10c03215 	stw	r3,200(r2)
   49ef8:	00000206 	br	49f04 <alt_epcs_flash_query+0x3f4>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
   49efc:	00bffb44 	movi	r2,-19
   49f00:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
   49f04:	e0bfff17 	ldw	r2,-4(fp)
   49f08:	10800e17 	ldw	r2,56(r2)
   49f0c:	1007883a 	mov	r3,r2
   49f10:	e0bfff17 	ldw	r2,-4(fp)
   49f14:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
   49f18:	e0bfff17 	ldw	r2,-4(fp)
   49f1c:	00c00044 	movi	r3,1
   49f20:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
   49f24:	e0bfff17 	ldw	r2,-4(fp)
   49f28:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
   49f2c:	e0bfff17 	ldw	r2,-4(fp)
   49f30:	00c04004 	movi	r3,256
   49f34:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
   49f38:	e0bffe17 	ldw	r2,-8(fp)
}
   49f3c:	e037883a 	mov	sp,fp
   49f40:	dfc00117 	ldw	ra,4(sp)
   49f44:	df000017 	ldw	fp,0(sp)
   49f48:	dec00204 	addi	sp,sp,8
   49f4c:	f800283a 	ret

00049f50 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
   49f50:	deffee04 	addi	sp,sp,-72
   49f54:	dfc01115 	stw	ra,68(sp)
   49f58:	df001015 	stw	fp,64(sp)
   49f5c:	df001004 	addi	fp,sp,64
   49f60:	e13ffc15 	stw	r4,-16(fp)
   49f64:	e17ffd15 	stw	r5,-12(fp)
   49f68:	e1bffe15 	stw	r6,-8(fp)
   49f6c:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
   49f70:	00800804 	movi	r2,32
   49f74:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
   49f78:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
   49f7c:	00002706 	br	4a01c <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
   49f80:	e0fff117 	ldw	r3,-60(fp)
   49f84:	e0bfff17 	ldw	r2,-4(fp)
   49f88:	1880012e 	bgeu	r3,r2,49f90 <alt_epcs_flash_memcmp+0x40>
   49f8c:	1805883a 	mov	r2,r3
   49f90:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
   49f94:	e0fffe17 	ldw	r3,-8(fp)
   49f98:	e0bff017 	ldw	r2,-64(fp)
   49f9c:	1885883a 	add	r2,r3,r2
   49fa0:	e0fff404 	addi	r3,fp,-48
   49fa4:	e1fff217 	ldw	r7,-56(fp)
   49fa8:	180d883a 	mov	r6,r3
   49fac:	100b883a 	mov	r5,r2
   49fb0:	e13ffc17 	ldw	r4,-16(fp)
   49fb4:	004a5340 	call	4a534 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
   49fb8:	1000020e 	bge	r2,zero,49fc4 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
   49fbc:	00bfffc4 	movi	r2,-1
   49fc0:	00001906 	br	4a028 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
   49fc4:	e0bff017 	ldw	r2,-64(fp)
   49fc8:	e0fffd17 	ldw	r3,-12(fp)
   49fcc:	1885883a 	add	r2,r3,r2
   49fd0:	e13ff217 	ldw	r4,-56(fp)
   49fd4:	e0fff404 	addi	r3,fp,-48
   49fd8:	200d883a 	mov	r6,r4
   49fdc:	180b883a 	mov	r5,r3
   49fe0:	1009883a 	mov	r4,r2
   49fe4:	004cc300 	call	4cc30 <memcmp>
   49fe8:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
   49fec:	e0bff317 	ldw	r2,-52(fp)
   49ff0:	10000226 	beq	r2,zero,49ffc <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
   49ff4:	e0bff317 	ldw	r2,-52(fp)
   49ff8:	00000b06 	br	4a028 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
   49ffc:	e0bff217 	ldw	r2,-56(fp)
   4a000:	e0ffff17 	ldw	r3,-4(fp)
   4a004:	1885c83a 	sub	r2,r3,r2
   4a008:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
   4a00c:	e0fff017 	ldw	r3,-64(fp)
   4a010:	e0bff217 	ldw	r2,-56(fp)
   4a014:	1885883a 	add	r2,r3,r2
   4a018:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
   4a01c:	e0bfff17 	ldw	r2,-4(fp)
   4a020:	103fd71e 	bne	r2,zero,49f80 <__alt_mem_epcs_flash+0xfffc8f80>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
   4a024:	0005883a 	mov	r2,zero
}
   4a028:	e037883a 	mov	sp,fp
   4a02c:	dfc00117 	ldw	ra,4(sp)
   4a030:	df000017 	ldw	fp,0(sp)
   4a034:	dec00204 	addi	sp,sp,8
   4a038:	f800283a 	ret

0004a03c <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
   4a03c:	defff404 	addi	sp,sp,-48
   4a040:	dfc00b15 	stw	ra,44(sp)
   4a044:	df000a15 	stw	fp,40(sp)
   4a048:	df000a04 	addi	fp,sp,40
   4a04c:	e13ffc15 	stw	r4,-16(fp)
   4a050:	e17ffd15 	stw	r5,-12(fp)
   4a054:	e1bffe15 	stw	r6,-8(fp)
   4a058:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
   4a05c:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
   4a060:	e03ff815 	stw	zero,-32(fp)
   4a064:	00008306 	br	4a274 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
   4a068:	e0fffc17 	ldw	r3,-16(fp)
   4a06c:	e0bff817 	ldw	r2,-32(fp)
   4a070:	1004913a 	slli	r2,r2,4
   4a074:	1885883a 	add	r2,r3,r2
   4a078:	10800d04 	addi	r2,r2,52
   4a07c:	10800017 	ldw	r2,0(r2)
   4a080:	e0fffd17 	ldw	r3,-12(fp)
   4a084:	18807816 	blt	r3,r2,4a268 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
   4a088:	e0fffc17 	ldw	r3,-16(fp)
   4a08c:	e0bff817 	ldw	r2,-32(fp)
   4a090:	1004913a 	slli	r2,r2,4
   4a094:	1885883a 	add	r2,r3,r2
   4a098:	10800d04 	addi	r2,r2,52
   4a09c:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
   4a0a0:	e13ffc17 	ldw	r4,-16(fp)
   4a0a4:	e0bff817 	ldw	r2,-32(fp)
   4a0a8:	1004913a 	slli	r2,r2,4
   4a0ac:	2085883a 	add	r2,r4,r2
   4a0b0:	10800e04 	addi	r2,r2,56
   4a0b4:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
   4a0b8:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
   4a0bc:	e0fffd17 	ldw	r3,-12(fp)
   4a0c0:	1880690e 	bge	r3,r2,4a268 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
   4a0c4:	e0fffc17 	ldw	r3,-16(fp)
   4a0c8:	e0bff817 	ldw	r2,-32(fp)
   4a0cc:	1004913a 	slli	r2,r2,4
   4a0d0:	1885883a 	add	r2,r3,r2
   4a0d4:	10800d04 	addi	r2,r2,52
   4a0d8:	10800017 	ldw	r2,0(r2)
   4a0dc:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   4a0e0:	e03ff915 	stw	zero,-28(fp)
   4a0e4:	00005806 	br	4a248 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
   4a0e8:	e0fffd17 	ldw	r3,-12(fp)
   4a0ec:	e0bffa17 	ldw	r2,-24(fp)
   4a0f0:	18804916 	blt	r3,r2,4a218 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
   4a0f4:	e0fffc17 	ldw	r3,-16(fp)
   4a0f8:	e0bff817 	ldw	r2,-32(fp)
   4a0fc:	10800104 	addi	r2,r2,4
   4a100:	1004913a 	slli	r2,r2,4
   4a104:	1885883a 	add	r2,r3,r2
   4a108:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
   4a10c:	e0bffa17 	ldw	r2,-24(fp)
   4a110:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
   4a114:	e0fffd17 	ldw	r3,-12(fp)
   4a118:	18803f0e 	bge	r3,r2,4a218 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
   4a11c:	e0fffc17 	ldw	r3,-16(fp)
   4a120:	e0bff817 	ldw	r2,-32(fp)
   4a124:	10800104 	addi	r2,r2,4
   4a128:	1004913a 	slli	r2,r2,4
   4a12c:	1885883a 	add	r2,r3,r2
   4a130:	10c00017 	ldw	r3,0(r2)
   4a134:	e0bffa17 	ldw	r2,-24(fp)
   4a138:	1887883a 	add	r3,r3,r2
   4a13c:	e0bffd17 	ldw	r2,-12(fp)
   4a140:	1885c83a 	sub	r2,r3,r2
   4a144:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
   4a148:	e0fffb17 	ldw	r3,-20(fp)
   4a14c:	e0bfff17 	ldw	r2,-4(fp)
   4a150:	1880010e 	bge	r3,r2,4a158 <alt_epcs_flash_write+0x11c>
   4a154:	1805883a 	mov	r2,r3
   4a158:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
   4a15c:	e0bffb17 	ldw	r2,-20(fp)
   4a160:	100f883a 	mov	r7,r2
   4a164:	e1bffd17 	ldw	r6,-12(fp)
   4a168:	e17ffe17 	ldw	r5,-8(fp)
   4a16c:	e13ffc17 	ldw	r4,-16(fp)
   4a170:	0049f500 	call	49f50 <alt_epcs_flash_memcmp>
   4a174:	10001226 	beq	r2,zero,4a1c0 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
   4a178:	e0bffc17 	ldw	r2,-16(fp)
   4a17c:	10800817 	ldw	r2,32(r2)
   4a180:	e17ffa17 	ldw	r5,-24(fp)
   4a184:	e13ffc17 	ldw	r4,-16(fp)
   4a188:	103ee83a 	callr	r2
   4a18c:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
   4a190:	e0bff717 	ldw	r2,-36(fp)
   4a194:	10000a1e 	bne	r2,zero,4a1c0 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
   4a198:	e0bffc17 	ldw	r2,-16(fp)
   4a19c:	10800917 	ldw	r2,36(r2)
   4a1a0:	e0fffb17 	ldw	r3,-20(fp)
   4a1a4:	d8c00015 	stw	r3,0(sp)
   4a1a8:	e1fffe17 	ldw	r7,-8(fp)
   4a1ac:	e1bffd17 	ldw	r6,-12(fp)
   4a1b0:	e17ffa17 	ldw	r5,-24(fp)
   4a1b4:	e13ffc17 	ldw	r4,-16(fp)
   4a1b8:	103ee83a 	callr	r2
   4a1bc:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
   4a1c0:	e0ffff17 	ldw	r3,-4(fp)
   4a1c4:	e0bffb17 	ldw	r2,-20(fp)
   4a1c8:	18802e26 	beq	r3,r2,4a284 <alt_epcs_flash_write+0x248>
   4a1cc:	e0bff717 	ldw	r2,-36(fp)
   4a1d0:	10002c1e 	bne	r2,zero,4a284 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
   4a1d4:	e0ffff17 	ldw	r3,-4(fp)
   4a1d8:	e0bffb17 	ldw	r2,-20(fp)
   4a1dc:	1885c83a 	sub	r2,r3,r2
   4a1e0:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
   4a1e4:	e0fffc17 	ldw	r3,-16(fp)
   4a1e8:	e0bff817 	ldw	r2,-32(fp)
   4a1ec:	10800104 	addi	r2,r2,4
   4a1f0:	1004913a 	slli	r2,r2,4
   4a1f4:	1885883a 	add	r2,r3,r2
   4a1f8:	10c00017 	ldw	r3,0(r2)
   4a1fc:	e0bffa17 	ldw	r2,-24(fp)
   4a200:	1885883a 	add	r2,r3,r2
   4a204:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
   4a208:	e0bffb17 	ldw	r2,-20(fp)
   4a20c:	e0fffe17 	ldw	r3,-8(fp)
   4a210:	1885883a 	add	r2,r3,r2
   4a214:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
   4a218:	e0fffc17 	ldw	r3,-16(fp)
   4a21c:	e0bff817 	ldw	r2,-32(fp)
   4a220:	10800104 	addi	r2,r2,4
   4a224:	1004913a 	slli	r2,r2,4
   4a228:	1885883a 	add	r2,r3,r2
   4a22c:	10800017 	ldw	r2,0(r2)
   4a230:	e0fffa17 	ldw	r3,-24(fp)
   4a234:	1885883a 	add	r2,r3,r2
   4a238:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   4a23c:	e0bff917 	ldw	r2,-28(fp)
   4a240:	10800044 	addi	r2,r2,1
   4a244:	e0bff915 	stw	r2,-28(fp)
   4a248:	e0fffc17 	ldw	r3,-16(fp)
   4a24c:	e0bff817 	ldw	r2,-32(fp)
   4a250:	1004913a 	slli	r2,r2,4
   4a254:	1885883a 	add	r2,r3,r2
   4a258:	10800f04 	addi	r2,r2,60
   4a25c:	10800017 	ldw	r2,0(r2)
   4a260:	e0fff917 	ldw	r3,-28(fp)
   4a264:	18bfa016 	blt	r3,r2,4a0e8 <__alt_mem_epcs_flash+0xfffc90e8>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
   4a268:	e0bff817 	ldw	r2,-32(fp)
   4a26c:	10800044 	addi	r2,r2,1
   4a270:	e0bff815 	stw	r2,-32(fp)
   4a274:	e0bffc17 	ldw	r2,-16(fp)
   4a278:	10800c17 	ldw	r2,48(r2)
   4a27c:	e0fff817 	ldw	r3,-32(fp)
   4a280:	18bf7916 	blt	r3,r2,4a068 <__alt_mem_epcs_flash+0xfffc9068>
      }
    }
  }

finished:
  return ret_code;
   4a284:	e0bff717 	ldw	r2,-36(fp)
}
   4a288:	e037883a 	mov	sp,fp
   4a28c:	dfc00117 	ldw	ra,4(sp)
   4a290:	df000017 	ldw	fp,0(sp)
   4a294:	dec00204 	addi	sp,sp,8
   4a298:	f800283a 	ret

0004a29c <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
   4a29c:	defffa04 	addi	sp,sp,-24
   4a2a0:	df000515 	stw	fp,20(sp)
   4a2a4:	df000504 	addi	fp,sp,20
   4a2a8:	e13ffd15 	stw	r4,-12(fp)
   4a2ac:	e17ffe15 	stw	r5,-8(fp)
   4a2b0:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
   4a2b4:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
   4a2b8:	e0bffd17 	ldw	r2,-12(fp)
   4a2bc:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
   4a2c0:	e0bffc17 	ldw	r2,-16(fp)
   4a2c4:	10c00c17 	ldw	r3,48(r2)
   4a2c8:	e0bfff17 	ldw	r2,-4(fp)
   4a2cc:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
   4a2d0:	e0bffc17 	ldw	r2,-16(fp)
   4a2d4:	10800c17 	ldw	r2,48(r2)
   4a2d8:	1000031e 	bne	r2,zero,4a2e8 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
   4a2dc:	00bffec4 	movi	r2,-5
   4a2e0:	e0bffb15 	stw	r2,-20(fp)
   4a2e4:	00000b06 	br	4a314 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
   4a2e8:	e0bffc17 	ldw	r2,-16(fp)
   4a2ec:	10800c17 	ldw	r2,48(r2)
   4a2f0:	10800250 	cmplti	r2,r2,9
   4a2f4:	1000031e 	bne	r2,zero,4a304 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
   4a2f8:	00bffd04 	movi	r2,-12
   4a2fc:	e0bffb15 	stw	r2,-20(fp)
   4a300:	00000406 	br	4a314 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
   4a304:	e0bffc17 	ldw	r2,-16(fp)
   4a308:	10c00d04 	addi	r3,r2,52
   4a30c:	e0bffe17 	ldw	r2,-8(fp)
   4a310:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
   4a314:	e0bffb17 	ldw	r2,-20(fp)
}
   4a318:	e037883a 	mov	sp,fp
   4a31c:	df000017 	ldw	fp,0(sp)
   4a320:	dec00104 	addi	sp,sp,4
   4a324:	f800283a 	ret

0004a328 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
   4a328:	defff904 	addi	sp,sp,-28
   4a32c:	df000615 	stw	fp,24(sp)
   4a330:	df000604 	addi	fp,sp,24
   4a334:	e13ffe15 	stw	r4,-8(fp)
   4a338:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
   4a33c:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   4a340:	e0bffe17 	ldw	r2,-8(fp)
   4a344:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
   4a348:	e0bffb17 	ldw	r2,-20(fp)
   4a34c:	10800c17 	ldw	r2,48(r2)
   4a350:	10bfffc4 	addi	r2,r2,-1
   4a354:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
   4a358:	e0fffb17 	ldw	r3,-20(fp)
   4a35c:	e0bffc17 	ldw	r2,-16(fp)
   4a360:	1004913a 	slli	r2,r2,4
   4a364:	1885883a 	add	r2,r3,r2
   4a368:	10800d04 	addi	r2,r2,52
   4a36c:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
   4a370:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
   4a374:	e13ffb17 	ldw	r4,-20(fp)
   4a378:	e0bffc17 	ldw	r2,-16(fp)
   4a37c:	1004913a 	slli	r2,r2,4
   4a380:	2085883a 	add	r2,r4,r2
   4a384:	10800e04 	addi	r2,r2,56
   4a388:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
   4a38c:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
   4a390:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
   4a394:	e0bfff17 	ldw	r2,-4(fp)
   4a398:	e0fffd17 	ldw	r3,-12(fp)
   4a39c:	1880022e 	bgeu	r3,r2,4a3a8 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
   4a3a0:	00bffec4 	movi	r2,-5
   4a3a4:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
   4a3a8:	e0bffa17 	ldw	r2,-24(fp)
}
   4a3ac:	e037883a 	mov	sp,fp
   4a3b0:	df000017 	ldw	fp,0(sp)
   4a3b4:	dec00104 	addi	sp,sp,4
   4a3b8:	f800283a 	ret

0004a3bc <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
   4a3bc:	defffa04 	addi	sp,sp,-24
   4a3c0:	dfc00515 	stw	ra,20(sp)
   4a3c4:	df000415 	stw	fp,16(sp)
   4a3c8:	df000404 	addi	fp,sp,16
   4a3cc:	e13ffe15 	stw	r4,-8(fp)
   4a3d0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
   4a3d4:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   4a3d8:	e0bffe17 	ldw	r2,-8(fp)
   4a3dc:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
   4a3e0:	e17fff17 	ldw	r5,-4(fp)
   4a3e4:	e13ffe17 	ldw	r4,-8(fp)
   4a3e8:	004a3280 	call	4a328 <alt_epcs_test_address>
   4a3ec:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
   4a3f0:	e0bffc17 	ldw	r2,-16(fp)
   4a3f4:	10000916 	blt	r2,zero,4a41c <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
   4a3f8:	e0bffd17 	ldw	r2,-12(fp)
   4a3fc:	10c02e17 	ldw	r3,184(r2)
   4a400:	e13fff17 	ldw	r4,-4(fp)
   4a404:	e0bffd17 	ldw	r2,-12(fp)
   4a408:	10803217 	ldw	r2,200(r2)
   4a40c:	100d883a 	mov	r6,r2
   4a410:	200b883a 	mov	r5,r4
   4a414:	1809883a 	mov	r4,r3
   4a418:	004b6fc0 	call	4b6fc <epcs_sector_erase>
  }
  return ret_code;
   4a41c:	e0bffc17 	ldw	r2,-16(fp)
}
   4a420:	e037883a 	mov	sp,fp
   4a424:	dfc00117 	ldw	ra,4(sp)
   4a428:	df000017 	ldw	fp,0(sp)
   4a42c:	dec00204 	addi	sp,sp,8
   4a430:	f800283a 	ret

0004a434 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
   4a434:	defff404 	addi	sp,sp,-48
   4a438:	dfc00b15 	stw	ra,44(sp)
   4a43c:	df000a15 	stw	fp,40(sp)
   4a440:	df000a04 	addi	fp,sp,40
   4a444:	e13ffc15 	stw	r4,-16(fp)
   4a448:	e17ffd15 	stw	r5,-12(fp)
   4a44c:	e1bffe15 	stw	r6,-8(fp)
   4a450:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   4a454:	e0bffc17 	ldw	r2,-16(fp)
   4a458:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
   4a45c:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
   4a460:	e17ffe17 	ldw	r5,-8(fp)
   4a464:	e13ffc17 	ldw	r4,-16(fp)
   4a468:	004a3280 	call	4a328 <alt_epcs_test_address>
   4a46c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
   4a470:	e0bff917 	ldw	r2,-28(fp)
   4a474:	10002916 	blt	r2,zero,4a51c <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
   4a478:	00002606 	br	4a514 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
   4a47c:	e0bff817 	ldw	r2,-32(fp)
   4a480:	10c03117 	ldw	r3,196(r2)
   4a484:	e0bffe17 	ldw	r2,-8(fp)
   4a488:	1887883a 	add	r3,r3,r2
   4a48c:	e0bff817 	ldw	r2,-32(fp)
   4a490:	10803117 	ldw	r2,196(r2)
   4a494:	0085c83a 	sub	r2,zero,r2
   4a498:	1884703a 	and	r2,r3,r2
   4a49c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
   4a4a0:	e0fffa17 	ldw	r3,-24(fp)
   4a4a4:	e0bffe17 	ldw	r2,-8(fp)
   4a4a8:	1885c83a 	sub	r2,r3,r2
   4a4ac:	e0c00217 	ldw	r3,8(fp)
   4a4b0:	1880010e 	bge	r3,r2,4a4b8 <alt_epcs_flash_write_block+0x84>
   4a4b4:	1805883a 	mov	r2,r3
   4a4b8:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
   4a4bc:	e0bff817 	ldw	r2,-32(fp)
   4a4c0:	11002e17 	ldw	r4,184(r2)
   4a4c4:	e0bff717 	ldw	r2,-36(fp)
   4a4c8:	e0ffff17 	ldw	r3,-4(fp)
   4a4cc:	1887883a 	add	r3,r3,r2
   4a4d0:	e0bff817 	ldw	r2,-32(fp)
   4a4d4:	10803217 	ldw	r2,200(r2)
   4a4d8:	d8800015 	stw	r2,0(sp)
   4a4dc:	e1fffb17 	ldw	r7,-20(fp)
   4a4e0:	180d883a 	mov	r6,r3
   4a4e4:	e17ffe17 	ldw	r5,-8(fp)
   4a4e8:	004b9ac0 	call	4b9ac <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
   4a4ec:	e0c00217 	ldw	r3,8(fp)
   4a4f0:	e0bffb17 	ldw	r2,-20(fp)
   4a4f4:	1885c83a 	sub	r2,r3,r2
   4a4f8:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
   4a4fc:	e0fff717 	ldw	r3,-36(fp)
   4a500:	e0bffb17 	ldw	r2,-20(fp)
   4a504:	1885883a 	add	r2,r3,r2
   4a508:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
   4a50c:	e0bffa17 	ldw	r2,-24(fp)
   4a510:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
   4a514:	e0800217 	ldw	r2,8(fp)
   4a518:	103fd81e 	bne	r2,zero,4a47c <__alt_mem_epcs_flash+0xfffc947c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
   4a51c:	e0bff917 	ldw	r2,-28(fp)
}
   4a520:	e037883a 	mov	sp,fp
   4a524:	dfc00117 	ldw	ra,4(sp)
   4a528:	df000017 	ldw	fp,0(sp)
   4a52c:	dec00204 	addi	sp,sp,8
   4a530:	f800283a 	ret

0004a534 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
   4a534:	defff704 	addi	sp,sp,-36
   4a538:	dfc00815 	stw	ra,32(sp)
   4a53c:	df000715 	stw	fp,28(sp)
   4a540:	df000704 	addi	fp,sp,28
   4a544:	e13ffc15 	stw	r4,-16(fp)
   4a548:	e17ffd15 	stw	r5,-12(fp)
   4a54c:	e1bffe15 	stw	r6,-8(fp)
   4a550:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
   4a554:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   4a558:	e0bffc17 	ldw	r2,-16(fp)
   4a55c:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
   4a560:	e17ffd17 	ldw	r5,-12(fp)
   4a564:	e13ffc17 	ldw	r4,-16(fp)
   4a568:	004a3280 	call	4a328 <alt_epcs_test_address>
   4a56c:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
   4a570:	e0bffa17 	ldw	r2,-24(fp)
   4a574:	10000f16 	blt	r2,zero,4a5b4 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
   4a578:	e0bffb17 	ldw	r2,-20(fp)
   4a57c:	10c02e17 	ldw	r3,184(r2)
   4a580:	e0bffb17 	ldw	r2,-20(fp)
   4a584:	10803217 	ldw	r2,200(r2)
   4a588:	d8800015 	stw	r2,0(sp)
   4a58c:	e1ffff17 	ldw	r7,-4(fp)
   4a590:	e1bffe17 	ldw	r6,-8(fp)
   4a594:	e17ffd17 	ldw	r5,-12(fp)
   4a598:	1809883a 	mov	r4,r3
   4a59c:	004b7f80 	call	4b7f8 <epcs_read_buffer>
   4a5a0:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
   4a5a4:	e0fffa17 	ldw	r3,-24(fp)
   4a5a8:	e0bfff17 	ldw	r2,-4(fp)
   4a5ac:	1880011e 	bne	r3,r2,4a5b4 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
   4a5b0:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
   4a5b4:	e0bffa17 	ldw	r2,-24(fp)
}
   4a5b8:	e037883a 	mov	sp,fp
   4a5bc:	dfc00117 	ldw	ra,4(sp)
   4a5c0:	df000017 	ldw	fp,0(sp)
   4a5c4:	dec00204 	addi	sp,sp,8
   4a5c8:	f800283a 	ret

0004a5cc <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   4a5cc:	defffa04 	addi	sp,sp,-24
   4a5d0:	dfc00515 	stw	ra,20(sp)
   4a5d4:	df000415 	stw	fp,16(sp)
   4a5d8:	df000404 	addi	fp,sp,16
   4a5dc:	e13ffc15 	stw	r4,-16(fp)
   4a5e0:	e17ffd15 	stw	r5,-12(fp)
   4a5e4:	e1bffe15 	stw	r6,-8(fp)
   4a5e8:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   4a5ec:	01400fc4 	movi	r5,63
   4a5f0:	e13ffc17 	ldw	r4,-16(fp)
   4a5f4:	004a7980 	call	4a798 <altera_avalon_fifo_clear_event>
   4a5f8:	10000226 	beq	r2,zero,4a604 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4a5fc:	00bfffc4 	movi	r2,-1
   4a600:	00001306 	br	4a650 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   4a604:	e17ffd17 	ldw	r5,-12(fp)
   4a608:	e13ffc17 	ldw	r4,-16(fp)
   4a60c:	004a7f80 	call	4a7f8 <altera_avalon_fifo_write_ienable>
   4a610:	10000226 	beq	r2,zero,4a61c <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4a614:	00bfff84 	movi	r2,-2
   4a618:	00000d06 	br	4a650 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   4a61c:	e17fff17 	ldw	r5,-4(fp)
   4a620:	e13ffc17 	ldw	r4,-16(fp)
   4a624:	004a8540 	call	4a854 <altera_avalon_fifo_write_almostfull>
   4a628:	10000226 	beq	r2,zero,4a634 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4a62c:	00bfff44 	movi	r2,-3
   4a630:	00000706 	br	4a650 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   4a634:	e17ffe17 	ldw	r5,-8(fp)
   4a638:	e13ffc17 	ldw	r4,-16(fp)
   4a63c:	004a8b00 	call	4a8b0 <altera_avalon_fifo_write_almostempty>
   4a640:	10000226 	beq	r2,zero,4a64c <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4a644:	00bfff44 	movi	r2,-3
   4a648:	00000106 	br	4a650 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   4a64c:	0005883a 	mov	r2,zero
}
   4a650:	e037883a 	mov	sp,fp
   4a654:	dfc00117 	ldw	ra,4(sp)
   4a658:	df000017 	ldw	fp,0(sp)
   4a65c:	dec00204 	addi	sp,sp,8
   4a660:	f800283a 	ret

0004a664 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   4a664:	defffd04 	addi	sp,sp,-12
   4a668:	df000215 	stw	fp,8(sp)
   4a66c:	df000204 	addi	fp,sp,8
   4a670:	e13ffe15 	stw	r4,-8(fp)
   4a674:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   4a678:	e0bffe17 	ldw	r2,-8(fp)
   4a67c:	10800104 	addi	r2,r2,4
   4a680:	10800037 	ldwio	r2,0(r2)
   4a684:	1007883a 	mov	r3,r2
   4a688:	e0bfff17 	ldw	r2,-4(fp)
   4a68c:	1884703a 	and	r2,r3,r2
}
   4a690:	e037883a 	mov	sp,fp
   4a694:	df000017 	ldw	fp,0(sp)
   4a698:	dec00104 	addi	sp,sp,4
   4a69c:	f800283a 	ret

0004a6a0 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   4a6a0:	defffd04 	addi	sp,sp,-12
   4a6a4:	df000215 	stw	fp,8(sp)
   4a6a8:	df000204 	addi	fp,sp,8
   4a6ac:	e13ffe15 	stw	r4,-8(fp)
   4a6b0:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   4a6b4:	e0bffe17 	ldw	r2,-8(fp)
   4a6b8:	10800304 	addi	r2,r2,12
   4a6bc:	10800037 	ldwio	r2,0(r2)
   4a6c0:	1007883a 	mov	r3,r2
   4a6c4:	e0bfff17 	ldw	r2,-4(fp)
   4a6c8:	1884703a 	and	r2,r3,r2
}
   4a6cc:	e037883a 	mov	sp,fp
   4a6d0:	df000017 	ldw	fp,0(sp)
   4a6d4:	dec00104 	addi	sp,sp,4
   4a6d8:	f800283a 	ret

0004a6dc <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   4a6dc:	defffe04 	addi	sp,sp,-8
   4a6e0:	df000115 	stw	fp,4(sp)
   4a6e4:	df000104 	addi	fp,sp,4
   4a6e8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   4a6ec:	e0bfff17 	ldw	r2,-4(fp)
   4a6f0:	10800404 	addi	r2,r2,16
   4a6f4:	10800037 	ldwio	r2,0(r2)
}
   4a6f8:	e037883a 	mov	sp,fp
   4a6fc:	df000017 	ldw	fp,0(sp)
   4a700:	dec00104 	addi	sp,sp,4
   4a704:	f800283a 	ret

0004a708 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   4a708:	defffe04 	addi	sp,sp,-8
   4a70c:	df000115 	stw	fp,4(sp)
   4a710:	df000104 	addi	fp,sp,4
   4a714:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   4a718:	e0bfff17 	ldw	r2,-4(fp)
   4a71c:	10800504 	addi	r2,r2,20
   4a720:	10800037 	ldwio	r2,0(r2)
}
   4a724:	e037883a 	mov	sp,fp
   4a728:	df000017 	ldw	fp,0(sp)
   4a72c:	dec00104 	addi	sp,sp,4
   4a730:	f800283a 	ret

0004a734 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   4a734:	defffd04 	addi	sp,sp,-12
   4a738:	df000215 	stw	fp,8(sp)
   4a73c:	df000204 	addi	fp,sp,8
   4a740:	e13ffe15 	stw	r4,-8(fp)
   4a744:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   4a748:	e0bffe17 	ldw	r2,-8(fp)
   4a74c:	10800204 	addi	r2,r2,8
   4a750:	10800037 	ldwio	r2,0(r2)
   4a754:	1007883a 	mov	r3,r2
   4a758:	e0bfff17 	ldw	r2,-4(fp)
   4a75c:	1884703a 	and	r2,r3,r2
}
   4a760:	e037883a 	mov	sp,fp
   4a764:	df000017 	ldw	fp,0(sp)
   4a768:	dec00104 	addi	sp,sp,4
   4a76c:	f800283a 	ret

0004a770 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   4a770:	defffe04 	addi	sp,sp,-8
   4a774:	df000115 	stw	fp,4(sp)
   4a778:	df000104 	addi	fp,sp,4
   4a77c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   4a780:	e0bfff17 	ldw	r2,-4(fp)
   4a784:	10800037 	ldwio	r2,0(r2)
}
   4a788:	e037883a 	mov	sp,fp
   4a78c:	df000017 	ldw	fp,0(sp)
   4a790:	dec00104 	addi	sp,sp,4
   4a794:	f800283a 	ret

0004a798 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   4a798:	defffd04 	addi	sp,sp,-12
   4a79c:	df000215 	stw	fp,8(sp)
   4a7a0:	df000204 	addi	fp,sp,8
   4a7a4:	e13ffe15 	stw	r4,-8(fp)
   4a7a8:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   4a7ac:	e0bffe17 	ldw	r2,-8(fp)
   4a7b0:	10800204 	addi	r2,r2,8
   4a7b4:	1007883a 	mov	r3,r2
   4a7b8:	e0bfff17 	ldw	r2,-4(fp)
   4a7bc:	18800035 	stwio	r2,0(r3)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   4a7c0:	e0bffe17 	ldw	r2,-8(fp)
   4a7c4:	10800204 	addi	r2,r2,8
   4a7c8:	10800037 	ldwio	r2,0(r2)
   4a7cc:	1007883a 	mov	r3,r2
   4a7d0:	e0bfff17 	ldw	r2,-4(fp)
   4a7d4:	1884703a 	and	r2,r3,r2
   4a7d8:	1000021e 	bne	r2,zero,4a7e4 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
   4a7dc:	0005883a 	mov	r2,zero
   4a7e0:	00000106 	br	4a7e8 <altera_avalon_fifo_clear_event+0x50>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4a7e4:	00bfffc4 	movi	r2,-1
}
   4a7e8:	e037883a 	mov	sp,fp
   4a7ec:	df000017 	ldw	fp,0(sp)
   4a7f0:	dec00104 	addi	sp,sp,4
   4a7f4:	f800283a 	ret

0004a7f8 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   4a7f8:	defffd04 	addi	sp,sp,-12
   4a7fc:	df000215 	stw	fp,8(sp)
   4a800:	df000204 	addi	fp,sp,8
   4a804:	e13ffe15 	stw	r4,-8(fp)
   4a808:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   4a80c:	e0bffe17 	ldw	r2,-8(fp)
   4a810:	10800304 	addi	r2,r2,12
   4a814:	1007883a 	mov	r3,r2
   4a818:	e0bfff17 	ldw	r2,-4(fp)
   4a81c:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   4a820:	e0bffe17 	ldw	r2,-8(fp)
   4a824:	10800304 	addi	r2,r2,12
   4a828:	10800037 	ldwio	r2,0(r2)
   4a82c:	1007883a 	mov	r3,r2
   4a830:	e0bfff17 	ldw	r2,-4(fp)
   4a834:	1880021e 	bne	r3,r2,4a840 <altera_avalon_fifo_write_ienable+0x48>
        return ALTERA_AVALON_FIFO_OK;
   4a838:	0005883a 	mov	r2,zero
   4a83c:	00000106 	br	4a844 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4a840:	00bfff84 	movi	r2,-2
}
   4a844:	e037883a 	mov	sp,fp
   4a848:	df000017 	ldw	fp,0(sp)
   4a84c:	dec00104 	addi	sp,sp,4
   4a850:	f800283a 	ret

0004a854 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   4a854:	defffd04 	addi	sp,sp,-12
   4a858:	df000215 	stw	fp,8(sp)
   4a85c:	df000204 	addi	fp,sp,8
   4a860:	e13ffe15 	stw	r4,-8(fp)
   4a864:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   4a868:	e0bffe17 	ldw	r2,-8(fp)
   4a86c:	10800404 	addi	r2,r2,16
   4a870:	1007883a 	mov	r3,r2
   4a874:	e0bfff17 	ldw	r2,-4(fp)
   4a878:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   4a87c:	e0bffe17 	ldw	r2,-8(fp)
   4a880:	10800404 	addi	r2,r2,16
   4a884:	10800037 	ldwio	r2,0(r2)
   4a888:	1007883a 	mov	r3,r2
   4a88c:	e0bfff17 	ldw	r2,-4(fp)
   4a890:	1880021e 	bne	r3,r2,4a89c <altera_avalon_fifo_write_almostfull+0x48>
        return ALTERA_AVALON_FIFO_OK;
   4a894:	0005883a 	mov	r2,zero
   4a898:	00000106 	br	4a8a0 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4a89c:	00bfff44 	movi	r2,-3
}
   4a8a0:	e037883a 	mov	sp,fp
   4a8a4:	df000017 	ldw	fp,0(sp)
   4a8a8:	dec00104 	addi	sp,sp,4
   4a8ac:	f800283a 	ret

0004a8b0 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   4a8b0:	defffd04 	addi	sp,sp,-12
   4a8b4:	df000215 	stw	fp,8(sp)
   4a8b8:	df000204 	addi	fp,sp,8
   4a8bc:	e13ffe15 	stw	r4,-8(fp)
   4a8c0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   4a8c4:	e0bffe17 	ldw	r2,-8(fp)
   4a8c8:	10800504 	addi	r2,r2,20
   4a8cc:	1007883a 	mov	r3,r2
   4a8d0:	e0bfff17 	ldw	r2,-4(fp)
   4a8d4:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   4a8d8:	e0bffe17 	ldw	r2,-8(fp)
   4a8dc:	10800504 	addi	r2,r2,20
   4a8e0:	10800037 	ldwio	r2,0(r2)
   4a8e4:	1007883a 	mov	r3,r2
   4a8e8:	e0bfff17 	ldw	r2,-4(fp)
   4a8ec:	1880021e 	bne	r3,r2,4a8f8 <altera_avalon_fifo_write_almostempty+0x48>
        return ALTERA_AVALON_FIFO_OK;
   4a8f0:	0005883a 	mov	r2,zero
   4a8f4:	00000106 	br	4a8fc <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4a8f8:	00bfff44 	movi	r2,-3
}
   4a8fc:	e037883a 	mov	sp,fp
   4a900:	df000017 	ldw	fp,0(sp)
   4a904:	dec00104 	addi	sp,sp,4
   4a908:	f800283a 	ret

0004a90c <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   4a90c:	defffb04 	addi	sp,sp,-20
   4a910:	dfc00415 	stw	ra,16(sp)
   4a914:	df000315 	stw	fp,12(sp)
   4a918:	df000304 	addi	fp,sp,12
   4a91c:	e13ffd15 	stw	r4,-12(fp)
   4a920:	e17ffe15 	stw	r5,-8(fp)
   4a924:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4a928:	01400044 	movi	r5,1
   4a92c:	e13ffe17 	ldw	r4,-8(fp)
   4a930:	004a6640 	call	4a664 <altera_avalon_fifo_read_status>
   4a934:	1000051e 	bne	r2,zero,4a94c <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   4a938:	e0bffd17 	ldw	r2,-12(fp)
   4a93c:	e0ffff17 	ldw	r3,-4(fp)
   4a940:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   4a944:	0005883a 	mov	r2,zero
   4a948:	00000106 	br	4a950 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   4a94c:	00bfff04 	movi	r2,-4
    }
}
   4a950:	e037883a 	mov	sp,fp
   4a954:	dfc00117 	ldw	ra,4(sp)
   4a958:	df000017 	ldw	fp,0(sp)
   4a95c:	dec00204 	addi	sp,sp,8
   4a960:	f800283a 	ret

0004a964 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   4a964:	defffa04 	addi	sp,sp,-24
   4a968:	dfc00515 	stw	ra,20(sp)
   4a96c:	df000415 	stw	fp,16(sp)
   4a970:	df000404 	addi	fp,sp,16
   4a974:	e13ffd15 	stw	r4,-12(fp)
   4a978:	e17ffe15 	stw	r5,-8(fp)
   4a97c:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   4a980:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   4a984:	e0bfff17 	ldw	r2,-4(fp)
   4a988:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4a98c:	01400084 	movi	r5,2
   4a990:	e13ffe17 	ldw	r4,-8(fp)
   4a994:	004a6640 	call	4a664 <altera_avalon_fifo_read_status>
   4a998:	1000071e 	bne	r2,zero,4a9b8 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   4a99c:	e13ffe17 	ldw	r4,-8(fp)
   4a9a0:	004a7700 	call	4a770 <altera_avalon_fifo_read_level>
   4a9a4:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4a9a8:	e0bffd17 	ldw	r2,-12(fp)
   4a9ac:	10c00037 	ldwio	r3,0(r2)
   4a9b0:	e0bfff17 	ldw	r2,-4(fp)
   4a9b4:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   4a9b8:	e0bffc17 	ldw	r2,-16(fp)
}
   4a9bc:	e037883a 	mov	sp,fp
   4a9c0:	dfc00117 	ldw	ra,4(sp)
   4a9c4:	df000017 	ldw	fp,0(sp)
   4a9c8:	dec00204 	addi	sp,sp,8
   4a9cc:	f800283a 	ret

0004a9d0 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   4a9d0:	defffc04 	addi	sp,sp,-16
   4a9d4:	dfc00315 	stw	ra,12(sp)
   4a9d8:	df000215 	stw	fp,8(sp)
   4a9dc:	df000204 	addi	fp,sp,8
   4a9e0:	e13ffe15 	stw	r4,-8(fp)
   4a9e4:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4a9e8:	01400084 	movi	r5,2
   4a9ec:	e13fff17 	ldw	r4,-4(fp)
   4a9f0:	004a6640 	call	4a664 <altera_avalon_fifo_read_status>
   4a9f4:	1000031e 	bne	r2,zero,4aa04 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4a9f8:	e0bffe17 	ldw	r2,-8(fp)
   4a9fc:	10800037 	ldwio	r2,0(r2)
   4aa00:	00000106 	br	4aa08 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   4aa04:	0005883a 	mov	r2,zero
}
   4aa08:	e037883a 	mov	sp,fp
   4aa0c:	dfc00117 	ldw	ra,4(sp)
   4aa10:	df000017 	ldw	fp,0(sp)
   4aa14:	dec00204 	addi	sp,sp,8
   4aa18:	f800283a 	ret

0004aa1c <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   4aa1c:	defffb04 	addi	sp,sp,-20
   4aa20:	dfc00415 	stw	ra,16(sp)
   4aa24:	df000315 	stw	fp,12(sp)
   4aa28:	df000304 	addi	fp,sp,12
   4aa2c:	e13ffd15 	stw	r4,-12(fp)
   4aa30:	e17ffe15 	stw	r5,-8(fp)
   4aa34:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4aa38:	01400044 	movi	r5,1
   4aa3c:	e13ffe17 	ldw	r4,-8(fp)
   4aa40:	004a6640 	call	4a664 <altera_avalon_fifo_read_status>
   4aa44:	1000071e 	bne	r2,zero,4aa64 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   4aa48:	e0bffd17 	ldw	r2,-12(fp)
   4aa4c:	10800104 	addi	r2,r2,4
   4aa50:	1007883a 	mov	r3,r2
   4aa54:	e0bfff17 	ldw	r2,-4(fp)
   4aa58:	18800035 	stwio	r2,0(r3)
	return ALTERA_AVALON_FIFO_OK;
   4aa5c:	0005883a 	mov	r2,zero
   4aa60:	00000106 	br	4aa68 <altera_avalon_fifo_write_other_info+0x4c>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   4aa64:	00bfff04 	movi	r2,-4
    }
}
   4aa68:	e037883a 	mov	sp,fp
   4aa6c:	dfc00117 	ldw	ra,4(sp)
   4aa70:	df000017 	ldw	fp,0(sp)
   4aa74:	dec00204 	addi	sp,sp,8
   4aa78:	f800283a 	ret

0004aa7c <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   4aa7c:	defffe04 	addi	sp,sp,-8
   4aa80:	df000115 	stw	fp,4(sp)
   4aa84:	df000104 	addi	fp,sp,4
   4aa88:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   4aa8c:	e0bfff17 	ldw	r2,-4(fp)
   4aa90:	10800104 	addi	r2,r2,4
   4aa94:	10800037 	ldwio	r2,0(r2)
}
   4aa98:	e037883a 	mov	sp,fp
   4aa9c:	df000017 	ldw	fp,0(sp)
   4aaa0:	dec00104 	addi	sp,sp,4
   4aaa4:	f800283a 	ret

0004aaa8 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   4aaa8:	defffe04 	addi	sp,sp,-8
   4aaac:	df000115 	stw	fp,4(sp)
   4aab0:	df000104 	addi	fp,sp,4
   4aab4:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   4aab8:	e0bfff17 	ldw	r2,-4(fp)
   4aabc:	10800037 	ldwio	r2,0(r2)
}
   4aac0:	e037883a 	mov	sp,fp
   4aac4:	df000017 	ldw	fp,0(sp)
   4aac8:	dec00104 	addi	sp,sp,4
   4aacc:	f800283a 	ret

0004aad0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4aad0:	defffa04 	addi	sp,sp,-24
   4aad4:	dfc00515 	stw	ra,20(sp)
   4aad8:	df000415 	stw	fp,16(sp)
   4aadc:	df000404 	addi	fp,sp,16
   4aae0:	e13ffd15 	stw	r4,-12(fp)
   4aae4:	e17ffe15 	stw	r5,-8(fp)
   4aae8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4aaec:	e0bffd17 	ldw	r2,-12(fp)
   4aaf0:	10800017 	ldw	r2,0(r2)
   4aaf4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4aaf8:	e0bffc17 	ldw	r2,-16(fp)
   4aafc:	10c00a04 	addi	r3,r2,40
   4ab00:	e0bffd17 	ldw	r2,-12(fp)
   4ab04:	10800217 	ldw	r2,8(r2)
   4ab08:	100f883a 	mov	r7,r2
   4ab0c:	e1bfff17 	ldw	r6,-4(fp)
   4ab10:	e17ffe17 	ldw	r5,-8(fp)
   4ab14:	1809883a 	mov	r4,r3
   4ab18:	004b0f80 	call	4b0f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4ab1c:	e037883a 	mov	sp,fp
   4ab20:	dfc00117 	ldw	ra,4(sp)
   4ab24:	df000017 	ldw	fp,0(sp)
   4ab28:	dec00204 	addi	sp,sp,8
   4ab2c:	f800283a 	ret

0004ab30 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4ab30:	defffa04 	addi	sp,sp,-24
   4ab34:	dfc00515 	stw	ra,20(sp)
   4ab38:	df000415 	stw	fp,16(sp)
   4ab3c:	df000404 	addi	fp,sp,16
   4ab40:	e13ffd15 	stw	r4,-12(fp)
   4ab44:	e17ffe15 	stw	r5,-8(fp)
   4ab48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4ab4c:	e0bffd17 	ldw	r2,-12(fp)
   4ab50:	10800017 	ldw	r2,0(r2)
   4ab54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4ab58:	e0bffc17 	ldw	r2,-16(fp)
   4ab5c:	10c00a04 	addi	r3,r2,40
   4ab60:	e0bffd17 	ldw	r2,-12(fp)
   4ab64:	10800217 	ldw	r2,8(r2)
   4ab68:	100f883a 	mov	r7,r2
   4ab6c:	e1bfff17 	ldw	r6,-4(fp)
   4ab70:	e17ffe17 	ldw	r5,-8(fp)
   4ab74:	1809883a 	mov	r4,r3
   4ab78:	004b3140 	call	4b314 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4ab7c:	e037883a 	mov	sp,fp
   4ab80:	dfc00117 	ldw	ra,4(sp)
   4ab84:	df000017 	ldw	fp,0(sp)
   4ab88:	dec00204 	addi	sp,sp,8
   4ab8c:	f800283a 	ret

0004ab90 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4ab90:	defffc04 	addi	sp,sp,-16
   4ab94:	dfc00315 	stw	ra,12(sp)
   4ab98:	df000215 	stw	fp,8(sp)
   4ab9c:	df000204 	addi	fp,sp,8
   4aba0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4aba4:	e0bfff17 	ldw	r2,-4(fp)
   4aba8:	10800017 	ldw	r2,0(r2)
   4abac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4abb0:	e0bffe17 	ldw	r2,-8(fp)
   4abb4:	10c00a04 	addi	r3,r2,40
   4abb8:	e0bfff17 	ldw	r2,-4(fp)
   4abbc:	10800217 	ldw	r2,8(r2)
   4abc0:	100b883a 	mov	r5,r2
   4abc4:	1809883a 	mov	r4,r3
   4abc8:	004afa00 	call	4afa0 <altera_avalon_jtag_uart_close>
}
   4abcc:	e037883a 	mov	sp,fp
   4abd0:	dfc00117 	ldw	ra,4(sp)
   4abd4:	df000017 	ldw	fp,0(sp)
   4abd8:	dec00204 	addi	sp,sp,8
   4abdc:	f800283a 	ret

0004abe0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4abe0:	defffa04 	addi	sp,sp,-24
   4abe4:	dfc00515 	stw	ra,20(sp)
   4abe8:	df000415 	stw	fp,16(sp)
   4abec:	df000404 	addi	fp,sp,16
   4abf0:	e13ffd15 	stw	r4,-12(fp)
   4abf4:	e17ffe15 	stw	r5,-8(fp)
   4abf8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4abfc:	e0bffd17 	ldw	r2,-12(fp)
   4ac00:	10800017 	ldw	r2,0(r2)
   4ac04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4ac08:	e0bffc17 	ldw	r2,-16(fp)
   4ac0c:	10800a04 	addi	r2,r2,40
   4ac10:	e1bfff17 	ldw	r6,-4(fp)
   4ac14:	e17ffe17 	ldw	r5,-8(fp)
   4ac18:	1009883a 	mov	r4,r2
   4ac1c:	004b0080 	call	4b008 <altera_avalon_jtag_uart_ioctl>
}
   4ac20:	e037883a 	mov	sp,fp
   4ac24:	dfc00117 	ldw	ra,4(sp)
   4ac28:	df000017 	ldw	fp,0(sp)
   4ac2c:	dec00204 	addi	sp,sp,8
   4ac30:	f800283a 	ret

0004ac34 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4ac34:	defffa04 	addi	sp,sp,-24
   4ac38:	dfc00515 	stw	ra,20(sp)
   4ac3c:	df000415 	stw	fp,16(sp)
   4ac40:	df000404 	addi	fp,sp,16
   4ac44:	e13ffd15 	stw	r4,-12(fp)
   4ac48:	e17ffe15 	stw	r5,-8(fp)
   4ac4c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4ac50:	e0bffd17 	ldw	r2,-12(fp)
   4ac54:	00c00044 	movi	r3,1
   4ac58:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4ac5c:	e0bffd17 	ldw	r2,-12(fp)
   4ac60:	10800017 	ldw	r2,0(r2)
   4ac64:	10800104 	addi	r2,r2,4
   4ac68:	1007883a 	mov	r3,r2
   4ac6c:	e0bffd17 	ldw	r2,-12(fp)
   4ac70:	10800817 	ldw	r2,32(r2)
   4ac74:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4ac78:	e0bffe17 	ldw	r2,-8(fp)
   4ac7c:	e0ffff17 	ldw	r3,-4(fp)
   4ac80:	d8000015 	stw	zero,0(sp)
   4ac84:	e1fffd17 	ldw	r7,-12(fp)
   4ac88:	01800174 	movhi	r6,5
   4ac8c:	31ab3d04 	addi	r6,r6,-21260
   4ac90:	180b883a 	mov	r5,r3
   4ac94:	1009883a 	mov	r4,r2
   4ac98:	00495940 	call	49594 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4ac9c:	e0bffd17 	ldw	r2,-12(fp)
   4aca0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4aca4:	e0bffd17 	ldw	r2,-12(fp)
   4aca8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4acac:	d0e02017 	ldw	r3,-32640(gp)
   4acb0:	e1fffd17 	ldw	r7,-12(fp)
   4acb4:	01800174 	movhi	r6,5
   4acb8:	31abc004 	addi	r6,r6,-20736
   4acbc:	180b883a 	mov	r5,r3
   4acc0:	1009883a 	mov	r4,r2
   4acc4:	004bc680 	call	4bc68 <alt_alarm_start>
   4acc8:	1000040e 	bge	r2,zero,4acdc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4accc:	e0fffd17 	ldw	r3,-12(fp)
   4acd0:	00a00034 	movhi	r2,32768
   4acd4:	10bfffc4 	addi	r2,r2,-1
   4acd8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4acdc:	0001883a 	nop
   4ace0:	e037883a 	mov	sp,fp
   4ace4:	dfc00117 	ldw	ra,4(sp)
   4ace8:	df000017 	ldw	fp,0(sp)
   4acec:	dec00204 	addi	sp,sp,8
   4acf0:	f800283a 	ret

0004acf4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4acf4:	defff804 	addi	sp,sp,-32
   4acf8:	df000715 	stw	fp,28(sp)
   4acfc:	df000704 	addi	fp,sp,28
   4ad00:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4ad04:	e0bfff17 	ldw	r2,-4(fp)
   4ad08:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4ad0c:	e0bffb17 	ldw	r2,-20(fp)
   4ad10:	10800017 	ldw	r2,0(r2)
   4ad14:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4ad18:	e0bffc17 	ldw	r2,-16(fp)
   4ad1c:	10800104 	addi	r2,r2,4
   4ad20:	10800037 	ldwio	r2,0(r2)
   4ad24:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4ad28:	e0bffd17 	ldw	r2,-12(fp)
   4ad2c:	1080c00c 	andi	r2,r2,768
   4ad30:	10006d26 	beq	r2,zero,4aee8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4ad34:	e0bffd17 	ldw	r2,-12(fp)
   4ad38:	1080400c 	andi	r2,r2,256
   4ad3c:	10003526 	beq	r2,zero,4ae14 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4ad40:	00800074 	movhi	r2,1
   4ad44:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ad48:	e0bffb17 	ldw	r2,-20(fp)
   4ad4c:	10800a17 	ldw	r2,40(r2)
   4ad50:	10800044 	addi	r2,r2,1
   4ad54:	1081ffcc 	andi	r2,r2,2047
   4ad58:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4ad5c:	e0bffb17 	ldw	r2,-20(fp)
   4ad60:	10c00b17 	ldw	r3,44(r2)
   4ad64:	e0bffe17 	ldw	r2,-8(fp)
   4ad68:	18801526 	beq	r3,r2,4adc0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4ad6c:	e0bffc17 	ldw	r2,-16(fp)
   4ad70:	10800037 	ldwio	r2,0(r2)
   4ad74:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4ad78:	e0bff917 	ldw	r2,-28(fp)
   4ad7c:	10a0000c 	andi	r2,r2,32768
   4ad80:	10001126 	beq	r2,zero,4adc8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4ad84:	e0bffb17 	ldw	r2,-20(fp)
   4ad88:	10800a17 	ldw	r2,40(r2)
   4ad8c:	e0fff917 	ldw	r3,-28(fp)
   4ad90:	1809883a 	mov	r4,r3
   4ad94:	e0fffb17 	ldw	r3,-20(fp)
   4ad98:	1885883a 	add	r2,r3,r2
   4ad9c:	10800e04 	addi	r2,r2,56
   4ada0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ada4:	e0bffb17 	ldw	r2,-20(fp)
   4ada8:	10800a17 	ldw	r2,40(r2)
   4adac:	10800044 	addi	r2,r2,1
   4adb0:	10c1ffcc 	andi	r3,r2,2047
   4adb4:	e0bffb17 	ldw	r2,-20(fp)
   4adb8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4adbc:	003fe206 	br	4ad48 <__alt_mem_epcs_flash+0xfffc9d48>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4adc0:	0001883a 	nop
   4adc4:	00000106 	br	4adcc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4adc8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4adcc:	e0bff917 	ldw	r2,-28(fp)
   4add0:	10bfffec 	andhi	r2,r2,65535
   4add4:	10000f26 	beq	r2,zero,4ae14 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4add8:	e0bffb17 	ldw	r2,-20(fp)
   4addc:	10c00817 	ldw	r3,32(r2)
   4ade0:	00bfff84 	movi	r2,-2
   4ade4:	1886703a 	and	r3,r3,r2
   4ade8:	e0bffb17 	ldw	r2,-20(fp)
   4adec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4adf0:	e0bffc17 	ldw	r2,-16(fp)
   4adf4:	10800104 	addi	r2,r2,4
   4adf8:	1007883a 	mov	r3,r2
   4adfc:	e0bffb17 	ldw	r2,-20(fp)
   4ae00:	10800817 	ldw	r2,32(r2)
   4ae04:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4ae08:	e0bffc17 	ldw	r2,-16(fp)
   4ae0c:	10800104 	addi	r2,r2,4
   4ae10:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4ae14:	e0bffd17 	ldw	r2,-12(fp)
   4ae18:	1080800c 	andi	r2,r2,512
   4ae1c:	103fbe26 	beq	r2,zero,4ad18 <__alt_mem_epcs_flash+0xfffc9d18>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4ae20:	e0bffd17 	ldw	r2,-12(fp)
   4ae24:	1004d43a 	srli	r2,r2,16
   4ae28:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4ae2c:	00001406 	br	4ae80 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4ae30:	e0bffc17 	ldw	r2,-16(fp)
   4ae34:	e0fffb17 	ldw	r3,-20(fp)
   4ae38:	18c00d17 	ldw	r3,52(r3)
   4ae3c:	e13ffb17 	ldw	r4,-20(fp)
   4ae40:	20c7883a 	add	r3,r4,r3
   4ae44:	18c20e04 	addi	r3,r3,2104
   4ae48:	18c00003 	ldbu	r3,0(r3)
   4ae4c:	18c03fcc 	andi	r3,r3,255
   4ae50:	18c0201c 	xori	r3,r3,128
   4ae54:	18ffe004 	addi	r3,r3,-128
   4ae58:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ae5c:	e0bffb17 	ldw	r2,-20(fp)
   4ae60:	10800d17 	ldw	r2,52(r2)
   4ae64:	10800044 	addi	r2,r2,1
   4ae68:	10c1ffcc 	andi	r3,r2,2047
   4ae6c:	e0bffb17 	ldw	r2,-20(fp)
   4ae70:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4ae74:	e0bffa17 	ldw	r2,-24(fp)
   4ae78:	10bfffc4 	addi	r2,r2,-1
   4ae7c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4ae80:	e0bffa17 	ldw	r2,-24(fp)
   4ae84:	10000526 	beq	r2,zero,4ae9c <altera_avalon_jtag_uart_irq+0x1a8>
   4ae88:	e0bffb17 	ldw	r2,-20(fp)
   4ae8c:	10c00d17 	ldw	r3,52(r2)
   4ae90:	e0bffb17 	ldw	r2,-20(fp)
   4ae94:	10800c17 	ldw	r2,48(r2)
   4ae98:	18bfe51e 	bne	r3,r2,4ae30 <__alt_mem_epcs_flash+0xfffc9e30>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4ae9c:	e0bffa17 	ldw	r2,-24(fp)
   4aea0:	103f9d26 	beq	r2,zero,4ad18 <__alt_mem_epcs_flash+0xfffc9d18>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4aea4:	e0bffb17 	ldw	r2,-20(fp)
   4aea8:	10c00817 	ldw	r3,32(r2)
   4aeac:	00bfff44 	movi	r2,-3
   4aeb0:	1886703a 	and	r3,r3,r2
   4aeb4:	e0bffb17 	ldw	r2,-20(fp)
   4aeb8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4aebc:	e0bffb17 	ldw	r2,-20(fp)
   4aec0:	10800017 	ldw	r2,0(r2)
   4aec4:	10800104 	addi	r2,r2,4
   4aec8:	1007883a 	mov	r3,r2
   4aecc:	e0bffb17 	ldw	r2,-20(fp)
   4aed0:	10800817 	ldw	r2,32(r2)
   4aed4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4aed8:	e0bffc17 	ldw	r2,-16(fp)
   4aedc:	10800104 	addi	r2,r2,4
   4aee0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4aee4:	003f8c06 	br	4ad18 <__alt_mem_epcs_flash+0xfffc9d18>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4aee8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4aeec:	0001883a 	nop
   4aef0:	e037883a 	mov	sp,fp
   4aef4:	df000017 	ldw	fp,0(sp)
   4aef8:	dec00104 	addi	sp,sp,4
   4aefc:	f800283a 	ret

0004af00 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4af00:	defff804 	addi	sp,sp,-32
   4af04:	df000715 	stw	fp,28(sp)
   4af08:	df000704 	addi	fp,sp,28
   4af0c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4af10:	e0bffb17 	ldw	r2,-20(fp)
   4af14:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4af18:	e0bff917 	ldw	r2,-28(fp)
   4af1c:	10800017 	ldw	r2,0(r2)
   4af20:	10800104 	addi	r2,r2,4
   4af24:	10800037 	ldwio	r2,0(r2)
   4af28:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4af2c:	e0bffa17 	ldw	r2,-24(fp)
   4af30:	1081000c 	andi	r2,r2,1024
   4af34:	10000b26 	beq	r2,zero,4af64 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4af38:	e0bff917 	ldw	r2,-28(fp)
   4af3c:	10800017 	ldw	r2,0(r2)
   4af40:	10800104 	addi	r2,r2,4
   4af44:	1007883a 	mov	r3,r2
   4af48:	e0bff917 	ldw	r2,-28(fp)
   4af4c:	10800817 	ldw	r2,32(r2)
   4af50:	10810014 	ori	r2,r2,1024
   4af54:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4af58:	e0bff917 	ldw	r2,-28(fp)
   4af5c:	10000915 	stw	zero,36(r2)
   4af60:	00000a06 	br	4af8c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4af64:	e0bff917 	ldw	r2,-28(fp)
   4af68:	10c00917 	ldw	r3,36(r2)
   4af6c:	00a00034 	movhi	r2,32768
   4af70:	10bfff04 	addi	r2,r2,-4
   4af74:	10c00536 	bltu	r2,r3,4af8c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   4af78:	e0bff917 	ldw	r2,-28(fp)
   4af7c:	10800917 	ldw	r2,36(r2)
   4af80:	10c00044 	addi	r3,r2,1
   4af84:	e0bff917 	ldw	r2,-28(fp)
   4af88:	10c00915 	stw	r3,36(r2)
   4af8c:	d0a02017 	ldw	r2,-32640(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4af90:	e037883a 	mov	sp,fp
   4af94:	df000017 	ldw	fp,0(sp)
   4af98:	dec00104 	addi	sp,sp,4
   4af9c:	f800283a 	ret

0004afa0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4afa0:	defffd04 	addi	sp,sp,-12
   4afa4:	df000215 	stw	fp,8(sp)
   4afa8:	df000204 	addi	fp,sp,8
   4afac:	e13ffe15 	stw	r4,-8(fp)
   4afb0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4afb4:	00000506 	br	4afcc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4afb8:	e0bfff17 	ldw	r2,-4(fp)
   4afbc:	1090000c 	andi	r2,r2,16384
   4afc0:	10000226 	beq	r2,zero,4afcc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4afc4:	00bffd44 	movi	r2,-11
   4afc8:	00000b06 	br	4aff8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4afcc:	e0bffe17 	ldw	r2,-8(fp)
   4afd0:	10c00d17 	ldw	r3,52(r2)
   4afd4:	e0bffe17 	ldw	r2,-8(fp)
   4afd8:	10800c17 	ldw	r2,48(r2)
   4afdc:	18800526 	beq	r3,r2,4aff4 <altera_avalon_jtag_uart_close+0x54>
   4afe0:	e0bffe17 	ldw	r2,-8(fp)
   4afe4:	10c00917 	ldw	r3,36(r2)
   4afe8:	e0bffe17 	ldw	r2,-8(fp)
   4afec:	10800117 	ldw	r2,4(r2)
   4aff0:	18bff136 	bltu	r3,r2,4afb8 <__alt_mem_epcs_flash+0xfffc9fb8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4aff4:	0005883a 	mov	r2,zero
}
   4aff8:	e037883a 	mov	sp,fp
   4affc:	df000017 	ldw	fp,0(sp)
   4b000:	dec00104 	addi	sp,sp,4
   4b004:	f800283a 	ret

0004b008 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4b008:	defffa04 	addi	sp,sp,-24
   4b00c:	df000515 	stw	fp,20(sp)
   4b010:	df000504 	addi	fp,sp,20
   4b014:	e13ffd15 	stw	r4,-12(fp)
   4b018:	e17ffe15 	stw	r5,-8(fp)
   4b01c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4b020:	00bff9c4 	movi	r2,-25
   4b024:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4b028:	e0bffe17 	ldw	r2,-8(fp)
   4b02c:	10da8060 	cmpeqi	r3,r2,27137
   4b030:	1800031e 	bne	r3,zero,4b040 <altera_avalon_jtag_uart_ioctl+0x38>
   4b034:	109a80a0 	cmpeqi	r2,r2,27138
   4b038:	1000181e 	bne	r2,zero,4b09c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   4b03c:	00002906 	br	4b0e4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4b040:	e0bffd17 	ldw	r2,-12(fp)
   4b044:	10c00117 	ldw	r3,4(r2)
   4b048:	00a00034 	movhi	r2,32768
   4b04c:	10bfffc4 	addi	r2,r2,-1
   4b050:	18802126 	beq	r3,r2,4b0d8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   4b054:	e0bfff17 	ldw	r2,-4(fp)
   4b058:	10800017 	ldw	r2,0(r2)
   4b05c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4b060:	e0bffc17 	ldw	r2,-16(fp)
   4b064:	10800090 	cmplti	r2,r2,2
   4b068:	1000061e 	bne	r2,zero,4b084 <altera_avalon_jtag_uart_ioctl+0x7c>
   4b06c:	e0fffc17 	ldw	r3,-16(fp)
   4b070:	00a00034 	movhi	r2,32768
   4b074:	10bfffc4 	addi	r2,r2,-1
   4b078:	18800226 	beq	r3,r2,4b084 <altera_avalon_jtag_uart_ioctl+0x7c>
   4b07c:	e0bffc17 	ldw	r2,-16(fp)
   4b080:	00000206 	br	4b08c <altera_avalon_jtag_uart_ioctl+0x84>
   4b084:	00a00034 	movhi	r2,32768
   4b088:	10bfff84 	addi	r2,r2,-2
   4b08c:	e0fffd17 	ldw	r3,-12(fp)
   4b090:	18800115 	stw	r2,4(r3)
      rc = 0;
   4b094:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4b098:	00000f06 	br	4b0d8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4b09c:	e0bffd17 	ldw	r2,-12(fp)
   4b0a0:	10c00117 	ldw	r3,4(r2)
   4b0a4:	00a00034 	movhi	r2,32768
   4b0a8:	10bfffc4 	addi	r2,r2,-1
   4b0ac:	18800c26 	beq	r3,r2,4b0e0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4b0b0:	e0bffd17 	ldw	r2,-12(fp)
   4b0b4:	10c00917 	ldw	r3,36(r2)
   4b0b8:	e0bffd17 	ldw	r2,-12(fp)
   4b0bc:	10800117 	ldw	r2,4(r2)
   4b0c0:	1885803a 	cmpltu	r2,r3,r2
   4b0c4:	10c03fcc 	andi	r3,r2,255
   4b0c8:	e0bfff17 	ldw	r2,-4(fp)
   4b0cc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4b0d0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4b0d4:	00000206 	br	4b0e0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4b0d8:	0001883a 	nop
   4b0dc:	00000106 	br	4b0e4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4b0e0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4b0e4:	e0bffb17 	ldw	r2,-20(fp)
}
   4b0e8:	e037883a 	mov	sp,fp
   4b0ec:	df000017 	ldw	fp,0(sp)
   4b0f0:	dec00104 	addi	sp,sp,4
   4b0f4:	f800283a 	ret

0004b0f8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4b0f8:	defff304 	addi	sp,sp,-52
   4b0fc:	dfc00c15 	stw	ra,48(sp)
   4b100:	df000b15 	stw	fp,44(sp)
   4b104:	df000b04 	addi	fp,sp,44
   4b108:	e13ffc15 	stw	r4,-16(fp)
   4b10c:	e17ffd15 	stw	r5,-12(fp)
   4b110:	e1bffe15 	stw	r6,-8(fp)
   4b114:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4b118:	e0bffd17 	ldw	r2,-12(fp)
   4b11c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4b120:	00004706 	br	4b240 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4b124:	e0bffc17 	ldw	r2,-16(fp)
   4b128:	10800a17 	ldw	r2,40(r2)
   4b12c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4b130:	e0bffc17 	ldw	r2,-16(fp)
   4b134:	10800b17 	ldw	r2,44(r2)
   4b138:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4b13c:	e0fff717 	ldw	r3,-36(fp)
   4b140:	e0bff817 	ldw	r2,-32(fp)
   4b144:	18800536 	bltu	r3,r2,4b15c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4b148:	e0fff717 	ldw	r3,-36(fp)
   4b14c:	e0bff817 	ldw	r2,-32(fp)
   4b150:	1885c83a 	sub	r2,r3,r2
   4b154:	e0bff615 	stw	r2,-40(fp)
   4b158:	00000406 	br	4b16c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4b15c:	00c20004 	movi	r3,2048
   4b160:	e0bff817 	ldw	r2,-32(fp)
   4b164:	1885c83a 	sub	r2,r3,r2
   4b168:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4b16c:	e0bff617 	ldw	r2,-40(fp)
   4b170:	10001e26 	beq	r2,zero,4b1ec <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4b174:	e0fffe17 	ldw	r3,-8(fp)
   4b178:	e0bff617 	ldw	r2,-40(fp)
   4b17c:	1880022e 	bgeu	r3,r2,4b188 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4b180:	e0bffe17 	ldw	r2,-8(fp)
   4b184:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4b188:	e0bffc17 	ldw	r2,-16(fp)
   4b18c:	10c00e04 	addi	r3,r2,56
   4b190:	e0bff817 	ldw	r2,-32(fp)
   4b194:	1885883a 	add	r2,r3,r2
   4b198:	e1bff617 	ldw	r6,-40(fp)
   4b19c:	100b883a 	mov	r5,r2
   4b1a0:	e13ff517 	ldw	r4,-44(fp)
   4b1a4:	00490240 	call	49024 <memcpy>
      ptr   += n;
   4b1a8:	e0fff517 	ldw	r3,-44(fp)
   4b1ac:	e0bff617 	ldw	r2,-40(fp)
   4b1b0:	1885883a 	add	r2,r3,r2
   4b1b4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4b1b8:	e0fffe17 	ldw	r3,-8(fp)
   4b1bc:	e0bff617 	ldw	r2,-40(fp)
   4b1c0:	1885c83a 	sub	r2,r3,r2
   4b1c4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b1c8:	e0fff817 	ldw	r3,-32(fp)
   4b1cc:	e0bff617 	ldw	r2,-40(fp)
   4b1d0:	1885883a 	add	r2,r3,r2
   4b1d4:	10c1ffcc 	andi	r3,r2,2047
   4b1d8:	e0bffc17 	ldw	r2,-16(fp)
   4b1dc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4b1e0:	e0bffe17 	ldw	r2,-8(fp)
   4b1e4:	00bfcf16 	blt	zero,r2,4b124 <__alt_mem_epcs_flash+0xfffca124>
   4b1e8:	00000106 	br	4b1f0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4b1ec:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4b1f0:	e0fff517 	ldw	r3,-44(fp)
   4b1f4:	e0bffd17 	ldw	r2,-12(fp)
   4b1f8:	1880141e 	bne	r3,r2,4b24c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4b1fc:	e0bfff17 	ldw	r2,-4(fp)
   4b200:	1090000c 	andi	r2,r2,16384
   4b204:	1000131e 	bne	r2,zero,4b254 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4b208:	0001883a 	nop
   4b20c:	e0bffc17 	ldw	r2,-16(fp)
   4b210:	10c00a17 	ldw	r3,40(r2)
   4b214:	e0bff717 	ldw	r2,-36(fp)
   4b218:	1880051e 	bne	r3,r2,4b230 <altera_avalon_jtag_uart_read+0x138>
   4b21c:	e0bffc17 	ldw	r2,-16(fp)
   4b220:	10c00917 	ldw	r3,36(r2)
   4b224:	e0bffc17 	ldw	r2,-16(fp)
   4b228:	10800117 	ldw	r2,4(r2)
   4b22c:	18bff736 	bltu	r3,r2,4b20c <__alt_mem_epcs_flash+0xfffca20c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4b230:	e0bffc17 	ldw	r2,-16(fp)
   4b234:	10c00a17 	ldw	r3,40(r2)
   4b238:	e0bff717 	ldw	r2,-36(fp)
   4b23c:	18800726 	beq	r3,r2,4b25c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4b240:	e0bffe17 	ldw	r2,-8(fp)
   4b244:	00bfb716 	blt	zero,r2,4b124 <__alt_mem_epcs_flash+0xfffca124>
   4b248:	00000506 	br	4b260 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4b24c:	0001883a 	nop
   4b250:	00000306 	br	4b260 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4b254:	0001883a 	nop
   4b258:	00000106 	br	4b260 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4b25c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4b260:	e0fff517 	ldw	r3,-44(fp)
   4b264:	e0bffd17 	ldw	r2,-12(fp)
   4b268:	18801826 	beq	r3,r2,4b2cc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b26c:	0005303a 	rdctl	r2,status
   4b270:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b274:	e0fffb17 	ldw	r3,-20(fp)
   4b278:	00bfff84 	movi	r2,-2
   4b27c:	1884703a 	and	r2,r3,r2
   4b280:	1001703a 	wrctl	status,r2
  
  return context;
   4b284:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4b288:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4b28c:	e0bffc17 	ldw	r2,-16(fp)
   4b290:	10800817 	ldw	r2,32(r2)
   4b294:	10c00054 	ori	r3,r2,1
   4b298:	e0bffc17 	ldw	r2,-16(fp)
   4b29c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b2a0:	e0bffc17 	ldw	r2,-16(fp)
   4b2a4:	10800017 	ldw	r2,0(r2)
   4b2a8:	10800104 	addi	r2,r2,4
   4b2ac:	1007883a 	mov	r3,r2
   4b2b0:	e0bffc17 	ldw	r2,-16(fp)
   4b2b4:	10800817 	ldw	r2,32(r2)
   4b2b8:	18800035 	stwio	r2,0(r3)
   4b2bc:	e0bffa17 	ldw	r2,-24(fp)
   4b2c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b2c4:	e0bff917 	ldw	r2,-28(fp)
   4b2c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4b2cc:	e0fff517 	ldw	r3,-44(fp)
   4b2d0:	e0bffd17 	ldw	r2,-12(fp)
   4b2d4:	18800426 	beq	r3,r2,4b2e8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   4b2d8:	e0fff517 	ldw	r3,-44(fp)
   4b2dc:	e0bffd17 	ldw	r2,-12(fp)
   4b2e0:	1885c83a 	sub	r2,r3,r2
   4b2e4:	00000606 	br	4b300 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   4b2e8:	e0bfff17 	ldw	r2,-4(fp)
   4b2ec:	1090000c 	andi	r2,r2,16384
   4b2f0:	10000226 	beq	r2,zero,4b2fc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4b2f4:	00bffd44 	movi	r2,-11
   4b2f8:	00000106 	br	4b300 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   4b2fc:	00bffec4 	movi	r2,-5
}
   4b300:	e037883a 	mov	sp,fp
   4b304:	dfc00117 	ldw	ra,4(sp)
   4b308:	df000017 	ldw	fp,0(sp)
   4b30c:	dec00204 	addi	sp,sp,8
   4b310:	f800283a 	ret

0004b314 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4b314:	defff304 	addi	sp,sp,-52
   4b318:	dfc00c15 	stw	ra,48(sp)
   4b31c:	df000b15 	stw	fp,44(sp)
   4b320:	df000b04 	addi	fp,sp,44
   4b324:	e13ffc15 	stw	r4,-16(fp)
   4b328:	e17ffd15 	stw	r5,-12(fp)
   4b32c:	e1bffe15 	stw	r6,-8(fp)
   4b330:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4b334:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4b338:	e0bffd17 	ldw	r2,-12(fp)
   4b33c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4b340:	00003706 	br	4b420 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4b344:	e0bffc17 	ldw	r2,-16(fp)
   4b348:	10800c17 	ldw	r2,48(r2)
   4b34c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   4b350:	e0bffc17 	ldw	r2,-16(fp)
   4b354:	10800d17 	ldw	r2,52(r2)
   4b358:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4b35c:	e0fff917 	ldw	r3,-28(fp)
   4b360:	e0bff517 	ldw	r2,-44(fp)
   4b364:	1880062e 	bgeu	r3,r2,4b380 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4b368:	e0fff517 	ldw	r3,-44(fp)
   4b36c:	e0bff917 	ldw	r2,-28(fp)
   4b370:	1885c83a 	sub	r2,r3,r2
   4b374:	10bfffc4 	addi	r2,r2,-1
   4b378:	e0bff615 	stw	r2,-40(fp)
   4b37c:	00000b06 	br	4b3ac <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4b380:	e0bff517 	ldw	r2,-44(fp)
   4b384:	10000526 	beq	r2,zero,4b39c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4b388:	00c20004 	movi	r3,2048
   4b38c:	e0bff917 	ldw	r2,-28(fp)
   4b390:	1885c83a 	sub	r2,r3,r2
   4b394:	e0bff615 	stw	r2,-40(fp)
   4b398:	00000406 	br	4b3ac <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4b39c:	00c1ffc4 	movi	r3,2047
   4b3a0:	e0bff917 	ldw	r2,-28(fp)
   4b3a4:	1885c83a 	sub	r2,r3,r2
   4b3a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4b3ac:	e0bff617 	ldw	r2,-40(fp)
   4b3b0:	10001e26 	beq	r2,zero,4b42c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4b3b4:	e0fffe17 	ldw	r3,-8(fp)
   4b3b8:	e0bff617 	ldw	r2,-40(fp)
   4b3bc:	1880022e 	bgeu	r3,r2,4b3c8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4b3c0:	e0bffe17 	ldw	r2,-8(fp)
   4b3c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4b3c8:	e0bffc17 	ldw	r2,-16(fp)
   4b3cc:	10c20e04 	addi	r3,r2,2104
   4b3d0:	e0bff917 	ldw	r2,-28(fp)
   4b3d4:	1885883a 	add	r2,r3,r2
   4b3d8:	e1bff617 	ldw	r6,-40(fp)
   4b3dc:	e17ffd17 	ldw	r5,-12(fp)
   4b3e0:	1009883a 	mov	r4,r2
   4b3e4:	00490240 	call	49024 <memcpy>
      ptr   += n;
   4b3e8:	e0fffd17 	ldw	r3,-12(fp)
   4b3ec:	e0bff617 	ldw	r2,-40(fp)
   4b3f0:	1885883a 	add	r2,r3,r2
   4b3f4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4b3f8:	e0fffe17 	ldw	r3,-8(fp)
   4b3fc:	e0bff617 	ldw	r2,-40(fp)
   4b400:	1885c83a 	sub	r2,r3,r2
   4b404:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b408:	e0fff917 	ldw	r3,-28(fp)
   4b40c:	e0bff617 	ldw	r2,-40(fp)
   4b410:	1885883a 	add	r2,r3,r2
   4b414:	10c1ffcc 	andi	r3,r2,2047
   4b418:	e0bffc17 	ldw	r2,-16(fp)
   4b41c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4b420:	e0bffe17 	ldw	r2,-8(fp)
   4b424:	00bfc716 	blt	zero,r2,4b344 <__alt_mem_epcs_flash+0xfffca344>
   4b428:	00000106 	br	4b430 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4b42c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b430:	0005303a 	rdctl	r2,status
   4b434:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b438:	e0fffb17 	ldw	r3,-20(fp)
   4b43c:	00bfff84 	movi	r2,-2
   4b440:	1884703a 	and	r2,r3,r2
   4b444:	1001703a 	wrctl	status,r2
  
  return context;
   4b448:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4b44c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4b450:	e0bffc17 	ldw	r2,-16(fp)
   4b454:	10800817 	ldw	r2,32(r2)
   4b458:	10c00094 	ori	r3,r2,2
   4b45c:	e0bffc17 	ldw	r2,-16(fp)
   4b460:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b464:	e0bffc17 	ldw	r2,-16(fp)
   4b468:	10800017 	ldw	r2,0(r2)
   4b46c:	10800104 	addi	r2,r2,4
   4b470:	1007883a 	mov	r3,r2
   4b474:	e0bffc17 	ldw	r2,-16(fp)
   4b478:	10800817 	ldw	r2,32(r2)
   4b47c:	18800035 	stwio	r2,0(r3)
   4b480:	e0bffa17 	ldw	r2,-24(fp)
   4b484:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b488:	e0bff817 	ldw	r2,-32(fp)
   4b48c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4b490:	e0bffe17 	ldw	r2,-8(fp)
   4b494:	0080100e 	bge	zero,r2,4b4d8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4b498:	e0bfff17 	ldw	r2,-4(fp)
   4b49c:	1090000c 	andi	r2,r2,16384
   4b4a0:	1000101e 	bne	r2,zero,4b4e4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4b4a4:	0001883a 	nop
   4b4a8:	e0bffc17 	ldw	r2,-16(fp)
   4b4ac:	10c00d17 	ldw	r3,52(r2)
   4b4b0:	e0bff517 	ldw	r2,-44(fp)
   4b4b4:	1880051e 	bne	r3,r2,4b4cc <altera_avalon_jtag_uart_write+0x1b8>
   4b4b8:	e0bffc17 	ldw	r2,-16(fp)
   4b4bc:	10c00917 	ldw	r3,36(r2)
   4b4c0:	e0bffc17 	ldw	r2,-16(fp)
   4b4c4:	10800117 	ldw	r2,4(r2)
   4b4c8:	18bff736 	bltu	r3,r2,4b4a8 <__alt_mem_epcs_flash+0xfffca4a8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   4b4cc:	e0bffc17 	ldw	r2,-16(fp)
   4b4d0:	10800917 	ldw	r2,36(r2)
   4b4d4:	1000051e 	bne	r2,zero,4b4ec <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4b4d8:	e0bffe17 	ldw	r2,-8(fp)
   4b4dc:	00bfd016 	blt	zero,r2,4b420 <__alt_mem_epcs_flash+0xfffca420>
   4b4e0:	00000306 	br	4b4f0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4b4e4:	0001883a 	nop
   4b4e8:	00000106 	br	4b4f0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   4b4ec:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4b4f0:	e0fffd17 	ldw	r3,-12(fp)
   4b4f4:	e0bff717 	ldw	r2,-36(fp)
   4b4f8:	18800426 	beq	r3,r2,4b50c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4b4fc:	e0fffd17 	ldw	r3,-12(fp)
   4b500:	e0bff717 	ldw	r2,-36(fp)
   4b504:	1885c83a 	sub	r2,r3,r2
   4b508:	00000606 	br	4b524 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4b50c:	e0bfff17 	ldw	r2,-4(fp)
   4b510:	1090000c 	andi	r2,r2,16384
   4b514:	10000226 	beq	r2,zero,4b520 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4b518:	00bffd44 	movi	r2,-11
   4b51c:	00000106 	br	4b524 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4b520:	00bffec4 	movi	r2,-5
}
   4b524:	e037883a 	mov	sp,fp
   4b528:	dfc00117 	ldw	ra,4(sp)
   4b52c:	df000017 	ldw	fp,0(sp)
   4b530:	dec00204 	addi	sp,sp,8
   4b534:	f800283a 	ret

0004b538 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4b538:	defffa04 	addi	sp,sp,-24
   4b53c:	dfc00515 	stw	ra,20(sp)
   4b540:	df000415 	stw	fp,16(sp)
   4b544:	df000404 	addi	fp,sp,16
   4b548:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4b54c:	0007883a 	mov	r3,zero
   4b550:	e0bfff17 	ldw	r2,-4(fp)
   4b554:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4b558:	e0bfff17 	ldw	r2,-4(fp)
   4b55c:	10800104 	addi	r2,r2,4
   4b560:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b564:	0005303a 	rdctl	r2,status
   4b568:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b56c:	e0fffd17 	ldw	r3,-12(fp)
   4b570:	00bfff84 	movi	r2,-2
   4b574:	1884703a 	and	r2,r3,r2
   4b578:	1001703a 	wrctl	status,r2
  
  return context;
   4b57c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4b580:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4b584:	004c6800 	call	4c680 <alt_tick>
   4b588:	e0bffc17 	ldw	r2,-16(fp)
   4b58c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b590:	e0bffe17 	ldw	r2,-8(fp)
   4b594:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4b598:	0001883a 	nop
   4b59c:	e037883a 	mov	sp,fp
   4b5a0:	dfc00117 	ldw	ra,4(sp)
   4b5a4:	df000017 	ldw	fp,0(sp)
   4b5a8:	dec00204 	addi	sp,sp,8
   4b5ac:	f800283a 	ret

0004b5b0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4b5b0:	defff804 	addi	sp,sp,-32
   4b5b4:	dfc00715 	stw	ra,28(sp)
   4b5b8:	df000615 	stw	fp,24(sp)
   4b5bc:	df000604 	addi	fp,sp,24
   4b5c0:	e13ffc15 	stw	r4,-16(fp)
   4b5c4:	e17ffd15 	stw	r5,-12(fp)
   4b5c8:	e1bffe15 	stw	r6,-8(fp)
   4b5cc:	e1ffff15 	stw	r7,-4(fp)
   4b5d0:	e0bfff17 	ldw	r2,-4(fp)
   4b5d4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4b5d8:	d0a02017 	ldw	r2,-32640(gp)
   4b5dc:	1000021e 	bne	r2,zero,4b5e8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   4b5e0:	e0bffb17 	ldw	r2,-20(fp)
   4b5e4:	d0a02015 	stw	r2,-32640(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4b5e8:	e0bffc17 	ldw	r2,-16(fp)
   4b5ec:	10800104 	addi	r2,r2,4
   4b5f0:	00c001c4 	movi	r3,7
   4b5f4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4b5f8:	d8000015 	stw	zero,0(sp)
   4b5fc:	e1fffc17 	ldw	r7,-16(fp)
   4b600:	01800174 	movhi	r6,5
   4b604:	31ad4e04 	addi	r6,r6,-19144
   4b608:	e17ffe17 	ldw	r5,-8(fp)
   4b60c:	e13ffd17 	ldw	r4,-12(fp)
   4b610:	00495940 	call	49594 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4b614:	0001883a 	nop
   4b618:	e037883a 	mov	sp,fp
   4b61c:	dfc00117 	ldw	ra,4(sp)
   4b620:	df000017 	ldw	fp,0(sp)
   4b624:	dec00204 	addi	sp,sp,8
   4b628:	f800283a 	ret

0004b62c <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
   4b62c:	defff904 	addi	sp,sp,-28
   4b630:	dfc00615 	stw	ra,24(sp)
   4b634:	df000515 	stw	fp,20(sp)
   4b638:	df000504 	addi	fp,sp,20
   4b63c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
   4b640:	00800144 	movi	r2,5
   4b644:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
   4b648:	d8000215 	stw	zero,8(sp)
   4b64c:	e0bffe44 	addi	r2,fp,-7
   4b650:	d8800115 	stw	r2,4(sp)
   4b654:	00800044 	movi	r2,1
   4b658:	d8800015 	stw	r2,0(sp)
   4b65c:	e1fffe04 	addi	r7,fp,-8
   4b660:	01800044 	movi	r6,1
   4b664:	000b883a 	mov	r5,zero
   4b668:	e13fff17 	ldw	r4,-4(fp)
   4b66c:	004c7ac0 	call	4c7ac <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
   4b670:	e0bffe43 	ldbu	r2,-7(fp)
}
   4b674:	e037883a 	mov	sp,fp
   4b678:	dfc00117 	ldw	ra,4(sp)
   4b67c:	df000017 	ldw	fp,0(sp)
   4b680:	dec00204 	addi	sp,sp,8
   4b684:	f800283a 	ret

0004b688 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
   4b688:	defffd04 	addi	sp,sp,-12
   4b68c:	dfc00215 	stw	ra,8(sp)
   4b690:	df000115 	stw	fp,4(sp)
   4b694:	df000104 	addi	fp,sp,4
   4b698:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
   4b69c:	e13fff17 	ldw	r4,-4(fp)
   4b6a0:	004b62c0 	call	4b62c <epcs_read_status_register>
   4b6a4:	10803fcc 	andi	r2,r2,255
   4b6a8:	1080004c 	andi	r2,r2,1
}
   4b6ac:	e037883a 	mov	sp,fp
   4b6b0:	dfc00117 	ldw	ra,4(sp)
   4b6b4:	df000017 	ldw	fp,0(sp)
   4b6b8:	dec00204 	addi	sp,sp,8
   4b6bc:	f800283a 	ret

0004b6c0 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
   4b6c0:	defffd04 	addi	sp,sp,-12
   4b6c4:	dfc00215 	stw	ra,8(sp)
   4b6c8:	df000115 	stw	fp,4(sp)
   4b6cc:	df000104 	addi	fp,sp,4
   4b6d0:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
   4b6d4:	0001883a 	nop
   4b6d8:	e13fff17 	ldw	r4,-4(fp)
   4b6dc:	004b6880 	call	4b688 <epcs_test_wip>
   4b6e0:	103ffd1e 	bne	r2,zero,4b6d8 <__alt_mem_epcs_flash+0xfffca6d8>
  {
  }
}
   4b6e4:	0001883a 	nop
   4b6e8:	e037883a 	mov	sp,fp
   4b6ec:	dfc00117 	ldw	ra,4(sp)
   4b6f0:	df000017 	ldw	fp,0(sp)
   4b6f4:	dec00204 	addi	sp,sp,8
   4b6f8:	f800283a 	ret

0004b6fc <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
   4b6fc:	defff604 	addi	sp,sp,-40
   4b700:	dfc00915 	stw	ra,36(sp)
   4b704:	df000815 	stw	fp,32(sp)
   4b708:	df000804 	addi	fp,sp,32
   4b70c:	e13ffd15 	stw	r4,-12(fp)
   4b710:	e17ffe15 	stw	r5,-8(fp)
   4b714:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
   4b718:	e0bfff17 	ldw	r2,-4(fp)
   4b71c:	10001226 	beq	r2,zero,4b768 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
   4b720:	00bff604 	movi	r2,-40
   4b724:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
   4b728:	e0bffe17 	ldw	r2,-8(fp)
   4b72c:	1004d63a 	srli	r2,r2,24
   4b730:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
   4b734:	e0bffe17 	ldw	r2,-8(fp)
   4b738:	1004d43a 	srli	r2,r2,16
   4b73c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
   4b740:	e0bffe17 	ldw	r2,-8(fp)
   4b744:	1004d23a 	srli	r2,r2,8
   4b748:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
   4b74c:	e0bffe17 	ldw	r2,-8(fp)
   4b750:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
   4b754:	00800144 	movi	r2,5
   4b758:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
   4b75c:	e13ffd17 	ldw	r4,-12(fp)
   4b760:	004bbb00 	call	4bbb0 <epcs_enter_4_bytes_mode>
   4b764:	00000c06 	br	4b798 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
   4b768:	00bff604 	movi	r2,-40
   4b76c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
   4b770:	e0bffe17 	ldw	r2,-8(fp)
   4b774:	1004d43a 	srli	r2,r2,16
   4b778:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
   4b77c:	e0bffe17 	ldw	r2,-8(fp)
   4b780:	1004d23a 	srli	r2,r2,8
   4b784:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
   4b788:	e0bffe17 	ldw	r2,-8(fp)
   4b78c:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
   4b790:	00800104 	movi	r2,4
   4b794:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
   4b798:	e13ffd17 	ldw	r4,-12(fp)
   4b79c:	004b8ec0 	call	4b8ec <epcs_write_enable>

  alt_avalon_spi_command(
   4b7a0:	e0bffb03 	ldbu	r2,-20(fp)
   4b7a4:	e0fffb44 	addi	r3,fp,-19
   4b7a8:	d8000215 	stw	zero,8(sp)
   4b7ac:	d8000115 	stw	zero,4(sp)
   4b7b0:	d8000015 	stw	zero,0(sp)
   4b7b4:	180f883a 	mov	r7,r3
   4b7b8:	100d883a 	mov	r6,r2
   4b7bc:	000b883a 	mov	r5,zero
   4b7c0:	e13ffd17 	ldw	r4,-12(fp)
   4b7c4:	004c7ac0 	call	4c7ac <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   4b7c8:	e13ffd17 	ldw	r4,-12(fp)
   4b7cc:	004b6c00 	call	4b6c0 <epcs_await_wip_released>

  if(four_bytes_mode)
   4b7d0:	e0bfff17 	ldw	r2,-4(fp)
   4b7d4:	10000226 	beq	r2,zero,4b7e0 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
   4b7d8:	e13ffd17 	ldw	r4,-12(fp)
   4b7dc:	004bc0c0 	call	4bc0c <epcs_exit_4_bytes_mode>
  }
}
   4b7e0:	0001883a 	nop
   4b7e4:	e037883a 	mov	sp,fp
   4b7e8:	dfc00117 	ldw	ra,4(sp)
   4b7ec:	df000017 	ldw	fp,0(sp)
   4b7f0:	dec00204 	addi	sp,sp,8
   4b7f4:	f800283a 	ret

0004b7f8 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
   4b7f8:	defff404 	addi	sp,sp,-48
   4b7fc:	dfc00b15 	stw	ra,44(sp)
   4b800:	df000a15 	stw	fp,40(sp)
   4b804:	df000a04 	addi	fp,sp,40
   4b808:	e13ffc15 	stw	r4,-16(fp)
   4b80c:	e17ffd15 	stw	r5,-12(fp)
   4b810:	e1bffe15 	stw	r6,-8(fp)
   4b814:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
   4b818:	008000c4 	movi	r2,3
   4b81c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   4b820:	e0800217 	ldw	r2,8(fp)
   4b824:	10001026 	beq	r2,zero,4b868 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
   4b828:	e0bffd17 	ldw	r2,-12(fp)
   4b82c:	1004d63a 	srli	r2,r2,24
   4b830:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
   4b834:	e0bffd17 	ldw	r2,-12(fp)
   4b838:	1005d43a 	srai	r2,r2,16
   4b83c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
   4b840:	e0bffd17 	ldw	r2,-12(fp)
   4b844:	1005d23a 	srai	r2,r2,8
   4b848:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
   4b84c:	e0bffd17 	ldw	r2,-12(fp)
   4b850:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
   4b854:	00800144 	movi	r2,5
   4b858:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
   4b85c:	e13ffc17 	ldw	r4,-16(fp)
   4b860:	004bbb00 	call	4bbb0 <epcs_enter_4_bytes_mode>
   4b864:	00000a06 	br	4b890 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
   4b868:	e0bffd17 	ldw	r2,-12(fp)
   4b86c:	1005d43a 	srai	r2,r2,16
   4b870:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
   4b874:	e0bffd17 	ldw	r2,-12(fp)
   4b878:	1005d23a 	srai	r2,r2,8
   4b87c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
   4b880:	e0bffd17 	ldw	r2,-12(fp)
   4b884:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
   4b888:	00800104 	movi	r2,4
   4b88c:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
   4b890:	e13ffc17 	ldw	r4,-16(fp)
   4b894:	004b6c00 	call	4b6c0 <epcs_await_wip_released>

  alt_avalon_spi_command(
   4b898:	e0bfff17 	ldw	r2,-4(fp)
   4b89c:	e13ffa04 	addi	r4,fp,-24
   4b8a0:	d8000215 	stw	zero,8(sp)
   4b8a4:	e0fffe17 	ldw	r3,-8(fp)
   4b8a8:	d8c00115 	stw	r3,4(sp)
   4b8ac:	d8800015 	stw	r2,0(sp)
   4b8b0:	200f883a 	mov	r7,r4
   4b8b4:	e1bff917 	ldw	r6,-28(fp)
   4b8b8:	000b883a 	mov	r5,zero
   4b8bc:	e13ffc17 	ldw	r4,-16(fp)
   4b8c0:	004c7ac0 	call	4c7ac <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
   4b8c4:	e0800217 	ldw	r2,8(fp)
   4b8c8:	10000226 	beq	r2,zero,4b8d4 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
   4b8cc:	e13ffc17 	ldw	r4,-16(fp)
   4b8d0:	004bc0c0 	call	4bc0c <epcs_exit_4_bytes_mode>
  }

  return length;
   4b8d4:	e0bfff17 	ldw	r2,-4(fp)
}
   4b8d8:	e037883a 	mov	sp,fp
   4b8dc:	dfc00117 	ldw	ra,4(sp)
   4b8e0:	df000017 	ldw	fp,0(sp)
   4b8e4:	dec00204 	addi	sp,sp,8
   4b8e8:	f800283a 	ret

0004b8ec <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
   4b8ec:	defff904 	addi	sp,sp,-28
   4b8f0:	dfc00615 	stw	ra,24(sp)
   4b8f4:	df000515 	stw	fp,20(sp)
   4b8f8:	df000504 	addi	fp,sp,20
   4b8fc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
   4b900:	00800184 	movi	r2,6
   4b904:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
   4b908:	d8000215 	stw	zero,8(sp)
   4b90c:	d8000115 	stw	zero,4(sp)
   4b910:	d8000015 	stw	zero,0(sp)
   4b914:	e1fffe04 	addi	r7,fp,-8
   4b918:	01800044 	movi	r6,1
   4b91c:	000b883a 	mov	r5,zero
   4b920:	e13fff17 	ldw	r4,-4(fp)
   4b924:	004c7ac0 	call	4c7ac <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
   4b928:	0001883a 	nop
   4b92c:	e037883a 	mov	sp,fp
   4b930:	dfc00117 	ldw	ra,4(sp)
   4b934:	df000017 	ldw	fp,0(sp)
   4b938:	dec00204 	addi	sp,sp,8
   4b93c:	f800283a 	ret

0004b940 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
   4b940:	defff804 	addi	sp,sp,-32
   4b944:	dfc00715 	stw	ra,28(sp)
   4b948:	df000615 	stw	fp,24(sp)
   4b94c:	df000604 	addi	fp,sp,24
   4b950:	e13ffe15 	stw	r4,-8(fp)
   4b954:	2805883a 	mov	r2,r5
   4b958:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
   4b95c:	00800044 	movi	r2,1
   4b960:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
   4b964:	e0bfff03 	ldbu	r2,-4(fp)
   4b968:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
   4b96c:	d8000215 	stw	zero,8(sp)
   4b970:	d8000115 	stw	zero,4(sp)
   4b974:	d8000015 	stw	zero,0(sp)
   4b978:	e1fffd04 	addi	r7,fp,-12
   4b97c:	01800084 	movi	r6,2
   4b980:	000b883a 	mov	r5,zero
   4b984:	e13ffe17 	ldw	r4,-8(fp)
   4b988:	004c7ac0 	call	4c7ac <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   4b98c:	e13ffe17 	ldw	r4,-8(fp)
   4b990:	004b6c00 	call	4b6c0 <epcs_await_wip_released>
}
   4b994:	0001883a 	nop
   4b998:	e037883a 	mov	sp,fp
   4b99c:	dfc00117 	ldw	ra,4(sp)
   4b9a0:	df000017 	ldw	fp,0(sp)
   4b9a4:	dec00204 	addi	sp,sp,8
   4b9a8:	f800283a 	ret

0004b9ac <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
   4b9ac:	defff404 	addi	sp,sp,-48
   4b9b0:	dfc00b15 	stw	ra,44(sp)
   4b9b4:	df000a15 	stw	fp,40(sp)
   4b9b8:	df000a04 	addi	fp,sp,40
   4b9bc:	e13ffc15 	stw	r4,-16(fp)
   4b9c0:	e17ffd15 	stw	r5,-12(fp)
   4b9c4:	e1bffe15 	stw	r6,-8(fp)
   4b9c8:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
   4b9cc:	00800084 	movi	r2,2
   4b9d0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   4b9d4:	e0800217 	ldw	r2,8(fp)
   4b9d8:	10001026 	beq	r2,zero,4ba1c <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
   4b9dc:	e0bffd17 	ldw	r2,-12(fp)
   4b9e0:	1004d63a 	srli	r2,r2,24
   4b9e4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
   4b9e8:	e0bffd17 	ldw	r2,-12(fp)
   4b9ec:	1005d43a 	srai	r2,r2,16
   4b9f0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
   4b9f4:	e0bffd17 	ldw	r2,-12(fp)
   4b9f8:	1005d23a 	srai	r2,r2,8
   4b9fc:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
   4ba00:	e0bffd17 	ldw	r2,-12(fp)
   4ba04:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
   4ba08:	00800144 	movi	r2,5
   4ba0c:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
   4ba10:	e13ffc17 	ldw	r4,-16(fp)
   4ba14:	004bbb00 	call	4bbb0 <epcs_enter_4_bytes_mode>
   4ba18:	00000a06 	br	4ba44 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
   4ba1c:	e0bffd17 	ldw	r2,-12(fp)
   4ba20:	1005d43a 	srai	r2,r2,16
   4ba24:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
   4ba28:	e0bffd17 	ldw	r2,-12(fp)
   4ba2c:	1005d23a 	srai	r2,r2,8
   4ba30:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
   4ba34:	e0bffd17 	ldw	r2,-12(fp)
   4ba38:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
   4ba3c:	00800104 	movi	r2,4
   4ba40:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
   4ba44:	e13ffc17 	ldw	r4,-16(fp)
   4ba48:	004b8ec0 	call	4b8ec <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
   4ba4c:	e0fffa04 	addi	r3,fp,-24
   4ba50:	00800044 	movi	r2,1
   4ba54:	d8800215 	stw	r2,8(sp)
   4ba58:	d8000115 	stw	zero,4(sp)
   4ba5c:	d8000015 	stw	zero,0(sp)
   4ba60:	180f883a 	mov	r7,r3
   4ba64:	e1bff917 	ldw	r6,-28(fp)
   4ba68:	000b883a 	mov	r5,zero
   4ba6c:	e13ffc17 	ldw	r4,-16(fp)
   4ba70:	004c7ac0 	call	4c7ac <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
   4ba74:	e0bfff17 	ldw	r2,-4(fp)
   4ba78:	d8000215 	stw	zero,8(sp)
   4ba7c:	d8000115 	stw	zero,4(sp)
   4ba80:	d8000015 	stw	zero,0(sp)
   4ba84:	e1fffe17 	ldw	r7,-8(fp)
   4ba88:	100d883a 	mov	r6,r2
   4ba8c:	000b883a 	mov	r5,zero
   4ba90:	e13ffc17 	ldw	r4,-16(fp)
   4ba94:	004c7ac0 	call	4c7ac <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
   4ba98:	e13ffc17 	ldw	r4,-16(fp)
   4ba9c:	004b6c00 	call	4b6c0 <epcs_await_wip_released>

  if(four_bytes_mode)
   4baa0:	e0800217 	ldw	r2,8(fp)
   4baa4:	10000226 	beq	r2,zero,4bab0 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
   4baa8:	e13ffc17 	ldw	r4,-16(fp)
   4baac:	004bc0c0 	call	4bc0c <epcs_exit_4_bytes_mode>
  }

  return length;
   4bab0:	e0bfff17 	ldw	r2,-4(fp)
}
   4bab4:	e037883a 	mov	sp,fp
   4bab8:	dfc00117 	ldw	ra,4(sp)
   4babc:	df000017 	ldw	fp,0(sp)
   4bac0:	dec00204 	addi	sp,sp,8
   4bac4:	f800283a 	ret

0004bac8 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
   4bac8:	defff804 	addi	sp,sp,-32
   4bacc:	dfc00715 	stw	ra,28(sp)
   4bad0:	df000615 	stw	fp,24(sp)
   4bad4:	df000604 	addi	fp,sp,24
   4bad8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
   4badc:	00bfeac4 	movi	r2,-85
   4bae0:	e0bffd05 	stb	r2,-12(fp)
   4bae4:	e03ffd45 	stb	zero,-11(fp)
   4bae8:	e03ffd85 	stb	zero,-10(fp)
   4baec:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
   4baf0:	d8000215 	stw	zero,8(sp)
   4baf4:	e0bffe04 	addi	r2,fp,-8
   4baf8:	d8800115 	stw	r2,4(sp)
   4bafc:	00800044 	movi	r2,1
   4bb00:	d8800015 	stw	r2,0(sp)
   4bb04:	e1fffd04 	addi	r7,fp,-12
   4bb08:	01800104 	movi	r6,4
   4bb0c:	000b883a 	mov	r5,zero
   4bb10:	e13fff17 	ldw	r4,-4(fp)
   4bb14:	004c7ac0 	call	4c7ac <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
   4bb18:	e0bffe03 	ldbu	r2,-8(fp)
}
   4bb1c:	e037883a 	mov	sp,fp
   4bb20:	dfc00117 	ldw	ra,4(sp)
   4bb24:	df000017 	ldw	fp,0(sp)
   4bb28:	dec00204 	addi	sp,sp,8
   4bb2c:	f800283a 	ret

0004bb30 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
   4bb30:	defff904 	addi	sp,sp,-28
   4bb34:	dfc00615 	stw	ra,24(sp)
   4bb38:	df000515 	stw	fp,20(sp)
   4bb3c:	df000504 	addi	fp,sp,20
   4bb40:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
   4bb44:	00bfe7c4 	movi	r2,-97
   4bb48:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
   4bb4c:	d8000215 	stw	zero,8(sp)
   4bb50:	e0bffe44 	addi	r2,fp,-7
   4bb54:	d8800115 	stw	r2,4(sp)
   4bb58:	008000c4 	movi	r2,3
   4bb5c:	d8800015 	stw	r2,0(sp)
   4bb60:	e1fffe04 	addi	r7,fp,-8
   4bb64:	01800044 	movi	r6,1
   4bb68:	000b883a 	mov	r5,zero
   4bb6c:	e13fff17 	ldw	r4,-4(fp)
   4bb70:	004c7ac0 	call	4c7ac <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
   4bb74:	e0bffe43 	ldbu	r2,-7(fp)
   4bb78:	10803fcc 	andi	r2,r2,255
   4bb7c:	1006943a 	slli	r3,r2,16
   4bb80:	e0bffe83 	ldbu	r2,-6(fp)
   4bb84:	10803fcc 	andi	r2,r2,255
   4bb88:	1004923a 	slli	r2,r2,8
   4bb8c:	1886b03a 	or	r3,r3,r2
   4bb90:	e0bffec3 	ldbu	r2,-5(fp)
   4bb94:	10803fcc 	andi	r2,r2,255
   4bb98:	1884b03a 	or	r2,r3,r2
}
   4bb9c:	e037883a 	mov	sp,fp
   4bba0:	dfc00117 	ldw	ra,4(sp)
   4bba4:	df000017 	ldw	fp,0(sp)
   4bba8:	dec00204 	addi	sp,sp,8
   4bbac:	f800283a 	ret

0004bbb0 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
   4bbb0:	defff904 	addi	sp,sp,-28
   4bbb4:	dfc00615 	stw	ra,24(sp)
   4bbb8:	df000515 	stw	fp,20(sp)
   4bbbc:	df000504 	addi	fp,sp,20
   4bbc0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
   4bbc4:	00bfedc4 	movi	r2,-73
   4bbc8:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   4bbcc:	e13fff17 	ldw	r4,-4(fp)
   4bbd0:	004b8ec0 	call	4b8ec <epcs_write_enable>

  alt_avalon_spi_command(
   4bbd4:	d8000215 	stw	zero,8(sp)
   4bbd8:	d8000115 	stw	zero,4(sp)
   4bbdc:	d8000015 	stw	zero,0(sp)
   4bbe0:	e1fffe04 	addi	r7,fp,-8
   4bbe4:	01800044 	movi	r6,1
   4bbe8:	000b883a 	mov	r5,zero
   4bbec:	e13fff17 	ldw	r4,-4(fp)
   4bbf0:	004c7ac0 	call	4c7ac <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   4bbf4:	0001883a 	nop
}
   4bbf8:	e037883a 	mov	sp,fp
   4bbfc:	dfc00117 	ldw	ra,4(sp)
   4bc00:	df000017 	ldw	fp,0(sp)
   4bc04:	dec00204 	addi	sp,sp,8
   4bc08:	f800283a 	ret

0004bc0c <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
   4bc0c:	defff904 	addi	sp,sp,-28
   4bc10:	dfc00615 	stw	ra,24(sp)
   4bc14:	df000515 	stw	fp,20(sp)
   4bc18:	df000504 	addi	fp,sp,20
   4bc1c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
   4bc20:	00bffa44 	movi	r2,-23
   4bc24:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   4bc28:	e13fff17 	ldw	r4,-4(fp)
   4bc2c:	004b8ec0 	call	4b8ec <epcs_write_enable>

  alt_avalon_spi_command(
   4bc30:	d8000215 	stw	zero,8(sp)
   4bc34:	d8000115 	stw	zero,4(sp)
   4bc38:	d8000015 	stw	zero,0(sp)
   4bc3c:	e1fffe04 	addi	r7,fp,-8
   4bc40:	01800044 	movi	r6,1
   4bc44:	000b883a 	mov	r5,zero
   4bc48:	e13fff17 	ldw	r4,-4(fp)
   4bc4c:	004c7ac0 	call	4c7ac <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   4bc50:	0001883a 	nop
}
   4bc54:	e037883a 	mov	sp,fp
   4bc58:	dfc00117 	ldw	ra,4(sp)
   4bc5c:	df000017 	ldw	fp,0(sp)
   4bc60:	dec00204 	addi	sp,sp,8
   4bc64:	f800283a 	ret

0004bc68 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4bc68:	defff504 	addi	sp,sp,-44
   4bc6c:	df000a15 	stw	fp,40(sp)
   4bc70:	df000a04 	addi	fp,sp,40
   4bc74:	e13ffc15 	stw	r4,-16(fp)
   4bc78:	e17ffd15 	stw	r5,-12(fp)
   4bc7c:	e1bffe15 	stw	r6,-8(fp)
   4bc80:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4bc84:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4bc88:	d0a02017 	ldw	r2,-32640(gp)
  
  if (alt_ticks_per_second ())
   4bc8c:	10003c26 	beq	r2,zero,4bd80 <alt_alarm_start+0x118>
  {
    if (alarm)
   4bc90:	e0bffc17 	ldw	r2,-16(fp)
   4bc94:	10003826 	beq	r2,zero,4bd78 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   4bc98:	e0bffc17 	ldw	r2,-16(fp)
   4bc9c:	e0fffe17 	ldw	r3,-8(fp)
   4bca0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4bca4:	e0bffc17 	ldw	r2,-16(fp)
   4bca8:	e0ffff17 	ldw	r3,-4(fp)
   4bcac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bcb0:	0005303a 	rdctl	r2,status
   4bcb4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bcb8:	e0fff917 	ldw	r3,-28(fp)
   4bcbc:	00bfff84 	movi	r2,-2
   4bcc0:	1884703a 	and	r2,r3,r2
   4bcc4:	1001703a 	wrctl	status,r2
  
  return context;
   4bcc8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   4bccc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4bcd0:	d0a02117 	ldw	r2,-32636(gp)
      
      current_nticks = alt_nticks();
   4bcd4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4bcd8:	e0fffd17 	ldw	r3,-12(fp)
   4bcdc:	e0bff617 	ldw	r2,-40(fp)
   4bce0:	1885883a 	add	r2,r3,r2
   4bce4:	10c00044 	addi	r3,r2,1
   4bce8:	e0bffc17 	ldw	r2,-16(fp)
   4bcec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4bcf0:	e0bffc17 	ldw	r2,-16(fp)
   4bcf4:	10c00217 	ldw	r3,8(r2)
   4bcf8:	e0bff617 	ldw	r2,-40(fp)
   4bcfc:	1880042e 	bgeu	r3,r2,4bd10 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   4bd00:	e0bffc17 	ldw	r2,-16(fp)
   4bd04:	00c00044 	movi	r3,1
   4bd08:	10c00405 	stb	r3,16(r2)
   4bd0c:	00000206 	br	4bd18 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   4bd10:	e0bffc17 	ldw	r2,-16(fp)
   4bd14:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4bd18:	e0bffc17 	ldw	r2,-16(fp)
   4bd1c:	d0e00f04 	addi	r3,gp,-32708
   4bd20:	e0fffa15 	stw	r3,-24(fp)
   4bd24:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4bd28:	e0bffb17 	ldw	r2,-20(fp)
   4bd2c:	e0fffa17 	ldw	r3,-24(fp)
   4bd30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4bd34:	e0bffa17 	ldw	r2,-24(fp)
   4bd38:	10c00017 	ldw	r3,0(r2)
   4bd3c:	e0bffb17 	ldw	r2,-20(fp)
   4bd40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4bd44:	e0bffa17 	ldw	r2,-24(fp)
   4bd48:	10800017 	ldw	r2,0(r2)
   4bd4c:	e0fffb17 	ldw	r3,-20(fp)
   4bd50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4bd54:	e0bffa17 	ldw	r2,-24(fp)
   4bd58:	e0fffb17 	ldw	r3,-20(fp)
   4bd5c:	10c00015 	stw	r3,0(r2)
   4bd60:	e0bff817 	ldw	r2,-32(fp)
   4bd64:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bd68:	e0bff717 	ldw	r2,-36(fp)
   4bd6c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4bd70:	0005883a 	mov	r2,zero
   4bd74:	00000306 	br	4bd84 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   4bd78:	00bffa84 	movi	r2,-22
   4bd7c:	00000106 	br	4bd84 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   4bd80:	00bfde84 	movi	r2,-134
  }
}
   4bd84:	e037883a 	mov	sp,fp
   4bd88:	df000017 	ldw	fp,0(sp)
   4bd8c:	dec00104 	addi	sp,sp,4
   4bd90:	f800283a 	ret

0004bd94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4bd94:	defffe04 	addi	sp,sp,-8
   4bd98:	dfc00115 	stw	ra,4(sp)
   4bd9c:	df000015 	stw	fp,0(sp)
   4bda0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4bda4:	d0a00e17 	ldw	r2,-32712(gp)
   4bda8:	10000326 	beq	r2,zero,4bdb8 <alt_get_errno+0x24>
   4bdac:	d0a00e17 	ldw	r2,-32712(gp)
   4bdb0:	103ee83a 	callr	r2
   4bdb4:	00000106 	br	4bdbc <alt_get_errno+0x28>
   4bdb8:	d0a02204 	addi	r2,gp,-32632
}
   4bdbc:	e037883a 	mov	sp,fp
   4bdc0:	dfc00117 	ldw	ra,4(sp)
   4bdc4:	df000017 	ldw	fp,0(sp)
   4bdc8:	dec00204 	addi	sp,sp,8
   4bdcc:	f800283a 	ret

0004bdd0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4bdd0:	defffb04 	addi	sp,sp,-20
   4bdd4:	dfc00415 	stw	ra,16(sp)
   4bdd8:	df000315 	stw	fp,12(sp)
   4bddc:	df000304 	addi	fp,sp,12
   4bde0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4bde4:	e0bfff17 	ldw	r2,-4(fp)
   4bde8:	10000616 	blt	r2,zero,4be04 <close+0x34>
   4bdec:	e0bfff17 	ldw	r2,-4(fp)
   4bdf0:	10c00324 	muli	r3,r2,12
   4bdf4:	008001b4 	movhi	r2,6
   4bdf8:	10b1de04 	addi	r2,r2,-14472
   4bdfc:	1885883a 	add	r2,r3,r2
   4be00:	00000106 	br	4be08 <close+0x38>
   4be04:	0005883a 	mov	r2,zero
   4be08:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4be0c:	e0bffd17 	ldw	r2,-12(fp)
   4be10:	10001926 	beq	r2,zero,4be78 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4be14:	e0bffd17 	ldw	r2,-12(fp)
   4be18:	10800017 	ldw	r2,0(r2)
   4be1c:	10800417 	ldw	r2,16(r2)
   4be20:	10000626 	beq	r2,zero,4be3c <close+0x6c>
   4be24:	e0bffd17 	ldw	r2,-12(fp)
   4be28:	10800017 	ldw	r2,0(r2)
   4be2c:	10800417 	ldw	r2,16(r2)
   4be30:	e13ffd17 	ldw	r4,-12(fp)
   4be34:	103ee83a 	callr	r2
   4be38:	00000106 	br	4be40 <close+0x70>
   4be3c:	0005883a 	mov	r2,zero
   4be40:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4be44:	e13fff17 	ldw	r4,-4(fp)
   4be48:	004c5800 	call	4c580 <alt_release_fd>
    if (rval < 0)
   4be4c:	e0bffe17 	ldw	r2,-8(fp)
   4be50:	1000070e 	bge	r2,zero,4be70 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4be54:	004bd940 	call	4bd94 <alt_get_errno>
   4be58:	1007883a 	mov	r3,r2
   4be5c:	e0bffe17 	ldw	r2,-8(fp)
   4be60:	0085c83a 	sub	r2,zero,r2
   4be64:	18800015 	stw	r2,0(r3)
      return -1;
   4be68:	00bfffc4 	movi	r2,-1
   4be6c:	00000706 	br	4be8c <close+0xbc>
    }
    return 0;
   4be70:	0005883a 	mov	r2,zero
   4be74:	00000506 	br	4be8c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4be78:	004bd940 	call	4bd94 <alt_get_errno>
   4be7c:	1007883a 	mov	r3,r2
   4be80:	00801444 	movi	r2,81
   4be84:	18800015 	stw	r2,0(r3)
    return -1;
   4be88:	00bfffc4 	movi	r2,-1
  }
}
   4be8c:	e037883a 	mov	sp,fp
   4be90:	dfc00117 	ldw	ra,4(sp)
   4be94:	df000017 	ldw	fp,0(sp)
   4be98:	dec00204 	addi	sp,sp,8
   4be9c:	f800283a 	ret

0004bea0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4bea0:	deffff04 	addi	sp,sp,-4
   4bea4:	df000015 	stw	fp,0(sp)
   4bea8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4beac:	0001883a 	nop
   4beb0:	e037883a 	mov	sp,fp
   4beb4:	df000017 	ldw	fp,0(sp)
   4beb8:	dec00104 	addi	sp,sp,4
   4bebc:	f800283a 	ret

0004bec0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4bec0:	defffc04 	addi	sp,sp,-16
   4bec4:	df000315 	stw	fp,12(sp)
   4bec8:	df000304 	addi	fp,sp,12
   4becc:	e13ffd15 	stw	r4,-12(fp)
   4bed0:	e17ffe15 	stw	r5,-8(fp)
   4bed4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4bed8:	e0bfff17 	ldw	r2,-4(fp)
}
   4bedc:	e037883a 	mov	sp,fp
   4bee0:	df000017 	ldw	fp,0(sp)
   4bee4:	dec00104 	addi	sp,sp,4
   4bee8:	f800283a 	ret

0004beec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4beec:	defffe04 	addi	sp,sp,-8
   4bef0:	dfc00115 	stw	ra,4(sp)
   4bef4:	df000015 	stw	fp,0(sp)
   4bef8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4befc:	d0a00e17 	ldw	r2,-32712(gp)
   4bf00:	10000326 	beq	r2,zero,4bf10 <alt_get_errno+0x24>
   4bf04:	d0a00e17 	ldw	r2,-32712(gp)
   4bf08:	103ee83a 	callr	r2
   4bf0c:	00000106 	br	4bf14 <alt_get_errno+0x28>
   4bf10:	d0a02204 	addi	r2,gp,-32632
}
   4bf14:	e037883a 	mov	sp,fp
   4bf18:	dfc00117 	ldw	ra,4(sp)
   4bf1c:	df000017 	ldw	fp,0(sp)
   4bf20:	dec00204 	addi	sp,sp,8
   4bf24:	f800283a 	ret

0004bf28 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4bf28:	defffa04 	addi	sp,sp,-24
   4bf2c:	dfc00515 	stw	ra,20(sp)
   4bf30:	df000415 	stw	fp,16(sp)
   4bf34:	df000404 	addi	fp,sp,16
   4bf38:	e13ffe15 	stw	r4,-8(fp)
   4bf3c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4bf40:	e0bffe17 	ldw	r2,-8(fp)
   4bf44:	10000326 	beq	r2,zero,4bf54 <alt_dev_llist_insert+0x2c>
   4bf48:	e0bffe17 	ldw	r2,-8(fp)
   4bf4c:	10800217 	ldw	r2,8(r2)
   4bf50:	1000061e 	bne	r2,zero,4bf6c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   4bf54:	004beec0 	call	4beec <alt_get_errno>
   4bf58:	1007883a 	mov	r3,r2
   4bf5c:	00800584 	movi	r2,22
   4bf60:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4bf64:	00bffa84 	movi	r2,-22
   4bf68:	00001306 	br	4bfb8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4bf6c:	e0bffe17 	ldw	r2,-8(fp)
   4bf70:	e0ffff17 	ldw	r3,-4(fp)
   4bf74:	e0fffc15 	stw	r3,-16(fp)
   4bf78:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4bf7c:	e0bffd17 	ldw	r2,-12(fp)
   4bf80:	e0fffc17 	ldw	r3,-16(fp)
   4bf84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4bf88:	e0bffc17 	ldw	r2,-16(fp)
   4bf8c:	10c00017 	ldw	r3,0(r2)
   4bf90:	e0bffd17 	ldw	r2,-12(fp)
   4bf94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4bf98:	e0bffc17 	ldw	r2,-16(fp)
   4bf9c:	10800017 	ldw	r2,0(r2)
   4bfa0:	e0fffd17 	ldw	r3,-12(fp)
   4bfa4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4bfa8:	e0bffc17 	ldw	r2,-16(fp)
   4bfac:	e0fffd17 	ldw	r3,-12(fp)
   4bfb0:	10c00015 	stw	r3,0(r2)

  return 0;  
   4bfb4:	0005883a 	mov	r2,zero
}
   4bfb8:	e037883a 	mov	sp,fp
   4bfbc:	dfc00117 	ldw	ra,4(sp)
   4bfc0:	df000017 	ldw	fp,0(sp)
   4bfc4:	dec00204 	addi	sp,sp,8
   4bfc8:	f800283a 	ret

0004bfcc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4bfcc:	defffd04 	addi	sp,sp,-12
   4bfd0:	dfc00215 	stw	ra,8(sp)
   4bfd4:	df000115 	stw	fp,4(sp)
   4bfd8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4bfdc:	00800174 	movhi	r2,5
   4bfe0:	10b3dd04 	addi	r2,r2,-12428
   4bfe4:	e0bfff15 	stw	r2,-4(fp)
   4bfe8:	00000606 	br	4c004 <_do_ctors+0x38>
        (*ctor) (); 
   4bfec:	e0bfff17 	ldw	r2,-4(fp)
   4bff0:	10800017 	ldw	r2,0(r2)
   4bff4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4bff8:	e0bfff17 	ldw	r2,-4(fp)
   4bffc:	10bfff04 	addi	r2,r2,-4
   4c000:	e0bfff15 	stw	r2,-4(fp)
   4c004:	e0ffff17 	ldw	r3,-4(fp)
   4c008:	00800174 	movhi	r2,5
   4c00c:	10b3de04 	addi	r2,r2,-12424
   4c010:	18bff62e 	bgeu	r3,r2,4bfec <__alt_mem_epcs_flash+0xfffcafec>
        (*ctor) (); 
}
   4c014:	0001883a 	nop
   4c018:	e037883a 	mov	sp,fp
   4c01c:	dfc00117 	ldw	ra,4(sp)
   4c020:	df000017 	ldw	fp,0(sp)
   4c024:	dec00204 	addi	sp,sp,8
   4c028:	f800283a 	ret

0004c02c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4c02c:	defffd04 	addi	sp,sp,-12
   4c030:	dfc00215 	stw	ra,8(sp)
   4c034:	df000115 	stw	fp,4(sp)
   4c038:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4c03c:	00800174 	movhi	r2,5
   4c040:	10b3dd04 	addi	r2,r2,-12428
   4c044:	e0bfff15 	stw	r2,-4(fp)
   4c048:	00000606 	br	4c064 <_do_dtors+0x38>
        (*dtor) (); 
   4c04c:	e0bfff17 	ldw	r2,-4(fp)
   4c050:	10800017 	ldw	r2,0(r2)
   4c054:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4c058:	e0bfff17 	ldw	r2,-4(fp)
   4c05c:	10bfff04 	addi	r2,r2,-4
   4c060:	e0bfff15 	stw	r2,-4(fp)
   4c064:	e0ffff17 	ldw	r3,-4(fp)
   4c068:	00800174 	movhi	r2,5
   4c06c:	10b3de04 	addi	r2,r2,-12424
   4c070:	18bff62e 	bgeu	r3,r2,4c04c <__alt_mem_epcs_flash+0xfffcb04c>
        (*dtor) (); 
}
   4c074:	0001883a 	nop
   4c078:	e037883a 	mov	sp,fp
   4c07c:	dfc00117 	ldw	ra,4(sp)
   4c080:	df000017 	ldw	fp,0(sp)
   4c084:	dec00204 	addi	sp,sp,8
   4c088:	f800283a 	ret

0004c08c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4c08c:	defffa04 	addi	sp,sp,-24
   4c090:	dfc00515 	stw	ra,20(sp)
   4c094:	df000415 	stw	fp,16(sp)
   4c098:	df000404 	addi	fp,sp,16
   4c09c:	e13ffe15 	stw	r4,-8(fp)
   4c0a0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4c0a4:	e0bfff17 	ldw	r2,-4(fp)
   4c0a8:	10800017 	ldw	r2,0(r2)
   4c0ac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4c0b0:	e13ffe17 	ldw	r4,-8(fp)
   4c0b4:	00493700 	call	49370 <strlen>
   4c0b8:	10800044 	addi	r2,r2,1
   4c0bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4c0c0:	00000d06 	br	4c0f8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4c0c4:	e0bffc17 	ldw	r2,-16(fp)
   4c0c8:	10800217 	ldw	r2,8(r2)
   4c0cc:	e0fffd17 	ldw	r3,-12(fp)
   4c0d0:	180d883a 	mov	r6,r3
   4c0d4:	e17ffe17 	ldw	r5,-8(fp)
   4c0d8:	1009883a 	mov	r4,r2
   4c0dc:	004cc300 	call	4cc30 <memcmp>
   4c0e0:	1000021e 	bne	r2,zero,4c0ec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4c0e4:	e0bffc17 	ldw	r2,-16(fp)
   4c0e8:	00000706 	br	4c108 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4c0ec:	e0bffc17 	ldw	r2,-16(fp)
   4c0f0:	10800017 	ldw	r2,0(r2)
   4c0f4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4c0f8:	e0fffc17 	ldw	r3,-16(fp)
   4c0fc:	e0bfff17 	ldw	r2,-4(fp)
   4c100:	18bff01e 	bne	r3,r2,4c0c4 <__alt_mem_epcs_flash+0xfffcb0c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4c104:	0005883a 	mov	r2,zero
}
   4c108:	e037883a 	mov	sp,fp
   4c10c:	dfc00117 	ldw	ra,4(sp)
   4c110:	df000017 	ldw	fp,0(sp)
   4c114:	dec00204 	addi	sp,sp,8
   4c118:	f800283a 	ret

0004c11c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4c11c:	defffe04 	addi	sp,sp,-8
   4c120:	dfc00115 	stw	ra,4(sp)
   4c124:	df000015 	stw	fp,0(sp)
   4c128:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4c12c:	01440004 	movi	r5,4096
   4c130:	0009883a 	mov	r4,zero
   4c134:	004cb540 	call	4cb54 <alt_icache_flush>
#endif
}
   4c138:	0001883a 	nop
   4c13c:	e037883a 	mov	sp,fp
   4c140:	dfc00117 	ldw	ra,4(sp)
   4c144:	df000017 	ldw	fp,0(sp)
   4c148:	dec00204 	addi	sp,sp,8
   4c14c:	f800283a 	ret

0004c150 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   4c150:	defffe04 	addi	sp,sp,-8
   4c154:	df000115 	stw	fp,4(sp)
   4c158:	df000104 	addi	fp,sp,4
   4c15c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   4c160:	e0bfff17 	ldw	r2,-4(fp)
   4c164:	10bffe84 	addi	r2,r2,-6
   4c168:	10c00428 	cmpgeui	r3,r2,16
   4c16c:	18001a1e 	bne	r3,zero,4c1d8 <alt_exception_cause_generated_bad_addr+0x88>
   4c170:	100690ba 	slli	r3,r2,2
   4c174:	00800174 	movhi	r2,5
   4c178:	10b06204 	addi	r2,r2,-15992
   4c17c:	1885883a 	add	r2,r3,r2
   4c180:	10800017 	ldw	r2,0(r2)
   4c184:	1000683a 	jmp	r2
   4c188:	0004c1c8 	cmpgei	zero,zero,4871
   4c18c:	0004c1c8 	cmpgei	zero,zero,4871
   4c190:	0004c1d8 	cmpnei	zero,zero,4871
   4c194:	0004c1d8 	cmpnei	zero,zero,4871
   4c198:	0004c1d8 	cmpnei	zero,zero,4871
   4c19c:	0004c1c8 	cmpgei	zero,zero,4871
   4c1a0:	0004c1d0 	cmplti	zero,zero,4871
   4c1a4:	0004c1d8 	cmpnei	zero,zero,4871
   4c1a8:	0004c1c8 	cmpgei	zero,zero,4871
   4c1ac:	0004c1c8 	cmpgei	zero,zero,4871
   4c1b0:	0004c1d8 	cmpnei	zero,zero,4871
   4c1b4:	0004c1c8 	cmpgei	zero,zero,4871
   4c1b8:	0004c1d0 	cmplti	zero,zero,4871
   4c1bc:	0004c1d8 	cmpnei	zero,zero,4871
   4c1c0:	0004c1d8 	cmpnei	zero,zero,4871
   4c1c4:	0004c1c8 	cmpgei	zero,zero,4871
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   4c1c8:	00800044 	movi	r2,1
   4c1cc:	00000306 	br	4c1dc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   4c1d0:	0005883a 	mov	r2,zero
   4c1d4:	00000106 	br	4c1dc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   4c1d8:	0005883a 	mov	r2,zero
  }
}
   4c1dc:	e037883a 	mov	sp,fp
   4c1e0:	df000017 	ldw	fp,0(sp)
   4c1e4:	dec00104 	addi	sp,sp,4
   4c1e8:	f800283a 	ret

0004c1ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4c1ec:	defff904 	addi	sp,sp,-28
   4c1f0:	dfc00615 	stw	ra,24(sp)
   4c1f4:	df000515 	stw	fp,20(sp)
   4c1f8:	df000504 	addi	fp,sp,20
   4c1fc:	e13ffc15 	stw	r4,-16(fp)
   4c200:	e17ffd15 	stw	r5,-12(fp)
   4c204:	e1bffe15 	stw	r6,-8(fp)
   4c208:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4c20c:	e1bfff17 	ldw	r6,-4(fp)
   4c210:	e17ffe17 	ldw	r5,-8(fp)
   4c214:	e13ffd17 	ldw	r4,-12(fp)
   4c218:	004c42c0 	call	4c42c <open>
   4c21c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4c220:	e0bffb17 	ldw	r2,-20(fp)
   4c224:	10001c16 	blt	r2,zero,4c298 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   4c228:	008001b4 	movhi	r2,6
   4c22c:	10b1de04 	addi	r2,r2,-14472
   4c230:	e0fffb17 	ldw	r3,-20(fp)
   4c234:	18c00324 	muli	r3,r3,12
   4c238:	10c5883a 	add	r2,r2,r3
   4c23c:	10c00017 	ldw	r3,0(r2)
   4c240:	e0bffc17 	ldw	r2,-16(fp)
   4c244:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4c248:	008001b4 	movhi	r2,6
   4c24c:	10b1de04 	addi	r2,r2,-14472
   4c250:	e0fffb17 	ldw	r3,-20(fp)
   4c254:	18c00324 	muli	r3,r3,12
   4c258:	10c5883a 	add	r2,r2,r3
   4c25c:	10800104 	addi	r2,r2,4
   4c260:	10c00017 	ldw	r3,0(r2)
   4c264:	e0bffc17 	ldw	r2,-16(fp)
   4c268:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4c26c:	008001b4 	movhi	r2,6
   4c270:	10b1de04 	addi	r2,r2,-14472
   4c274:	e0fffb17 	ldw	r3,-20(fp)
   4c278:	18c00324 	muli	r3,r3,12
   4c27c:	10c5883a 	add	r2,r2,r3
   4c280:	10800204 	addi	r2,r2,8
   4c284:	10c00017 	ldw	r3,0(r2)
   4c288:	e0bffc17 	ldw	r2,-16(fp)
   4c28c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4c290:	e13ffb17 	ldw	r4,-20(fp)
   4c294:	004c5800 	call	4c580 <alt_release_fd>
  }
} 
   4c298:	0001883a 	nop
   4c29c:	e037883a 	mov	sp,fp
   4c2a0:	dfc00117 	ldw	ra,4(sp)
   4c2a4:	df000017 	ldw	fp,0(sp)
   4c2a8:	dec00204 	addi	sp,sp,8
   4c2ac:	f800283a 	ret

0004c2b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4c2b0:	defffb04 	addi	sp,sp,-20
   4c2b4:	dfc00415 	stw	ra,16(sp)
   4c2b8:	df000315 	stw	fp,12(sp)
   4c2bc:	df000304 	addi	fp,sp,12
   4c2c0:	e13ffd15 	stw	r4,-12(fp)
   4c2c4:	e17ffe15 	stw	r5,-8(fp)
   4c2c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4c2cc:	01c07fc4 	movi	r7,511
   4c2d0:	01800044 	movi	r6,1
   4c2d4:	e17ffd17 	ldw	r5,-12(fp)
   4c2d8:	010001b4 	movhi	r4,6
   4c2dc:	2131e104 	addi	r4,r4,-14460
   4c2e0:	004c1ec0 	call	4c1ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4c2e4:	01c07fc4 	movi	r7,511
   4c2e8:	000d883a 	mov	r6,zero
   4c2ec:	e17ffe17 	ldw	r5,-8(fp)
   4c2f0:	010001b4 	movhi	r4,6
   4c2f4:	2131de04 	addi	r4,r4,-14472
   4c2f8:	004c1ec0 	call	4c1ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4c2fc:	01c07fc4 	movi	r7,511
   4c300:	01800044 	movi	r6,1
   4c304:	e17fff17 	ldw	r5,-4(fp)
   4c308:	010001b4 	movhi	r4,6
   4c30c:	2131e404 	addi	r4,r4,-14448
   4c310:	004c1ec0 	call	4c1ec <alt_open_fd>
}  
   4c314:	0001883a 	nop
   4c318:	e037883a 	mov	sp,fp
   4c31c:	dfc00117 	ldw	ra,4(sp)
   4c320:	df000017 	ldw	fp,0(sp)
   4c324:	dec00204 	addi	sp,sp,8
   4c328:	f800283a 	ret

0004c32c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4c32c:	defffe04 	addi	sp,sp,-8
   4c330:	dfc00115 	stw	ra,4(sp)
   4c334:	df000015 	stw	fp,0(sp)
   4c338:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4c33c:	d0a00e17 	ldw	r2,-32712(gp)
   4c340:	10000326 	beq	r2,zero,4c350 <alt_get_errno+0x24>
   4c344:	d0a00e17 	ldw	r2,-32712(gp)
   4c348:	103ee83a 	callr	r2
   4c34c:	00000106 	br	4c354 <alt_get_errno+0x28>
   4c350:	d0a02204 	addi	r2,gp,-32632
}
   4c354:	e037883a 	mov	sp,fp
   4c358:	dfc00117 	ldw	ra,4(sp)
   4c35c:	df000017 	ldw	fp,0(sp)
   4c360:	dec00204 	addi	sp,sp,8
   4c364:	f800283a 	ret

0004c368 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4c368:	defffd04 	addi	sp,sp,-12
   4c36c:	df000215 	stw	fp,8(sp)
   4c370:	df000204 	addi	fp,sp,8
   4c374:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4c378:	e0bfff17 	ldw	r2,-4(fp)
   4c37c:	10800217 	ldw	r2,8(r2)
   4c380:	10d00034 	orhi	r3,r2,16384
   4c384:	e0bfff17 	ldw	r2,-4(fp)
   4c388:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c38c:	e03ffe15 	stw	zero,-8(fp)
   4c390:	00001d06 	br	4c408 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4c394:	008001b4 	movhi	r2,6
   4c398:	10b1de04 	addi	r2,r2,-14472
   4c39c:	e0fffe17 	ldw	r3,-8(fp)
   4c3a0:	18c00324 	muli	r3,r3,12
   4c3a4:	10c5883a 	add	r2,r2,r3
   4c3a8:	10c00017 	ldw	r3,0(r2)
   4c3ac:	e0bfff17 	ldw	r2,-4(fp)
   4c3b0:	10800017 	ldw	r2,0(r2)
   4c3b4:	1880111e 	bne	r3,r2,4c3fc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4c3b8:	008001b4 	movhi	r2,6
   4c3bc:	10b1de04 	addi	r2,r2,-14472
   4c3c0:	e0fffe17 	ldw	r3,-8(fp)
   4c3c4:	18c00324 	muli	r3,r3,12
   4c3c8:	10c5883a 	add	r2,r2,r3
   4c3cc:	10800204 	addi	r2,r2,8
   4c3d0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4c3d4:	1000090e 	bge	r2,zero,4c3fc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4c3d8:	e0bffe17 	ldw	r2,-8(fp)
   4c3dc:	10c00324 	muli	r3,r2,12
   4c3e0:	008001b4 	movhi	r2,6
   4c3e4:	10b1de04 	addi	r2,r2,-14472
   4c3e8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4c3ec:	e0bfff17 	ldw	r2,-4(fp)
   4c3f0:	18800226 	beq	r3,r2,4c3fc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4c3f4:	00bffcc4 	movi	r2,-13
   4c3f8:	00000806 	br	4c41c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c3fc:	e0bffe17 	ldw	r2,-8(fp)
   4c400:	10800044 	addi	r2,r2,1
   4c404:	e0bffe15 	stw	r2,-8(fp)
   4c408:	d0a00d17 	ldw	r2,-32716(gp)
   4c40c:	1007883a 	mov	r3,r2
   4c410:	e0bffe17 	ldw	r2,-8(fp)
   4c414:	18bfdf2e 	bgeu	r3,r2,4c394 <__alt_mem_epcs_flash+0xfffcb394>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4c418:	0005883a 	mov	r2,zero
}
   4c41c:	e037883a 	mov	sp,fp
   4c420:	df000017 	ldw	fp,0(sp)
   4c424:	dec00104 	addi	sp,sp,4
   4c428:	f800283a 	ret

0004c42c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4c42c:	defff604 	addi	sp,sp,-40
   4c430:	dfc00915 	stw	ra,36(sp)
   4c434:	df000815 	stw	fp,32(sp)
   4c438:	df000804 	addi	fp,sp,32
   4c43c:	e13ffd15 	stw	r4,-12(fp)
   4c440:	e17ffe15 	stw	r5,-8(fp)
   4c444:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4c448:	00bfffc4 	movi	r2,-1
   4c44c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4c450:	00bffb44 	movi	r2,-19
   4c454:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4c458:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4c45c:	d1600b04 	addi	r5,gp,-32724
   4c460:	e13ffd17 	ldw	r4,-12(fp)
   4c464:	004c08c0 	call	4c08c <alt_find_dev>
   4c468:	e0bff815 	stw	r2,-32(fp)
   4c46c:	e0bff817 	ldw	r2,-32(fp)
   4c470:	1000051e 	bne	r2,zero,4c488 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4c474:	e13ffd17 	ldw	r4,-12(fp)
   4c478:	004c9a80 	call	4c9a8 <alt_find_file>
   4c47c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4c480:	00800044 	movi	r2,1
   4c484:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4c488:	e0bff817 	ldw	r2,-32(fp)
   4c48c:	10002926 	beq	r2,zero,4c534 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4c490:	e13ff817 	ldw	r4,-32(fp)
   4c494:	004cab00 	call	4cab0 <alt_get_fd>
   4c498:	e0bff915 	stw	r2,-28(fp)
   4c49c:	e0bff917 	ldw	r2,-28(fp)
   4c4a0:	1000030e 	bge	r2,zero,4c4b0 <open+0x84>
    {
      status = index;
   4c4a4:	e0bff917 	ldw	r2,-28(fp)
   4c4a8:	e0bffa15 	stw	r2,-24(fp)
   4c4ac:	00002306 	br	4c53c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   4c4b0:	e0bff917 	ldw	r2,-28(fp)
   4c4b4:	10c00324 	muli	r3,r2,12
   4c4b8:	008001b4 	movhi	r2,6
   4c4bc:	10b1de04 	addi	r2,r2,-14472
   4c4c0:	1885883a 	add	r2,r3,r2
   4c4c4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4c4c8:	e0fffe17 	ldw	r3,-8(fp)
   4c4cc:	00900034 	movhi	r2,16384
   4c4d0:	10bfffc4 	addi	r2,r2,-1
   4c4d4:	1886703a 	and	r3,r3,r2
   4c4d8:	e0bffc17 	ldw	r2,-16(fp)
   4c4dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4c4e0:	e0bffb17 	ldw	r2,-20(fp)
   4c4e4:	1000051e 	bne	r2,zero,4c4fc <open+0xd0>
   4c4e8:	e13ffc17 	ldw	r4,-16(fp)
   4c4ec:	004c3680 	call	4c368 <alt_file_locked>
   4c4f0:	e0bffa15 	stw	r2,-24(fp)
   4c4f4:	e0bffa17 	ldw	r2,-24(fp)
   4c4f8:	10001016 	blt	r2,zero,4c53c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4c4fc:	e0bff817 	ldw	r2,-32(fp)
   4c500:	10800317 	ldw	r2,12(r2)
   4c504:	10000826 	beq	r2,zero,4c528 <open+0xfc>
   4c508:	e0bff817 	ldw	r2,-32(fp)
   4c50c:	10800317 	ldw	r2,12(r2)
   4c510:	e1ffff17 	ldw	r7,-4(fp)
   4c514:	e1bffe17 	ldw	r6,-8(fp)
   4c518:	e17ffd17 	ldw	r5,-12(fp)
   4c51c:	e13ffc17 	ldw	r4,-16(fp)
   4c520:	103ee83a 	callr	r2
   4c524:	00000106 	br	4c52c <open+0x100>
   4c528:	0005883a 	mov	r2,zero
   4c52c:	e0bffa15 	stw	r2,-24(fp)
   4c530:	00000206 	br	4c53c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4c534:	00bffb44 	movi	r2,-19
   4c538:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4c53c:	e0bffa17 	ldw	r2,-24(fp)
   4c540:	1000090e 	bge	r2,zero,4c568 <open+0x13c>
  {
    alt_release_fd (index);  
   4c544:	e13ff917 	ldw	r4,-28(fp)
   4c548:	004c5800 	call	4c580 <alt_release_fd>
    ALT_ERRNO = -status;
   4c54c:	004c32c0 	call	4c32c <alt_get_errno>
   4c550:	1007883a 	mov	r3,r2
   4c554:	e0bffa17 	ldw	r2,-24(fp)
   4c558:	0085c83a 	sub	r2,zero,r2
   4c55c:	18800015 	stw	r2,0(r3)
    return -1;
   4c560:	00bfffc4 	movi	r2,-1
   4c564:	00000106 	br	4c56c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   4c568:	e0bff917 	ldw	r2,-28(fp)
}
   4c56c:	e037883a 	mov	sp,fp
   4c570:	dfc00117 	ldw	ra,4(sp)
   4c574:	df000017 	ldw	fp,0(sp)
   4c578:	dec00204 	addi	sp,sp,8
   4c57c:	f800283a 	ret

0004c580 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4c580:	defffe04 	addi	sp,sp,-8
   4c584:	df000115 	stw	fp,4(sp)
   4c588:	df000104 	addi	fp,sp,4
   4c58c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4c590:	e0bfff17 	ldw	r2,-4(fp)
   4c594:	108000d0 	cmplti	r2,r2,3
   4c598:	10000d1e 	bne	r2,zero,4c5d0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4c59c:	008001b4 	movhi	r2,6
   4c5a0:	10b1de04 	addi	r2,r2,-14472
   4c5a4:	e0ffff17 	ldw	r3,-4(fp)
   4c5a8:	18c00324 	muli	r3,r3,12
   4c5ac:	10c5883a 	add	r2,r2,r3
   4c5b0:	10800204 	addi	r2,r2,8
   4c5b4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4c5b8:	008001b4 	movhi	r2,6
   4c5bc:	10b1de04 	addi	r2,r2,-14472
   4c5c0:	e0ffff17 	ldw	r3,-4(fp)
   4c5c4:	18c00324 	muli	r3,r3,12
   4c5c8:	10c5883a 	add	r2,r2,r3
   4c5cc:	10000015 	stw	zero,0(r2)
  }
}
   4c5d0:	0001883a 	nop
   4c5d4:	e037883a 	mov	sp,fp
   4c5d8:	df000017 	ldw	fp,0(sp)
   4c5dc:	dec00104 	addi	sp,sp,4
   4c5e0:	f800283a 	ret

0004c5e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4c5e4:	defffa04 	addi	sp,sp,-24
   4c5e8:	df000515 	stw	fp,20(sp)
   4c5ec:	df000504 	addi	fp,sp,20
   4c5f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c5f4:	0005303a 	rdctl	r2,status
   4c5f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c5fc:	e0fffc17 	ldw	r3,-16(fp)
   4c600:	00bfff84 	movi	r2,-2
   4c604:	1884703a 	and	r2,r3,r2
   4c608:	1001703a 	wrctl	status,r2
  
  return context;
   4c60c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4c610:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4c614:	e0bfff17 	ldw	r2,-4(fp)
   4c618:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4c61c:	e0bffd17 	ldw	r2,-12(fp)
   4c620:	10800017 	ldw	r2,0(r2)
   4c624:	e0fffd17 	ldw	r3,-12(fp)
   4c628:	18c00117 	ldw	r3,4(r3)
   4c62c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4c630:	e0bffd17 	ldw	r2,-12(fp)
   4c634:	10800117 	ldw	r2,4(r2)
   4c638:	e0fffd17 	ldw	r3,-12(fp)
   4c63c:	18c00017 	ldw	r3,0(r3)
   4c640:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4c644:	e0bffd17 	ldw	r2,-12(fp)
   4c648:	e0fffd17 	ldw	r3,-12(fp)
   4c64c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4c650:	e0bffd17 	ldw	r2,-12(fp)
   4c654:	e0fffd17 	ldw	r3,-12(fp)
   4c658:	10c00015 	stw	r3,0(r2)
   4c65c:	e0bffb17 	ldw	r2,-20(fp)
   4c660:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c664:	e0bffe17 	ldw	r2,-8(fp)
   4c668:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4c66c:	0001883a 	nop
   4c670:	e037883a 	mov	sp,fp
   4c674:	df000017 	ldw	fp,0(sp)
   4c678:	dec00104 	addi	sp,sp,4
   4c67c:	f800283a 	ret

0004c680 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4c680:	defffb04 	addi	sp,sp,-20
   4c684:	dfc00415 	stw	ra,16(sp)
   4c688:	df000315 	stw	fp,12(sp)
   4c68c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4c690:	d0a00f17 	ldw	r2,-32708(gp)
   4c694:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4c698:	d0a02117 	ldw	r2,-32636(gp)
   4c69c:	10800044 	addi	r2,r2,1
   4c6a0:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4c6a4:	00002e06 	br	4c760 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4c6a8:	e0bffd17 	ldw	r2,-12(fp)
   4c6ac:	10800017 	ldw	r2,0(r2)
   4c6b0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4c6b4:	e0bffd17 	ldw	r2,-12(fp)
   4c6b8:	10800403 	ldbu	r2,16(r2)
   4c6bc:	10803fcc 	andi	r2,r2,255
   4c6c0:	10000426 	beq	r2,zero,4c6d4 <alt_tick+0x54>
   4c6c4:	d0a02117 	ldw	r2,-32636(gp)
   4c6c8:	1000021e 	bne	r2,zero,4c6d4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4c6cc:	e0bffd17 	ldw	r2,-12(fp)
   4c6d0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4c6d4:	e0bffd17 	ldw	r2,-12(fp)
   4c6d8:	10800217 	ldw	r2,8(r2)
   4c6dc:	d0e02117 	ldw	r3,-32636(gp)
   4c6e0:	18801d36 	bltu	r3,r2,4c758 <alt_tick+0xd8>
   4c6e4:	e0bffd17 	ldw	r2,-12(fp)
   4c6e8:	10800403 	ldbu	r2,16(r2)
   4c6ec:	10803fcc 	andi	r2,r2,255
   4c6f0:	1000191e 	bne	r2,zero,4c758 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4c6f4:	e0bffd17 	ldw	r2,-12(fp)
   4c6f8:	10800317 	ldw	r2,12(r2)
   4c6fc:	e0fffd17 	ldw	r3,-12(fp)
   4c700:	18c00517 	ldw	r3,20(r3)
   4c704:	1809883a 	mov	r4,r3
   4c708:	103ee83a 	callr	r2
   4c70c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4c710:	e0bfff17 	ldw	r2,-4(fp)
   4c714:	1000031e 	bne	r2,zero,4c724 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4c718:	e13ffd17 	ldw	r4,-12(fp)
   4c71c:	004c5e40 	call	4c5e4 <alt_alarm_stop>
   4c720:	00000d06 	br	4c758 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4c724:	e0bffd17 	ldw	r2,-12(fp)
   4c728:	10c00217 	ldw	r3,8(r2)
   4c72c:	e0bfff17 	ldw	r2,-4(fp)
   4c730:	1887883a 	add	r3,r3,r2
   4c734:	e0bffd17 	ldw	r2,-12(fp)
   4c738:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4c73c:	e0bffd17 	ldw	r2,-12(fp)
   4c740:	10c00217 	ldw	r3,8(r2)
   4c744:	d0a02117 	ldw	r2,-32636(gp)
   4c748:	1880032e 	bgeu	r3,r2,4c758 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4c74c:	e0bffd17 	ldw	r2,-12(fp)
   4c750:	00c00044 	movi	r3,1
   4c754:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4c758:	e0bffe17 	ldw	r2,-8(fp)
   4c75c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4c760:	e0fffd17 	ldw	r3,-12(fp)
   4c764:	d0a00f04 	addi	r2,gp,-32708
   4c768:	18bfcf1e 	bne	r3,r2,4c6a8 <__alt_mem_epcs_flash+0xfffcb6a8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4c76c:	0001883a 	nop
}
   4c770:	0001883a 	nop
   4c774:	e037883a 	mov	sp,fp
   4c778:	dfc00117 	ldw	ra,4(sp)
   4c77c:	df000017 	ldw	fp,0(sp)
   4c780:	dec00204 	addi	sp,sp,8
   4c784:	f800283a 	ret

0004c788 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4c788:	deffff04 	addi	sp,sp,-4
   4c78c:	df000015 	stw	fp,0(sp)
   4c790:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4c794:	000170fa 	wrctl	ienable,zero
}
   4c798:	0001883a 	nop
   4c79c:	e037883a 	mov	sp,fp
   4c7a0:	df000017 	ldw	fp,0(sp)
   4c7a4:	dec00104 	addi	sp,sp,4
   4c7a8:	f800283a 	ret

0004c7ac <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   4c7ac:	defff404 	addi	sp,sp,-48
   4c7b0:	df000b15 	stw	fp,44(sp)
   4c7b4:	df000b04 	addi	fp,sp,44
   4c7b8:	e13ffc15 	stw	r4,-16(fp)
   4c7bc:	e17ffd15 	stw	r5,-12(fp)
   4c7c0:	e1bffe15 	stw	r6,-8(fp)
   4c7c4:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   4c7c8:	e0ffff17 	ldw	r3,-4(fp)
   4c7cc:	e0bffe17 	ldw	r2,-8(fp)
   4c7d0:	1885883a 	add	r2,r3,r2
   4c7d4:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   4c7d8:	e0c00217 	ldw	r3,8(fp)
   4c7dc:	e0800117 	ldw	r2,4(fp)
   4c7e0:	1885883a 	add	r2,r3,r2
   4c7e4:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   4c7e8:	e0800117 	ldw	r2,4(fp)
   4c7ec:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   4c7f0:	e0bffe17 	ldw	r2,-8(fp)
   4c7f4:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   4c7f8:	00800044 	movi	r2,1
   4c7fc:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   4c800:	e0bffc17 	ldw	r2,-16(fp)
   4c804:	10800504 	addi	r2,r2,20
   4c808:	1009883a 	mov	r4,r2
   4c80c:	00c00044 	movi	r3,1
   4c810:	e0bffd17 	ldw	r2,-12(fp)
   4c814:	1884983a 	sll	r2,r3,r2
   4c818:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   4c81c:	e0800317 	ldw	r2,12(fp)
   4c820:	1080008c 	andi	r2,r2,2
   4c824:	1000051e 	bne	r2,zero,4c83c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   4c828:	e0bffc17 	ldw	r2,-16(fp)
   4c82c:	10800304 	addi	r2,r2,12
   4c830:	1007883a 	mov	r3,r2
   4c834:	00810004 	movi	r2,1024
   4c838:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   4c83c:	e0bffc17 	ldw	r2,-16(fp)
   4c840:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   4c844:	e0bffc17 	ldw	r2,-16(fp)
   4c848:	10800204 	addi	r2,r2,8
   4c84c:	10800037 	ldwio	r2,0(r2)
   4c850:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   4c854:	e0bffa17 	ldw	r2,-24(fp)
   4c858:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   4c85c:	10000226 	beq	r2,zero,4c868 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   4c860:	e0bff717 	ldw	r2,-36(fp)
   4c864:	1000031e 	bne	r2,zero,4c874 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   4c868:	e0bffa17 	ldw	r2,-24(fp)
   4c86c:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   4c870:	103ff426 	beq	r2,zero,4c844 <__alt_mem_epcs_flash+0xfffcb844>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   4c874:	e0bffa17 	ldw	r2,-24(fp)
   4c878:	1080100c 	andi	r2,r2,64
   4c87c:	10001e26 	beq	r2,zero,4c8f8 <alt_avalon_spi_command+0x14c>
   4c880:	e0bff717 	ldw	r2,-36(fp)
   4c884:	00801c0e 	bge	zero,r2,4c8f8 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   4c888:	e0bff717 	ldw	r2,-36(fp)
   4c88c:	10bfffc4 	addi	r2,r2,-1
   4c890:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   4c894:	e0ffff17 	ldw	r3,-4(fp)
   4c898:	e0bff817 	ldw	r2,-32(fp)
   4c89c:	18800a2e 	bgeu	r3,r2,4c8c8 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   4c8a0:	e0bffc17 	ldw	r2,-16(fp)
   4c8a4:	10800104 	addi	r2,r2,4
   4c8a8:	1009883a 	mov	r4,r2
   4c8ac:	e0bfff17 	ldw	r2,-4(fp)
   4c8b0:	10c00044 	addi	r3,r2,1
   4c8b4:	e0ffff15 	stw	r3,-4(fp)
   4c8b8:	10800003 	ldbu	r2,0(r2)
   4c8bc:	10803fcc 	andi	r2,r2,255
   4c8c0:	20800035 	stwio	r2,0(r4)
   4c8c4:	00000c06 	br	4c8f8 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   4c8c8:	e0bff517 	ldw	r2,-44(fp)
   4c8cc:	10000826 	beq	r2,zero,4c8f0 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   4c8d0:	e0bff517 	ldw	r2,-44(fp)
   4c8d4:	10bfffc4 	addi	r2,r2,-1
   4c8d8:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   4c8dc:	e0bffc17 	ldw	r2,-16(fp)
   4c8e0:	10800104 	addi	r2,r2,4
   4c8e4:	0007883a 	mov	r3,zero
   4c8e8:	10c00035 	stwio	r3,0(r2)
   4c8ec:	00000206 	br	4c8f8 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   4c8f0:	00bf0004 	movi	r2,-1024
   4c8f4:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   4c8f8:	e0bffa17 	ldw	r2,-24(fp)
   4c8fc:	1080200c 	andi	r2,r2,128
   4c900:	103fd026 	beq	r2,zero,4c844 <__alt_mem_epcs_flash+0xfffcb844>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   4c904:	e0bffc17 	ldw	r2,-16(fp)
   4c908:	10800037 	ldwio	r2,0(r2)
   4c90c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   4c910:	e0bff617 	ldw	r2,-40(fp)
   4c914:	10000426 	beq	r2,zero,4c928 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   4c918:	e0bff617 	ldw	r2,-40(fp)
   4c91c:	10bfffc4 	addi	r2,r2,-1
   4c920:	e0bff615 	stw	r2,-40(fp)
   4c924:	00000506 	br	4c93c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   4c928:	e0800217 	ldw	r2,8(fp)
   4c92c:	10c00044 	addi	r3,r2,1
   4c930:	e0c00215 	stw	r3,8(fp)
   4c934:	e0fffb17 	ldw	r3,-20(fp)
   4c938:	10c00005 	stb	r3,0(r2)
      credits++;
   4c93c:	e0bff717 	ldw	r2,-36(fp)
   4c940:	10800044 	addi	r2,r2,1
   4c944:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   4c948:	e0bff617 	ldw	r2,-40(fp)
   4c94c:	103fbd1e 	bne	r2,zero,4c844 <__alt_mem_epcs_flash+0xfffcb844>
   4c950:	e0c00217 	ldw	r3,8(fp)
   4c954:	e0bff917 	ldw	r2,-28(fp)
   4c958:	18bfba1e 	bne	r3,r2,4c844 <__alt_mem_epcs_flash+0xfffcb844>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   4c95c:	e0bffc17 	ldw	r2,-16(fp)
   4c960:	10800204 	addi	r2,r2,8
   4c964:	10800037 	ldwio	r2,0(r2)
   4c968:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   4c96c:	e0bffa17 	ldw	r2,-24(fp)
   4c970:	1080080c 	andi	r2,r2,32
   4c974:	103ff926 	beq	r2,zero,4c95c <__alt_mem_epcs_flash+0xfffcb95c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   4c978:	e0800317 	ldw	r2,12(fp)
   4c97c:	1080004c 	andi	r2,r2,1
   4c980:	1000041e 	bne	r2,zero,4c994 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   4c984:	e0bffc17 	ldw	r2,-16(fp)
   4c988:	10800304 	addi	r2,r2,12
   4c98c:	0007883a 	mov	r3,zero
   4c990:	10c00035 	stwio	r3,0(r2)

  return read_length;
   4c994:	e0800117 	ldw	r2,4(fp)
}
   4c998:	e037883a 	mov	sp,fp
   4c99c:	df000017 	ldw	fp,0(sp)
   4c9a0:	dec00104 	addi	sp,sp,4
   4c9a4:	f800283a 	ret

0004c9a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4c9a8:	defffb04 	addi	sp,sp,-20
   4c9ac:	dfc00415 	stw	ra,16(sp)
   4c9b0:	df000315 	stw	fp,12(sp)
   4c9b4:	df000304 	addi	fp,sp,12
   4c9b8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4c9bc:	d0a00917 	ldw	r2,-32732(gp)
   4c9c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4c9c4:	00003106 	br	4ca8c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   4c9c8:	e0bffd17 	ldw	r2,-12(fp)
   4c9cc:	10800217 	ldw	r2,8(r2)
   4c9d0:	1009883a 	mov	r4,r2
   4c9d4:	00493700 	call	49370 <strlen>
   4c9d8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4c9dc:	e0bffd17 	ldw	r2,-12(fp)
   4c9e0:	10c00217 	ldw	r3,8(r2)
   4c9e4:	e0bffe17 	ldw	r2,-8(fp)
   4c9e8:	10bfffc4 	addi	r2,r2,-1
   4c9ec:	1885883a 	add	r2,r3,r2
   4c9f0:	10800003 	ldbu	r2,0(r2)
   4c9f4:	10803fcc 	andi	r2,r2,255
   4c9f8:	1080201c 	xori	r2,r2,128
   4c9fc:	10bfe004 	addi	r2,r2,-128
   4ca00:	10800bd8 	cmpnei	r2,r2,47
   4ca04:	1000031e 	bne	r2,zero,4ca14 <alt_find_file+0x6c>
    {
      len -= 1;
   4ca08:	e0bffe17 	ldw	r2,-8(fp)
   4ca0c:	10bfffc4 	addi	r2,r2,-1
   4ca10:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4ca14:	e0bffe17 	ldw	r2,-8(fp)
   4ca18:	e0ffff17 	ldw	r3,-4(fp)
   4ca1c:	1885883a 	add	r2,r3,r2
   4ca20:	10800003 	ldbu	r2,0(r2)
   4ca24:	10803fcc 	andi	r2,r2,255
   4ca28:	1080201c 	xori	r2,r2,128
   4ca2c:	10bfe004 	addi	r2,r2,-128
   4ca30:	10800be0 	cmpeqi	r2,r2,47
   4ca34:	1000081e 	bne	r2,zero,4ca58 <alt_find_file+0xb0>
   4ca38:	e0bffe17 	ldw	r2,-8(fp)
   4ca3c:	e0ffff17 	ldw	r3,-4(fp)
   4ca40:	1885883a 	add	r2,r3,r2
   4ca44:	10800003 	ldbu	r2,0(r2)
   4ca48:	10803fcc 	andi	r2,r2,255
   4ca4c:	1080201c 	xori	r2,r2,128
   4ca50:	10bfe004 	addi	r2,r2,-128
   4ca54:	10000a1e 	bne	r2,zero,4ca80 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   4ca58:	e0bffd17 	ldw	r2,-12(fp)
   4ca5c:	10800217 	ldw	r2,8(r2)
   4ca60:	e0fffe17 	ldw	r3,-8(fp)
   4ca64:	180d883a 	mov	r6,r3
   4ca68:	e17fff17 	ldw	r5,-4(fp)
   4ca6c:	1009883a 	mov	r4,r2
   4ca70:	004cc300 	call	4cc30 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4ca74:	1000021e 	bne	r2,zero,4ca80 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4ca78:	e0bffd17 	ldw	r2,-12(fp)
   4ca7c:	00000706 	br	4ca9c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   4ca80:	e0bffd17 	ldw	r2,-12(fp)
   4ca84:	10800017 	ldw	r2,0(r2)
   4ca88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4ca8c:	e0fffd17 	ldw	r3,-12(fp)
   4ca90:	d0a00904 	addi	r2,gp,-32732
   4ca94:	18bfcc1e 	bne	r3,r2,4c9c8 <__alt_mem_epcs_flash+0xfffcb9c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4ca98:	0005883a 	mov	r2,zero
}
   4ca9c:	e037883a 	mov	sp,fp
   4caa0:	dfc00117 	ldw	ra,4(sp)
   4caa4:	df000017 	ldw	fp,0(sp)
   4caa8:	dec00204 	addi	sp,sp,8
   4caac:	f800283a 	ret

0004cab0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4cab0:	defffc04 	addi	sp,sp,-16
   4cab4:	df000315 	stw	fp,12(sp)
   4cab8:	df000304 	addi	fp,sp,12
   4cabc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4cac0:	00bffa04 	movi	r2,-24
   4cac4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4cac8:	e03ffd15 	stw	zero,-12(fp)
   4cacc:	00001906 	br	4cb34 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   4cad0:	008001b4 	movhi	r2,6
   4cad4:	10b1de04 	addi	r2,r2,-14472
   4cad8:	e0fffd17 	ldw	r3,-12(fp)
   4cadc:	18c00324 	muli	r3,r3,12
   4cae0:	10c5883a 	add	r2,r2,r3
   4cae4:	10800017 	ldw	r2,0(r2)
   4cae8:	10000f1e 	bne	r2,zero,4cb28 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   4caec:	008001b4 	movhi	r2,6
   4caf0:	10b1de04 	addi	r2,r2,-14472
   4caf4:	e0fffd17 	ldw	r3,-12(fp)
   4caf8:	18c00324 	muli	r3,r3,12
   4cafc:	10c5883a 	add	r2,r2,r3
   4cb00:	e0ffff17 	ldw	r3,-4(fp)
   4cb04:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4cb08:	d0e00d17 	ldw	r3,-32716(gp)
   4cb0c:	e0bffd17 	ldw	r2,-12(fp)
   4cb10:	1880020e 	bge	r3,r2,4cb1c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   4cb14:	e0bffd17 	ldw	r2,-12(fp)
   4cb18:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
   4cb1c:	e0bffd17 	ldw	r2,-12(fp)
   4cb20:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   4cb24:	00000606 	br	4cb40 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4cb28:	e0bffd17 	ldw	r2,-12(fp)
   4cb2c:	10800044 	addi	r2,r2,1
   4cb30:	e0bffd15 	stw	r2,-12(fp)
   4cb34:	e0bffd17 	ldw	r2,-12(fp)
   4cb38:	10800810 	cmplti	r2,r2,32
   4cb3c:	103fe41e 	bne	r2,zero,4cad0 <__alt_mem_epcs_flash+0xfffcbad0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4cb40:	e0bffe17 	ldw	r2,-8(fp)
}
   4cb44:	e037883a 	mov	sp,fp
   4cb48:	df000017 	ldw	fp,0(sp)
   4cb4c:	dec00104 	addi	sp,sp,4
   4cb50:	f800283a 	ret

0004cb54 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4cb54:	defffb04 	addi	sp,sp,-20
   4cb58:	df000415 	stw	fp,16(sp)
   4cb5c:	df000404 	addi	fp,sp,16
   4cb60:	e13ffe15 	stw	r4,-8(fp)
   4cb64:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4cb68:	e0bfff17 	ldw	r2,-4(fp)
   4cb6c:	10840070 	cmpltui	r2,r2,4097
   4cb70:	1000021e 	bne	r2,zero,4cb7c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4cb74:	00840004 	movi	r2,4096
   4cb78:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4cb7c:	e0fffe17 	ldw	r3,-8(fp)
   4cb80:	e0bfff17 	ldw	r2,-4(fp)
   4cb84:	1885883a 	add	r2,r3,r2
   4cb88:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4cb8c:	e0bffe17 	ldw	r2,-8(fp)
   4cb90:	e0bffc15 	stw	r2,-16(fp)
   4cb94:	00000506 	br	4cbac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4cb98:	e0bffc17 	ldw	r2,-16(fp)
   4cb9c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4cba0:	e0bffc17 	ldw	r2,-16(fp)
   4cba4:	10800804 	addi	r2,r2,32
   4cba8:	e0bffc15 	stw	r2,-16(fp)
   4cbac:	e0fffc17 	ldw	r3,-16(fp)
   4cbb0:	e0bffd17 	ldw	r2,-12(fp)
   4cbb4:	18bff836 	bltu	r3,r2,4cb98 <__alt_mem_epcs_flash+0xfffcbb98>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4cbb8:	e0bffe17 	ldw	r2,-8(fp)
   4cbbc:	108007cc 	andi	r2,r2,31
   4cbc0:	10000226 	beq	r2,zero,4cbcc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4cbc4:	e0bffc17 	ldw	r2,-16(fp)
   4cbc8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4cbcc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4cbd0:	0001883a 	nop
   4cbd4:	e037883a 	mov	sp,fp
   4cbd8:	df000017 	ldw	fp,0(sp)
   4cbdc:	dec00104 	addi	sp,sp,4
   4cbe0:	f800283a 	ret

0004cbe4 <atexit>:
   4cbe4:	200b883a 	mov	r5,r4
   4cbe8:	000f883a 	mov	r7,zero
   4cbec:	000d883a 	mov	r6,zero
   4cbf0:	0009883a 	mov	r4,zero
   4cbf4:	004ccac1 	jmpi	4ccac <__register_exitproc>

0004cbf8 <exit>:
   4cbf8:	defffe04 	addi	sp,sp,-8
   4cbfc:	000b883a 	mov	r5,zero
   4cc00:	dc000015 	stw	r16,0(sp)
   4cc04:	dfc00115 	stw	ra,4(sp)
   4cc08:	2021883a 	mov	r16,r4
   4cc0c:	004cdc40 	call	4cdc4 <__call_exitprocs>
   4cc10:	008001b4 	movhi	r2,6
   4cc14:	10b35804 	addi	r2,r2,-12960
   4cc18:	11000017 	ldw	r4,0(r2)
   4cc1c:	20800f17 	ldw	r2,60(r4)
   4cc20:	10000126 	beq	r2,zero,4cc28 <exit+0x30>
   4cc24:	103ee83a 	callr	r2
   4cc28:	8009883a 	mov	r4,r16
   4cc2c:	004cf440 	call	4cf44 <_exit>

0004cc30 <memcmp>:
   4cc30:	01c000c4 	movi	r7,3
   4cc34:	3980192e 	bgeu	r7,r6,4cc9c <memcmp+0x6c>
   4cc38:	2144b03a 	or	r2,r4,r5
   4cc3c:	11c4703a 	and	r2,r2,r7
   4cc40:	10000f26 	beq	r2,zero,4cc80 <memcmp+0x50>
   4cc44:	20800003 	ldbu	r2,0(r4)
   4cc48:	28c00003 	ldbu	r3,0(r5)
   4cc4c:	10c0151e 	bne	r2,r3,4cca4 <memcmp+0x74>
   4cc50:	31bfff84 	addi	r6,r6,-2
   4cc54:	01ffffc4 	movi	r7,-1
   4cc58:	00000406 	br	4cc6c <memcmp+0x3c>
   4cc5c:	20800003 	ldbu	r2,0(r4)
   4cc60:	28c00003 	ldbu	r3,0(r5)
   4cc64:	31bfffc4 	addi	r6,r6,-1
   4cc68:	10c00e1e 	bne	r2,r3,4cca4 <memcmp+0x74>
   4cc6c:	21000044 	addi	r4,r4,1
   4cc70:	29400044 	addi	r5,r5,1
   4cc74:	31fff91e 	bne	r6,r7,4cc5c <__alt_mem_epcs_flash+0xfffcbc5c>
   4cc78:	0005883a 	mov	r2,zero
   4cc7c:	f800283a 	ret
   4cc80:	20c00017 	ldw	r3,0(r4)
   4cc84:	28800017 	ldw	r2,0(r5)
   4cc88:	18bfee1e 	bne	r3,r2,4cc44 <__alt_mem_epcs_flash+0xfffcbc44>
   4cc8c:	31bfff04 	addi	r6,r6,-4
   4cc90:	21000104 	addi	r4,r4,4
   4cc94:	29400104 	addi	r5,r5,4
   4cc98:	39bff936 	bltu	r7,r6,4cc80 <__alt_mem_epcs_flash+0xfffcbc80>
   4cc9c:	303fe91e 	bne	r6,zero,4cc44 <__alt_mem_epcs_flash+0xfffcbc44>
   4cca0:	003ff506 	br	4cc78 <__alt_mem_epcs_flash+0xfffcbc78>
   4cca4:	10c5c83a 	sub	r2,r2,r3
   4cca8:	f800283a 	ret

0004ccac <__register_exitproc>:
   4ccac:	defffa04 	addi	sp,sp,-24
   4ccb0:	dc000315 	stw	r16,12(sp)
   4ccb4:	040001b4 	movhi	r16,6
   4ccb8:	84335804 	addi	r16,r16,-12960
   4ccbc:	80c00017 	ldw	r3,0(r16)
   4ccc0:	dc400415 	stw	r17,16(sp)
   4ccc4:	dfc00515 	stw	ra,20(sp)
   4ccc8:	18805217 	ldw	r2,328(r3)
   4cccc:	2023883a 	mov	r17,r4
   4ccd0:	10003726 	beq	r2,zero,4cdb0 <__register_exitproc+0x104>
   4ccd4:	10c00117 	ldw	r3,4(r2)
   4ccd8:	010007c4 	movi	r4,31
   4ccdc:	20c00e16 	blt	r4,r3,4cd18 <__register_exitproc+0x6c>
   4cce0:	1a000044 	addi	r8,r3,1
   4cce4:	8800221e 	bne	r17,zero,4cd70 <__register_exitproc+0xc4>
   4cce8:	18c00084 	addi	r3,r3,2
   4ccec:	18c7883a 	add	r3,r3,r3
   4ccf0:	18c7883a 	add	r3,r3,r3
   4ccf4:	12000115 	stw	r8,4(r2)
   4ccf8:	10c7883a 	add	r3,r2,r3
   4ccfc:	19400015 	stw	r5,0(r3)
   4cd00:	0005883a 	mov	r2,zero
   4cd04:	dfc00517 	ldw	ra,20(sp)
   4cd08:	dc400417 	ldw	r17,16(sp)
   4cd0c:	dc000317 	ldw	r16,12(sp)
   4cd10:	dec00604 	addi	sp,sp,24
   4cd14:	f800283a 	ret
   4cd18:	00800034 	movhi	r2,0
   4cd1c:	10800004 	addi	r2,r2,0
   4cd20:	10002626 	beq	r2,zero,4cdbc <__register_exitproc+0x110>
   4cd24:	01006404 	movi	r4,400
   4cd28:	d9400015 	stw	r5,0(sp)
   4cd2c:	d9800115 	stw	r6,4(sp)
   4cd30:	d9c00215 	stw	r7,8(sp)
   4cd34:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   4cd38:	d9400017 	ldw	r5,0(sp)
   4cd3c:	d9800117 	ldw	r6,4(sp)
   4cd40:	d9c00217 	ldw	r7,8(sp)
   4cd44:	10001d26 	beq	r2,zero,4cdbc <__register_exitproc+0x110>
   4cd48:	81000017 	ldw	r4,0(r16)
   4cd4c:	10000115 	stw	zero,4(r2)
   4cd50:	02000044 	movi	r8,1
   4cd54:	22405217 	ldw	r9,328(r4)
   4cd58:	0007883a 	mov	r3,zero
   4cd5c:	12400015 	stw	r9,0(r2)
   4cd60:	20805215 	stw	r2,328(r4)
   4cd64:	10006215 	stw	zero,392(r2)
   4cd68:	10006315 	stw	zero,396(r2)
   4cd6c:	883fde26 	beq	r17,zero,4cce8 <__alt_mem_epcs_flash+0xfffcbce8>
   4cd70:	18c9883a 	add	r4,r3,r3
   4cd74:	2109883a 	add	r4,r4,r4
   4cd78:	1109883a 	add	r4,r2,r4
   4cd7c:	21802215 	stw	r6,136(r4)
   4cd80:	01800044 	movi	r6,1
   4cd84:	12406217 	ldw	r9,392(r2)
   4cd88:	30cc983a 	sll	r6,r6,r3
   4cd8c:	4992b03a 	or	r9,r9,r6
   4cd90:	12406215 	stw	r9,392(r2)
   4cd94:	21c04215 	stw	r7,264(r4)
   4cd98:	01000084 	movi	r4,2
   4cd9c:	893fd21e 	bne	r17,r4,4cce8 <__alt_mem_epcs_flash+0xfffcbce8>
   4cda0:	11006317 	ldw	r4,396(r2)
   4cda4:	218cb03a 	or	r6,r4,r6
   4cda8:	11806315 	stw	r6,396(r2)
   4cdac:	003fce06 	br	4cce8 <__alt_mem_epcs_flash+0xfffcbce8>
   4cdb0:	18805304 	addi	r2,r3,332
   4cdb4:	18805215 	stw	r2,328(r3)
   4cdb8:	003fc606 	br	4ccd4 <__alt_mem_epcs_flash+0xfffcbcd4>
   4cdbc:	00bfffc4 	movi	r2,-1
   4cdc0:	003fd006 	br	4cd04 <__alt_mem_epcs_flash+0xfffcbd04>

0004cdc4 <__call_exitprocs>:
   4cdc4:	defff504 	addi	sp,sp,-44
   4cdc8:	df000915 	stw	fp,36(sp)
   4cdcc:	dd400615 	stw	r21,24(sp)
   4cdd0:	dc800315 	stw	r18,12(sp)
   4cdd4:	dfc00a15 	stw	ra,40(sp)
   4cdd8:	ddc00815 	stw	r23,32(sp)
   4cddc:	dd800715 	stw	r22,28(sp)
   4cde0:	dd000515 	stw	r20,20(sp)
   4cde4:	dcc00415 	stw	r19,16(sp)
   4cde8:	dc400215 	stw	r17,8(sp)
   4cdec:	dc000115 	stw	r16,4(sp)
   4cdf0:	d9000015 	stw	r4,0(sp)
   4cdf4:	2839883a 	mov	fp,r5
   4cdf8:	04800044 	movi	r18,1
   4cdfc:	057fffc4 	movi	r21,-1
   4ce00:	008001b4 	movhi	r2,6
   4ce04:	10b35804 	addi	r2,r2,-12960
   4ce08:	12000017 	ldw	r8,0(r2)
   4ce0c:	45005217 	ldw	r20,328(r8)
   4ce10:	44c05204 	addi	r19,r8,328
   4ce14:	a0001c26 	beq	r20,zero,4ce88 <__call_exitprocs+0xc4>
   4ce18:	a0800117 	ldw	r2,4(r20)
   4ce1c:	15ffffc4 	addi	r23,r2,-1
   4ce20:	b8000d16 	blt	r23,zero,4ce58 <__call_exitprocs+0x94>
   4ce24:	14000044 	addi	r16,r2,1
   4ce28:	8421883a 	add	r16,r16,r16
   4ce2c:	8421883a 	add	r16,r16,r16
   4ce30:	84402004 	addi	r17,r16,128
   4ce34:	a463883a 	add	r17,r20,r17
   4ce38:	a421883a 	add	r16,r20,r16
   4ce3c:	e0001e26 	beq	fp,zero,4ceb8 <__call_exitprocs+0xf4>
   4ce40:	80804017 	ldw	r2,256(r16)
   4ce44:	e0801c26 	beq	fp,r2,4ceb8 <__call_exitprocs+0xf4>
   4ce48:	bdffffc4 	addi	r23,r23,-1
   4ce4c:	843fff04 	addi	r16,r16,-4
   4ce50:	8c7fff04 	addi	r17,r17,-4
   4ce54:	bd7ff91e 	bne	r23,r21,4ce3c <__alt_mem_epcs_flash+0xfffcbe3c>
   4ce58:	00800034 	movhi	r2,0
   4ce5c:	10800004 	addi	r2,r2,0
   4ce60:	10000926 	beq	r2,zero,4ce88 <__call_exitprocs+0xc4>
   4ce64:	a0800117 	ldw	r2,4(r20)
   4ce68:	1000301e 	bne	r2,zero,4cf2c <__call_exitprocs+0x168>
   4ce6c:	a0800017 	ldw	r2,0(r20)
   4ce70:	10003226 	beq	r2,zero,4cf3c <__call_exitprocs+0x178>
   4ce74:	a009883a 	mov	r4,r20
   4ce78:	98800015 	stw	r2,0(r19)
   4ce7c:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   4ce80:	9d000017 	ldw	r20,0(r19)
   4ce84:	a03fe41e 	bne	r20,zero,4ce18 <__alt_mem_epcs_flash+0xfffcbe18>
   4ce88:	dfc00a17 	ldw	ra,40(sp)
   4ce8c:	df000917 	ldw	fp,36(sp)
   4ce90:	ddc00817 	ldw	r23,32(sp)
   4ce94:	dd800717 	ldw	r22,28(sp)
   4ce98:	dd400617 	ldw	r21,24(sp)
   4ce9c:	dd000517 	ldw	r20,20(sp)
   4cea0:	dcc00417 	ldw	r19,16(sp)
   4cea4:	dc800317 	ldw	r18,12(sp)
   4cea8:	dc400217 	ldw	r17,8(sp)
   4ceac:	dc000117 	ldw	r16,4(sp)
   4ceb0:	dec00b04 	addi	sp,sp,44
   4ceb4:	f800283a 	ret
   4ceb8:	a0800117 	ldw	r2,4(r20)
   4cebc:	80c00017 	ldw	r3,0(r16)
   4cec0:	10bfffc4 	addi	r2,r2,-1
   4cec4:	15c01426 	beq	r2,r23,4cf18 <__call_exitprocs+0x154>
   4cec8:	80000015 	stw	zero,0(r16)
   4cecc:	183fde26 	beq	r3,zero,4ce48 <__alt_mem_epcs_flash+0xfffcbe48>
   4ced0:	95c8983a 	sll	r4,r18,r23
   4ced4:	a0806217 	ldw	r2,392(r20)
   4ced8:	a5800117 	ldw	r22,4(r20)
   4cedc:	2084703a 	and	r2,r4,r2
   4cee0:	10000b26 	beq	r2,zero,4cf10 <__call_exitprocs+0x14c>
   4cee4:	a0806317 	ldw	r2,396(r20)
   4cee8:	2088703a 	and	r4,r4,r2
   4ceec:	20000c1e 	bne	r4,zero,4cf20 <__call_exitprocs+0x15c>
   4cef0:	89400017 	ldw	r5,0(r17)
   4cef4:	d9000017 	ldw	r4,0(sp)
   4cef8:	183ee83a 	callr	r3
   4cefc:	a0800117 	ldw	r2,4(r20)
   4cf00:	15bfbf1e 	bne	r2,r22,4ce00 <__alt_mem_epcs_flash+0xfffcbe00>
   4cf04:	98800017 	ldw	r2,0(r19)
   4cf08:	153fcf26 	beq	r2,r20,4ce48 <__alt_mem_epcs_flash+0xfffcbe48>
   4cf0c:	003fbc06 	br	4ce00 <__alt_mem_epcs_flash+0xfffcbe00>
   4cf10:	183ee83a 	callr	r3
   4cf14:	003ff906 	br	4cefc <__alt_mem_epcs_flash+0xfffcbefc>
   4cf18:	a5c00115 	stw	r23,4(r20)
   4cf1c:	003feb06 	br	4cecc <__alt_mem_epcs_flash+0xfffcbecc>
   4cf20:	89000017 	ldw	r4,0(r17)
   4cf24:	183ee83a 	callr	r3
   4cf28:	003ff406 	br	4cefc <__alt_mem_epcs_flash+0xfffcbefc>
   4cf2c:	a0800017 	ldw	r2,0(r20)
   4cf30:	a027883a 	mov	r19,r20
   4cf34:	1029883a 	mov	r20,r2
   4cf38:	003fb606 	br	4ce14 <__alt_mem_epcs_flash+0xfffcbe14>
   4cf3c:	0005883a 	mov	r2,zero
   4cf40:	003ffb06 	br	4cf30 <__alt_mem_epcs_flash+0xfffcbf30>

0004cf44 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4cf44:	defffd04 	addi	sp,sp,-12
   4cf48:	df000215 	stw	fp,8(sp)
   4cf4c:	df000204 	addi	fp,sp,8
   4cf50:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4cf54:	0001883a 	nop
   4cf58:	e0bfff17 	ldw	r2,-4(fp)
   4cf5c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   4cf60:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4cf64:	10000226 	beq	r2,zero,4cf70 <_exit+0x2c>
    ALT_SIM_FAIL();
   4cf68:	002af070 	cmpltui	zero,zero,43969
   4cf6c:	00000106 	br	4cf74 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   4cf70:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4cf74:	003fff06 	br	4cf74 <__alt_mem_epcs_flash+0xfffcbf74>
