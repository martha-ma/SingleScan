
scan.elf:     file format elf32-littlenios2
scan.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0001cc4c memsz 0x00023e3c flags rwx
    LOAD off    0x0001e000 vaddr 0x00081000 paddr 0x00081000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00081000  00081000  0001e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cc50  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000c240  0004ce94  0004ce94  0000de94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00003b98  000590d4  000590d4  0001a0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000071f0  0005cc6c  0005cc6c  0001dc6c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00063e5c  00063e5c  0001e020  2**0
                  CONTENTS
  7 .epcs_flash   00000000  00081020  00081020  0001e020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001e020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000008d8  00000000  00000000  0001e048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000f188  00000000  00000000  0001e920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004748  00000000  00000000  0002daa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005165  00000000  00000000  000321f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002480  00000000  00000000  00037358  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000038f4  00000000  00000000  000397d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000f46  00000000  00000000  0003d0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0003e014  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000208  00000000  00000000  0003e038  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000418ee  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000418f1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000418f6  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000418f7  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000418f8  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000418fc  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00041900  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00041904  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0004190d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00041916  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  0004191f  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001f  00000000  00000000  00041925  2**0
                  CONTENTS, READONLY
 30 .jdi          00007350  00000000  00000000  00041944  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000a4c87  00000000  00000000  00048c94  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00081000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
0004ce94 l    d  .rodata	00000000 .rodata
000590d4 l    d  .rwdata	00000000 .rwdata
0005cc6c l    d  .bss	00000000 .bss
00063e5c l    d  .onchip_memory	00000000 .onchip_memory
00081020 l    d  .epcs_flash	00000000 .epcs_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../scan_bsp//obj/HAL/src/crt0.o
0004027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 bsp.c
00000000 l    df *ABS*	00000000 device.c
00000000 l    df *ABS*	00000000 fpga2nios_protocol.c
00040e9c l     F .text	00000134 hex2ascii
00000000 l    df *ABS*	00000000 iic.c
00041ac0 l     F .text	00000078 start
00041b38 l     F .text	00000090 stop
00041bc8 l     F .text	000000a8 wait_slave_ack
00041c70 l     F .text	00000098 master_send_ack
00041d08 l     F .text	00000098 no_ack
00041e64 l     F .text	000000c4 iic_read
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 nios2fpga_protocol.c
00042c9c l     F .text	00000078 check_sum
00000000 l    df *ABS*	00000000 pc2dev.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 region.c
00000000 l    df *ABS*	00000000 remote_update.c
00000000 l    df *ABS*	00000000 sick_protocol.c
00045e50 l     F .text	000000a8 string2hex
00045ef8 l     F .text	000000c8 find_index
00000000 l    df *ABS*	00000000 socket.c
0005cc86 l     O .bss	00000002 local_port
00000000 l    df *ABS*	00000000 tim561.c
00000000 l    df *ABS*	00000000 user_interrupt.c
00000000 l    df *ABS*	00000000 w5500.c
0005cd14 l     O .bss	00000010 SSIZE
0005cd24 l     O .bss	00000010 RSIZE
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00049798 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00049900 l     F .text	00000034 alt_dev_reg
0005b528 l     O .rwdata	000000cc epcs_flash
0005b5f4 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
000499ec l     F .text	00000034 alt_flash_device_register
00049a74 l     F .text	000003f8 alt_epcs_flash_query
00049e6c l     F .text	000000ec alt_epcs_flash_memcmp
0004a244 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004ac10 l     F .text	0000020c altera_avalon_jtag_uart_irq
0004ae1c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004b454 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
0004b5a4 l     F .text	00000038 epcs_test_wip
0004b5dc l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0004bcb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0004bddc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004be08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004c108 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0004c248 l     F .text	0000003c alt_get_errno
0004c284 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0005c7fc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0005cc9c g     O .bss	00000004 alt_instruction_exception_handler
0004a1b8 g     F .text	0000008c alt_epcs_flash_get_info
000599cc g     O .rwdata	000004bd udp_reponse
00049884 g     F .text	0000007c alt_main
0005fb9c g     O .bss	00001fbc CycleData
00063d5c g     O .bss	00000100 alt_irq
0004a770 g     F .text	0000005c altera_avalon_fifo_write_almostfull
000590d4 g       *ABS*	00000000 __flash_rwdata_start
000410b8 g     F .text	00000708 fpga2nios_parse
00043408 g     F .text	00000164 write_laser_presdo
00040ca0 g     F .text	000001fc set_default
00046b20 g     F .text	00000080 close_socket
00059214 g     O .rwdata	00000014 nios2pc
00047108 g     F .text	000000a0 recv
00046c38 g     F .text	000002b0 connect
00048758 g     F .text	0000005c setRTR
000486b0 g     F .text	0000003c getSIPR
00045d28 g     F .text	00000098 image_read
0005cc6c g     O .bss	00000001 isTcpEstablished
00047958 g     F .text	0000007c timer_initial
0004a4e8 g     F .text	00000098 altera_avalon_fifo_init
0005cc84 g     O .bss	00000001 sMI_3E_flag
00047cc0 g     F .text	00000078 SPI_I2S_ReceiveData
00045dc0 g     F .text	00000090 image_erase
0004a828 g     F .text	00000058 altera_avalon_fifo_write_fifo
00042d14 g     F .text	00000020 motor_init
00081000 g       *ABS*	00000000 __alt_mem_epcs_flash
00048c4c g     F .text	00000130 recv_data_processing
000484c4 g     F .text	0000003c getGWIP
0004c6a4 g     F .text	00000024 altera_nios2_gen2_irq_init
0004b618 g     F .text	000000fc epcs_sector_erase
00081000 g     F .entry	0000001c __reset
0004a9c4 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00042f40 g     F .text	000004a8 init_fpga_sys
00059e8c g     O .rwdata	000008f0 tim561_index
00040020 g       *ABS*	00000000 __flash_exceptions_start
0005b094 g     O .rwdata	00000010 sMI_0_3_F4724744_stop
0005cca8 g     O .bss	00000004 errno
000423f4 g     F .text	00000038 led_status_light
00040c14 g     F .text	0000008c set_network
00045c30 g     F .text	000000f8 image_write
0005a77c g     O .rwdata	000008f0 tim561_respons
0005cc94 g     O .bss	00000004 alt_argv
00064c20 g       *ABS*	00000000 _gp
0004a6b4 g     F .text	00000060 altera_avalon_fifo_clear_event
0005c67c g     O .rwdata	00000180 alt_fd_list
000485b4 g     F .text	00000048 setkeepalive
00042ed0 g     F .text	00000070 set_laser_paramter
0004b85c g     F .text	0000006c epcs_write_status_register
0004853c g     F .text	0000003c setSHAR
0004bfa8 g     F .text	00000090 alt_find_dev
00048f88 g     F .text	00000148 memcpy
0004c1cc g     F .text	0000007c alt_io_redirect
0004ce94 g       *ABS*	00000000 __DTOR_END__
00047d38 g     F .text	0000008c IINCHIP_WRITE
0004872c g     F .text	0000002c getIR
0004c06c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0004a350 g     F .text	00000100 alt_epcs_flash_write_block
000487b4 g     F .text	00000040 setRCR
0004b014 g     F .text	0000021c altera_avalon_jtag_uart_read
000590d4 g     O .rwdata	00000130 SysPara
00048ecc g     F .text	00000064 .hidden __udivsi3
00063c58 g     O .bss	00000104 image
0004ca70 g     F .text	00000090 alt_icache_flush
00047444 g     F .text	0000048c recvfrom
0005b06c g     O .rwdata	00000028 sMI_2
0005b0b8 g     O .rwdata	0000038d sRI_15B_reply
00046958 g     F .text	000001c8 socket
0005cc54 g     O .rwdata	00000004 alt_max_fd
00047bbc g     F .text	00000030 IINCHIP_CSon
00046788 g     F .text	000001d0 sick_pos_packet
00042d34 g     F .text	00000114 nios2fpga_data_packet
0004a2d8 g     F .text	00000078 alt_epcs_flash_erase_block
0005cc80 g     O .bss	00000004 Nios2FPGA_pck
0005d534 g     O .bss	00000021 ConfigMsg
0005cc64 g     O .rwdata	00000004 _global_impure_ptr
0004bb28 g     F .text	0000005c epcs_exit_4_bytes_mode
00063e5c g       *ABS*	00000000 __bss_end
000496a8 g     F .text	000000f0 alt_iic_isr_register
0004c59c g     F .text	00000108 alt_tick
00046f50 g     F .text	000001b8 send
0005b448 g     O .rwdata	000000b3 sRI_1DC_reply
00041074 g     F .text	00000044 read_fpga_data
000487f4 g     F .text	0000005c clearIR
0004965c g     F .text	0000004c alt_ic_irq_enabled
00048638 g     F .text	0000003c getSUBR
0004c500 g     F .text	0000009c alt_alarm_stop
00041f28 g     F .text	000000ac eeprom_write_byte
0005cc8c g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
0005c654 g     O .rwdata	00000028 alt_dev_null
0005db2c g     O .bss	00000014 LaserDataQueue
00048a38 g     F .text	000000e4 getSn_RX_RSR
00041884 g     F .text	0000008c process_ld_waring
00045678 g     F .text	00000078 queue_count
0004bdbc g     F .text	00000020 alt_dcache_flush_all
0005cc88 g     O .bss	00000004 timer_isr_context
00048674 g     F .text	0000003c getSHAR
0004356c g     F .text	00000114 pc_data_to_fpga
0005b0a4 g     O .rwdata	00000014 sRI_E6_reply
0004a714 g     F .text	0000005c altera_avalon_fifo_write_ienable
0005cc6c g       *ABS*	00000000 __ram_rwdata_end
0005cc75 g     O .bss	00000008 led_time_flag
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
0004a624 g     F .text	0000002c altera_avalon_fifo_read_almostempty
0005cc4c g     O .rwdata	00000008 alt_dev_list
000590d4 g       *ABS*	00000000 __ram_rodata_end
0005d555 g     O .bss	00000021 RecvMsg
000423bc g     F .text	00000038 led_power_light
00048f30 g     F .text	00000058 .hidden __umodsi3
0004b9e4 g     F .text	00000068 epcs_read_electronic_signature
00040bd0 g     F .text	00000044 reboot
00063e5c g       *ABS*	00000000 end
00046ee8 g     F .text	00000068 disconnect
0004242c g     F .text	00000088 init_avalon_fifo
0004ab50 g     F .text	000000c0 altera_avalon_jtag_uart_init
00043680 g     F .text	000016b8 pc2dev_parse
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0004a650 g     F .text	0000003c altera_avalon_fifo_read_event
0004ce94 g       *ABS*	00000000 __CTOR_LIST__
0006d000 g       *ABS*	00000000 __alt_stack_pointer
0004b4cc g     F .text	0000007c alt_avalon_timer_sc_init
00047f2c g     F .text	00000174 wiz_read_buf
0004b230 g     F .text	00000224 altera_avalon_jtag_uart_write
000419c4 g     F .text	000000fc process_sys_temp_waring
0004a8ec g     F .text	0000004c altera_avalon_fifo_read_fifo
00059228 g     O .rwdata	000006f8 alarm_region
0004cce0 g     F .text	00000180 __call_exitprocs
00040a8c g     F .text	000000ec test
0004102c g     F .text	00000048 fpga_is_has_data
00040244 g     F .text	0000003c _start
0005cca0 g     O .bss	00000004 _alt_tick_rate
0004c6c8 g     F .text	000001fc alt_avalon_spi_command
0005cca4 g     O .bss	00000004 _alt_nticks
0005db40 g     O .bss	0000005c fpga2nios_data
0004996c g     F .text	00000080 alt_sys_init
00045758 g     F .text	00000040 queue_is_empty
000455fc g     F .text	0000007c queue_pop
0004cbc8 g     F .text	00000118 __register_exitproc
000421d4 g     F .text	000000d0 eeprom_read_byte
0005cd34 g     O .bss	00000800 buffer
00045a5c g     F .text	00000194 read_sys_para
0004936c g     F .text	000000d0 strncmp
00040b78 g     F .text	00000058 Reset_W5500
00048578 g     F .text	0000003c setSIPR
00045bf0 g     F .text	00000040 rd_switch_io_value
0005cc30 g     O .rwdata	00000008 sMI_0_3_F4724744_start
00045fc0 g     F .text	000007c8 sick_protocol_process
0004aebc g     F .text	00000068 altera_avalon_jtag_uart_close
0005ccac g     O .bss	00000068 sys_warn
000590d4 g       *ABS*	00000000 __ram_rwdata_start
0004ce94 g       *ABS*	00000000 __ram_rodata_start
000471a8 g     F .text	0000029c sendto
0004b548 g     F .text	0000005c epcs_read_status_register
00040334 g     F .text	00000758 tim561_run
000433e8 g     F .text	00000020 close_peripheral_dev
0004a9ec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004c9cc g     F .text	000000a4 alt_get_fd
00061b58 g     O .bss	00002100 send_buffer
00047b5c g     F .text	00000030 watchdog_feed
0004ba4c g     F .text	00000080 epcs_read_device_id
0004cb4c g     F .text	0000007c memcmp
00046ba0 g     F .text	00000098 listen
0004aaac g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00063e5c g       *ABS*	00000000 __alt_stack_base
0004aafc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0004a580 g     F .text	0000003c altera_avalon_fifo_read_status
000402c8 g     F .text	0000006c delay_us
0004a998 g     F .text	0000002c altera_avalon_fifo_read_other_info
0004c8c4 g     F .text	00000108 alt_find_file
0004be44 g     F .text	000000a4 alt_dev_llist_insert
000485fc g     F .text	0000003c getGAR
000422a4 g     F .text	00000118 eeprom_sequential_read
000480d0 g     F .text	000003b8 sysinit
0005cc38 g     O .rwdata	00000008 alt_flash_dev_list
0005cc20 g     O .rwdata	00000008 txsize
00045798 g     F .text	000000a0 region_save2eeprom
0005cc6c g       *ABS*	00000000 __bss_start
00047dc4 g     F .text	000000a4 IINCHIP_READ
000490d0 g     F .text	00000128 memset
00045988 g     F .text	00000078 region_read_from_rom
000424b4 g     F .text	000007e8 main
00040280 g     F .text	00000048 delay_ms
00045a00 g     F .text	0000005c save_sys_para
0005cc98 g     O .bss	00000004 alt_envp
00059204 g     O .rwdata	00000010 pc2nios
000488d4 g     F .text	00000040 getSn_IR
0004aa4c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004a68c g     F .text	00000028 altera_avalon_fifo_read_level
0005cc28 g     O .rwdata	00000008 rxsize
0004557c g     F .text	00000080 queue_push
000599bc g     O .rwdata	0000000d RSSI_Field_end
0005cc58 g     O .rwdata	00000004 alt_errno
00059920 g     O .rwdata	0000006d frame_start
00041fd4 g     F .text	00000200 eeprom_write_page
00048dd4 g     F .text	00000084 .hidden __divsi3
0004ce94 g       *ABS*	00000000 __CTOR_END__
00048b1c g     F .text	00000130 send_data_processing
000479d4 g     F .text	00000158 timer_isr_interrupt
00049f58 g     F .text	00000260 alt_epcs_flash_write
000491f8 g     F .text	000000dc strcmp
00048850 g     F .text	00000084 setSn_MSS
0004ce94 g       *ABS*	00000000 __flash_rodata_start
0005cc70 g     O .bss	00000004 SysStatus
0004ce94 g       *ABS*	00000000 __DTOR_LIST__
00048914 g     F .text	00000040 getSn_SR
0005d576 g     O .bss	000005b4 pub_buf
00049934 g     F .text	00000038 alt_irq_init
0004c49c g     F .text	00000064 alt_release_fd
00045540 g     F .text	0000003c queue_clear
0004cb00 g     F .text	00000014 atexit
00048954 g     F .text	000000e4 getSn_TX_FSR
000456f0 g     F .text	00000068 queue_is_full
0005cc68 g     O .rwdata	00000004 _impure_ptr
0005cc90 g     O .bss	00000004 alt_argc
0004bf48 g     F .text	00000060 _do_dtors
00045838 g     F .text	00000150 region_save2fpga
00040020 g       .exceptions	00000000 alt_irq_entry
00047c64 g     F .text	0000005c IINCHIP_SpiSendData
0005cc44 g     O .rwdata	00000008 alt_fs_list
000480a0 g     F .text	00000030 iinchip_init
0005cc74 g     O .bss	00000001 isPowerUp
00042e48 g     F .text	00000088 nios2fpga_data_write
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004b714 g     F .text	000000f4 epcs_read_buffer
00049a20 g     F .text	00000054 alt_epcs_flash_init
0004a938 g     F .text	00000060 altera_avalon_fifo_write_other_info
000494f8 g     F .text	00000050 alt_ic_isr_register
00041da0 g     F .text	000000c4 iic_write
000486ec g     F .text	00000040 setMR
0005cc6c g       *ABS*	00000000 _edata
00063e5c g       *ABS*	00000000 _end
0004943c g     F .text	00000068 alt_flash_open_dev
00040244 g       *ABS*	00000000 __ram_exceptions_end
0004af24 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00048d7c g     F .text	00000058 setSn_IR
000495d0 g     F .text	0000008c alt_ic_irq_disable
0004bacc g     F .text	0000005c epcs_enter_4_bytes_mode
0004cb14 g     F .text	00000038 exit
000417c0 g     F .text	000000c4 process_motor_waring
000494a4 g     F .text	00000054 alt_flash_close_dev
00048e58 g     F .text	00000074 .hidden __modsi3
00048500 g     F .text	0000003c setSUBR
0004a5bc g     F .text	0000003c altera_avalon_fifo_read_ienable
0006d000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0005b4fc g     O .rwdata	0000002c sMI_reply
0004ce60 g     F .text	00000034 _exit
0004bb84 g     F .text	0000012c alt_alarm_start
00041910 g     F .text	000000b4 process_window_dust_waring
00047c28 g     F .text	0000003c getIINCHIP_TxMAX
0004a5f8 g     F .text	0000002c altera_avalon_fifo_read_almostfull
000492d4 g     F .text	00000098 strlen
0004b808 g     F .text	00000054 epcs_write_enable
0004c348 g     F .text	00000154 open
0004a880 g     F .text	0000006c altera_avalon_read_fifo
0005db9c g     O .bss	00002000 LaserData
00044d38 g     F .text	0000077c pc2dev_packet
0004c038 g     F .text	00000034 alt_icache_flush_all
0005cc40 g     O .rwdata	00000004 alt_priority_mask
00047b8c g     F .text	00000030 IINCHIP_CSoff
00047b2c g     F .text	00000030 watchdog_init
00047e68 g     F .text	000000c4 wiz_write_buf
00049548 g     F .text	00000088 alt_ic_irq_enable
000478d0 g     F .text	00000088 find_index_old
00047bec g     F .text	0000003c getIINCHIP_RxMAX
00048488 g     F .text	0000003c setGAR
0004a450 g     F .text	00000098 alt_epcs_flash_read
0004a7cc g     F .text	0000005c altera_avalon_fifo_write_almostempty
0005cc5c g     O .rwdata	00000008 alt_alarm_list
00040fd0 g     F .text	0000005c big_swap_little
0004bee8 g     F .text	00000060 _do_ctors
00059990 g     O .rwdata	0000002a RSSI_Field_start
0004bcec g     F .text	000000d0 close
000454b4 g     F .text	0000008c queue_init
00049800 g     F .text	00000084 alt_load
0004b8c8 g     F .text	0000011c epcs_write_buffer



Disassembly of section .entry:

00081000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   81000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   81004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   81008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8100c:	00bffd16 	blt	zero,r2,81004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   81010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   81014:	08409114 	ori	at,at,580
    jmp r1
   81018:	0800683a 	jmp	at
   8101c:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	008001b4 	movhi	r2,6
   40140:	108f5704 	addi	r2,r2,15708
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	008001b4 	movhi	r2,6
   40158:	108f5704 	addi	r2,r2,15708
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__reset+0xfffbf12c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__reset+0xfffbf120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a01f17 	ldw	r2,-32644(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a01f17 	ldw	r2,-32644(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40244:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40248:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
   4024c:	068001b4 	movhi	gp,6
    ori gp, gp, %lo(_gp)
   40250:	d6930814 	ori	gp,gp,19488
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40254:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40258:	10b31b14 	ori	r2,r2,52332

    movhi r3, %hi(__bss_end)
   4025c:	00c001b4 	movhi	r3,6
    ori r3, r3, %lo(__bss_end)
   40260:	18cf9714 	ori	r3,r3,15964

    beq r2, r3, 1f
   40264:	10c00326 	beq	r2,r3,40274 <_start+0x30>

0:
    stw zero, (r2)
   40268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40270:	10fffd36 	bltu	r2,r3,40268 <__reset+0xfffbf268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40274:	00498000 	call	49800 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40278:	00498840 	call	49884 <alt_main>

0004027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4027c:	003fff06 	br	4027c <__reset+0xfffbf27c>

00040280 <delay_ms>:
};

Sys_Status SysStatus;
// 500us宸﹀彸
void delay_ms(unsigned int d)
{
   40280:	defffd04 	addi	sp,sp,-12
   40284:	df000215 	stw	fp,8(sp)
   40288:	df000204 	addi	fp,sp,8
   4028c:	e13fff15 	stw	r4,-4(fp)
    int i = 0;
   40290:	e03ffe15 	stw	zero,-8(fp)
    while(i < d * 1000)
   40294:	00000306 	br	402a4 <delay_ms+0x24>
        i++;
   40298:	e0bffe17 	ldw	r2,-8(fp)
   4029c:	10800044 	addi	r2,r2,1
   402a0:	e0bffe15 	stw	r2,-8(fp)
Sys_Status SysStatus;
// 500us宸﹀彸
void delay_ms(unsigned int d)
{
    int i = 0;
    while(i < d * 1000)
   402a4:	e0bfff17 	ldw	r2,-4(fp)
   402a8:	1080fa24 	muli	r2,r2,1000
   402ac:	e0fffe17 	ldw	r3,-8(fp)
   402b0:	18bff936 	bltu	r3,r2,40298 <__reset+0xfffbf298>
        i++;
}
   402b4:	0001883a 	nop
   402b8:	e037883a 	mov	sp,fp
   402bc:	df000017 	ldw	fp,0(sp)
   402c0:	dec00104 	addi	sp,sp,4
   402c4:	f800283a 	ret

000402c8 <delay_us>:

// 1.4us宸﹀彸
void delay_us(unsigned int d)
{
   402c8:	defffc04 	addi	sp,sp,-16
   402cc:	df000315 	stw	fp,12(sp)
   402d0:	df000304 	addi	fp,sp,12
   402d4:	e13fff15 	stw	r4,-4(fp)
    int i = 0;
   402d8:	e03ffd15 	stw	zero,-12(fp)
    int j = 0;
   402dc:	e03ffe15 	stw	zero,-8(fp)
    for(i = 0; i < d; i++)
   402e0:	e03ffd15 	stw	zero,-12(fp)
   402e4:	00000b06 	br	40314 <delay_us+0x4c>
    {
        for(j = 0; j < 2; j++)
   402e8:	e03ffe15 	stw	zero,-8(fp)
   402ec:	00000306 	br	402fc <delay_us+0x34>
   402f0:	e0bffe17 	ldw	r2,-8(fp)
   402f4:	10800044 	addi	r2,r2,1
   402f8:	e0bffe15 	stw	r2,-8(fp)
   402fc:	e0bffe17 	ldw	r2,-8(fp)
   40300:	10800090 	cmplti	r2,r2,2
   40304:	103ffa1e 	bne	r2,zero,402f0 <__reset+0xfffbf2f0>
// 1.4us宸﹀彸
void delay_us(unsigned int d)
{
    int i = 0;
    int j = 0;
    for(i = 0; i < d; i++)
   40308:	e0bffd17 	ldw	r2,-12(fp)
   4030c:	10800044 	addi	r2,r2,1
   40310:	e0bffd15 	stw	r2,-12(fp)
   40314:	e0fffd17 	ldw	r3,-12(fp)
   40318:	e0bfff17 	ldw	r2,-4(fp)
   4031c:	18bff236 	bltu	r3,r2,402e8 <__reset+0xfffbf2e8>
        for(j = 0; j < 2; j++)
        {
            ;
        }
    }
}
   40320:	0001883a 	nop
   40324:	e037883a 	mov	sp,fp
   40328:	df000017 	ldw	fp,0(sp)
   4032c:	dec00104 	addi	sp,sp,4
   40330:	f800283a 	ret

00040334 <tim561_run>:

void tim561_run(void)
{
   40334:	defff804 	addi	sp,sp,-32
   40338:	dfc00715 	stw	ra,28(sp)
   4033c:	df000615 	stw	fp,24(sp)
   40340:	df000604 	addi	fp,sp,24
    uint8  boardcast_ip[4] = {255, 255, 255, 255};
   40344:	00bfffc4 	movi	r2,-1
   40348:	e0bffd45 	stb	r2,-11(fp)
   4034c:	00bfffc4 	movi	r2,-1
   40350:	e0bffd85 	stb	r2,-10(fp)
   40354:	00bfffc4 	movi	r2,-1
   40358:	e0bffdc5 	stb	r2,-9(fp)
   4035c:	00bfffc4 	movi	r2,-1
   40360:	e0bffe05 	stb	r2,-8(fp)
    uint16 local_port      = 30718;
   40364:	009dff84 	movi	r2,30718
   40368:	e0bffb8d 	sth	r2,-18(fp)
    uint8  remote_ip[4];
    uint16 remote_port;
    uint16 len = 0;
   4036c:	e03ffc0d 	sth	zero,-16(fp)
    uint8  status;
    uint8  socket0_error = 0;
   40370:	e03ffc85 	stb	zero,-14(fp)
    uint8  socket2_error = 0;
   40374:	e03ffb05 	stb	zero,-20(fp)
    uint8  socket0_close = 0;
   40378:	e03ffcc5 	stb	zero,-13(fp)
    uint8  socket2_close = 0;
   4037c:	e03ffb45 	stb	zero,-19(fp)
    status               = getSn_SR(SOCKET0);
   40380:	0009883a 	mov	r4,zero
   40384:	00489140 	call	48914 <getSn_SR>
   40388:	e0bffd05 	stb	r2,-12(fp)
    switch(status)
   4038c:	e0bffd03 	ldbu	r2,-12(fp)
   40390:	10c00768 	cmpgeui	r3,r2,29
   40394:	18005b1e 	bne	r3,zero,40504 <tim561_run+0x1d0>
   40398:	100690ba 	slli	r3,r2,2
   4039c:	00800134 	movhi	r2,4
   403a0:	1080ec04 	addi	r2,r2,944
   403a4:	1885883a 	add	r2,r3,r2
   403a8:	10800017 	ldw	r2,0(r2)
   403ac:	1000683a 	jmp	r2
   403b0:	000404b8 	rdprs	zero,zero,4114
   403b4:	00040504 	movi	zero,4116
   403b8:	00040504 	movi	zero,4116
   403bc:	00040504 	movi	zero,4116
   403c0:	00040504 	movi	zero,4116
   403c4:	00040504 	movi	zero,4116
   403c8:	00040504 	movi	zero,4116
   403cc:	00040504 	movi	zero,4116
   403d0:	00040504 	movi	zero,4116
   403d4:	00040504 	movi	zero,4116
   403d8:	00040504 	movi	zero,4116
   403dc:	00040504 	movi	zero,4116
   403e0:	00040504 	movi	zero,4116
   403e4:	00040504 	movi	zero,4116
   403e8:	00040504 	movi	zero,4116
   403ec:	00040504 	movi	zero,4116
   403f0:	00040504 	movi	zero,4116
   403f4:	000404f4 	movhi	zero,4115
   403f8:	00040504 	movi	zero,4116
   403fc:	00040424 	muli	zero,zero,4112
   40400:	0004050c 	andi	zero,zero,4116
   40404:	00040504 	movi	zero,4116
   40408:	0004050c 	andi	zero,zero,4116
   4040c:	00040430 	cmpltui	zero,zero,4112
   40410:	00040504 	movi	zero,4116
   40414:	00040504 	movi	zero,4116
   40418:	00040504 	movi	zero,4116
   4041c:	00040504 	movi	zero,4116
   40420:	000404a0 	cmpeqi	zero,zero,4114
    {
        case SOCK_INIT:
            listen(SOCKET0);
   40424:	0009883a 	mov	r4,zero
   40428:	0046ba00 	call	46ba0 <listen>
            break;
   4042c:	00003a06 	br	40518 <tim561_run+0x1e4>
        case SOCK_ESTABLISHED:
            if(getSn_IR(SOCKET0) & Sn_IR_CON)
   40430:	0009883a 	mov	r4,zero
   40434:	00488d40 	call	488d4 <getSn_IR>
   40438:	10803fcc 	andi	r2,r2,255
   4043c:	1080004c 	andi	r2,r2,1
   40440:	10000326 	beq	r2,zero,40450 <tim561_run+0x11c>
            {
                setSn_IR(SOCKET0, Sn_IR_CON);
   40444:	01400044 	movi	r5,1
   40448:	0009883a 	mov	r4,zero
   4044c:	0048d7c0 	call	48d7c <setSn_IR>
            }
            len = getSn_RX_RSR(SOCKET0);
   40450:	0009883a 	mov	r4,zero
   40454:	0048a380 	call	48a38 <getSn_RX_RSR>
   40458:	e0bffc0d 	sth	r2,-16(fp)
            if(len > 0)
   4045c:	e0bffc0b 	ldhu	r2,-16(fp)
   40460:	10000c26 	beq	r2,zero,40494 <tim561_run+0x160>
            {
                recv(SOCKET0, buffer, len);
   40464:	e0bffc0b 	ldhu	r2,-16(fp)
   40468:	100d883a 	mov	r6,r2
   4046c:	014001b4 	movhi	r5,6
   40470:	29734d04 	addi	r5,r5,-13004
   40474:	0009883a 	mov	r4,zero
   40478:	00471080 	call	47108 <recv>
                pc2dev_parse(SOCKET0, buffer, len);
   4047c:	e0bffc0b 	ldhu	r2,-16(fp)
   40480:	100d883a 	mov	r6,r2
   40484:	014001b4 	movhi	r5,6
   40488:	29734d04 	addi	r5,r5,-13004
   4048c:	0009883a 	mov	r4,zero
   40490:	00436800 	call	43680 <pc2dev_parse>
                // send(0, buffer, len);
            }
            isTcpEstablished = 1;
   40494:	00800044 	movi	r2,1
   40498:	d0a01305 	stb	r2,-32692(gp)
            break;
   4049c:	00001e06 	br	40518 <tim561_run+0x1e4>
        case SOCK_CLOSE_WAIT:
            socket0_close++;
   404a0:	e0bffcc3 	ldbu	r2,-13(fp)
   404a4:	10800044 	addi	r2,r2,1
   404a8:	e0bffcc5 	stb	r2,-13(fp)
            close_socket(SOCKET0);
   404ac:	0009883a 	mov	r4,zero
   404b0:	0046b200 	call	46b20 <close_socket>
            break;
   404b4:	00001806 	br	40518 <tim561_run+0x1e4>
        case SOCK_CLOSED:
            socket(SOCKET0, Sn_MR_TCP, 2111, Sn_MR_ND);
   404b8:	01c00804 	movi	r7,32
   404bc:	01820fc4 	movi	r6,2111
   404c0:	01400044 	movi	r5,1
   404c4:	0009883a 	mov	r4,zero
   404c8:	00469580 	call	46958 <socket>
            if(isTcpEstablished)
   404cc:	d0a01303 	ldbu	r2,-32692(gp)
   404d0:	10803fcc 	andi	r2,r2,255
   404d4:	10000f26 	beq	r2,zero,40514 <tim561_run+0x1e0>
            {
                Reset_W5500();
   404d8:	0040b780 	call	40b78 <Reset_W5500>
                delay_ms(500);
   404dc:	01007d04 	movi	r4,500
   404e0:	00402800 	call	40280 <delay_ms>
                set_default();  // 璁剧疆榛樿MAC銆両P銆丟W銆丼UB銆丏NS
   404e4:	0040ca00 	call	40ca0 <set_default>
                set_network();  // 閰嶇疆鍒濆鍖朓P淇℃伅骞舵墦鍗帮紝鍒濆鍖�8涓猄ocket
   404e8:	0040c140 	call	40c14 <set_network>
                isTcpEstablished = 0;
   404ec:	d0201305 	stb	zero,-32692(gp)
            }
            break;
   404f0:	00000806 	br	40514 <tim561_run+0x1e0>
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
        case 0x11:
            socket0_error++;
   404f4:	e0bffc83 	ldbu	r2,-14(fp)
   404f8:	10800044 	addi	r2,r2,1
   404fc:	e0bffc85 	stb	r2,-14(fp)
            break;
   40500:	00000506 	br	40518 <tim561_run+0x1e4>
        default:
            len = 0;
   40504:	e03ffc0d 	sth	zero,-16(fp)
            break;
   40508:	00000306 	br	40518 <tim561_run+0x1e4>
                isTcpEstablished = 0;
            }
            break;
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
   4050c:	0001883a 	nop
   40510:	00000106 	br	40518 <tim561_run+0x1e4>
                delay_ms(500);
                set_default();  // 璁剧疆榛樿MAC銆両P銆丟W銆丼UB銆丏NS
                set_network();  // 閰嶇疆鍒濆鍖朓P淇℃伅骞舵墦鍗帮紝鍒濆鍖�8涓猄ocket
                isTcpEstablished = 0;
            }
            break;
   40514:	0001883a 	nop
        default:
            len = 0;
            break;
    }

    status = getSn_SR(SOCKET1);
   40518:	01000044 	movi	r4,1
   4051c:	00489140 	call	48914 <getSn_SR>
   40520:	e0bffd05 	stb	r2,-12(fp)
    switch(status)
   40524:	e0bffd03 	ldbu	r2,-12(fp)
   40528:	10c00768 	cmpgeui	r3,r2,29
   4052c:	1800541e 	bne	r3,zero,40680 <tim561_run+0x34c>
   40530:	100690ba 	slli	r3,r2,2
   40534:	00800134 	movhi	r2,4
   40538:	10815204 	addi	r2,r2,1352
   4053c:	1885883a 	add	r2,r3,r2
   40540:	10800017 	ldw	r2,0(r2)
   40544:	1000683a 	jmp	r2
   40548:	00040648 	cmpgei	zero,zero,4121
   4054c:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40550:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40554:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40558:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   4055c:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40560:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40564:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40568:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   4056c:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40570:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40574:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40578:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   4057c:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40580:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40584:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40588:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   4058c:	00040670 	cmpltui	zero,zero,4121
   40590:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   40594:	000405bc 	xorhi	zero,zero,4118
   40598:	00040688 	cmpgei	zero,zero,4122
   4059c:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   405a0:	00040688 	cmpgei	zero,zero,4122
   405a4:	000405c8 	cmpgei	zero,zero,4119
   405a8:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   405ac:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   405b0:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   405b4:	00040680 	call	4068 <__alt_mem_onchip_memory-0x3bf98>
   405b8:	00040630 	cmpltui	zero,zero,4120
    {
        case SOCK_INIT:
            listen(SOCKET1);
   405bc:	01000044 	movi	r4,1
   405c0:	0046ba00 	call	46ba0 <listen>
            break;
   405c4:	00003506 	br	4069c <tim561_run+0x368>
        case SOCK_ESTABLISHED:
            if(getSn_IR(SOCKET1) & Sn_IR_CON)
   405c8:	01000044 	movi	r4,1
   405cc:	00488d40 	call	488d4 <getSn_IR>
   405d0:	10803fcc 	andi	r2,r2,255
   405d4:	1080004c 	andi	r2,r2,1
   405d8:	10000326 	beq	r2,zero,405e8 <tim561_run+0x2b4>
            {
                setSn_IR(SOCKET1, Sn_IR_CON);
   405dc:	01400044 	movi	r5,1
   405e0:	01000044 	movi	r4,1
   405e4:	0048d7c0 	call	48d7c <setSn_IR>
            }
            len = getSn_RX_RSR(SOCKET1);
   405e8:	01000044 	movi	r4,1
   405ec:	0048a380 	call	48a38 <getSn_RX_RSR>
   405f0:	e0bffc0d 	sth	r2,-16(fp)
            if(len > 0)
   405f4:	e0bffc0b 	ldhu	r2,-16(fp)
   405f8:	10002526 	beq	r2,zero,40690 <tim561_run+0x35c>
            {
                recv(SOCKET1, buffer, len);
   405fc:	e0bffc0b 	ldhu	r2,-16(fp)
   40600:	100d883a 	mov	r6,r2
   40604:	014001b4 	movhi	r5,6
   40608:	29734d04 	addi	r5,r5,-13004
   4060c:	01000044 	movi	r4,1
   40610:	00471080 	call	47108 <recv>
                pc2dev_parse(SOCKET1, buffer, len);
   40614:	e0bffc0b 	ldhu	r2,-16(fp)
   40618:	100d883a 	mov	r6,r2
   4061c:	014001b4 	movhi	r5,6
   40620:	29734d04 	addi	r5,r5,-13004
   40624:	01000044 	movi	r4,1
   40628:	00436800 	call	43680 <pc2dev_parse>
            }
            break;
   4062c:	00001806 	br	40690 <tim561_run+0x35c>
        case SOCK_CLOSE_WAIT:
            socket2_close++;
   40630:	e0bffb43 	ldbu	r2,-19(fp)
   40634:	10800044 	addi	r2,r2,1
   40638:	e0bffb45 	stb	r2,-19(fp)
            close_socket(SOCKET1);
   4063c:	01000044 	movi	r4,1
   40640:	0046b200 	call	46b20 <close_socket>
            break;
   40644:	00001506 	br	4069c <tim561_run+0x368>
        case SOCK_CLOSED:
            socket(SOCKET1, Sn_MR_TCP, 2111, Sn_MR_ND);
   40648:	01c00804 	movi	r7,32
   4064c:	01820fc4 	movi	r6,2111
   40650:	01400044 	movi	r5,1
   40654:	01000044 	movi	r4,1
   40658:	00469580 	call	46958 <socket>
            if(isTcpEstablished)
   4065c:	d0a01303 	ldbu	r2,-32692(gp)
   40660:	10803fcc 	andi	r2,r2,255
   40664:	10000c26 	beq	r2,zero,40698 <tim561_run+0x364>
            {
                // Reset_W5500();
                // delay_ms(500);
                // set_default();  // 璁剧疆榛樿MAC銆両P銆丟W銆丼UB銆丏NS
                // set_network();  // 閰嶇疆鍒濆鍖朓P淇℃伅骞舵墦鍗帮紝鍒濆鍖�8涓猄ocket
                isTcpEstablished = 0;
   40668:	d0201305 	stb	zero,-32692(gp)
            }
            break;
   4066c:	00000a06 	br	40698 <tim561_run+0x364>
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
        case 0x11:
            socket2_error++;
   40670:	e0bffb03 	ldbu	r2,-20(fp)
   40674:	10800044 	addi	r2,r2,1
   40678:	e0bffb05 	stb	r2,-20(fp)
            break;
   4067c:	00000706 	br	4069c <tim561_run+0x368>
        default:
            len = 0;
   40680:	e03ffc0d 	sth	zero,-16(fp)
            break;
   40684:	00000506 	br	4069c <tim561_run+0x368>
                isTcpEstablished = 0;
            }
            break;
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
   40688:	0001883a 	nop
   4068c:	00000306 	br	4069c <tim561_run+0x368>
            if(len > 0)
            {
                recv(SOCKET1, buffer, len);
                pc2dev_parse(SOCKET1, buffer, len);
            }
            break;
   40690:	0001883a 	nop
   40694:	00000106 	br	4069c <tim561_run+0x368>
                // delay_ms(500);
                // set_default();  // 璁剧疆榛樿MAC銆両P銆丟W銆丼UB銆丏NS
                // set_network();  // 閰嶇疆鍒濆鍖朓P淇℃伅骞舵墦鍗帮紝鍒濆鍖�8涓猄ocket
                isTcpEstablished = 0;
            }
            break;
   40698:	0001883a 	nop
        default:
            len = 0;
            break;
    }

    status = getSn_SR(SOCKET4);
   4069c:	01000104 	movi	r4,4
   406a0:	00489140 	call	48914 <getSn_SR>
   406a4:	e0bffd05 	stb	r2,-12(fp)
    switch(status)
   406a8:	e0bffd03 	ldbu	r2,-12(fp)
   406ac:	10c00768 	cmpgeui	r3,r2,29
   406b0:	1800501e 	bne	r3,zero,407f4 <tim561_run+0x4c0>
   406b4:	100690ba 	slli	r3,r2,2
   406b8:	00800134 	movhi	r2,4
   406bc:	1081b304 	addi	r2,r2,1740
   406c0:	1885883a 	add	r2,r3,r2
   406c4:	10800017 	ldw	r2,0(r2)
   406c8:	1000683a 	jmp	r2
   406cc:	000407cc 	andi	zero,zero,4127
   406d0:	000407f4 	movhi	zero,4127
   406d4:	000407f4 	movhi	zero,4127
   406d8:	000407f4 	movhi	zero,4127
   406dc:	000407f4 	movhi	zero,4127
   406e0:	000407f4 	movhi	zero,4127
   406e4:	000407f4 	movhi	zero,4127
   406e8:	000407f4 	movhi	zero,4127
   406ec:	000407f4 	movhi	zero,4127
   406f0:	000407f4 	movhi	zero,4127
   406f4:	000407f4 	movhi	zero,4127
   406f8:	000407f4 	movhi	zero,4127
   406fc:	000407f4 	movhi	zero,4127
   40700:	000407f4 	movhi	zero,4127
   40704:	000407f4 	movhi	zero,4127
   40708:	000407f4 	movhi	zero,4127
   4070c:	000407f4 	movhi	zero,4127
   40710:	000407e4 	muli	zero,zero,4127
   40714:	000407f4 	movhi	zero,4127
   40718:	00040740 	call	4074 <__alt_mem_onchip_memory-0x3bf8c>
   4071c:	000407fc 	xorhi	zero,zero,4127
   40720:	000407f4 	movhi	zero,4127
   40724:	000407fc 	xorhi	zero,zero,4127
   40728:	0004074c 	andi	zero,zero,4125
   4072c:	000407f4 	movhi	zero,4127
   40730:	000407f4 	movhi	zero,4127
   40734:	000407f4 	movhi	zero,4127
   40738:	000407f4 	movhi	zero,4127
   4073c:	000407b4 	movhi	zero,4126
    {
        case SOCK_INIT:
            listen(SOCKET4);
   40740:	01000104 	movi	r4,4
   40744:	0046ba00 	call	46ba0 <listen>
            break;
   40748:	00002f06 	br	40808 <tim561_run+0x4d4>
        case SOCK_ESTABLISHED:
            if(getSn_IR(SOCKET4) & Sn_IR_CON)
   4074c:	01000104 	movi	r4,4
   40750:	00488d40 	call	488d4 <getSn_IR>
   40754:	10803fcc 	andi	r2,r2,255
   40758:	1080004c 	andi	r2,r2,1
   4075c:	10000326 	beq	r2,zero,4076c <tim561_run+0x438>
            {
                setSn_IR(SOCKET4, Sn_IR_CON);
   40760:	01400044 	movi	r5,1
   40764:	01000104 	movi	r4,4
   40768:	0048d7c0 	call	48d7c <setSn_IR>
            }
            len = getSn_RX_RSR(SOCKET4);
   4076c:	01000104 	movi	r4,4
   40770:	0048a380 	call	48a38 <getSn_RX_RSR>
   40774:	e0bffc0d 	sth	r2,-16(fp)
            if(len > 0)
   40778:	e0bffc0b 	ldhu	r2,-16(fp)
   4077c:	10002126 	beq	r2,zero,40804 <tim561_run+0x4d0>
            {
                recv(SOCKET4, buffer, len);
   40780:	e0bffc0b 	ldhu	r2,-16(fp)
   40784:	100d883a 	mov	r6,r2
   40788:	014001b4 	movhi	r5,6
   4078c:	29734d04 	addi	r5,r5,-13004
   40790:	01000104 	movi	r4,4
   40794:	00471080 	call	47108 <recv>
                pc2dev_parse(SOCKET4, buffer, len);
   40798:	e0bffc0b 	ldhu	r2,-16(fp)
   4079c:	100d883a 	mov	r6,r2
   407a0:	014001b4 	movhi	r5,6
   407a4:	29734d04 	addi	r5,r5,-13004
   407a8:	01000104 	movi	r4,4
   407ac:	00436800 	call	43680 <pc2dev_parse>
                // send(0, buffer, len);
            }
            break;
   407b0:	00001406 	br	40804 <tim561_run+0x4d0>
        case SOCK_CLOSE_WAIT:
            socket2_close++;
   407b4:	e0bffb43 	ldbu	r2,-19(fp)
   407b8:	10800044 	addi	r2,r2,1
   407bc:	e0bffb45 	stb	r2,-19(fp)
            close_socket(SOCKET4);
   407c0:	01000104 	movi	r4,4
   407c4:	0046b200 	call	46b20 <close_socket>
            break;
   407c8:	00000f06 	br	40808 <tim561_run+0x4d4>
        case SOCK_CLOSED:
            socket(SOCKET4, Sn_MR_TCP, 2112, Sn_MR_ND);
   407cc:	01c00804 	movi	r7,32
   407d0:	01821004 	movi	r6,2112
   407d4:	01400044 	movi	r5,1
   407d8:	01000104 	movi	r4,4
   407dc:	00469580 	call	46958 <socket>
            break;
   407e0:	00000906 	br	40808 <tim561_run+0x4d4>
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
        case 0x11:
            socket2_error++;
   407e4:	e0bffb03 	ldbu	r2,-20(fp)
   407e8:	10800044 	addi	r2,r2,1
   407ec:	e0bffb05 	stb	r2,-20(fp)
            break;
   407f0:	00000506 	br	40808 <tim561_run+0x4d4>
        default:
            len = 0;
   407f4:	e03ffc0d 	sth	zero,-16(fp)
            break;
   407f8:	00000306 	br	40808 <tim561_run+0x4d4>
        case SOCK_CLOSED:
            socket(SOCKET4, Sn_MR_TCP, 2112, Sn_MR_ND);
            break;
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
   407fc:	0001883a 	nop
   40800:	00000106 	br	40808 <tim561_run+0x4d4>
            {
                recv(SOCKET4, buffer, len);
                pc2dev_parse(SOCKET4, buffer, len);
                // send(0, buffer, len);
            }
            break;
   40804:	0001883a 	nop
        default:
            len = 0;
            break;
    }

    status = getSn_SR(SOCKET5);
   40808:	01000144 	movi	r4,5
   4080c:	00489140 	call	48914 <getSn_SR>
   40810:	e0bffd05 	stb	r2,-12(fp)
    switch(status)
   40814:	e0bffd03 	ldbu	r2,-12(fp)
   40818:	10c00768 	cmpgeui	r3,r2,29
   4081c:	1800501e 	bne	r3,zero,40960 <tim561_run+0x62c>
   40820:	100690ba 	slli	r3,r2,2
   40824:	00800134 	movhi	r2,4
   40828:	10820e04 	addi	r2,r2,2104
   4082c:	1885883a 	add	r2,r3,r2
   40830:	10800017 	ldw	r2,0(r2)
   40834:	1000683a 	jmp	r2
   40838:	00040938 	rdprs	zero,zero,4132
   4083c:	00040960 	cmpeqi	zero,zero,4133
   40840:	00040960 	cmpeqi	zero,zero,4133
   40844:	00040960 	cmpeqi	zero,zero,4133
   40848:	00040960 	cmpeqi	zero,zero,4133
   4084c:	00040960 	cmpeqi	zero,zero,4133
   40850:	00040960 	cmpeqi	zero,zero,4133
   40854:	00040960 	cmpeqi	zero,zero,4133
   40858:	00040960 	cmpeqi	zero,zero,4133
   4085c:	00040960 	cmpeqi	zero,zero,4133
   40860:	00040960 	cmpeqi	zero,zero,4133
   40864:	00040960 	cmpeqi	zero,zero,4133
   40868:	00040960 	cmpeqi	zero,zero,4133
   4086c:	00040960 	cmpeqi	zero,zero,4133
   40870:	00040960 	cmpeqi	zero,zero,4133
   40874:	00040960 	cmpeqi	zero,zero,4133
   40878:	00040960 	cmpeqi	zero,zero,4133
   4087c:	00040950 	cmplti	zero,zero,4133
   40880:	00040960 	cmpeqi	zero,zero,4133
   40884:	000408ac 	andhi	zero,zero,4130
   40888:	00040968 	cmpgeui	zero,zero,4133
   4088c:	00040960 	cmpeqi	zero,zero,4133
   40890:	00040968 	cmpgeui	zero,zero,4133
   40894:	000408b8 	rdprs	zero,zero,4130
   40898:	00040960 	cmpeqi	zero,zero,4133
   4089c:	00040960 	cmpeqi	zero,zero,4133
   408a0:	00040960 	cmpeqi	zero,zero,4133
   408a4:	00040960 	cmpeqi	zero,zero,4133
   408a8:	00040920 	cmpeqi	zero,zero,4132
    {
        case SOCK_INIT:
            listen(SOCKET5);
   408ac:	01000144 	movi	r4,5
   408b0:	0046ba00 	call	46ba0 <listen>
            break;
   408b4:	00002f06 	br	40974 <tim561_run+0x640>
        case SOCK_ESTABLISHED:
            if(getSn_IR(SOCKET5) & Sn_IR_CON)
   408b8:	01000144 	movi	r4,5
   408bc:	00488d40 	call	488d4 <getSn_IR>
   408c0:	10803fcc 	andi	r2,r2,255
   408c4:	1080004c 	andi	r2,r2,1
   408c8:	10000326 	beq	r2,zero,408d8 <tim561_run+0x5a4>
            {
                setSn_IR(SOCKET5, Sn_IR_CON);
   408cc:	01400044 	movi	r5,1
   408d0:	01000144 	movi	r4,5
   408d4:	0048d7c0 	call	48d7c <setSn_IR>
            }

            len = getSn_RX_RSR(SOCKET5);
   408d8:	01000144 	movi	r4,5
   408dc:	0048a380 	call	48a38 <getSn_RX_RSR>
   408e0:	e0bffc0d 	sth	r2,-16(fp)
            if(len > 0)
   408e4:	e0bffc0b 	ldhu	r2,-16(fp)
   408e8:	10002126 	beq	r2,zero,40970 <tim561_run+0x63c>
            {
                recv(SOCKET5, buffer, len);
   408ec:	e0bffc0b 	ldhu	r2,-16(fp)
   408f0:	100d883a 	mov	r6,r2
   408f4:	014001b4 	movhi	r5,6
   408f8:	29734d04 	addi	r5,r5,-13004
   408fc:	01000144 	movi	r4,5
   40900:	00471080 	call	47108 <recv>
                pc2dev_parse(SOCKET5, buffer, len);
   40904:	e0bffc0b 	ldhu	r2,-16(fp)
   40908:	100d883a 	mov	r6,r2
   4090c:	014001b4 	movhi	r5,6
   40910:	29734d04 	addi	r5,r5,-13004
   40914:	01000144 	movi	r4,5
   40918:	00436800 	call	43680 <pc2dev_parse>
                // send(0, buffer, len);
            }
            break;
   4091c:	00001406 	br	40970 <tim561_run+0x63c>
        case SOCK_CLOSE_WAIT:
            socket2_close++;
   40920:	e0bffb43 	ldbu	r2,-19(fp)
   40924:	10800044 	addi	r2,r2,1
   40928:	e0bffb45 	stb	r2,-19(fp)
            close_socket(SOCKET5);
   4092c:	01000144 	movi	r4,5
   40930:	0046b200 	call	46b20 <close_socket>
            break;
   40934:	00000f06 	br	40974 <tim561_run+0x640>
        case SOCK_CLOSED:
            socket(SOCKET5, Sn_MR_TCP, 2112, Sn_MR_ND);
   40938:	01c00804 	movi	r7,32
   4093c:	01821004 	movi	r6,2112
   40940:	01400044 	movi	r5,1
   40944:	01000144 	movi	r4,5
   40948:	00469580 	call	46958 <socket>
            break;
   4094c:	00000906 	br	40974 <tim561_run+0x640>
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
        case 0x11:
            socket2_error++;
   40950:	e0bffb03 	ldbu	r2,-20(fp)
   40954:	10800044 	addi	r2,r2,1
   40958:	e0bffb05 	stb	r2,-20(fp)
            break;
   4095c:	00000506 	br	40974 <tim561_run+0x640>
        default:
            len = 0;
   40960:	e03ffc0d 	sth	zero,-16(fp)
            break;
   40964:	00000306 	br	40974 <tim561_run+0x640>
        case SOCK_CLOSED:
            socket(SOCKET5, Sn_MR_TCP, 2112, Sn_MR_ND);
            break;
        case SOCK_LISTEN:
        case SOCK_SYNRECV:
            break;
   40968:	0001883a 	nop
   4096c:	00000106 	br	40974 <tim561_run+0x640>
            {
                recv(SOCKET5, buffer, len);
                pc2dev_parse(SOCKET5, buffer, len);
                // send(0, buffer, len);
            }
            break;
   40970:	0001883a 	nop
        default:
            len = 0;
            break;
    }

    switch(getSn_SR(SOCKET7))
   40974:	010001c4 	movi	r4,7
   40978:	00489140 	call	48914 <getSn_SR>
   4097c:	10803fcc 	andi	r2,r2,255
   40980:	10003426 	beq	r2,zero,40a54 <tim561_run+0x720>
   40984:	108008a0 	cmpeqi	r2,r2,34
   40988:	1000011e 	bne	r2,zero,40990 <tim561_run+0x65c>
            break;
        case SOCK_CLOSED:
            socket(SOCKET7, Sn_MR_UDP, local_port, 0);
            break;
    }
}
   4098c:	00003906 	br	40a74 <tim561_run+0x740>
    }

    switch(getSn_SR(SOCKET7))
    {
        case SOCK_UDP:  // Socket???????(??)??
            delay_ms(10);
   40990:	01000284 	movi	r4,10
   40994:	00402800 	call	40280 <delay_ms>
            if(getSn_IR(SOCKET7) & Sn_IR_RECV)
   40998:	010001c4 	movi	r4,7
   4099c:	00488d40 	call	488d4 <getSn_IR>
   409a0:	10803fcc 	andi	r2,r2,255
   409a4:	1080010c 	andi	r2,r2,4
   409a8:	10000326 	beq	r2,zero,409b8 <tim561_run+0x684>
            {
                setSn_IR(SOCKET7, Sn_IR_RECV);
   409ac:	01400104 	movi	r5,4
   409b0:	010001c4 	movi	r4,7
   409b4:	0048d7c0 	call	48d7c <setSn_IR>
            }

            if((len = getSn_RX_RSR(SOCKET7)) > 0)
   409b8:	010001c4 	movi	r4,7
   409bc:	0048a380 	call	48a38 <getSn_RX_RSR>
   409c0:	e0bffc0d 	sth	r2,-16(fp)
   409c4:	e0bffc0b 	ldhu	r2,-16(fp)
   409c8:	10002926 	beq	r2,zero,40a70 <tim561_run+0x73c>
            {
                memset(buffer, 0, len + 1);
   409cc:	e0bffc0b 	ldhu	r2,-16(fp)
   409d0:	10800044 	addi	r2,r2,1
   409d4:	100d883a 	mov	r6,r2
   409d8:	000b883a 	mov	r5,zero
   409dc:	010001b4 	movhi	r4,6
   409e0:	21334d04 	addi	r4,r4,-13004
   409e4:	00490d00 	call	490d0 <memset>
                recvfrom(SOCKET7, buffer, len, remote_ip, &remote_port);
   409e8:	e0fffc0b 	ldhu	r3,-16(fp)
   409ec:	e13ffe44 	addi	r4,fp,-7
   409f0:	e0bfff84 	addi	r2,fp,-2
   409f4:	d8800015 	stw	r2,0(sp)
   409f8:	200f883a 	mov	r7,r4
   409fc:	180d883a 	mov	r6,r3
   40a00:	014001b4 	movhi	r5,6
   40a04:	29734d04 	addi	r5,r5,-13004
   40a08:	010001c4 	movi	r4,7
   40a0c:	00474440 	call	47444 <recvfrom>
                // sendto(1, buffer, len, remote_ip, remote_port);
                sendto(SOCKET7, udp_reponse, 1213, boardcast_ip, remote_port);
   40a10:	e0bfff8b 	ldhu	r2,-2(fp)
   40a14:	10bfffcc 	andi	r2,r2,65535
   40a18:	e0fffd44 	addi	r3,fp,-11
   40a1c:	d8800015 	stw	r2,0(sp)
   40a20:	180f883a 	mov	r7,r3
   40a24:	01812f44 	movi	r6,1213
   40a28:	014001b4 	movhi	r5,6
   40a2c:	29667304 	addi	r5,r5,-26164
   40a30:	010001c4 	movi	r4,7
   40a34:	00471a80 	call	471a8 <sendto>
                alarm_region.change_region_flag = 0x01;
   40a38:	008001b4 	movhi	r2,6
   40a3c:	10a48a04 	addi	r2,r2,-28120
   40a40:	00c00044 	movi	r3,1
   40a44:	10c00085 	stb	r3,2(r2)
                isPowerUp                       = 0x01;
   40a48:	00800044 	movi	r2,1
   40a4c:	d0a01505 	stb	r2,-32684(gp)
            }
            break;
   40a50:	00000706 	br	40a70 <tim561_run+0x73c>
        case SOCK_CLOSED:
            socket(SOCKET7, Sn_MR_UDP, local_port, 0);
   40a54:	e0bffb8b 	ldhu	r2,-18(fp)
   40a58:	000f883a 	mov	r7,zero
   40a5c:	100d883a 	mov	r6,r2
   40a60:	01400084 	movi	r5,2
   40a64:	010001c4 	movi	r4,7
   40a68:	00469580 	call	46958 <socket>
            break;
   40a6c:	00000106 	br	40a74 <tim561_run+0x740>
                // sendto(1, buffer, len, remote_ip, remote_port);
                sendto(SOCKET7, udp_reponse, 1213, boardcast_ip, remote_port);
                alarm_region.change_region_flag = 0x01;
                isPowerUp                       = 0x01;
            }
            break;
   40a70:	0001883a 	nop
        case SOCK_CLOSED:
            socket(SOCKET7, Sn_MR_UDP, local_port, 0);
            break;
    }
}
   40a74:	0001883a 	nop
   40a78:	e037883a 	mov	sp,fp
   40a7c:	dfc00117 	ldw	ra,4(sp)
   40a80:	df000017 	ldw	fp,0(sp)
   40a84:	dec00204 	addi	sp,sp,8
   40a88:	f800283a 	ret

00040a8c <test>:

void test(void)
{
   40a8c:	defe6304 	addi	sp,sp,-1652
   40a90:	dfc19c15 	stw	ra,1648(sp)
   40a94:	df019b15 	stw	fp,1644(sp)
   40a98:	df019b04 	addi	fp,sp,1644
    IINCHIP_CSon();
   40a9c:	0047bbc0 	call	47bbc <IINCHIP_CSon>
    Reset_W5500();
   40aa0:	0040b780 	call	40b78 <Reset_W5500>
    delay_ms(500);
   40aa4:	01007d04 	movi	r4,500
   40aa8:	00402800 	call	40280 <delay_ms>
    int           time        = 1;
   40aac:	00800044 	movi	r2,1
   40ab0:	e0be6615 	stw	r2,-1640(fp)
    unsigned char data        = 0x1e;
   40ab4:	00800784 	movi	r2,30
   40ab8:	e0be6705 	stb	r2,-1636(fp)
    int           offset_addr = 4096;
   40abc:	00840004 	movi	r2,4096
   40ac0:	e0be6815 	stw	r2,-1632(fp)
    int           len         = TARGET_NUMBER * 2;
   40ac4:	00819584 	movi	r2,1622
   40ac8:	e0be6915 	stw	r2,-1628(fp)
    unsigned char buf[811 * 2];
    IOWR_ALTERA_AVALON_PIO_DATA(W5500_INT_BASE, 0x00);
   40acc:	0007883a 	mov	r3,zero
   40ad0:	00800234 	movhi	r2,8
   40ad4:	10886804 	addi	r2,r2,8608
   40ad8:	10c00035 	stwio	r3,0(r2)
    while(1)
    {
        if(time)
   40adc:	e0be6617 	ldw	r2,-1640(fp)
   40ae0:	10001a26 	beq	r2,zero,40b4c <test+0xc0>
        {
            for(int i = 0; i < 811 * 2; i++)
   40ae4:	e03e6515 	stw	zero,-1644(fp)
   40ae8:	00000806 	br	40b0c <test+0x80>
                buf[i] = data;
   40aec:	e0fe6a04 	addi	r3,fp,-1624
   40af0:	e0be6517 	ldw	r2,-1644(fp)
   40af4:	1885883a 	add	r2,r3,r2
   40af8:	e0fe6703 	ldbu	r3,-1636(fp)
   40afc:	10c00005 	stb	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(W5500_INT_BASE, 0x00);
    while(1)
    {
        if(time)
        {
            for(int i = 0; i < 811 * 2; i++)
   40b00:	e0be6517 	ldw	r2,-1644(fp)
   40b04:	10800044 	addi	r2,r2,1
   40b08:	e0be6515 	stw	r2,-1644(fp)
   40b0c:	e0be6517 	ldw	r2,-1644(fp)
   40b10:	10819590 	cmplti	r2,r2,1622
   40b14:	103ff51e 	bne	r2,zero,40aec <__reset+0xfffbfaec>
                buf[i] = data;
            eeprom_write_page(offset_addr, buf, len);
   40b18:	e0fe6817 	ldw	r3,-1632(fp)
   40b1c:	e0be6917 	ldw	r2,-1628(fp)
   40b20:	113fffcc 	andi	r4,r2,65535
   40b24:	e0be6a04 	addi	r2,fp,-1624
   40b28:	200d883a 	mov	r6,r4
   40b2c:	100b883a 	mov	r5,r2
   40b30:	1809883a 	mov	r4,r3
   40b34:	0041fd40 	call	41fd4 <eeprom_write_page>
            memset(buf, 0, TARGET_NUMBER * 2);
   40b38:	e0be6a04 	addi	r2,fp,-1624
   40b3c:	01819584 	movi	r6,1622
   40b40:	000b883a 	mov	r5,zero
   40b44:	1009883a 	mov	r4,r2
   40b48:	00490d00 	call	490d0 <memset>
        }
        //		alarm_region.read_from_rom(&alarm_region, alarm_region.change_region_value * 3);
        eeprom_sequential_read(offset_addr, buf, len);
   40b4c:	e0fe6817 	ldw	r3,-1632(fp)
   40b50:	e0be6917 	ldw	r2,-1628(fp)
   40b54:	113fffcc 	andi	r4,r2,65535
   40b58:	e0be6a04 	addi	r2,fp,-1624
   40b5c:	200d883a 	mov	r6,r4
   40b60:	100b883a 	mov	r5,r2
   40b64:	1809883a 	mov	r4,r3
   40b68:	00422a40 	call	422a4 <eeprom_sequential_read>
        delay_us(1000);
   40b6c:	0100fa04 	movi	r4,1000
   40b70:	00402c80 	call	402c8 <delay_us>
    }
   40b74:	003fd906 	br	40adc <__reset+0xfffbfadc>

00040b78 <Reset_W5500>:

uint8 pub_buf[1460];


void Reset_W5500(void)
{
   40b78:	defffe04 	addi	sp,sp,-8
   40b7c:	dfc00115 	stw	ra,4(sp)
   40b80:	df000015 	stw	fp,0(sp)
   40b84:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DATA(W5500_RST_BASE, 0x00);
   40b88:	0007883a 	mov	r3,zero
   40b8c:	00800234 	movhi	r2,8
   40b90:	10886c04 	addi	r2,r2,8624
   40b94:	10c00035 	stwio	r3,0(r2)
    delay_ms(5);
   40b98:	01000144 	movi	r4,5
   40b9c:	00402800 	call	40280 <delay_ms>
    IOWR_ALTERA_AVALON_PIO_DATA(W5500_RST_BASE, 0x01);
   40ba0:	00c00044 	movi	r3,1
   40ba4:	00800234 	movhi	r2,8
   40ba8:	10886c04 	addi	r2,r2,8624
   40bac:	10c00035 	stwio	r3,0(r2)
    delay_ms(5);
   40bb0:	01000144 	movi	r4,5
   40bb4:	00402800 	call	40280 <delay_ms>
}
   40bb8:	0001883a 	nop
   40bbc:	e037883a 	mov	sp,fp
   40bc0:	dfc00117 	ldw	ra,4(sp)
   40bc4:	df000017 	ldw	fp,0(sp)
   40bc8:	dec00204 	addi	sp,sp,8
   40bcc:	f800283a 	ret

00040bd0 <reboot>:
//reboot
void reboot(void)
{
   40bd0:	defffc04 	addi	sp,sp,-16
   40bd4:	dfc00315 	stw	ra,12(sp)
   40bd8:	df000215 	stw	fp,8(sp)
   40bdc:	df000204 	addi	fp,sp,8
    pFunction Jump_To_Application;
    uint32 JumpAddress;
    JumpAddress = *(unsigned int*) (0x00000004);
   40be0:	00800104 	movi	r2,4
   40be4:	10800017 	ldw	r2,0(r2)
   40be8:	e0bffe15 	stw	r2,-8(fp)
    Jump_To_Application = (pFunction) JumpAddress;
   40bec:	e0bffe17 	ldw	r2,-8(fp)
   40bf0:	e0bfff15 	stw	r2,-4(fp)
    Jump_To_Application();
   40bf4:	e0bfff17 	ldw	r2,-4(fp)
   40bf8:	103ee83a 	callr	r2
}
   40bfc:	0001883a 	nop
   40c00:	e037883a 	mov	sp,fp
   40c04:	dfc00117 	ldw	ra,4(sp)
   40c08:	df000017 	ldw	fp,0(sp)
   40c0c:	dec00204 	addi	sp,sp,8
   40c10:	f800283a 	ret

00040c14 <set_network>:

void set_network(void)                                                                                                          // 配置初始化IP信息并打印，初始化8个Socket
{
   40c14:	defffd04 	addi	sp,sp,-12
   40c18:	dfc00215 	stw	ra,8(sp)
   40c1c:	df000115 	stw	fp,4(sp)
   40c20:	df000104 	addi	fp,sp,4
    uint8 ip[4];
    setSHAR(ConfigMsg.mac);
   40c24:	010001b4 	movhi	r4,6
   40c28:	21354e04 	addi	r4,r4,-10952
   40c2c:	004853c0 	call	4853c <setSHAR>
    setSUBR(ConfigMsg.sub);
   40c30:	010001b4 	movhi	r4,6
   40c34:	21355104 	addi	r4,r4,-10940
   40c38:	00485000 	call	48500 <setSUBR>
    setGAR(ConfigMsg.gw);
   40c3c:	010001b4 	movhi	r4,6
   40c40:	21355204 	addi	r4,r4,-10936
   40c44:	00484880 	call	48488 <setGAR>
    setSIPR(ConfigMsg.lip);
   40c48:	010001b4 	movhi	r4,6
   40c4c:	21355004 	addi	r4,r4,-10944
   40c50:	00485780 	call	48578 <setSIPR>

    sysinit(txsize, rxsize);                                                                                              // 初始化8个socket
   40c54:	d1600204 	addi	r5,gp,-32760
   40c58:	d1200004 	addi	r4,gp,-32768
   40c5c:	00480d00 	call	480d0 <sysinit>

    setRTR(5000);                                                                                                                                         // 设置超时时间
   40c60:	0104e204 	movi	r4,5000
   40c64:	00487580 	call	48758 <setRTR>
    setRCR(3);                                                                                                                                                    // 设置最大重新发送次数
   40c68:	010000c4 	movi	r4,3
   40c6c:	00487b40 	call	487b4 <setRCR>

    getSIPR (ip);
   40c70:	e13fff04 	addi	r4,fp,-4
   40c74:	00486b00 	call	486b0 <getSIPR>
    getSUBR(ip);
   40c78:	e13fff04 	addi	r4,fp,-4
   40c7c:	00486380 	call	48638 <getSUBR>
    getGAR(ip);
   40c80:	e13fff04 	addi	r4,fp,-4
   40c84:	00485fc0 	call	485fc <getGAR>
}
   40c88:	0001883a 	nop
   40c8c:	e037883a 	mov	sp,fp
   40c90:	dfc00117 	ldw	ra,4(sp)
   40c94:	df000017 	ldw	fp,0(sp)
   40c98:	dec00204 	addi	sp,sp,8
   40c9c:	f800283a 	ret

00040ca0 <set_default>:

void set_default(void)                                                                                                          // 设置默认MAC、IP、GW、SUB、DNS
{
   40ca0:	defff904 	addi	sp,sp,-28
   40ca4:	df000615 	stw	fp,24(sp)
   40ca8:	df000604 	addi	fp,sp,24
    uint8 mac[6]={0x00,0x06,0x77,0x25,0x3D,0x28};
   40cac:	e03ffa05 	stb	zero,-24(fp)
   40cb0:	00800184 	movi	r2,6
   40cb4:	e0bffa45 	stb	r2,-23(fp)
   40cb8:	00801dc4 	movi	r2,119
   40cbc:	e0bffa85 	stb	r2,-22(fp)
   40cc0:	00800944 	movi	r2,37
   40cc4:	e0bffac5 	stb	r2,-21(fp)
   40cc8:	00800f44 	movi	r2,61
   40ccc:	e0bffb05 	stb	r2,-20(fp)
   40cd0:	00800a04 	movi	r2,40
   40cd4:	e0bffb45 	stb	r2,-19(fp)
    uint8 lip[4]={192,168,0,1};
   40cd8:	00bff004 	movi	r2,-64
   40cdc:	e0bffb85 	stb	r2,-18(fp)
   40ce0:	00bfea04 	movi	r2,-88
   40ce4:	e0bffbc5 	stb	r2,-17(fp)
   40ce8:	e03ffc05 	stb	zero,-16(fp)
   40cec:	00800044 	movi	r2,1
   40cf0:	e0bffc45 	stb	r2,-15(fp)
    uint8 sub[4]={255,255,255,0};
   40cf4:	00bfffc4 	movi	r2,-1
   40cf8:	e0bffc85 	stb	r2,-14(fp)
   40cfc:	00bfffc4 	movi	r2,-1
   40d00:	e0bffcc5 	stb	r2,-13(fp)
   40d04:	00bfffc4 	movi	r2,-1
   40d08:	e0bffd05 	stb	r2,-12(fp)
   40d0c:	e03ffd45 	stb	zero,-11(fp)
    uint8 gw[4]={192,168,0,1};
   40d10:	00bff004 	movi	r2,-64
   40d14:	e0bffd85 	stb	r2,-10(fp)
   40d18:	00bfea04 	movi	r2,-88
   40d1c:	e0bffdc5 	stb	r2,-9(fp)
   40d20:	e03ffe05 	stb	zero,-8(fp)
   40d24:	00800044 	movi	r2,1
   40d28:	e0bffe45 	stb	r2,-7(fp)
    uint8 dns[4]={8,8,8,8};
   40d2c:	00800204 	movi	r2,8
   40d30:	e0bffe85 	stb	r2,-6(fp)
   40d34:	00800204 	movi	r2,8
   40d38:	e0bffec5 	stb	r2,-5(fp)
   40d3c:	00800204 	movi	r2,8
   40d40:	e0bfff05 	stb	r2,-4(fp)
   40d44:	00800204 	movi	r2,8
   40d48:	e0bfff45 	stb	r2,-3(fp)
    memcpy(ConfigMsg.lip, lip, 4);
   40d4c:	008001b4 	movhi	r2,6
   40d50:	10b54d04 	addi	r2,r2,-10956
   40d54:	e0fffb83 	ldbu	r3,-18(fp)
   40d58:	10c00305 	stb	r3,12(r2)
   40d5c:	e0fffbc3 	ldbu	r3,-17(fp)
   40d60:	10c00345 	stb	r3,13(r2)
   40d64:	e0fffc03 	ldbu	r3,-16(fp)
   40d68:	10c00385 	stb	r3,14(r2)
   40d6c:	e0fffc43 	ldbu	r3,-15(fp)
   40d70:	10c003c5 	stb	r3,15(r2)
    memcpy(ConfigMsg.sub, sub, 4);
   40d74:	008001b4 	movhi	r2,6
   40d78:	10b54d04 	addi	r2,r2,-10956
   40d7c:	e0fffc83 	ldbu	r3,-14(fp)
   40d80:	10c00405 	stb	r3,16(r2)
   40d84:	e0fffcc3 	ldbu	r3,-13(fp)
   40d88:	10c00445 	stb	r3,17(r2)
   40d8c:	e0fffd03 	ldbu	r3,-12(fp)
   40d90:	10c00485 	stb	r3,18(r2)
   40d94:	e0fffd43 	ldbu	r3,-11(fp)
   40d98:	10c004c5 	stb	r3,19(r2)
    memcpy(ConfigMsg.gw,  gw, 4);
   40d9c:	008001b4 	movhi	r2,6
   40da0:	10b54d04 	addi	r2,r2,-10956
   40da4:	e0fffd83 	ldbu	r3,-10(fp)
   40da8:	10c00505 	stb	r3,20(r2)
   40dac:	e0fffdc3 	ldbu	r3,-9(fp)
   40db0:	10c00545 	stb	r3,21(r2)
   40db4:	e0fffe03 	ldbu	r3,-8(fp)
   40db8:	10c00585 	stb	r3,22(r2)
   40dbc:	e0fffe43 	ldbu	r3,-7(fp)
   40dc0:	10c005c5 	stb	r3,23(r2)
    memcpy(ConfigMsg.mac, mac,6);
   40dc4:	008001b4 	movhi	r2,6
   40dc8:	10b54d04 	addi	r2,r2,-10956
   40dcc:	e0fffa03 	ldbu	r3,-24(fp)
   40dd0:	10c00105 	stb	r3,4(r2)
   40dd4:	e0fffa43 	ldbu	r3,-23(fp)
   40dd8:	10c00145 	stb	r3,5(r2)
   40ddc:	e0fffa83 	ldbu	r3,-22(fp)
   40de0:	10c00185 	stb	r3,6(r2)
   40de4:	e0fffac3 	ldbu	r3,-21(fp)
   40de8:	10c001c5 	stb	r3,7(r2)
   40dec:	e0fffb03 	ldbu	r3,-20(fp)
   40df0:	10c00205 	stb	r3,8(r2)
   40df4:	e0fffb43 	ldbu	r3,-19(fp)
   40df8:	10c00245 	stb	r3,9(r2)
    memcpy(ConfigMsg.dns,dns,4);
   40dfc:	008001b4 	movhi	r2,6
   40e00:	10b54d04 	addi	r2,r2,-10956
   40e04:	e0fffe83 	ldbu	r3,-6(fp)
   40e08:	10c00605 	stb	r3,24(r2)
   40e0c:	e0fffec3 	ldbu	r3,-5(fp)
   40e10:	10c00645 	stb	r3,25(r2)
   40e14:	e0ffff03 	ldbu	r3,-4(fp)
   40e18:	10c00685 	stb	r3,26(r2)
   40e1c:	e0ffff43 	ldbu	r3,-3(fp)
   40e20:	10c006c5 	stb	r3,27(r2)

    ConfigMsg.dhcp=0;
   40e24:	008001b4 	movhi	r2,6
   40e28:	10b54d04 	addi	r2,r2,-10956
   40e2c:	10000705 	stb	zero,28(r2)
    ConfigMsg.debug=1;
   40e30:	008001b4 	movhi	r2,6
   40e34:	10b54d04 	addi	r2,r2,-10956
   40e38:	00c00044 	movi	r3,1
   40e3c:	10c00745 	stb	r3,29(r2)
    ConfigMsg.fw_len=0;
   40e40:	008001b4 	movhi	r2,6
   40e44:	10b54d04 	addi	r2,r2,-10956
   40e48:	10c00783 	ldbu	r3,30(r2)
   40e4c:	1806703a 	and	r3,r3,zero
   40e50:	10c00785 	stb	r3,30(r2)
   40e54:	10c007c3 	ldbu	r3,31(r2)
   40e58:	1806703a 	and	r3,r3,zero
   40e5c:	10c007c5 	stb	r3,31(r2)

    ConfigMsg.state=NORMAL_STATE;
   40e60:	008001b4 	movhi	r2,6
   40e64:	10b54d04 	addi	r2,r2,-10956
   40e68:	10000805 	stb	zero,32(r2)
    ConfigMsg.sw_ver[0]=FW_VER_HIGH;
   40e6c:	008001b4 	movhi	r2,6
   40e70:	10b54d04 	addi	r2,r2,-10956
   40e74:	00c00044 	movi	r3,1
   40e78:	10c00285 	stb	r3,10(r2)
    ConfigMsg.sw_ver[1]=FW_VER_LOW;
   40e7c:	008001b4 	movhi	r2,6
   40e80:	10b54d04 	addi	r2,r2,-10956
   40e84:	100002c5 	stb	zero,11(r2)

}
   40e88:	0001883a 	nop
   40e8c:	e037883a 	mov	sp,fp
   40e90:	df000017 	ldw	fp,0(sp)
   40e94:	dec00104 	addi	sp,sp,4
   40e98:	f800283a 	ret

00040e9c <hex2ascii>:
queue_item_t LaserData[2048];
Queue LaserDataQueue;


static inline unsigned int hex2ascii(unsigned int data)
{
   40e9c:	defffa04 	addi	sp,sp,-24
   40ea0:	df000515 	stw	fp,20(sp)
   40ea4:	df000504 	addi	fp,sp,20
   40ea8:	e13fff15 	stw	r4,-4(fp)
    int tmp31_24 = ((data>>12)&0x0f);
   40eac:	e0bfff17 	ldw	r2,-4(fp)
   40eb0:	1004d33a 	srli	r2,r2,12
   40eb4:	108003cc 	andi	r2,r2,15
   40eb8:	e0bffb15 	stw	r2,-20(fp)
    int tmp23_16 = ((data>> 8)&0x0f);
   40ebc:	e0bfff17 	ldw	r2,-4(fp)
   40ec0:	1004d23a 	srli	r2,r2,8
   40ec4:	108003cc 	andi	r2,r2,15
   40ec8:	e0bffc15 	stw	r2,-16(fp)
    int tmp15_08 = ((data>> 4)&0x0f);
   40ecc:	e0bfff17 	ldw	r2,-4(fp)
   40ed0:	1004d13a 	srli	r2,r2,4
   40ed4:	108003cc 	andi	r2,r2,15
   40ed8:	e0bffd15 	stw	r2,-12(fp)
    int tmp07_00 = ((data>> 0)&0x0f);
   40edc:	e0bfff17 	ldw	r2,-4(fp)
   40ee0:	108003cc 	andi	r2,r2,15
   40ee4:	e0bffe15 	stw	r2,-8(fp)

    tmp31_24 =  ( (tmp31_24 >= 0) && (tmp31_24 <= 9) ) ? tmp31_24 + 0x30 : tmp31_24 + 0x37;
   40ee8:	e0bffb17 	ldw	r2,-20(fp)
   40eec:	10000616 	blt	r2,zero,40f08 <hex2ascii+0x6c>
   40ef0:	e0bffb17 	ldw	r2,-20(fp)
   40ef4:	10800288 	cmpgei	r2,r2,10
   40ef8:	1000031e 	bne	r2,zero,40f08 <hex2ascii+0x6c>
   40efc:	e0bffb17 	ldw	r2,-20(fp)
   40f00:	10800c04 	addi	r2,r2,48
   40f04:	00000206 	br	40f10 <hex2ascii+0x74>
   40f08:	e0bffb17 	ldw	r2,-20(fp)
   40f0c:	10800dc4 	addi	r2,r2,55
   40f10:	e0bffb15 	stw	r2,-20(fp)
    tmp23_16 =  ( (tmp23_16 >= 0) && (tmp23_16 <= 9) ) ? tmp23_16 + 0x30 : tmp23_16 + 0x37;
   40f14:	e0bffc17 	ldw	r2,-16(fp)
   40f18:	10000616 	blt	r2,zero,40f34 <hex2ascii+0x98>
   40f1c:	e0bffc17 	ldw	r2,-16(fp)
   40f20:	10800288 	cmpgei	r2,r2,10
   40f24:	1000031e 	bne	r2,zero,40f34 <hex2ascii+0x98>
   40f28:	e0bffc17 	ldw	r2,-16(fp)
   40f2c:	10800c04 	addi	r2,r2,48
   40f30:	00000206 	br	40f3c <hex2ascii+0xa0>
   40f34:	e0bffc17 	ldw	r2,-16(fp)
   40f38:	10800dc4 	addi	r2,r2,55
   40f3c:	e0bffc15 	stw	r2,-16(fp)
    tmp15_08 =  ( (tmp15_08 >= 0) && (tmp15_08 <= 9) ) ? tmp15_08 + 0x30 : tmp15_08 + 0x37;
   40f40:	e0bffd17 	ldw	r2,-12(fp)
   40f44:	10000616 	blt	r2,zero,40f60 <hex2ascii+0xc4>
   40f48:	e0bffd17 	ldw	r2,-12(fp)
   40f4c:	10800288 	cmpgei	r2,r2,10
   40f50:	1000031e 	bne	r2,zero,40f60 <hex2ascii+0xc4>
   40f54:	e0bffd17 	ldw	r2,-12(fp)
   40f58:	10800c04 	addi	r2,r2,48
   40f5c:	00000206 	br	40f68 <hex2ascii+0xcc>
   40f60:	e0bffd17 	ldw	r2,-12(fp)
   40f64:	10800dc4 	addi	r2,r2,55
   40f68:	e0bffd15 	stw	r2,-12(fp)
    tmp07_00 =  ( (tmp07_00 >= 0) && (tmp07_00 <= 9) ) ? tmp07_00 + 0x30 : tmp07_00 + 0x37;
   40f6c:	e0bffe17 	ldw	r2,-8(fp)
   40f70:	10000616 	blt	r2,zero,40f8c <hex2ascii+0xf0>
   40f74:	e0bffe17 	ldw	r2,-8(fp)
   40f78:	10800288 	cmpgei	r2,r2,10
   40f7c:	1000031e 	bne	r2,zero,40f8c <hex2ascii+0xf0>
   40f80:	e0bffe17 	ldw	r2,-8(fp)
   40f84:	10800c04 	addi	r2,r2,48
   40f88:	00000206 	br	40f94 <hex2ascii+0xf8>
   40f8c:	e0bffe17 	ldw	r2,-8(fp)
   40f90:	10800dc4 	addi	r2,r2,55
   40f94:	e0bffe15 	stw	r2,-8(fp)

    return (tmp31_24<<24) + (tmp23_16<<16) + (tmp15_08<<8) + (tmp07_00<<0);
   40f98:	e0bffb17 	ldw	r2,-20(fp)
   40f9c:	1006963a 	slli	r3,r2,24
   40fa0:	e0bffc17 	ldw	r2,-16(fp)
   40fa4:	1004943a 	slli	r2,r2,16
   40fa8:	1887883a 	add	r3,r3,r2
   40fac:	e0bffd17 	ldw	r2,-12(fp)
   40fb0:	1004923a 	slli	r2,r2,8
   40fb4:	1887883a 	add	r3,r3,r2
   40fb8:	e0bffe17 	ldw	r2,-8(fp)
   40fbc:	1885883a 	add	r2,r3,r2
}
   40fc0:	e037883a 	mov	sp,fp
   40fc4:	df000017 	ldw	fp,0(sp)
   40fc8:	dec00104 	addi	sp,sp,4
   40fcc:	f800283a 	ret

00040fd0 <big_swap_little>:

unsigned int big_swap_little(unsigned int data)
{
   40fd0:	defffe04 	addi	sp,sp,-8
   40fd4:	df000115 	stw	fp,4(sp)
   40fd8:	df000104 	addi	fp,sp,4
   40fdc:	e13fff15 	stw	r4,-4(fp)
    data = ((data & 0xff) << 24) | ((data & 0xff00) << 8) | ((data & 0xff0000) >> 8) | ((data & 0xff000000) >> 24);
   40fe0:	e0bfff17 	ldw	r2,-4(fp)
   40fe4:	1006963a 	slli	r3,r2,24
   40fe8:	e0bfff17 	ldw	r2,-4(fp)
   40fec:	10bfc00c 	andi	r2,r2,65280
   40ff0:	1004923a 	slli	r2,r2,8
   40ff4:	1886b03a 	or	r3,r3,r2
   40ff8:	e0bfff17 	ldw	r2,-4(fp)
   40ffc:	10803fec 	andhi	r2,r2,255
   41000:	1004d23a 	srli	r2,r2,8
   41004:	1886b03a 	or	r3,r3,r2
   41008:	e0bfff17 	ldw	r2,-4(fp)
   4100c:	1004d63a 	srli	r2,r2,24
   41010:	1884b03a 	or	r2,r3,r2
   41014:	e0bfff15 	stw	r2,-4(fp)
    return data;
   41018:	e0bfff17 	ldw	r2,-4(fp)
}
   4101c:	e037883a 	mov	sp,fp
   41020:	df000017 	ldw	fp,0(sp)
   41024:	dec00104 	addi	sp,sp,4
   41028:	f800283a 	ret

0004102c <fpga_is_has_data>:

bool fpga_is_has_data()
{
   4102c:	defffd04 	addi	sp,sp,-12
   41030:	dfc00215 	stw	ra,8(sp)
   41034:	df000115 	stw	fp,4(sp)
   41038:	df000104 	addi	fp,sp,4
    int num = altera_avalon_fifo_read_level(LASER_FIFO_IN_CSR_BASE);
   4103c:	01000234 	movhi	r4,8
   41040:	21084804 	addi	r4,r4,8480
   41044:	004a68c0 	call	4a68c <altera_avalon_fifo_read_level>
   41048:	e0bfff15 	stw	r2,-4(fp)

    // fifo 空， empty = 1
    if(num > 0)
   4104c:	e0bfff17 	ldw	r2,-4(fp)
   41050:	0080020e 	bge	zero,r2,4105c <fpga_is_has_data+0x30>
        return true;
   41054:	00800044 	movi	r2,1
   41058:	00000106 	br	41060 <fpga_is_has_data+0x34>
    else
        return false;
   4105c:	0005883a 	mov	r2,zero
}
   41060:	e037883a 	mov	sp,fp
   41064:	dfc00117 	ldw	ra,4(sp)
   41068:	df000017 	ldw	fp,0(sp)
   4106c:	dec00204 	addi	sp,sp,8
   41070:	f800283a 	ret

00041074 <read_fpga_data>:

// 从FIFO中读出一个数据
inline unsigned int read_fpga_data()
{
   41074:	defffd04 	addi	sp,sp,-12
   41078:	dfc00215 	stw	ra,8(sp)
   4107c:	df000115 	stw	fp,4(sp)
   41080:	df000104 	addi	fp,sp,4
    unsigned int data = altera_avalon_fifo_read_fifo(LASER_FIFO_OUT_BASE, LASER_FIFO_IN_CSR_BASE);
   41084:	01400234 	movhi	r5,8
   41088:	29484804 	addi	r5,r5,8480
   4108c:	01000234 	movhi	r4,8
   41090:	21087404 	addi	r4,r4,8656
   41094:	004a8ec0 	call	4a8ec <altera_avalon_fifo_read_fifo>
   41098:	e0bfff15 	stw	r2,-4(fp)
    return (data >> 16) + (data << 16);
   4109c:	e0bfff17 	ldw	r2,-4(fp)
   410a0:	1004143a 	roli	r2,r2,16
}
   410a4:	e037883a 	mov	sp,fp
   410a8:	dfc00117 	ldw	ra,4(sp)
   410ac:	df000017 	ldw	fp,0(sp)
   410b0:	dec00204 	addi	sp,sp,8
   410b4:	f800283a 	ret

000410b8 <fpga2nios_parse>:

int fpga2nios_parse()
{
   410b8:	defff604 	addi	sp,sp,-40
   410bc:	dfc00915 	stw	ra,36(sp)
   410c0:	df000815 	stw	fp,32(sp)
   410c4:	df000804 	addi	fp,sp,32
    unsigned int i;
    unsigned int num = 0;
   410c8:	e03ffa15 	stw	zero,-24(fp)
    unsigned int distance;
    unsigned int gray;
    char buf[10];

    {
        while(!queue_is_empty(&LaserDataQueue))
   410cc:	00000f06 	br	4110c <fpga2nios_parse+0x54>
        {
        	recv_data = queue_pop(&LaserDataQueue);
   410d0:	010001b4 	movhi	r4,6
   410d4:	2136cb04 	addi	r4,r4,-9428
   410d8:	00455fc0 	call	455fc <queue_pop>
   410dc:	e0bff915 	stw	r2,-28(fp)
			if(recv_data >> 16 == FRAME_HEAD)
   410e0:	e0bff917 	ldw	r2,-28(fp)
   410e4:	1004d43a 	srli	r2,r2,16
   410e8:	10848d18 	cmpnei	r2,r2,4660
   410ec:	1000071e 	bne	r2,zero,4110c <fpga2nios_parse+0x54>
			{
				fpga2nios_data.frame_head = (recv_data >> 16) & 0xffff;
   410f0:	e0bff917 	ldw	r2,-28(fp)
   410f4:	1004d43a 	srli	r2,r2,16
   410f8:	1007883a 	mov	r3,r2
   410fc:	008001b4 	movhi	r2,6
   41100:	10b6d004 	addi	r2,r2,-9408
   41104:	10c0000d 	sth	r3,0(r2)
				break;
   41108:	00000606 	br	41124 <fpga2nios_parse+0x6c>
    unsigned int distance;
    unsigned int gray;
    char buf[10];

    {
        while(!queue_is_empty(&LaserDataQueue))
   4110c:	010001b4 	movhi	r4,6
   41110:	2136cb04 	addi	r4,r4,-9428
   41114:	00457580 	call	45758 <queue_is_empty>
   41118:	1080005c 	xori	r2,r2,1
   4111c:	10803fcc 	andi	r2,r2,255
   41120:	103feb1e 	bne	r2,zero,410d0 <__reset+0xfffc00d0>
				fpga2nios_data.frame_head = (recv_data >> 16) & 0xffff;
				break;
			}
        }

        fpga2nios_data.command = recv_data & 0xffff;
   41124:	e0bff917 	ldw	r2,-28(fp)
   41128:	1007883a 	mov	r3,r2
   4112c:	008001b4 	movhi	r2,6
   41130:	10b6d004 	addi	r2,r2,-9408
   41134:	10c0008d 	sth	r3,2(r2)
        fpga2nios_data.data_len = queue_pop(&LaserDataQueue);
   41138:	010001b4 	movhi	r4,6
   4113c:	2136cb04 	addi	r4,r4,-9428
   41140:	00455fc0 	call	455fc <queue_pop>
   41144:	1007883a 	mov	r3,r2
   41148:	008001b4 	movhi	r2,6
   4114c:	10b6d004 	addi	r2,r2,-9408
   41150:	10c00115 	stw	r3,4(r2)
        if(fpga2nios_data.command == DISTANCE_DATA)
   41154:	008001b4 	movhi	r2,6
   41158:	10b6d004 	addi	r2,r2,-9408
   4115c:	1080008b 	ldhu	r2,2(r2)
   41160:	10ffffcc 	andi	r3,r2,65535
   41164:	00a800d4 	movui	r2,40963
   41168:	1880951e 	bne	r3,r2,413c0 <fpga2nios_parse+0x308>
        {
            CycleData.distance_len = 0;
   4116c:	008001b4 	movhi	r2,6
   41170:	10bee704 	addi	r2,r2,-1124
   41174:	10000115 	stw	zero,4(r2)
            CycleData.gray_len = 0;
   41178:	008001b4 	movhi	r2,6
   4117c:	10bee704 	addi	r2,r2,-1124
   41180:	10000215 	stw	zero,8(r2)
            for(i = 0; i < fpga2nios_data.data_len; i++)
   41184:	e03ff815 	stw	zero,-32(fp)
   41188:	00004a06 	br	412b4 <fpga2nios_parse+0x1fc>
            {
                recv_data = queue_pop(&LaserDataQueue);
   4118c:	010001b4 	movhi	r4,6
   41190:	2136cb04 	addi	r4,r4,-9428
   41194:	00455fc0 	call	455fc <queue_pop>
   41198:	e0bff915 	stw	r2,-28(fp)
                distance = hex2ascii(recv_data);
   4119c:	e13ff917 	ldw	r4,-28(fp)
   411a0:	0040e9c0 	call	40e9c <hex2ascii>
   411a4:	e0bffb15 	stw	r2,-20(fp)

                buf[0] = 0x20;
   411a8:	00800804 	movi	r2,32
   411ac:	e0bffd05 	stb	r2,-12(fp)

                buf[1] = (distance >> 24) & 0xff;
   411b0:	e0bffb17 	ldw	r2,-20(fp)
   411b4:	1004d63a 	srli	r2,r2,24
   411b8:	e0bffd45 	stb	r2,-11(fp)
                buf[2] = (distance >> 16) & 0xff;
   411bc:	e0bffb17 	ldw	r2,-20(fp)
   411c0:	1004d43a 	srli	r2,r2,16
   411c4:	e0bffd85 	stb	r2,-10(fp)
                buf[3] = (distance >> 8) & 0xff;
   411c8:	e0bffb17 	ldw	r2,-20(fp)
   411cc:	1004d23a 	srli	r2,r2,8
   411d0:	e0bffdc5 	stb	r2,-9(fp)
                buf[4] = (distance >> 0) & 0xff;
   411d4:	e0bffb17 	ldw	r2,-20(fp)
   411d8:	e0bffe05 	stb	r2,-8(fp)
                num = 5;
   411dc:	00800144 	movi	r2,5
   411e0:	e0bffa15 	stw	r2,-24(fp)
                
                // num = hex2string(recv_data, buf);
                memcpy(CycleData.distance_data + CycleData.distance_len, buf, num);  // ascii码格式的  +距离数据              
   411e4:	008001b4 	movhi	r2,6
   411e8:	10bee704 	addi	r2,r2,-1124
   411ec:	10c00117 	ldw	r3,4(r2)
   411f0:	008001b4 	movhi	r2,6
   411f4:	10beea04 	addi	r2,r2,-1112
   411f8:	1885883a 	add	r2,r3,r2
   411fc:	e0fffd04 	addi	r3,fp,-12
   41200:	e1bffa17 	ldw	r6,-24(fp)
   41204:	180b883a 	mov	r5,r3
   41208:	1009883a 	mov	r4,r2
   4120c:	0048f880 	call	48f88 <memcpy>
                CycleData.distance_len += num;
   41210:	008001b4 	movhi	r2,6
   41214:	10bee704 	addi	r2,r2,-1124
   41218:	10c00117 	ldw	r3,4(r2)
   4121c:	e0bffa17 	ldw	r2,-24(fp)
   41220:	1887883a 	add	r3,r3,r2
   41224:	008001b4 	movhi	r2,6
   41228:	10bee704 	addi	r2,r2,-1124
   4122c:	10c00115 	stw	r3,4(r2)

                gray = hex2ascii((recv_data>>16) & 0xffff);
   41230:	e0bff917 	ldw	r2,-28(fp)
   41234:	1004d43a 	srli	r2,r2,16
   41238:	1009883a 	mov	r4,r2
   4123c:	0040e9c0 	call	40e9c <hex2ascii>
   41240:	e0bffc15 	stw	r2,-16(fp)
                buf[0] = 0x20;
   41244:	00800804 	movi	r2,32
   41248:	e0bffd05 	stb	r2,-12(fp)
                buf[1] = (gray >> 8) & 0xff;
   4124c:	e0bffc17 	ldw	r2,-16(fp)
   41250:	1004d23a 	srli	r2,r2,8
   41254:	e0bffd45 	stb	r2,-11(fp)
                buf[2] = (gray >> 0) & 0xff;
   41258:	e0bffc17 	ldw	r2,-16(fp)
   4125c:	e0bffd85 	stb	r2,-10(fp)
                memcpy(CycleData.gray_data + CycleData.gray_len, buf, 3);  
   41260:	008001b4 	movhi	r2,6
   41264:	10bee704 	addi	r2,r2,-1124
   41268:	10c00217 	ldw	r3,8(r2)
   4126c:	008001b4 	movhi	r2,6
   41270:	1082dfc4 	addi	r2,r2,2943
   41274:	1885883a 	add	r2,r3,r2
   41278:	e0fffd04 	addi	r3,fp,-12
   4127c:	018000c4 	movi	r6,3
   41280:	180b883a 	mov	r5,r3
   41284:	1009883a 	mov	r4,r2
   41288:	0048f880 	call	48f88 <memcpy>
                CycleData.gray_len += 3;
   4128c:	008001b4 	movhi	r2,6
   41290:	10bee704 	addi	r2,r2,-1124
   41294:	10800217 	ldw	r2,8(r2)
   41298:	10c000c4 	addi	r3,r2,3
   4129c:	008001b4 	movhi	r2,6
   412a0:	10bee704 	addi	r2,r2,-1124
   412a4:	10c00215 	stw	r3,8(r2)
        fpga2nios_data.data_len = queue_pop(&LaserDataQueue);
        if(fpga2nios_data.command == DISTANCE_DATA)
        {
            CycleData.distance_len = 0;
            CycleData.gray_len = 0;
            for(i = 0; i < fpga2nios_data.data_len; i++)
   412a8:	e0bff817 	ldw	r2,-32(fp)
   412ac:	10800044 	addi	r2,r2,1
   412b0:	e0bff815 	stw	r2,-32(fp)
   412b4:	008001b4 	movhi	r2,6
   412b8:	10b6d004 	addi	r2,r2,-9408
   412bc:	10800117 	ldw	r2,4(r2)
   412c0:	e0fff817 	ldw	r3,-32(fp)
   412c4:	18bfb136 	bltu	r3,r2,4118c <__reset+0xfffc018c>
                buf[1] = (gray >> 8) & 0xff;
                buf[2] = (gray >> 0) & 0xff;
                memcpy(CycleData.gray_data + CycleData.gray_len, buf, 3);  
                CycleData.gray_len += 3;
            }
            recv_data = queue_pop(&LaserDataQueue);
   412c8:	010001b4 	movhi	r4,6
   412cc:	2136cb04 	addi	r4,r4,-9428
   412d0:	00455fc0 	call	455fc <queue_pop>
   412d4:	e0bff915 	stw	r2,-28(fp)
            fpga2nios_data.checksum = recv_data;
   412d8:	008001b4 	movhi	r2,6
   412dc:	10b6d004 	addi	r2,r2,-9408
   412e0:	e0fff917 	ldw	r3,-28(fp)
   412e4:	10c01615 	stw	r3,88(r2)

            if((fpga2nios_data.checksum & 0xfffffff) == 0xeeeeeee)  // bit[27:0], bit[31:28]作为FPGA上传的区域报警标志
   412e8:	008001b4 	movhi	r2,6
   412ec:	10b6d004 	addi	r2,r2,-9408
   412f0:	10c01617 	ldw	r3,88(r2)
   412f4:	00840034 	movhi	r2,4096
   412f8:	10bfffc4 	addi	r2,r2,-1
   412fc:	1886703a 	and	r3,r3,r2
   41300:	0083bbf4 	movhi	r2,3823
   41304:	10bbbb84 	addi	r2,r2,-4370
   41308:	18801c1e 	bne	r3,r2,4137c <fpga2nios_parse+0x2c4>
            {
                if(SysPara.board_type == 1)       // NPN型, 报警时FPGA IO输出0, 外部才能输出为高
   4130c:	008001b4 	movhi	r2,6
   41310:	10a43504 	addi	r2,r2,-28460
   41314:	10802c17 	ldw	r2,176(r2)
   41318:	10800058 	cmpnei	r2,r2,1
   4131c:	10000a1e 	bne	r2,zero,41348 <fpga2nios_parse+0x290>
                    sys_warn.region_alarm = ~(fpga2nios_data.checksum >> 28) & 0x07;
   41320:	008001b4 	movhi	r2,6
   41324:	10b6d004 	addi	r2,r2,-9408
   41328:	10801617 	ldw	r2,88(r2)
   4132c:	1004d73a 	srli	r2,r2,28
   41330:	0084303a 	nor	r2,zero,r2
   41334:	10c001cc 	andi	r3,r2,7
   41338:	008001b4 	movhi	r2,6
   4133c:	10b32b04 	addi	r2,r2,-13140
   41340:	10c00415 	stw	r3,16(r2)
   41344:	00000806 	br	41368 <fpga2nios_parse+0x2b0>
                else
                    sys_warn.region_alarm = (fpga2nios_data.checksum >> 28) & 0x07;
   41348:	008001b4 	movhi	r2,6
   4134c:	10b6d004 	addi	r2,r2,-9408
   41350:	10801617 	ldw	r2,88(r2)
   41354:	1004d73a 	srli	r2,r2,28
   41358:	10c001cc 	andi	r3,r2,7
   4135c:	008001b4 	movhi	r2,6
   41360:	10b32b04 	addi	r2,r2,-13140
   41364:	10c00415 	stw	r3,16(r2)

                CycleData.pos_finish = true;
   41368:	008001b4 	movhi	r2,6
   4136c:	10bee704 	addi	r2,r2,-1124
   41370:	00c00044 	movi	r3,1
   41374:	10c00005 	stb	r3,0(r2)
   41378:	00000d06 	br	413b0 <fpga2nios_parse+0x2f8>
            }
            else
            {
                CycleData.pos_finish = false;
   4137c:	008001b4 	movhi	r2,6
   41380:	10bee704 	addi	r2,r2,-1124
   41384:	10000005 	stb	zero,0(r2)
                memset(CycleData.distance_data, 0, sizeof(CycleData.distance_data));
   41388:	0183f5c4 	movi	r6,4055
   4138c:	000b883a 	mov	r5,zero
   41390:	010001b4 	movhi	r4,6
   41394:	213eea04 	addi	r4,r4,-1112
   41398:	00490d00 	call	490d0 <memset>
                memset(CycleData.gray_data, 0, sizeof(CycleData.gray_data));
   4139c:	0183f5c4 	movi	r6,4055
   413a0:	000b883a 	mov	r5,zero
   413a4:	010001b4 	movhi	r4,6
   413a8:	2102dfc4 	addi	r4,r4,2943
   413ac:	00490d00 	call	490d0 <memset>
            }
            queue_clear(&LaserDataQueue);
   413b0:	010001b4 	movhi	r4,6
   413b4:	2136cb04 	addi	r4,r4,-9428
   413b8:	00455400 	call	45540 <queue_clear>
   413bc:	0000fa06 	br	417a8 <fpga2nios_parse+0x6f0>
        }
        else if(fpga2nios_data.command == UP_FPGA_STATUS)
   413c0:	008001b4 	movhi	r2,6
   413c4:	10b6d004 	addi	r2,r2,-9408
   413c8:	1080008b 	ldhu	r2,2(r2)
   413cc:	10ffffcc 	andi	r3,r2,65535
   413d0:	00b04014 	movui	r2,49408
   413d4:	1880f41e 	bne	r3,r2,417a8 <fpga2nios_parse+0x6f0>
        {
            sys_warn.len %= 5;
   413d8:	008001b4 	movhi	r2,6
   413dc:	10b32b04 	addi	r2,r2,-13140
   413e0:	10800517 	ldw	r2,20(r2)
   413e4:	01400144 	movi	r5,5
   413e8:	1009883a 	mov	r4,r2
   413ec:	0048f300 	call	48f30 <__umodsi3>
   413f0:	1007883a 	mov	r3,r2
   413f4:	008001b4 	movhi	r2,6
   413f8:	10b32b04 	addi	r2,r2,-13140
   413fc:	10c00515 	stw	r3,20(r2)
            // for(i = 0; i < fpga_data.data_len; i++)
            {
                recv_data = queue_pop(&LaserDataQueue);
   41400:	010001b4 	movhi	r4,6
   41404:	2136cb04 	addi	r4,r4,-9428
   41408:	00455fc0 	call	455fc <queue_pop>
   4140c:	e0bff915 	stw	r2,-28(fp)
                // CycleData.fpga_status[i] = recv_data;
                if(sys_warn.motor_low_speed_alarm == 0x00)
   41410:	008001b4 	movhi	r2,6
   41414:	10b32b04 	addi	r2,r2,-13140
   41418:	10800017 	ldw	r2,0(r2)
   4141c:	10000b1e 	bne	r2,zero,4144c <fpga2nios_parse+0x394>
                    sys_warn.motor_cycle_cnt[sys_warn.len] = recv_data;
   41420:	008001b4 	movhi	r2,6
   41424:	10b32b04 	addi	r2,r2,-13140
   41428:	10c00517 	ldw	r3,20(r2)
   4142c:	008001b4 	movhi	r2,6
   41430:	10b32b04 	addi	r2,r2,-13140
   41434:	18c00184 	addi	r3,r3,6
   41438:	18c7883a 	add	r3,r3,r3
   4143c:	18c7883a 	add	r3,r3,r3
   41440:	10c5883a 	add	r2,r2,r3
   41444:	e0fff917 	ldw	r3,-28(fp)
   41448:	10c00015 	stw	r3,0(r2)
                SysPara.motor_real_speed = recv_data;
   4144c:	008001b4 	movhi	r2,6
   41450:	10a43504 	addi	r2,r2,-28460
   41454:	e0fff917 	ldw	r3,-28(fp)
   41458:	10c02115 	stw	r3,132(r2)

                recv_data = queue_pop(&LaserDataQueue);
   4145c:	010001b4 	movhi	r4,6
   41460:	2136cb04 	addi	r4,r4,-9428
   41464:	00455fc0 	call	455fc <queue_pop>
   41468:	e0bff915 	stw	r2,-28(fp)
                SysPara.zero_value = recv_data & 0xffff;
   4146c:	e0bff917 	ldw	r2,-28(fp)
   41470:	10ffffcc 	andi	r3,r2,65535
   41474:	008001b4 	movhi	r2,6
   41478:	10a43504 	addi	r2,r2,-28460
   4147c:	10c01d15 	stw	r3,116(r2)

                recv_data = queue_pop(&LaserDataQueue);
   41480:	010001b4 	movhi	r4,6
   41484:	2136cb04 	addi	r4,r4,-9428
   41488:	00455fc0 	call	455fc <queue_pop>
   4148c:	e0bff915 	stw	r2,-28(fp)
                if(sys_warn.window_dust_alarm == 0x00)
   41490:	008001b4 	movhi	r2,6
   41494:	10b32b04 	addi	r2,r2,-13140
   41498:	10800217 	ldw	r2,8(r2)
   4149c:	10000b1e 	bne	r2,zero,414cc <fpga2nios_parse+0x414>
                    sys_warn.dust_cnt[sys_warn.len] = recv_data;
   414a0:	008001b4 	movhi	r2,6
   414a4:	10b32b04 	addi	r2,r2,-13140
   414a8:	10c00517 	ldw	r3,20(r2)
   414ac:	008001b4 	movhi	r2,6
   414b0:	10b32b04 	addi	r2,r2,-13140
   414b4:	18c00404 	addi	r3,r3,16
   414b8:	18c7883a 	add	r3,r3,r3
   414bc:	18c7883a 	add	r3,r3,r3
   414c0:	10c5883a 	add	r2,r2,r3
   414c4:	e0fff917 	ldw	r3,-28(fp)
   414c8:	10c00015 	stw	r3,0(r2)
                SysPara.placeholer1 = recv_data;
   414cc:	008001b4 	movhi	r2,6
   414d0:	10a43504 	addi	r2,r2,-28460
   414d4:	e0fff917 	ldw	r3,-28(fp)
   414d8:	10c01315 	stw	r3,76(r2)

                recv_data = queue_pop(&LaserDataQueue); // 最高位作为上传状态
   414dc:	010001b4 	movhi	r4,6
   414e0:	2136cb04 	addi	r4,r4,-9428
   414e4:	00455fc0 	call	455fc <queue_pop>
   414e8:	e0bff915 	stw	r2,-28(fp)
                if(sys_warn.temp_out_alarm == 0x00)
   414ec:	008001b4 	movhi	r2,6
   414f0:	10b32b04 	addi	r2,r2,-13140
   414f4:	10800317 	ldw	r2,12(r2)
   414f8:	10000c1e 	bne	r2,zero,4152c <fpga2nios_parse+0x474>
                    sys_warn.temp_value[sys_warn.len] = recv_data & 0xffff;
   414fc:	008001b4 	movhi	r2,6
   41500:	10b32b04 	addi	r2,r2,-13140
   41504:	10c00517 	ldw	r3,20(r2)
   41508:	e0bff917 	ldw	r2,-28(fp)
   4150c:	113fffcc 	andi	r4,r2,65535
   41510:	008001b4 	movhi	r2,6
   41514:	10b32b04 	addi	r2,r2,-13140
   41518:	18c00544 	addi	r3,r3,21
   4151c:	18c7883a 	add	r3,r3,r3
   41520:	18c7883a 	add	r3,r3,r3
   41524:	10c5883a 	add	r2,r2,r3
   41528:	11000015 	stw	r4,0(r2)
                SysPara.sys_temp = recv_data & 0xffff;
   4152c:	e0bff917 	ldw	r2,-28(fp)
   41530:	10ffffcc 	andi	r3,r2,65535
   41534:	008001b4 	movhi	r2,6
   41538:	10a43504 	addi	r2,r2,-28460
   4153c:	10c01e15 	stw	r3,120(r2)
                SysPara.update_pos_flag = ((recv_data >> 31) & 0x01) ? true : false;
   41540:	e0bff917 	ldw	r2,-28(fp)
   41544:	1004d7fa 	srli	r2,r2,31
   41548:	1007883a 	mov	r3,r2
   4154c:	008001b4 	movhi	r2,6
   41550:	10a43504 	addi	r2,r2,-28460
   41554:	10c00005 	stb	r3,0(r2)
                

                SysPara.zero_pulse_width = queue_pop(&LaserDataQueue);
   41558:	010001b4 	movhi	r4,6
   4155c:	2136cb04 	addi	r4,r4,-9428
   41560:	00455fc0 	call	455fc <queue_pop>
   41564:	1007883a 	mov	r3,r2
   41568:	008001b4 	movhi	r2,6
   4156c:	10a43504 	addi	r2,r2,-28460
   41570:	10c02d15 	stw	r3,180(r2)
                if(sys_warn.ld_not_work_alarm == 0x00)
   41574:	008001b4 	movhi	r2,6
   41578:	10b32b04 	addi	r2,r2,-13140
   4157c:	10800117 	ldw	r2,4(r2)
   41580:	10000d1e 	bne	r2,zero,415b8 <fpga2nios_parse+0x500>
                    sys_warn.zero_value[sys_warn.len] = SysPara.zero_pulse_width;
   41584:	008001b4 	movhi	r2,6
   41588:	10b32b04 	addi	r2,r2,-13140
   4158c:	10c00517 	ldw	r3,20(r2)
   41590:	008001b4 	movhi	r2,6
   41594:	10a43504 	addi	r2,r2,-28460
   41598:	11002d17 	ldw	r4,180(r2)
   4159c:	008001b4 	movhi	r2,6
   415a0:	10b32b04 	addi	r2,r2,-13140
   415a4:	18c002c4 	addi	r3,r3,11
   415a8:	18c7883a 	add	r3,r3,r3
   415ac:	18c7883a 	add	r3,r3,r3
   415b0:	10c5883a 	add	r2,r2,r3
   415b4:	11000015 	stw	r4,0(r2)
            }
            sys_warn.len++;
   415b8:	008001b4 	movhi	r2,6
   415bc:	10b32b04 	addi	r2,r2,-13140
   415c0:	10800517 	ldw	r2,20(r2)
   415c4:	10c00044 	addi	r3,r2,1
   415c8:	008001b4 	movhi	r2,6
   415cc:	10b32b04 	addi	r2,r2,-13140
   415d0:	10c00515 	stw	r3,20(r2)
            recv_data = queue_pop(&LaserDataQueue);
   415d4:	010001b4 	movhi	r4,6
   415d8:	2136cb04 	addi	r4,r4,-9428
   415dc:	00455fc0 	call	455fc <queue_pop>
   415e0:	e0bff915 	stw	r2,-28(fp)
            fpga2nios_data.checksum = recv_data;
   415e4:	008001b4 	movhi	r2,6
   415e8:	10b6d004 	addi	r2,r2,-9408
   415ec:	e0fff917 	ldw	r3,-28(fp)
   415f0:	10c01615 	stw	r3,88(r2)
            if(fpga2nios_data.checksum == 0xeeeeeeee)
   415f4:	008001b4 	movhi	r2,6
   415f8:	10b6d004 	addi	r2,r2,-9408
   415fc:	10c01617 	ldw	r3,88(r2)
   41600:	00bbbbf4 	movhi	r2,61167
   41604:	10bbbb84 	addi	r2,r2,-4370
   41608:	1880111e 	bne	r3,r2,41650 <fpga2nios_parse+0x598>
            {
                if(sys_warn.len == 5)
   4160c:	008001b4 	movhi	r2,6
   41610:	10b32b04 	addi	r2,r2,-13140
   41614:	10800517 	ldw	r2,20(r2)
   41618:	10800158 	cmpnei	r2,r2,5
   4161c:	10000c1e 	bne	r2,zero,41650 <fpga2nios_parse+0x598>
                {
                    process_motor_waring(&sys_warn);
   41620:	010001b4 	movhi	r4,6
   41624:	21332b04 	addi	r4,r4,-13140
   41628:	00417c00 	call	417c0 <process_motor_waring>
                    process_ld_waring(&sys_warn);
   4162c:	010001b4 	movhi	r4,6
   41630:	21332b04 	addi	r4,r4,-13140
   41634:	00418840 	call	41884 <process_ld_waring>
                    process_window_dust_waring(&sys_warn);
   41638:	010001b4 	movhi	r4,6
   4163c:	21332b04 	addi	r4,r4,-13140
   41640:	00419100 	call	41910 <process_window_dust_waring>
                    process_sys_temp_waring(&sys_warn);
   41644:	010001b4 	movhi	r4,6
   41648:	21332b04 	addi	r4,r4,-13140
   4164c:	00419c40 	call	419c4 <process_sys_temp_waring>
                }
            }
            queue_clear(&LaserDataQueue);
   41650:	010001b4 	movhi	r4,6
   41654:	2136cb04 	addi	r4,r4,-9428
   41658:	00455400 	call	45540 <queue_clear>
            if(sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm | sys_warn.window_dust_alarm | sys_warn.temp_out_alarm)
   4165c:	008001b4 	movhi	r2,6
   41660:	10b32b04 	addi	r2,r2,-13140
   41664:	10c00017 	ldw	r3,0(r2)
   41668:	008001b4 	movhi	r2,6
   4166c:	10b32b04 	addi	r2,r2,-13140
   41670:	10800117 	ldw	r2,4(r2)
   41674:	1886b03a 	or	r3,r3,r2
   41678:	008001b4 	movhi	r2,6
   4167c:	10b32b04 	addi	r2,r2,-13140
   41680:	10800217 	ldw	r2,8(r2)
   41684:	1886b03a 	or	r3,r3,r2
   41688:	008001b4 	movhi	r2,6
   4168c:	10b32b04 	addi	r2,r2,-13140
   41690:	10800317 	ldw	r2,12(r2)
   41694:	1884b03a 	or	r2,r3,r2
   41698:	10004326 	beq	r2,zero,417a8 <fpga2nios_parse+0x6f0>
            {
                send_buffer[0] = 0x12;
   4169c:	008001b4 	movhi	r2,6
   416a0:	1086d604 	addi	r2,r2,7000
   416a4:	00c00484 	movi	r3,18
   416a8:	10c00005 	stb	r3,0(r2)
                send_buffer[1] = 0x34;
   416ac:	008001b4 	movhi	r2,6
   416b0:	1086d604 	addi	r2,r2,7000
   416b4:	00c00d04 	movi	r3,52
   416b8:	10c00045 	stb	r3,1(r2)
                send_buffer[2] = (UP_FPGA_STATUS >> 8) & 0xff;
   416bc:	008001b4 	movhi	r2,6
   416c0:	1086d604 	addi	r2,r2,7000
   416c4:	00fff044 	movi	r3,-63
   416c8:	10c00085 	stb	r3,2(r2)
                send_buffer[3] = (UP_FPGA_STATUS >> 0) & 0xff;
   416cc:	008001b4 	movhi	r2,6
   416d0:	1086d604 	addi	r2,r2,7000
   416d4:	100000c5 	stb	zero,3(r2)

                send_buffer[4] = 0;
   416d8:	008001b4 	movhi	r2,6
   416dc:	1086d604 	addi	r2,r2,7000
   416e0:	10000105 	stb	zero,4(r2)
                send_buffer[5] = 0;
   416e4:	008001b4 	movhi	r2,6
   416e8:	1086d604 	addi	r2,r2,7000
   416ec:	10000145 	stb	zero,5(r2)
                send_buffer[6] = 0;
   416f0:	008001b4 	movhi	r2,6
   416f4:	1086d604 	addi	r2,r2,7000
   416f8:	10000185 	stb	zero,6(r2)
                send_buffer[7] = 16;
   416fc:	008001b4 	movhi	r2,6
   41700:	1086d604 	addi	r2,r2,7000
   41704:	00c00404 	movi	r3,16
   41708:	10c001c5 	stb	r3,7(r2)
                memcpy(send_buffer + 8, (unsigned char *)&sys_warn, 16);
   4170c:	008001b4 	movhi	r2,6
   41710:	1086d804 	addi	r2,r2,7008
   41714:	01800404 	movi	r6,16
   41718:	014001b4 	movhi	r5,6
   4171c:	29732b04 	addi	r5,r5,-13140
   41720:	1009883a 	mov	r4,r2
   41724:	0048f880 	call	48f88 <memcpy>
                send_buffer[24] = send_buffer[25] = send_buffer[26] = send_buffer[27] = 0xee;
   41728:	008001b4 	movhi	r2,6
   4172c:	1086d604 	addi	r2,r2,7000
   41730:	00fffb84 	movi	r3,-18
   41734:	10c006c5 	stb	r3,27(r2)
   41738:	008001b4 	movhi	r2,6
   4173c:	1086d604 	addi	r2,r2,7000
   41740:	10c006c3 	ldbu	r3,27(r2)
   41744:	008001b4 	movhi	r2,6
   41748:	1086d604 	addi	r2,r2,7000
   4174c:	10c00685 	stb	r3,26(r2)
   41750:	008001b4 	movhi	r2,6
   41754:	1086d604 	addi	r2,r2,7000
   41758:	10c00683 	ldbu	r3,26(r2)
   4175c:	008001b4 	movhi	r2,6
   41760:	1086d604 	addi	r2,r2,7000
   41764:	10c00645 	stb	r3,25(r2)
   41768:	008001b4 	movhi	r2,6
   4176c:	1086d604 	addi	r2,r2,7000
   41770:	10c00643 	ldbu	r3,25(r2)
   41774:	008001b4 	movhi	r2,6
   41778:	1086d604 	addi	r2,r2,7000
   4177c:	10c00605 	stb	r3,24(r2)

                send(SOCKET0, send_buffer, 28);
   41780:	01800704 	movi	r6,28
   41784:	014001b4 	movhi	r5,6
   41788:	2946d604 	addi	r5,r5,7000
   4178c:	0009883a 	mov	r4,zero
   41790:	0046f500 	call	46f50 <send>
                send(SOCKET1, send_buffer, 28);
   41794:	01800704 	movi	r6,28
   41798:	014001b4 	movhi	r5,6
   4179c:	2946d604 	addi	r5,r5,7000
   417a0:	01000044 	movi	r4,1
   417a4:	0046f500 	call	46f50 <send>
            }
        }
    }
    return -1;
   417a8:	00bfffc4 	movi	r2,-1
}
   417ac:	e037883a 	mov	sp,fp
   417b0:	dfc00117 	ldw	ra,4(sp)
   417b4:	df000017 	ldw	fp,0(sp)
   417b8:	dec00204 	addi	sp,sp,8
   417bc:	f800283a 	ret

000417c0 <process_motor_waring>:
 * @brief 连续5次检测电机计数值
 * 
 * @param data 
 */
void process_motor_waring(Sys_warn *data)
{
   417c0:	defffe04 	addi	sp,sp,-8
   417c4:	df000115 	stw	fp,4(sp)
   417c8:	df000104 	addi	fp,sp,4
   417cc:	e13fff15 	stw	r4,-4(fp)
    if(SysPara.motor_enable == ENABLE)
   417d0:	008001b4 	movhi	r2,6
   417d4:	10a43504 	addi	r2,r2,-28460
   417d8:	10c00417 	ldw	r3,16(r2)
   417dc:	00844474 	movhi	r2,4369
   417e0:	10844444 	addi	r2,r2,4369
   417e4:	1880201e 	bne	r3,r2,41868 <process_motor_waring+0xa8>
    {
        if( 
                (data->motor_cycle_cnt[0] >= MOTOR_LOW_SPEED_VALUE) && 
   417e8:	e0bfff17 	ldw	r2,-4(fp)
   417ec:	10c00617 	ldw	r3,24(r2)
 */
void process_motor_waring(Sys_warn *data)
{
    if(SysPara.motor_enable == ENABLE)
    {
        if( 
   417f0:	00817db4 	movhi	r2,1526
   417f4:	10b83fc4 	addi	r2,r2,-7937
   417f8:	10c0182e 	bgeu	r2,r3,4185c <process_motor_waring+0x9c>
                (data->motor_cycle_cnt[0] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[1] >= MOTOR_LOW_SPEED_VALUE) && 
   417fc:	e0bfff17 	ldw	r2,-4(fp)
   41800:	10c00717 	ldw	r3,28(r2)
void process_motor_waring(Sys_warn *data)
{
    if(SysPara.motor_enable == ENABLE)
    {
        if( 
                (data->motor_cycle_cnt[0] >= MOTOR_LOW_SPEED_VALUE) && 
   41804:	00817db4 	movhi	r2,1526
   41808:	10b83fc4 	addi	r2,r2,-7937
   4180c:	10c0132e 	bgeu	r2,r3,4185c <process_motor_waring+0x9c>
                (data->motor_cycle_cnt[1] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[2] >= MOTOR_LOW_SPEED_VALUE) && 
   41810:	e0bfff17 	ldw	r2,-4(fp)
   41814:	10c00817 	ldw	r3,32(r2)
{
    if(SysPara.motor_enable == ENABLE)
    {
        if( 
                (data->motor_cycle_cnt[0] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[1] >= MOTOR_LOW_SPEED_VALUE) && 
   41818:	00817db4 	movhi	r2,1526
   4181c:	10b83fc4 	addi	r2,r2,-7937
   41820:	10c00e2e 	bgeu	r2,r3,4185c <process_motor_waring+0x9c>
                (data->motor_cycle_cnt[2] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[3] >= MOTOR_LOW_SPEED_VALUE) && 
   41824:	e0bfff17 	ldw	r2,-4(fp)
   41828:	10c00917 	ldw	r3,36(r2)
    if(SysPara.motor_enable == ENABLE)
    {
        if( 
                (data->motor_cycle_cnt[0] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[1] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[2] >= MOTOR_LOW_SPEED_VALUE) && 
   4182c:	00817db4 	movhi	r2,1526
   41830:	10b83fc4 	addi	r2,r2,-7937
   41834:	10c0092e 	bgeu	r2,r3,4185c <process_motor_waring+0x9c>
                (data->motor_cycle_cnt[3] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[4] >= MOTOR_LOW_SPEED_VALUE)
   41838:	e0bfff17 	ldw	r2,-4(fp)
   4183c:	10c00a17 	ldw	r3,40(r2)
    {
        if( 
                (data->motor_cycle_cnt[0] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[1] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[2] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[3] >= MOTOR_LOW_SPEED_VALUE) && 
   41840:	00817db4 	movhi	r2,1526
   41844:	10b83fc4 	addi	r2,r2,-7937
   41848:	10c0042e 	bgeu	r2,r3,4185c <process_motor_waring+0x9c>
                (data->motor_cycle_cnt[4] >= MOTOR_LOW_SPEED_VALUE)
        )
            data->motor_low_speed_alarm = 0x01;
   4184c:	e0bfff17 	ldw	r2,-4(fp)
   41850:	00c00044 	movi	r3,1
   41854:	10c00015 	stw	r3,0(r2)
        else
            data->motor_low_speed_alarm = 0x00;
        }
    else
        data->motor_low_speed_alarm = 0x00;
}
   41858:	00000506 	br	41870 <process_motor_waring+0xb0>
                (data->motor_cycle_cnt[3] >= MOTOR_LOW_SPEED_VALUE) && 
                (data->motor_cycle_cnt[4] >= MOTOR_LOW_SPEED_VALUE)
        )
            data->motor_low_speed_alarm = 0x01;
        else
            data->motor_low_speed_alarm = 0x00;
   4185c:	e0bfff17 	ldw	r2,-4(fp)
   41860:	10000015 	stw	zero,0(r2)
        }
    else
        data->motor_low_speed_alarm = 0x00;
}
   41864:	00000206 	br	41870 <process_motor_waring+0xb0>
            data->motor_low_speed_alarm = 0x01;
        else
            data->motor_low_speed_alarm = 0x00;
        }
    else
        data->motor_low_speed_alarm = 0x00;
   41868:	e0bfff17 	ldw	r2,-4(fp)
   4186c:	10000015 	stw	zero,0(r2)
}
   41870:	0001883a 	nop
   41874:	e037883a 	mov	sp,fp
   41878:	df000017 	ldw	fp,0(sp)
   4187c:	dec00104 	addi	sp,sp,4
   41880:	f800283a 	ret

00041884 <process_ld_waring>:
 * @brief 连续5次获得的零位距离值大于设定值，报警
 * 
 * @param data 
 */
void process_ld_waring(Sys_warn *data)
{
   41884:	defffe04 	addi	sp,sp,-8
   41888:	df000115 	stw	fp,4(sp)
   4188c:	df000104 	addi	fp,sp,4
   41890:	e13fff15 	stw	r4,-4(fp)
    if( 
            (data->zero_value[0] < LD_NO_WORK_VALUE) && 
   41894:	e0bfff17 	ldw	r2,-4(fp)
   41898:	10800b17 	ldw	r2,44(r2)
 * 
 * @param data 
 */
void process_ld_waring(Sys_warn *data)
{
    if( 
   4189c:	108001e8 	cmpgeui	r2,r2,7
   418a0:	1000141e 	bne	r2,zero,418f4 <process_ld_waring+0x70>
            (data->zero_value[0] < LD_NO_WORK_VALUE) && 
            (data->zero_value[1] < LD_NO_WORK_VALUE) && 
   418a4:	e0bfff17 	ldw	r2,-4(fp)
   418a8:	10800c17 	ldw	r2,48(r2)
 * @param data 
 */
void process_ld_waring(Sys_warn *data)
{
    if( 
            (data->zero_value[0] < LD_NO_WORK_VALUE) && 
   418ac:	108001e8 	cmpgeui	r2,r2,7
   418b0:	1000101e 	bne	r2,zero,418f4 <process_ld_waring+0x70>
            (data->zero_value[1] < LD_NO_WORK_VALUE) && 
            (data->zero_value[2] < LD_NO_WORK_VALUE) && 
   418b4:	e0bfff17 	ldw	r2,-4(fp)
   418b8:	10800d17 	ldw	r2,52(r2)
 */
void process_ld_waring(Sys_warn *data)
{
    if( 
            (data->zero_value[0] < LD_NO_WORK_VALUE) && 
            (data->zero_value[1] < LD_NO_WORK_VALUE) && 
   418bc:	108001e8 	cmpgeui	r2,r2,7
   418c0:	10000c1e 	bne	r2,zero,418f4 <process_ld_waring+0x70>
            (data->zero_value[2] < LD_NO_WORK_VALUE) && 
            (data->zero_value[3] < LD_NO_WORK_VALUE) && 
   418c4:	e0bfff17 	ldw	r2,-4(fp)
   418c8:	10800e17 	ldw	r2,56(r2)
void process_ld_waring(Sys_warn *data)
{
    if( 
            (data->zero_value[0] < LD_NO_WORK_VALUE) && 
            (data->zero_value[1] < LD_NO_WORK_VALUE) && 
            (data->zero_value[2] < LD_NO_WORK_VALUE) && 
   418cc:	108001e8 	cmpgeui	r2,r2,7
   418d0:	1000081e 	bne	r2,zero,418f4 <process_ld_waring+0x70>
            (data->zero_value[3] < LD_NO_WORK_VALUE) && 
            (data->zero_value[4] < LD_NO_WORK_VALUE)
   418d4:	e0bfff17 	ldw	r2,-4(fp)
   418d8:	10800f17 	ldw	r2,60(r2)
{
    if( 
            (data->zero_value[0] < LD_NO_WORK_VALUE) && 
            (data->zero_value[1] < LD_NO_WORK_VALUE) && 
            (data->zero_value[2] < LD_NO_WORK_VALUE) && 
            (data->zero_value[3] < LD_NO_WORK_VALUE) && 
   418dc:	108001e8 	cmpgeui	r2,r2,7
   418e0:	1000041e 	bne	r2,zero,418f4 <process_ld_waring+0x70>
            (data->zero_value[4] < LD_NO_WORK_VALUE)
      )
        data->ld_not_work_alarm = 0x01;
   418e4:	e0bfff17 	ldw	r2,-4(fp)
   418e8:	00c00044 	movi	r3,1
   418ec:	10c00115 	stw	r3,4(r2)
   418f0:	00000206 	br	418fc <process_ld_waring+0x78>
    else
        data->ld_not_work_alarm = 0x00;
   418f4:	e0bfff17 	ldw	r2,-4(fp)
   418f8:	10000115 	stw	zero,4(r2)
}
   418fc:	0001883a 	nop
   41900:	e037883a 	mov	sp,fp
   41904:	df000017 	ldw	fp,0(sp)
   41908:	dec00104 	addi	sp,sp,4
   4190c:	f800283a 	ret

00041910 <process_window_dust_waring>:
 * @brief 连续5次的灰尘计数值大于设定值，报警
 * 
 * @param data 
 */
void process_window_dust_waring(Sys_warn *data)
{
   41910:	defffe04 	addi	sp,sp,-8
   41914:	df000115 	stw	fp,4(sp)
   41918:	df000104 	addi	fp,sp,4
   4191c:	e13fff15 	stw	r4,-4(fp)
    if( 
            (data->dust_cnt[0] > SysPara.dust_threshold) && 
   41920:	e0bfff17 	ldw	r2,-4(fp)
   41924:	10c01017 	ldw	r3,64(r2)
   41928:	008001b4 	movhi	r2,6
   4192c:	10a43504 	addi	r2,r2,-28460
   41930:	10804917 	ldw	r2,292(r2)
 * 
 * @param data 
 */
void process_window_dust_waring(Sys_warn *data)
{
    if( 
   41934:	10c01c2e 	bgeu	r2,r3,419a8 <process_window_dust_waring+0x98>
            (data->dust_cnt[0] > SysPara.dust_threshold) && 
            (data->dust_cnt[1] > SysPara.dust_threshold) && 
   41938:	e0bfff17 	ldw	r2,-4(fp)
   4193c:	10c01117 	ldw	r3,68(r2)
   41940:	008001b4 	movhi	r2,6
   41944:	10a43504 	addi	r2,r2,-28460
   41948:	10804917 	ldw	r2,292(r2)
 * @param data 
 */
void process_window_dust_waring(Sys_warn *data)
{
    if( 
            (data->dust_cnt[0] > SysPara.dust_threshold) && 
   4194c:	10c0162e 	bgeu	r2,r3,419a8 <process_window_dust_waring+0x98>
            (data->dust_cnt[1] > SysPara.dust_threshold) && 
            (data->dust_cnt[2] > SysPara.dust_threshold) && 
   41950:	e0bfff17 	ldw	r2,-4(fp)
   41954:	10c01217 	ldw	r3,72(r2)
   41958:	008001b4 	movhi	r2,6
   4195c:	10a43504 	addi	r2,r2,-28460
   41960:	10804917 	ldw	r2,292(r2)
 */
void process_window_dust_waring(Sys_warn *data)
{
    if( 
            (data->dust_cnt[0] > SysPara.dust_threshold) && 
            (data->dust_cnt[1] > SysPara.dust_threshold) && 
   41964:	10c0102e 	bgeu	r2,r3,419a8 <process_window_dust_waring+0x98>
            (data->dust_cnt[2] > SysPara.dust_threshold) && 
            (data->dust_cnt[3] > SysPara.dust_threshold) && 
   41968:	e0bfff17 	ldw	r2,-4(fp)
   4196c:	10c01317 	ldw	r3,76(r2)
   41970:	008001b4 	movhi	r2,6
   41974:	10a43504 	addi	r2,r2,-28460
   41978:	10804917 	ldw	r2,292(r2)
void process_window_dust_waring(Sys_warn *data)
{
    if( 
            (data->dust_cnt[0] > SysPara.dust_threshold) && 
            (data->dust_cnt[1] > SysPara.dust_threshold) && 
            (data->dust_cnt[2] > SysPara.dust_threshold) && 
   4197c:	10c00a2e 	bgeu	r2,r3,419a8 <process_window_dust_waring+0x98>
            (data->dust_cnt[3] > SysPara.dust_threshold) && 
            (data->dust_cnt[4] > SysPara.dust_threshold)
   41980:	e0bfff17 	ldw	r2,-4(fp)
   41984:	10c01417 	ldw	r3,80(r2)
   41988:	008001b4 	movhi	r2,6
   4198c:	10a43504 	addi	r2,r2,-28460
   41990:	10804917 	ldw	r2,292(r2)
{
    if( 
            (data->dust_cnt[0] > SysPara.dust_threshold) && 
            (data->dust_cnt[1] > SysPara.dust_threshold) && 
            (data->dust_cnt[2] > SysPara.dust_threshold) && 
            (data->dust_cnt[3] > SysPara.dust_threshold) && 
   41994:	10c0042e 	bgeu	r2,r3,419a8 <process_window_dust_waring+0x98>
            (data->dust_cnt[4] > SysPara.dust_threshold)
      )
        data->window_dust_alarm = 0x01;
   41998:	e0bfff17 	ldw	r2,-4(fp)
   4199c:	00c00044 	movi	r3,1
   419a0:	10c00215 	stw	r3,8(r2)
   419a4:	00000206 	br	419b0 <process_window_dust_waring+0xa0>
    else
        data->window_dust_alarm = 0x00;
   419a8:	e0bfff17 	ldw	r2,-4(fp)
   419ac:	10000215 	stw	zero,8(r2)
}
   419b0:	0001883a 	nop
   419b4:	e037883a 	mov	sp,fp
   419b8:	df000017 	ldw	fp,0(sp)
   419bc:	dec00104 	addi	sp,sp,4
   419c0:	f800283a 	ret

000419c4 <process_sys_temp_waring>:


void process_sys_temp_waring(Sys_warn *data)
{
   419c4:	defffc04 	addi	sp,sp,-16
   419c8:	df000315 	stw	fp,12(sp)
   419cc:	df000304 	addi	fp,sp,12
   419d0:	e13fff15 	stw	r4,-4(fp)
    int i;
    unsigned char sign_bit = 0;
   419d4:	e03ffe05 	stb	zero,-8(fp)

    for(i = 0; i < 5; i++)
   419d8:	e03ffd15 	stw	zero,-12(fp)
   419dc:	00003006 	br	41aa0 <process_sys_temp_waring+0xdc>
    {
        sign_bit = (data->temp_value[i] >> 13) & 0x01;
   419e0:	e0ffff17 	ldw	r3,-4(fp)
   419e4:	e0bffd17 	ldw	r2,-12(fp)
   419e8:	10800544 	addi	r2,r2,21
   419ec:	1085883a 	add	r2,r2,r2
   419f0:	1085883a 	add	r2,r2,r2
   419f4:	1885883a 	add	r2,r3,r2
   419f8:	10800017 	ldw	r2,0(r2)
   419fc:	1004d37a 	srli	r2,r2,13
   41a00:	1080004c 	andi	r2,r2,1
   41a04:	e0bffe05 	stb	r2,-8(fp)
        if(sign_bit == 0)  // 温度是正值
   41a08:	e0bffe03 	ldbu	r2,-8(fp)
   41a0c:	1000111e 	bne	r2,zero,41a54 <process_sys_temp_waring+0x90>
        {
            if((data->temp_value[i] & 0x00ff) > TEMP_OUT_VALUE)
   41a10:	e0ffff17 	ldw	r3,-4(fp)
   41a14:	e0bffd17 	ldw	r2,-12(fp)
   41a18:	10800544 	addi	r2,r2,21
   41a1c:	1085883a 	add	r2,r2,r2
   41a20:	1085883a 	add	r2,r2,r2
   41a24:	1885883a 	add	r2,r3,r2
   41a28:	10800017 	ldw	r2,0(r2)
   41a2c:	10803fcc 	andi	r2,r2,255
   41a30:	10801370 	cmpltui	r2,r2,77
   41a34:	1000041e 	bne	r2,zero,41a48 <process_sys_temp_waring+0x84>
                data->temp_out_alarm = 0x01;
   41a38:	e0bfff17 	ldw	r2,-4(fp)
   41a3c:	00c00044 	movi	r3,1
   41a40:	10c00315 	stw	r3,12(r2)
   41a44:	00001306 	br	41a94 <process_sys_temp_waring+0xd0>
            else
                data->temp_out_alarm = 0x00;
   41a48:	e0bfff17 	ldw	r2,-4(fp)
   41a4c:	10000315 	stw	zero,12(r2)
   41a50:	00001006 	br	41a94 <process_sys_temp_waring+0xd0>
        }
        else
        {
            if((data->temp_value[i] & 0x00ff) > 20)
   41a54:	e0ffff17 	ldw	r3,-4(fp)
   41a58:	e0bffd17 	ldw	r2,-12(fp)
   41a5c:	10800544 	addi	r2,r2,21
   41a60:	1085883a 	add	r2,r2,r2
   41a64:	1085883a 	add	r2,r2,r2
   41a68:	1885883a 	add	r2,r3,r2
   41a6c:	10800017 	ldw	r2,0(r2)
   41a70:	10803fcc 	andi	r2,r2,255
   41a74:	10800570 	cmpltui	r2,r2,21
   41a78:	1000041e 	bne	r2,zero,41a8c <process_sys_temp_waring+0xc8>
                data->temp_out_alarm = 0x01;
   41a7c:	e0bfff17 	ldw	r2,-4(fp)
   41a80:	00c00044 	movi	r3,1
   41a84:	10c00315 	stw	r3,12(r2)
   41a88:	00000206 	br	41a94 <process_sys_temp_waring+0xd0>
            else
                data->temp_out_alarm = 0x00;
   41a8c:	e0bfff17 	ldw	r2,-4(fp)
   41a90:	10000315 	stw	zero,12(r2)
void process_sys_temp_waring(Sys_warn *data)
{
    int i;
    unsigned char sign_bit = 0;

    for(i = 0; i < 5; i++)
   41a94:	e0bffd17 	ldw	r2,-12(fp)
   41a98:	10800044 	addi	r2,r2,1
   41a9c:	e0bffd15 	stw	r2,-12(fp)
   41aa0:	e0bffd17 	ldw	r2,-12(fp)
   41aa4:	10800150 	cmplti	r2,r2,5
   41aa8:	103fcd1e 	bne	r2,zero,419e0 <__reset+0xfffc09e0>
                data->temp_out_alarm = 0x01;
            else
                data->temp_out_alarm = 0x00;
        }
    }
}
   41aac:	0001883a 	nop
   41ab0:	e037883a 	mov	sp,fp
   41ab4:	df000017 	ldw	fp,0(sp)
   41ab8:	dec00104 	addi	sp,sp,4
   41abc:	f800283a 	ret

00041ac0 <start>:
 * Name: start
 * Description: IIC启动
 * =================================================================
 */
static void start(void)
{
   41ac0:	defffe04 	addi	sp,sp,-8
   41ac4:	dfc00115 	stw	ra,4(sp)
   41ac8:	df000015 	stw	fp,0(sp)
   41acc:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, OUT);
   41ad0:	00c00044 	movi	r3,1
   41ad4:	00800234 	movhi	r2,8
   41ad8:	10885d04 	addi	r2,r2,8564
   41adc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, 1);
   41ae0:	00c00044 	movi	r3,1
   41ae4:	00800234 	movhi	r2,8
   41ae8:	10885c04 	addi	r2,r2,8560
   41aec:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
   41af0:	00c00044 	movi	r3,1
   41af4:	00800234 	movhi	r2,8
   41af8:	10886004 	addi	r2,r2,8576
   41afc:	10c00035 	stwio	r3,0(r2)
    delay_us(2);
   41b00:	01000084 	movi	r4,2
   41b04:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, 0);
   41b08:	0007883a 	mov	r3,zero
   41b0c:	00800234 	movhi	r2,8
   41b10:	10885c04 	addi	r2,r2,8560
   41b14:	10c00035 	stwio	r3,0(r2)
    delay_us(1);
   41b18:	01000044 	movi	r4,1
   41b1c:	00402c80 	call	402c8 <delay_us>
}
   41b20:	0001883a 	nop
   41b24:	e037883a 	mov	sp,fp
   41b28:	dfc00117 	ldw	ra,4(sp)
   41b2c:	df000017 	ldw	fp,0(sp)
   41b30:	dec00204 	addi	sp,sp,8
   41b34:	f800283a 	ret

00041b38 <stop>:
 * Name: uart_send_byte
 * Description: IIC停止
 * ==================================================================
 */
static void stop(void)
{
   41b38:	defffe04 	addi	sp,sp,-8
   41b3c:	dfc00115 	stw	ra,4(sp)
   41b40:	df000015 	stw	fp,0(sp)
   41b44:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, OUT);
   41b48:	00c00044 	movi	r3,1
   41b4c:	00800234 	movhi	r2,8
   41b50:	10885d04 	addi	r2,r2,8564
   41b54:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, 0);
   41b58:	0007883a 	mov	r3,zero
   41b5c:	00800234 	movhi	r2,8
   41b60:	10885c04 	addi	r2,r2,8560
   41b64:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41b68:	0007883a 	mov	r3,zero
   41b6c:	00800234 	movhi	r2,8
   41b70:	10886004 	addi	r2,r2,8576
   41b74:	10c00035 	stwio	r3,0(r2)
    delay_us(2);
   41b78:	01000084 	movi	r4,2
   41b7c:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
   41b80:	00c00044 	movi	r3,1
   41b84:	00800234 	movhi	r2,8
   41b88:	10886004 	addi	r2,r2,8576
   41b8c:	10c00035 	stwio	r3,0(r2)
    delay_us(1);
   41b90:	01000044 	movi	r4,1
   41b94:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, 1);
   41b98:	00c00044 	movi	r3,1
   41b9c:	00800234 	movhi	r2,8
   41ba0:	10885c04 	addi	r2,r2,8560
   41ba4:	10c00035 	stwio	r3,0(r2)
    delay_us(2);
   41ba8:	01000084 	movi	r4,2
   41bac:	00402c80 	call	402c8 <delay_us>
}
   41bb0:	0001883a 	nop
   41bb4:	e037883a 	mov	sp,fp
   41bb8:	dfc00117 	ldw	ra,4(sp)
   41bbc:	df000017 	ldw	fp,0(sp)
   41bc0:	dec00204 	addi	sp,sp,8
   41bc4:	f800283a 	ret

00041bc8 <wait_slave_ack>:
 * Name: ack
 * Description: IIC应答
 * =================================================================
 */
static void wait_slave_ack(void)
{
   41bc8:	defffd04 	addi	sp,sp,-12
   41bcc:	dfc00215 	stw	ra,8(sp)
   41bd0:	df000115 	stw	fp,4(sp)
   41bd4:	df000104 	addi	fp,sp,4
    alt_u8 tmp;
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41bd8:	0007883a 	mov	r3,zero
   41bdc:	00800234 	movhi	r2,8
   41be0:	10886004 	addi	r2,r2,8576
   41be4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, IN);
   41be8:	0007883a 	mov	r3,zero
   41bec:	00800234 	movhi	r2,8
   41bf0:	10885d04 	addi	r2,r2,8564
   41bf4:	10c00035 	stwio	r3,0(r2)

    delay_us(2);
   41bf8:	01000084 	movi	r4,2
   41bfc:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
   41c00:	00c00044 	movi	r3,1
   41c04:	00800234 	movhi	r2,8
   41c08:	10886004 	addi	r2,r2,8576
   41c0c:	10c00035 	stwio	r3,0(r2)
    delay_us(1);
   41c10:	01000044 	movi	r4,1
   41c14:	00402c80 	call	402c8 <delay_us>
    tmp = IORD_ALTERA_AVALON_PIO_DATA(SDA_BASE);
   41c18:	00800234 	movhi	r2,8
   41c1c:	10885c04 	addi	r2,r2,8560
   41c20:	10800037 	ldwio	r2,0(r2)
   41c24:	e0bfff05 	stb	r2,-4(fp)

    delay_us(1);
   41c28:	01000044 	movi	r4,1
   41c2c:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41c30:	0007883a 	mov	r3,zero
   41c34:	00800234 	movhi	r2,8
   41c38:	10886004 	addi	r2,r2,8576
   41c3c:	10c00035 	stwio	r3,0(r2)
    delay_us(2);
   41c40:	01000084 	movi	r4,2
   41c44:	00402c80 	call	402c8 <delay_us>
    if(tmp == 1)  // 不正确应答
   41c48:	e0bfff03 	ldbu	r2,-4(fp)
   41c4c:	10800058 	cmpnei	r2,r2,1
   41c50:	1000011e 	bne	r2,zero,41c58 <wait_slave_ack+0x90>
        stop();
   41c54:	0041b380 	call	41b38 <stop>
}
   41c58:	0001883a 	nop
   41c5c:	e037883a 	mov	sp,fp
   41c60:	dfc00117 	ldw	ra,4(sp)
   41c64:	df000017 	ldw	fp,0(sp)
   41c68:	dec00204 	addi	sp,sp,8
   41c6c:	f800283a 	ret

00041c70 <master_send_ack>:
/**
 * @brief 主机发送一个低电平的应答信号, 继续读取数据
 * 
 */
static void master_send_ack(void)
{
   41c70:	defffe04 	addi	sp,sp,-8
   41c74:	dfc00115 	stw	ra,4(sp)
   41c78:	df000015 	stw	fp,0(sp)
   41c7c:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41c80:	0007883a 	mov	r3,zero
   41c84:	00800234 	movhi	r2,8
   41c88:	10886004 	addi	r2,r2,8576
   41c8c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, OUT);
   41c90:	00c00044 	movi	r3,1
   41c94:	00800234 	movhi	r2,8
   41c98:	10885d04 	addi	r2,r2,8564
   41c9c:	10c00035 	stwio	r3,0(r2)

    delay_us(2);
   41ca0:	01000084 	movi	r4,2
   41ca4:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, 0);
   41ca8:	0007883a 	mov	r3,zero
   41cac:	00800234 	movhi	r2,8
   41cb0:	10885c04 	addi	r2,r2,8560
   41cb4:	10c00035 	stwio	r3,0(r2)
    delay_us(1);
   41cb8:	01000044 	movi	r4,1
   41cbc:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
   41cc0:	00c00044 	movi	r3,1
   41cc4:	00800234 	movhi	r2,8
   41cc8:	10886004 	addi	r2,r2,8576
   41ccc:	10c00035 	stwio	r3,0(r2)
    delay_us(1);
   41cd0:	01000044 	movi	r4,1
   41cd4:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41cd8:	0007883a 	mov	r3,zero
   41cdc:	00800234 	movhi	r2,8
   41ce0:	10886004 	addi	r2,r2,8576
   41ce4:	10c00035 	stwio	r3,0(r2)
    delay_us(2);
   41ce8:	01000084 	movi	r4,2
   41cec:	00402c80 	call	402c8 <delay_us>
}
   41cf0:	0001883a 	nop
   41cf4:	e037883a 	mov	sp,fp
   41cf8:	dfc00117 	ldw	ra,4(sp)
   41cfc:	df000017 	ldw	fp,0(sp)
   41d00:	dec00204 	addi	sp,sp,8
   41d04:	f800283a 	ret

00041d08 <no_ack>:
/**
 * @brief 
 * 
 */
static void no_ack(void)
{
   41d08:	defffe04 	addi	sp,sp,-8
   41d0c:	dfc00115 	stw	ra,4(sp)
   41d10:	df000015 	stw	fp,0(sp)
   41d14:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41d18:	0007883a 	mov	r3,zero
   41d1c:	00800234 	movhi	r2,8
   41d20:	10886004 	addi	r2,r2,8576
   41d24:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, OUT);
   41d28:	00c00044 	movi	r3,1
   41d2c:	00800234 	movhi	r2,8
   41d30:	10885d04 	addi	r2,r2,8564
   41d34:	10c00035 	stwio	r3,0(r2)
    delay_us(2);
   41d38:	01000084 	movi	r4,2
   41d3c:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, 1);
   41d40:	00c00044 	movi	r3,1
   41d44:	00800234 	movhi	r2,8
   41d48:	10885c04 	addi	r2,r2,8560
   41d4c:	10c00035 	stwio	r3,0(r2)
    delay_us(1);
   41d50:	01000044 	movi	r4,1
   41d54:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
   41d58:	00c00044 	movi	r3,1
   41d5c:	00800234 	movhi	r2,8
   41d60:	10886004 	addi	r2,r2,8576
   41d64:	10c00035 	stwio	r3,0(r2)
    delay_us(1);
   41d68:	01000044 	movi	r4,1
   41d6c:	00402c80 	call	402c8 <delay_us>
    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41d70:	0007883a 	mov	r3,zero
   41d74:	00800234 	movhi	r2,8
   41d78:	10886004 	addi	r2,r2,8576
   41d7c:	10c00035 	stwio	r3,0(r2)
    delay_us(2);
   41d80:	01000084 	movi	r4,2
   41d84:	00402c80 	call	402c8 <delay_us>
}
   41d88:	0001883a 	nop
   41d8c:	e037883a 	mov	sp,fp
   41d90:	dfc00117 	ldw	ra,4(sp)
   41d94:	df000017 	ldw	fp,0(sp)
   41d98:	dec00204 	addi	sp,sp,8
   41d9c:	f800283a 	ret

00041da0 <iic_write>:
 * Name: iic_write
 * Description: IIC写一个字节
 * =================================================================
 */
void iic_write(alt_u8 dat)
{
   41da0:	defffc04 	addi	sp,sp,-16
   41da4:	dfc00315 	stw	ra,12(sp)
   41da8:	df000215 	stw	fp,8(sp)
   41dac:	df000204 	addi	fp,sp,8
   41db0:	2005883a 	mov	r2,r4
   41db4:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 i, tmp;
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, OUT);
   41db8:	00c00044 	movi	r3,1
   41dbc:	00800234 	movhi	r2,8
   41dc0:	10885d04 	addi	r2,r2,8564
   41dc4:	10c00035 	stwio	r3,0(r2)
    for(i = 0; i < 8; i++)
   41dc8:	e03ffe05 	stb	zero,-8(fp)
   41dcc:	00001c06 	br	41e40 <iic_write+0xa0>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41dd0:	0007883a 	mov	r3,zero
   41dd4:	00800234 	movhi	r2,8
   41dd8:	10886004 	addi	r2,r2,8576
   41ddc:	10c00035 	stwio	r3,0(r2)
        delay_us(2);
   41de0:	01000084 	movi	r4,2
   41de4:	00402c80 	call	402c8 <delay_us>
        tmp = (dat & 0x80) ? 1 : 0;
   41de8:	e0bfff03 	ldbu	r2,-4(fp)
   41dec:	10803fcc 	andi	r2,r2,255
   41df0:	1004d1fa 	srli	r2,r2,7
   41df4:	e0bffe45 	stb	r2,-7(fp)
        dat <<= 1;
   41df8:	e0bfff03 	ldbu	r2,-4(fp)
   41dfc:	1085883a 	add	r2,r2,r2
   41e00:	e0bfff05 	stb	r2,-4(fp)
        IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, tmp);
   41e04:	e0fffe43 	ldbu	r3,-7(fp)
   41e08:	00800234 	movhi	r2,8
   41e0c:	10885c04 	addi	r2,r2,8560
   41e10:	10c00035 	stwio	r3,0(r2)
        delay_us(1);
   41e14:	01000044 	movi	r4,1
   41e18:	00402c80 	call	402c8 <delay_us>
        IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
   41e1c:	00c00044 	movi	r3,1
   41e20:	00800234 	movhi	r2,8
   41e24:	10886004 	addi	r2,r2,8576
   41e28:	10c00035 	stwio	r3,0(r2)
        delay_us(2);
   41e2c:	01000084 	movi	r4,2
   41e30:	00402c80 	call	402c8 <delay_us>
 */
void iic_write(alt_u8 dat)
{
    alt_u8 i, tmp;
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, OUT);
    for(i = 0; i < 8; i++)
   41e34:	e0bffe03 	ldbu	r2,-8(fp)
   41e38:	10800044 	addi	r2,r2,1
   41e3c:	e0bffe05 	stb	r2,-8(fp)
   41e40:	e0bffe03 	ldbu	r2,-8(fp)
   41e44:	10800230 	cmpltui	r2,r2,8
   41e48:	103fe11e 	bne	r2,zero,41dd0 <__reset+0xfffc0dd0>
        IOWR_ALTERA_AVALON_PIO_DATA(SDA_BASE, tmp);
        delay_us(1);
        IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
        delay_us(2);
    }
}
   41e4c:	0001883a 	nop
   41e50:	e037883a 	mov	sp,fp
   41e54:	dfc00117 	ldw	ra,4(sp)
   41e58:	df000017 	ldw	fp,0(sp)
   41e5c:	dec00204 	addi	sp,sp,8
   41e60:	f800283a 	ret

00041e64 <iic_read>:
 * Name: read
 * Description: IIC读一个字节
 * ==================================================================
 */
static alt_u8 iic_read(void)
{
   41e64:	defffd04 	addi	sp,sp,-12
   41e68:	dfc00215 	stw	ra,8(sp)
   41e6c:	df000115 	stw	fp,4(sp)
   41e70:	df000104 	addi	fp,sp,4
    alt_u8 i, dat = 0;
   41e74:	e03fff45 	stb	zero,-3(fp)
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, IN);
   41e78:	0007883a 	mov	r3,zero
   41e7c:	00800234 	movhi	r2,8
   41e80:	10885d04 	addi	r2,r2,8564
   41e84:	10c00035 	stwio	r3,0(r2)
    for(i = 0; i < 8; i++)
   41e88:	e03fff05 	stb	zero,-4(fp)
   41e8c:	00001b06 	br	41efc <iic_read+0x98>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
   41e90:	0007883a 	mov	r3,zero
   41e94:	00800234 	movhi	r2,8
   41e98:	10886004 	addi	r2,r2,8576
   41e9c:	10c00035 	stwio	r3,0(r2)
        delay_us(2);
   41ea0:	01000084 	movi	r4,2
   41ea4:	00402c80 	call	402c8 <delay_us>
        IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
   41ea8:	00c00044 	movi	r3,1
   41eac:	00800234 	movhi	r2,8
   41eb0:	10886004 	addi	r2,r2,8576
   41eb4:	10c00035 	stwio	r3,0(r2)
        delay_us(1);
   41eb8:	01000044 	movi	r4,1
   41ebc:	00402c80 	call	402c8 <delay_us>
        dat <<= 1;
   41ec0:	e0bfff43 	ldbu	r2,-3(fp)
   41ec4:	1085883a 	add	r2,r2,r2
   41ec8:	e0bfff45 	stb	r2,-3(fp)
        dat |= IORD_ALTERA_AVALON_PIO_DATA(SDA_BASE);
   41ecc:	00800234 	movhi	r2,8
   41ed0:	10885c04 	addi	r2,r2,8560
   41ed4:	10800037 	ldwio	r2,0(r2)
   41ed8:	1007883a 	mov	r3,r2
   41edc:	e0bfff43 	ldbu	r2,-3(fp)
   41ee0:	1884b03a 	or	r2,r3,r2
   41ee4:	e0bfff45 	stb	r2,-3(fp)
        delay_us(1);
   41ee8:	01000044 	movi	r4,1
   41eec:	00402c80 	call	402c8 <delay_us>
 */
static alt_u8 iic_read(void)
{
    alt_u8 i, dat = 0;
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SDA_BASE, IN);
    for(i = 0; i < 8; i++)
   41ef0:	e0bfff03 	ldbu	r2,-4(fp)
   41ef4:	10800044 	addi	r2,r2,1
   41ef8:	e0bfff05 	stb	r2,-4(fp)
   41efc:	e0bfff03 	ldbu	r2,-4(fp)
   41f00:	10800230 	cmpltui	r2,r2,8
   41f04:	103fe21e 	bne	r2,zero,41e90 <__reset+0xfffc0e90>
        delay_us(1);
        dat <<= 1;
        dat |= IORD_ALTERA_AVALON_PIO_DATA(SDA_BASE);
        delay_us(1);
    }
    delay_us(1);
   41f08:	01000044 	movi	r4,1
   41f0c:	00402c80 	call	402c8 <delay_us>
    //    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
    //    delay_us(1);
    //    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 1);
    //    delay_us(1);
    //    IOWR_ALTERA_AVALON_PIO_DATA(SCL_BASE, 0);
    return dat;
   41f10:	e0bfff43 	ldbu	r2,-3(fp)
}
   41f14:	e037883a 	mov	sp,fp
   41f18:	dfc00117 	ldw	ra,4(sp)
   41f1c:	df000017 	ldw	fp,0(sp)
   41f20:	dec00204 	addi	sp,sp,8
   41f24:	f800283a 	ret

00041f28 <eeprom_write_byte>:
 * @brief 向EEPROM写一个字节. 注意E2PROM的固有写入时间
 * @param addr
 * @param dat
 */
void eeprom_write_byte(alt_u32 addr, alt_u8 dat)
{
   41f28:	defffb04 	addi	sp,sp,-20
   41f2c:	dfc00415 	stw	ra,16(sp)
   41f30:	df000315 	stw	fp,12(sp)
   41f34:	df000304 	addi	fp,sp,12
   41f38:	e13ffe15 	stw	r4,-8(fp)
   41f3c:	2805883a 	mov	r2,r5
   41f40:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 cmd;
    cmd = 0xa0 | ((addr >> 15) & 0x02);
   41f44:	e0bffe17 	ldw	r2,-8(fp)
   41f48:	1004d3fa 	srli	r2,r2,15
   41f4c:	1080008c 	andi	r2,r2,2
   41f50:	1007883a 	mov	r3,r2
   41f54:	00bfe804 	movi	r2,-96
   41f58:	1884b03a 	or	r2,r3,r2
   41f5c:	e0bffd05 	stb	r2,-12(fp)
    start();
   41f60:	0041ac00 	call	41ac0 <start>
    iic_write(cmd);
   41f64:	e0bffd03 	ldbu	r2,-12(fp)
   41f68:	1009883a 	mov	r4,r2
   41f6c:	0041da00 	call	41da0 <iic_write>
    wait_slave_ack();
   41f70:	0041bc80 	call	41bc8 <wait_slave_ack>
    iic_write((addr >> 8) & 0xff);
   41f74:	e0bffe17 	ldw	r2,-8(fp)
   41f78:	1004d23a 	srli	r2,r2,8
   41f7c:	10803fcc 	andi	r2,r2,255
   41f80:	1009883a 	mov	r4,r2
   41f84:	0041da00 	call	41da0 <iic_write>
    wait_slave_ack();
   41f88:	0041bc80 	call	41bc8 <wait_slave_ack>
    iic_write((addr >> 0) & 0xff);
   41f8c:	e0bffe17 	ldw	r2,-8(fp)
   41f90:	10803fcc 	andi	r2,r2,255
   41f94:	1009883a 	mov	r4,r2
   41f98:	0041da00 	call	41da0 <iic_write>
    wait_slave_ack();
   41f9c:	0041bc80 	call	41bc8 <wait_slave_ack>
    iic_write(dat);
   41fa0:	e0bfff03 	ldbu	r2,-4(fp)
   41fa4:	1009883a 	mov	r4,r2
   41fa8:	0041da00 	call	41da0 <iic_write>
    wait_slave_ack();
   41fac:	0041bc80 	call	41bc8 <wait_slave_ack>
    stop();
   41fb0:	0041b380 	call	41b38 <stop>
    delay_us(2500);
   41fb4:	01027104 	movi	r4,2500
   41fb8:	00402c80 	call	402c8 <delay_us>
}
   41fbc:	0001883a 	nop
   41fc0:	e037883a 	mov	sp,fp
   41fc4:	dfc00117 	ldw	ra,4(sp)
   41fc8:	df000017 	ldw	fp,0(sp)
   41fcc:	dec00204 	addi	sp,sp,8
   41fd0:	f800283a 	ret

00041fd4 <eeprom_write_page>:
 * @param addr, 要写入E2PROM的起始地址
 * @param dat, 地址指针
 * @param len, 写入数据长度
 */
void eeprom_write_page(alt_u32 addr, alt_u8 *dat, alt_u16 len)
{
   41fd4:	defff804 	addi	sp,sp,-32
   41fd8:	dfc00715 	stw	ra,28(sp)
   41fdc:	df000615 	stw	fp,24(sp)
   41fe0:	df000604 	addi	fp,sp,24
   41fe4:	e13ffd15 	stw	r4,-12(fp)
   41fe8:	e17ffe15 	stw	r5,-8(fp)
   41fec:	3005883a 	mov	r2,r6
   41ff0:	e0bfff0d 	sth	r2,-4(fp)
    alt_u16 i, j;
    alt_u8  number, remain;
    alt_32  i2c_addr;

    // 最高位地址放到bit6上
    cmd = 0xa0 | ((addr >> 15) & 0x02);
   41ff4:	e0bffd17 	ldw	r2,-12(fp)
   41ff8:	1004d3fa 	srli	r2,r2,15
   41ffc:	1080008c 	andi	r2,r2,2
   42000:	1007883a 	mov	r3,r2
   42004:	00bfe804 	movi	r2,-96
   42008:	1884b03a 	or	r2,r3,r2
   4200c:	e0bffb05 	stb	r2,-20(fp)

    number = len / EEPROM_PAGE_SIZE;
   42010:	e0bfff0b 	ldhu	r2,-4(fp)
   42014:	1004d23a 	srli	r2,r2,8
   42018:	e0bffb45 	stb	r2,-19(fp)
    remain = len % EEPROM_PAGE_SIZE;
   4201c:	e0bfff0b 	ldhu	r2,-4(fp)
   42020:	e0bffb85 	stb	r2,-18(fp)

    for(i = 0; i < number; i++)
   42024:	e03ffa0d 	sth	zero,-24(fp)
   42028:	00003006 	br	420ec <eeprom_write_page+0x118>
    {
        i2c_addr = addr + i * EEPROM_PAGE_SIZE;
   4202c:	e0bffa0b 	ldhu	r2,-24(fp)
   42030:	1004923a 	slli	r2,r2,8
   42034:	1007883a 	mov	r3,r2
   42038:	e0bffd17 	ldw	r2,-12(fp)
   4203c:	1885883a 	add	r2,r3,r2
   42040:	e0bffc15 	stw	r2,-16(fp)
        start();
   42044:	0041ac00 	call	41ac0 <start>
        iic_write(cmd);
   42048:	e0bffb03 	ldbu	r2,-20(fp)
   4204c:	1009883a 	mov	r4,r2
   42050:	0041da00 	call	41da0 <iic_write>
        wait_slave_ack();
   42054:	0041bc80 	call	41bc8 <wait_slave_ack>
        iic_write((i2c_addr >> 8) & 0xff);
   42058:	e0bffc17 	ldw	r2,-16(fp)
   4205c:	1005d23a 	srai	r2,r2,8
   42060:	10803fcc 	andi	r2,r2,255
   42064:	1009883a 	mov	r4,r2
   42068:	0041da00 	call	41da0 <iic_write>
        wait_slave_ack();
   4206c:	0041bc80 	call	41bc8 <wait_slave_ack>
        iic_write((i2c_addr >> 0) & 0xff);
   42070:	e0bffc17 	ldw	r2,-16(fp)
   42074:	10803fcc 	andi	r2,r2,255
   42078:	1009883a 	mov	r4,r2
   4207c:	0041da00 	call	41da0 <iic_write>
        wait_slave_ack();
   42080:	0041bc80 	call	41bc8 <wait_slave_ack>
        for(j = 0; j < EEPROM_PAGE_SIZE; j++)
   42084:	e03ffa8d 	sth	zero,-22(fp)
   42088:	00000f06 	br	420c8 <eeprom_write_page+0xf4>
        {
            iic_write(dat[i * EEPROM_PAGE_SIZE + j]);
   4208c:	e0bffa0b 	ldhu	r2,-24(fp)
   42090:	1006923a 	slli	r3,r2,8
   42094:	e0bffa8b 	ldhu	r2,-22(fp)
   42098:	1885883a 	add	r2,r3,r2
   4209c:	1007883a 	mov	r3,r2
   420a0:	e0bffe17 	ldw	r2,-8(fp)
   420a4:	10c5883a 	add	r2,r2,r3
   420a8:	10800003 	ldbu	r2,0(r2)
   420ac:	10803fcc 	andi	r2,r2,255
   420b0:	1009883a 	mov	r4,r2
   420b4:	0041da00 	call	41da0 <iic_write>
            wait_slave_ack();
   420b8:	0041bc80 	call	41bc8 <wait_slave_ack>
        wait_slave_ack();
        iic_write((i2c_addr >> 8) & 0xff);
        wait_slave_ack();
        iic_write((i2c_addr >> 0) & 0xff);
        wait_slave_ack();
        for(j = 0; j < EEPROM_PAGE_SIZE; j++)
   420bc:	e0bffa8b 	ldhu	r2,-22(fp)
   420c0:	10800044 	addi	r2,r2,1
   420c4:	e0bffa8d 	sth	r2,-22(fp)
   420c8:	e0bffa8b 	ldhu	r2,-22(fp)
   420cc:	10804030 	cmpltui	r2,r2,256
   420d0:	103fee1e 	bne	r2,zero,4208c <__reset+0xfffc108c>
        {
            iic_write(dat[i * EEPROM_PAGE_SIZE + j]);
            wait_slave_ack();
        }
        stop();
   420d4:	0041b380 	call	41b38 <stop>
        delay_us(10000);
   420d8:	0109c404 	movi	r4,10000
   420dc:	00402c80 	call	402c8 <delay_us>
    cmd = 0xa0 | ((addr >> 15) & 0x02);

    number = len / EEPROM_PAGE_SIZE;
    remain = len % EEPROM_PAGE_SIZE;

    for(i = 0; i < number; i++)
   420e0:	e0bffa0b 	ldhu	r2,-24(fp)
   420e4:	10800044 	addi	r2,r2,1
   420e8:	e0bffa0d 	sth	r2,-24(fp)
   420ec:	e0bffb43 	ldbu	r2,-19(fp)
   420f0:	10bfffcc 	andi	r2,r2,65535
   420f4:	e0fffa0b 	ldhu	r3,-24(fp)
   420f8:	18bfcc36 	bltu	r3,r2,4202c <__reset+0xfffc102c>
        }
        stop();
        delay_us(10000);
        //        usleep(5000);
    }
    if(remain != 0)
   420fc:	e0bffb83 	ldbu	r2,-18(fp)
   42100:	10002e26 	beq	r2,zero,421bc <eeprom_write_page+0x1e8>
    {
        i2c_addr = addr + number * EEPROM_PAGE_SIZE;
   42104:	e0bffb43 	ldbu	r2,-19(fp)
   42108:	1004923a 	slli	r2,r2,8
   4210c:	1007883a 	mov	r3,r2
   42110:	e0bffd17 	ldw	r2,-12(fp)
   42114:	1885883a 	add	r2,r3,r2
   42118:	e0bffc15 	stw	r2,-16(fp)
        start();
   4211c:	0041ac00 	call	41ac0 <start>
        iic_write(cmd);
   42120:	e0bffb03 	ldbu	r2,-20(fp)
   42124:	1009883a 	mov	r4,r2
   42128:	0041da00 	call	41da0 <iic_write>
        wait_slave_ack();
   4212c:	0041bc80 	call	41bc8 <wait_slave_ack>
        iic_write((i2c_addr >> 8) & 0xff);
   42130:	e0bffc17 	ldw	r2,-16(fp)
   42134:	1005d23a 	srai	r2,r2,8
   42138:	10803fcc 	andi	r2,r2,255
   4213c:	1009883a 	mov	r4,r2
   42140:	0041da00 	call	41da0 <iic_write>
        wait_slave_ack();
   42144:	0041bc80 	call	41bc8 <wait_slave_ack>
        iic_write((i2c_addr >> 0) & 0xff);
   42148:	e0bffc17 	ldw	r2,-16(fp)
   4214c:	10803fcc 	andi	r2,r2,255
   42150:	1009883a 	mov	r4,r2
   42154:	0041da00 	call	41da0 <iic_write>
        wait_slave_ack();
   42158:	0041bc80 	call	41bc8 <wait_slave_ack>
        for(j = 0; j < remain; j++)
   4215c:	e03ffa8d 	sth	zero,-22(fp)
   42160:	00000f06 	br	421a0 <eeprom_write_page+0x1cc>
        {
            iic_write(dat[number * EEPROM_PAGE_SIZE + j]);
   42164:	e0bffb43 	ldbu	r2,-19(fp)
   42168:	1006923a 	slli	r3,r2,8
   4216c:	e0bffa8b 	ldhu	r2,-22(fp)
   42170:	1885883a 	add	r2,r3,r2
   42174:	1007883a 	mov	r3,r2
   42178:	e0bffe17 	ldw	r2,-8(fp)
   4217c:	10c5883a 	add	r2,r2,r3
   42180:	10800003 	ldbu	r2,0(r2)
   42184:	10803fcc 	andi	r2,r2,255
   42188:	1009883a 	mov	r4,r2
   4218c:	0041da00 	call	41da0 <iic_write>
            wait_slave_ack();
   42190:	0041bc80 	call	41bc8 <wait_slave_ack>
        wait_slave_ack();
        iic_write((i2c_addr >> 8) & 0xff);
        wait_slave_ack();
        iic_write((i2c_addr >> 0) & 0xff);
        wait_slave_ack();
        for(j = 0; j < remain; j++)
   42194:	e0bffa8b 	ldhu	r2,-22(fp)
   42198:	10800044 	addi	r2,r2,1
   4219c:	e0bffa8d 	sth	r2,-22(fp)
   421a0:	e0bffb83 	ldbu	r2,-18(fp)
   421a4:	10bfffcc 	andi	r2,r2,65535
   421a8:	e0fffa8b 	ldhu	r3,-22(fp)
   421ac:	18bfed36 	bltu	r3,r2,42164 <__reset+0xfffc1164>
        {
            iic_write(dat[number * EEPROM_PAGE_SIZE + j]);
            wait_slave_ack();
        }
        stop();
   421b0:	0041b380 	call	41b38 <stop>
        delay_us(10000);
   421b4:	0109c404 	movi	r4,10000
   421b8:	00402c80 	call	402c8 <delay_us>
        //        usleep(5000);
    }
}
   421bc:	0001883a 	nop
   421c0:	e037883a 	mov	sp,fp
   421c4:	dfc00117 	ldw	ra,4(sp)
   421c8:	df000017 	ldw	fp,0(sp)
   421cc:	dec00204 	addi	sp,sp,8
   421d0:	f800283a 	ret

000421d4 <eeprom_read_byte>:
 * Name: read_byte
 * Description: 从EEPROM读一个字节
 * =================================================================
 */
alt_u8 eeprom_read_byte(alt_u32 addr)
{
   421d4:	defffc04 	addi	sp,sp,-16
   421d8:	dfc00315 	stw	ra,12(sp)
   421dc:	df000215 	stw	fp,8(sp)
   421e0:	df000204 	addi	fp,sp,8
   421e4:	e13fff15 	stw	r4,-4(fp)
    alt_u8 cmd, dat;

    if(addr > AT24C1024_MAX_ADDR)
   421e8:	e0ffff17 	ldw	r3,-4(fp)
   421ec:	008000b4 	movhi	r2,2
   421f0:	10b53004 	addi	r2,r2,-11072
   421f4:	10c0022e 	bgeu	r2,r3,42200 <eeprom_read_byte+0x2c>
        return 0xff;
   421f8:	00bfffc4 	movi	r2,-1
   421fc:	00002406 	br	42290 <eeprom_read_byte+0xbc>

    cmd = 0xa0 | ((addr >> 15) & 0x02);
   42200:	e0bfff17 	ldw	r2,-4(fp)
   42204:	1004d3fa 	srli	r2,r2,15
   42208:	1080008c 	andi	r2,r2,2
   4220c:	1007883a 	mov	r3,r2
   42210:	00bfe804 	movi	r2,-96
   42214:	1884b03a 	or	r2,r3,r2
   42218:	e0bffe05 	stb	r2,-8(fp)
    start();
   4221c:	0041ac00 	call	41ac0 <start>
    iic_write(cmd);
   42220:	e0bffe03 	ldbu	r2,-8(fp)
   42224:	1009883a 	mov	r4,r2
   42228:	0041da00 	call	41da0 <iic_write>
    wait_slave_ack();
   4222c:	0041bc80 	call	41bc8 <wait_slave_ack>
    iic_write((addr >> 8) & 0xff);
   42230:	e0bfff17 	ldw	r2,-4(fp)
   42234:	1004d23a 	srli	r2,r2,8
   42238:	10803fcc 	andi	r2,r2,255
   4223c:	1009883a 	mov	r4,r2
   42240:	0041da00 	call	41da0 <iic_write>
    wait_slave_ack();
   42244:	0041bc80 	call	41bc8 <wait_slave_ack>
    iic_write((addr >> 0) & 0xff);
   42248:	e0bfff17 	ldw	r2,-4(fp)
   4224c:	10803fcc 	andi	r2,r2,255
   42250:	1009883a 	mov	r4,r2
   42254:	0041da00 	call	41da0 <iic_write>
    wait_slave_ack();
   42258:	0041bc80 	call	41bc8 <wait_slave_ack>
    cmd |= 0x01;
   4225c:	e0bffe03 	ldbu	r2,-8(fp)
   42260:	10800054 	ori	r2,r2,1
   42264:	e0bffe05 	stb	r2,-8(fp)
    start();
   42268:	0041ac00 	call	41ac0 <start>
    iic_write(cmd);
   4226c:	e0bffe03 	ldbu	r2,-8(fp)
   42270:	1009883a 	mov	r4,r2
   42274:	0041da00 	call	41da0 <iic_write>
    wait_slave_ack();
   42278:	0041bc80 	call	41bc8 <wait_slave_ack>
    dat = iic_read();
   4227c:	0041e640 	call	41e64 <iic_read>
   42280:	e0bffe45 	stb	r2,-7(fp)
    no_ack();
   42284:	0041d080 	call	41d08 <no_ack>
    stop();
   42288:	0041b380 	call	41b38 <stop>
    return dat;
   4228c:	e0bffe43 	ldbu	r2,-7(fp)
}
   42290:	e037883a 	mov	sp,fp
   42294:	dfc00117 	ldw	ra,4(sp)
   42298:	df000017 	ldw	fp,0(sp)
   4229c:	dec00204 	addi	sp,sp,8
   422a0:	f800283a 	ret

000422a4 <eeprom_sequential_read>:

void eeprom_sequential_read(alt_u32 addr, alt_u8 *dat, alt_u16 len)
{
   422a4:	defffa04 	addi	sp,sp,-24
   422a8:	dfc00515 	stw	ra,20(sp)
   422ac:	df000415 	stw	fp,16(sp)
   422b0:	df000404 	addi	fp,sp,16
   422b4:	e13ffd15 	stw	r4,-12(fp)
   422b8:	e17ffe15 	stw	r5,-8(fp)
   422bc:	3005883a 	mov	r2,r6
   422c0:	e0bfff0d 	sth	r2,-4(fp)
    alt_u16 i;
    alt_u8  cmd;
    if(addr > AT24C1024_MAX_ADDR)
   422c4:	e0fffd17 	ldw	r3,-12(fp)
   422c8:	008000b4 	movhi	r2,2
   422cc:	10b53004 	addi	r2,r2,-11072
   422d0:	10c03436 	bltu	r2,r3,423a4 <eeprom_sequential_read+0x100>
        return;
    cmd = 0xa0 | ((addr >> 15) & 0x02);
   422d4:	e0bffd17 	ldw	r2,-12(fp)
   422d8:	1004d3fa 	srli	r2,r2,15
   422dc:	1080008c 	andi	r2,r2,2
   422e0:	1007883a 	mov	r3,r2
   422e4:	00bfe804 	movi	r2,-96
   422e8:	1884b03a 	or	r2,r3,r2
   422ec:	e0bffc85 	stb	r2,-14(fp)
    start();
   422f0:	0041ac00 	call	41ac0 <start>
    iic_write(cmd);
   422f4:	e0bffc83 	ldbu	r2,-14(fp)
   422f8:	1009883a 	mov	r4,r2
   422fc:	0041da00 	call	41da0 <iic_write>
    wait_slave_ack();
   42300:	0041bc80 	call	41bc8 <wait_slave_ack>
    iic_write((addr >> 8) & 0xff);
   42304:	e0bffd17 	ldw	r2,-12(fp)
   42308:	1004d23a 	srli	r2,r2,8
   4230c:	10803fcc 	andi	r2,r2,255
   42310:	1009883a 	mov	r4,r2
   42314:	0041da00 	call	41da0 <iic_write>
    wait_slave_ack();
   42318:	0041bc80 	call	41bc8 <wait_slave_ack>
    iic_write((addr >> 0) & 0xff);
   4231c:	e0bffd17 	ldw	r2,-12(fp)
   42320:	10803fcc 	andi	r2,r2,255
   42324:	1009883a 	mov	r4,r2
   42328:	0041da00 	call	41da0 <iic_write>
    wait_slave_ack();
   4232c:	0041bc80 	call	41bc8 <wait_slave_ack>
    cmd |= 0x01;
   42330:	e0bffc83 	ldbu	r2,-14(fp)
   42334:	10800054 	ori	r2,r2,1
   42338:	e0bffc85 	stb	r2,-14(fp)
    start();
   4233c:	0041ac00 	call	41ac0 <start>
    iic_write(cmd);
   42340:	e0bffc83 	ldbu	r2,-14(fp)
   42344:	1009883a 	mov	r4,r2
   42348:	0041da00 	call	41da0 <iic_write>
    wait_slave_ack();
   4234c:	0041bc80 	call	41bc8 <wait_slave_ack>
    //    dat = iic_read();

    for(i = 0; i < len; i++)
   42350:	e03ffc0d 	sth	zero,-16(fp)
   42354:	00000b06 	br	42384 <eeprom_sequential_read+0xe0>
    {
        *dat = iic_read();
   42358:	0041e640 	call	41e64 <iic_read>
   4235c:	1007883a 	mov	r3,r2
   42360:	e0bffe17 	ldw	r2,-8(fp)
   42364:	10c00005 	stb	r3,0(r2)
        master_send_ack();
   42368:	0041c700 	call	41c70 <master_send_ack>
        dat++;
   4236c:	e0bffe17 	ldw	r2,-8(fp)
   42370:	10800044 	addi	r2,r2,1
   42374:	e0bffe15 	stw	r2,-8(fp)
    start();
    iic_write(cmd);
    wait_slave_ack();
    //    dat = iic_read();

    for(i = 0; i < len; i++)
   42378:	e0bffc0b 	ldhu	r2,-16(fp)
   4237c:	10800044 	addi	r2,r2,1
   42380:	e0bffc0d 	sth	r2,-16(fp)
   42384:	e0fffc0b 	ldhu	r3,-16(fp)
   42388:	e0bfff0b 	ldhu	r2,-4(fp)
   4238c:	18bff236 	bltu	r3,r2,42358 <__reset+0xfffc1358>
    {
        *dat = iic_read();
        master_send_ack();
        dat++;
    }
    no_ack();
   42390:	0041d080 	call	41d08 <no_ack>
    stop();
   42394:	0041b380 	call	41b38 <stop>
    eeprom_read_byte(addr);
   42398:	e13ffd17 	ldw	r4,-12(fp)
   4239c:	00421d40 	call	421d4 <eeprom_read_byte>
   423a0:	00000106 	br	423a8 <eeprom_sequential_read+0x104>
void eeprom_sequential_read(alt_u32 addr, alt_u8 *dat, alt_u16 len)
{
    alt_u16 i;
    alt_u8  cmd;
    if(addr > AT24C1024_MAX_ADDR)
        return;
   423a4:	0001883a 	nop
        dat++;
    }
    no_ack();
    stop();
    eeprom_read_byte(addr);
}
   423a8:	e037883a 	mov	sp,fp
   423ac:	dfc00117 	ldw	ra,4(sp)
   423b0:	df000017 	ldw	fp,0(sp)
   423b4:	dec00204 	addi	sp,sp,8
   423b8:	f800283a 	ret

000423bc <led_power_light>:

led_time_flag_t led_time_flag;

// 电源指示灯 绿色
void led_power_light(unsigned char status)
{
   423bc:	defffe04 	addi	sp,sp,-8
   423c0:	df000115 	stw	fp,4(sp)
   423c4:	df000104 	addi	fp,sp,4
   423c8:	2005883a 	mov	r2,r4
   423cc:	e0bfff05 	stb	r2,-4(fp)
    IOWR_ALTERA_AVALON_PIO_DATA(POWER_LED_BASE, status);
   423d0:	e0ffff03 	ldbu	r3,-4(fp)
   423d4:	00800234 	movhi	r2,8
   423d8:	10885804 	addi	r2,r2,8544
   423dc:	10c00035 	stwio	r3,0(r2)
}
   423e0:	0001883a 	nop
   423e4:	e037883a 	mov	sp,fp
   423e8:	df000017 	ldw	fp,0(sp)
   423ec:	dec00104 	addi	sp,sp,4
   423f0:	f800283a 	ret

000423f4 <led_status_light>:

// 状态指示灯 红色
void led_status_light(unsigned char status)
{
   423f4:	defffe04 	addi	sp,sp,-8
   423f8:	df000115 	stw	fp,4(sp)
   423fc:	df000104 	addi	fp,sp,4
   42400:	2005883a 	mov	r2,r4
   42404:	e0bfff05 	stb	r2,-4(fp)
    IOWR_ALTERA_AVALON_PIO_DATA(STATUS_LED_BASE, status);
   42408:	e0ffff03 	ldbu	r3,-4(fp)
   4240c:	00800234 	movhi	r2,8
   42410:	10885404 	addi	r2,r2,8528
   42414:	10c00035 	stwio	r3,0(r2)
}
   42418:	0001883a 	nop
   4241c:	e037883a 	mov	sp,fp
   42420:	df000017 	ldw	fp,0(sp)
   42424:	dec00104 	addi	sp,sp,4
   42428:	f800283a 	ret

0004242c <init_avalon_fifo>:
#include "socket.h"
#include "user_interrupt.h"
#include "w5500.h"

void init_avalon_fifo(void)
{
   4242c:	defffe04 	addi	sp,sp,-8
   42430:	dfc00115 	stw	ra,4(sp)
   42434:	df000015 	stw	fp,0(sp)
   42438:	d839883a 	mov	fp,sp
    altera_avalon_fifo_init(PROTOCOL_FIFO_IN_CSR_BASE, 0, 2, PROTOCOL_FIFO_IN_FIFO_DEPTH - 2);
   4243c:	01c0ff84 	movi	r7,1022
   42440:	01800084 	movi	r6,2
   42444:	000b883a 	mov	r5,zero
   42448:	01000234 	movhi	r4,8
   4244c:	21084004 	addi	r4,r4,8448
   42450:	004a4e80 	call	4a4e8 <altera_avalon_fifo_init>
    altera_avalon_fifo_init(LASER_FIFO_IN_CSR_BASE, 0, 2, LASER_FIFO_OUT_FIFO_DEPTH - 2);
   42454:	01c1ff84 	movi	r7,2046
   42458:	01800084 	movi	r6,2
   4245c:	000b883a 	mov	r5,zero
   42460:	01000234 	movhi	r4,8
   42464:	21084804 	addi	r4,r4,8480
   42468:	004a4e80 	call	4a4e8 <altera_avalon_fifo_init>
    altera_avalon_fifo_init(SPIWR_FIFO_IN_CSR_BASE, 0, 2, 120);
   4246c:	01c01e04 	movi	r7,120
   42470:	01800084 	movi	r6,2
   42474:	000b883a 	mov	r5,zero
   42478:	01000234 	movhi	r4,8
   4247c:	21083804 	addi	r4,r4,8416
   42480:	004a4e80 	call	4a4e8 <altera_avalon_fifo_init>
    altera_avalon_fifo_init(SPIRD_FIFO_IN_CSR_BASE, 0, 2, 120);
   42484:	01c01e04 	movi	r7,120
   42488:	01800084 	movi	r6,2
   4248c:	000b883a 	mov	r5,zero
   42490:	01000234 	movhi	r4,8
   42494:	21083004 	addi	r4,r4,8384
   42498:	004a4e80 	call	4a4e8 <altera_avalon_fifo_init>
}
   4249c:	0001883a 	nop
   424a0:	e037883a 	mov	sp,fp
   424a4:	dfc00117 	ldw	ra,4(sp)
   424a8:	df000017 	ldw	fp,0(sp)
   424ac:	dec00204 	addi	sp,sp,8
   424b0:	f800283a 	ret

000424b4 <main>:

int main()
{
   424b4:	defffb04 	addi	sp,sp,-20
   424b8:	dfc00415 	stw	ra,16(sp)
   424bc:	df000315 	stw	fp,12(sp)
   424c0:	df000304 	addi	fp,sp,12
#if 0
    test();
#else
    unsigned int len, offset, recv_data;
    init_avalon_fifo();
   424c4:	004242c0 	call	4242c <init_avalon_fifo>
    IINCHIP_CSon();
   424c8:	0047bbc0 	call	47bbc <IINCHIP_CSon>

    /***** 硬重启W5500 *****/
    Reset_W5500();
   424cc:	0040b780 	call	40b78 <Reset_W5500>
    IOWR_ALTERA_AVALON_PIO_DATA(POWER_LED_BASE, LED_ON);
   424d0:	0007883a 	mov	r3,zero
   424d4:	00800234 	movhi	r2,8
   424d8:	10885804 	addi	r2,r2,8544
   424dc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(STATUS_LED_BASE, LED_OFF);
   424e0:	00c00044 	movi	r3,1
   424e4:	00800234 	movhi	r2,8
   424e8:	10885404 	addi	r2,r2,8528
   424ec:	10c00035 	stwio	r3,0(r2)

    /***** W5500的IP信息初始化 *****/
    delay_ms(500);
   424f0:	01007d04 	movi	r4,500
   424f4:	00402800 	call	40280 <delay_ms>
    set_default();  // 设置默认MAC、IP、GW、SUB、DNS
   424f8:	0040ca00 	call	40ca0 <set_default>
    set_network();  // 配置初始化IP信息并打印，初始化8个Socket
   424fc:	0040c140 	call	40c14 <set_network>
    /***** 打开W5500的Keepalive功能 *****/
    //     setkeepalive(0);

    alarm_region.change_region_value = rd_switch_io_value();
   42500:	0045bf00 	call	45bf0 <rd_switch_io_value>
   42504:	1007883a 	mov	r3,r2
   42508:	008001b4 	movhi	r2,6
   4250c:	10a48a04 	addi	r2,r2,-28120
   42510:	10c000c5 	stb	r3,3(r2)
    alarm_region.change_region_flag  = 0x01;
   42514:	008001b4 	movhi	r2,6
   42518:	10a48a04 	addi	r2,r2,-28120
   4251c:	00c00044 	movi	r3,1
   42520:	10c00085 	stb	r3,2(r2)
    isPowerUp                        = 0x01;
   42524:	00800044 	movi	r2,1
   42528:	d0a01505 	stb	r2,-32684(gp)
    // 从默认地址读取数据作为默认报警区域
    region_read_from_rom(&alarm_region, alarm_region.change_region_value * 3);
   4252c:	008001b4 	movhi	r2,6
   42530:	10a48a04 	addi	r2,r2,-28120
   42534:	108000c3 	ldbu	r2,3(r2)
   42538:	10c03fcc 	andi	r3,r2,255
   4253c:	1805883a 	mov	r2,r3
   42540:	1085883a 	add	r2,r2,r2
   42544:	10c5883a 	add	r2,r2,r3
   42548:	100b883a 	mov	r5,r2
   4254c:	010001b4 	movhi	r4,6
   42550:	21248a04 	addi	r4,r4,-28120
   42554:	00459880 	call	45988 <region_read_from_rom>
    region_read_from_rom(&alarm_region, alarm_region.change_region_value * 3 + 1);
   42558:	008001b4 	movhi	r2,6
   4255c:	10a48a04 	addi	r2,r2,-28120
   42560:	108000c3 	ldbu	r2,3(r2)
   42564:	10c03fcc 	andi	r3,r2,255
   42568:	1805883a 	mov	r2,r3
   4256c:	1085883a 	add	r2,r2,r2
   42570:	10c5883a 	add	r2,r2,r3
   42574:	10800044 	addi	r2,r2,1
   42578:	100b883a 	mov	r5,r2
   4257c:	010001b4 	movhi	r4,6
   42580:	21248a04 	addi	r4,r4,-28120
   42584:	00459880 	call	45988 <region_read_from_rom>
    region_read_from_rom(&alarm_region, alarm_region.change_region_value * 3 + 2);
   42588:	008001b4 	movhi	r2,6
   4258c:	10a48a04 	addi	r2,r2,-28120
   42590:	108000c3 	ldbu	r2,3(r2)
   42594:	10c03fcc 	andi	r3,r2,255
   42598:	1805883a 	mov	r2,r3
   4259c:	1085883a 	add	r2,r2,r2
   425a0:	10c5883a 	add	r2,r2,r3
   425a4:	10800084 	addi	r2,r2,2
   425a8:	100b883a 	mov	r5,r2
   425ac:	010001b4 	movhi	r4,6
   425b0:	21248a04 	addi	r4,r4,-28120
   425b4:	00459880 	call	45988 <region_read_from_rom>
    read_sys_para(&SysPara);
   425b8:	010001b4 	movhi	r4,6
   425bc:	21243504 	addi	r4,r4,-28460
   425c0:	0045a5c0 	call	45a5c <read_sys_para>
    init_fpga_sys();
   425c4:	0042f400 	call	42f40 <init_fpga_sys>
    timer_initial();
   425c8:	00479580 	call	47958 <timer_initial>
    //    alarm_select_pio_initial();
        watchdog_init();
   425cc:	0047b2c0 	call	47b2c <watchdog_init>
    queue_init(&LaserDataQueue, &LaserData[0], 2048);
   425d0:	01820004 	movi	r6,2048
   425d4:	014001b4 	movhi	r5,6
   425d8:	2976e704 	addi	r5,r5,-9316
   425dc:	010001b4 	movhi	r4,6
   425e0:	2136cb04 	addi	r4,r4,-9428
   425e4:	00454b40 	call	454b4 <queue_init>
    while(1)
    {
        tim561_run();
   425e8:	00403340 	call	40334 <tim561_run>
        while(fpga_is_has_data())
   425ec:	00001c06 	br	42660 <main+0x1ac>
        {
            if(queue_is_full(&LaserDataQueue))
   425f0:	010001b4 	movhi	r4,6
   425f4:	2136cb04 	addi	r4,r4,-9428
   425f8:	00456f00 	call	456f0 <queue_is_full>
   425fc:	10803fcc 	andi	r2,r2,255
   42600:	10000326 	beq	r2,zero,42610 <main+0x15c>
                queue_clear(&LaserDataQueue);
   42604:	010001b4 	movhi	r4,6
   42608:	2136cb04 	addi	r4,r4,-9428
   4260c:	00455400 	call	45540 <queue_clear>
            recv_data = read_fpga_data();
   42610:	00410740 	call	41074 <read_fpga_data>
   42614:	e0bffe15 	stw	r2,-8(fp)
            if(recv_data >> 16 == FRAME_HEAD)
   42618:	e0bffe17 	ldw	r2,-8(fp)
   4261c:	1004d43a 	srli	r2,r2,16
   42620:	10848d18 	cmpnei	r2,r2,4660
   42624:	1000011e 	bne	r2,zero,4262c <main+0x178>
                len = 0;
   42628:	e03fff15 	stw	zero,-4(fp)

            queue_push(&LaserDataQueue, recv_data);
   4262c:	e17ffe17 	ldw	r5,-8(fp)
   42630:	010001b4 	movhi	r4,6
   42634:	2136cb04 	addi	r4,r4,-9428
   42638:	004557c0 	call	4557c <queue_push>
            if((recv_data & 0xffff) == 0xeeee)
   4263c:	e0bffe17 	ldw	r2,-8(fp)
   42640:	10ffffcc 	andi	r3,r2,65535
   42644:	00bbbb94 	movui	r2,61166
   42648:	1880051e 	bne	r3,r2,42660 <main+0x1ac>
            {
                LaserDataQueue.frame_over_flag = 0x01;
   4264c:	008001b4 	movhi	r2,6
   42650:	10b6cb04 	addi	r2,r2,-9428
   42654:	00c00044 	movi	r3,1
   42658:	10c00315 	stw	r3,12(r2)
                break;
   4265c:	00000306 	br	4266c <main+0x1b8>
        watchdog_init();
    queue_init(&LaserDataQueue, &LaserData[0], 2048);
    while(1)
    {
        tim561_run();
        while(fpga_is_has_data())
   42660:	004102c0 	call	4102c <fpga_is_has_data>
   42664:	10803fcc 	andi	r2,r2,255
   42668:	103fe11e 	bne	r2,zero,425f0 <__reset+0xfffc15f0>
            {
                LaserDataQueue.frame_over_flag = 0x01;
                break;
            }
        }
        if(LaserDataQueue.frame_over_flag == 0x01)
   4266c:	008001b4 	movhi	r2,6
   42670:	10b6cb04 	addi	r2,r2,-9428
   42674:	10800317 	ldw	r2,12(r2)
   42678:	10800058 	cmpnei	r2,r2,1
   4267c:	1000041e 	bne	r2,zero,42690 <main+0x1dc>
        {
            fpga2nios_parse();
   42680:	00410b80 	call	410b8 <fpga2nios_parse>
            LaserDataQueue.frame_over_flag = 0x00;
   42684:	008001b4 	movhi	r2,6
   42688:	10b6cb04 	addi	r2,r2,-9428
   4268c:	10000315 	stw	zero,12(r2)
            //            if(queue_is_empty(&LaserDataQueue))
            //            	LaserDataQueue.frame_over_flag = 0x00;
        }
        // 打包 获得数据到(sick数据协议) send_buffer;
        if(CycleData.pos_finish)
   42690:	008001b4 	movhi	r2,6
   42694:	10bee704 	addi	r2,r2,-1124
   42698:	10800003 	ldbu	r2,0(r2)
   4269c:	10803fcc 	andi	r2,r2,255
   426a0:	10009926 	beq	r2,zero,42908 <main+0x454>
        {
            CycleData.pos_finish = false;
   426a4:	008001b4 	movhi	r2,6
   426a8:	10bee704 	addi	r2,r2,-1124
   426ac:	10000005 	stb	zero,0(r2)
            sick_pos_packet();
   426b0:	00467880 	call	46788 <sick_pos_packet>
            offset = 0;
   426b4:	e03ffd15 	stw	zero,-12(fp)

            while(1)  // 分包发送
            {
                IOWR_ALTERA_AVALON_PIO_DATA(W5500_INT_BASE, 0x01);
   426b8:	00c00044 	movi	r3,1
   426bc:	00800234 	movhi	r2,8
   426c0:	10886804 	addi	r2,r2,8608
   426c4:	10c00035 	stwio	r3,0(r2)
                len = strlen((char *)send_buffer);
   426c8:	010001b4 	movhi	r4,6
   426cc:	2106d604 	addi	r4,r4,7000
   426d0:	00492d40 	call	492d4 <strlen>
   426d4:	e0bfff15 	stw	r2,-4(fp)
                if(len - offset >= 1460)
   426d8:	e0ffff17 	ldw	r3,-4(fp)
   426dc:	e0bffd17 	ldw	r2,-12(fp)
   426e0:	1885c83a 	sub	r2,r3,r2
   426e4:	10816d30 	cmpltui	r2,r2,1460
   426e8:	1000141e 	bne	r2,zero,4273c <main+0x288>
                {
                    send(SOCKET0, send_buffer + offset, 1460);
   426ec:	e0fffd17 	ldw	r3,-12(fp)
   426f0:	008001b4 	movhi	r2,6
   426f4:	1086d604 	addi	r2,r2,7000
   426f8:	1885883a 	add	r2,r3,r2
   426fc:	01816d04 	movi	r6,1460
   42700:	100b883a 	mov	r5,r2
   42704:	0009883a 	mov	r4,zero
   42708:	0046f500 	call	46f50 <send>
                    send(SOCKET1, send_buffer + offset, 1460);
   4270c:	e0fffd17 	ldw	r3,-12(fp)
   42710:	008001b4 	movhi	r2,6
   42714:	1086d604 	addi	r2,r2,7000
   42718:	1885883a 	add	r2,r3,r2
   4271c:	01816d04 	movi	r6,1460
   42720:	100b883a 	mov	r5,r2
   42724:	01000044 	movi	r4,1
   42728:	0046f500 	call	46f50 <send>
                    offset += 1460;
   4272c:	e0bffd17 	ldw	r2,-12(fp)
   42730:	10816d04 	addi	r2,r2,1460
   42734:	e0bffd15 	stw	r2,-12(fp)
   42738:	003fdf06 	br	426b8 <__reset+0xfffc16b8>
                }
                else if((len - offset < 1460) && (len - offset > 0))
   4273c:	e0ffff17 	ldw	r3,-4(fp)
   42740:	e0bffd17 	ldw	r2,-12(fp)
   42744:	1885c83a 	sub	r2,r3,r2
   42748:	10816d28 	cmpgeui	r2,r2,1460
   4274c:	10006e1e 	bne	r2,zero,42908 <main+0x454>
   42750:	e0ffff17 	ldw	r3,-4(fp)
   42754:	e0bffd17 	ldw	r2,-12(fp)
   42758:	18806b26 	beq	r3,r2,42908 <main+0x454>
                {
                    send(SOCKET0, send_buffer + offset, len - offset);
   4275c:	e0fffd17 	ldw	r3,-12(fp)
   42760:	008001b4 	movhi	r2,6
   42764:	1086d604 	addi	r2,r2,7000
   42768:	1885883a 	add	r2,r3,r2
   4276c:	e0ffff17 	ldw	r3,-4(fp)
   42770:	1809883a 	mov	r4,r3
   42774:	e0fffd17 	ldw	r3,-12(fp)
   42778:	20c7c83a 	sub	r3,r4,r3
   4277c:	18ffffcc 	andi	r3,r3,65535
   42780:	180d883a 	mov	r6,r3
   42784:	100b883a 	mov	r5,r2
   42788:	0009883a 	mov	r4,zero
   4278c:	0046f500 	call	46f50 <send>
                    send(SOCKET1, send_buffer + offset, len - offset);
   42790:	e0fffd17 	ldw	r3,-12(fp)
   42794:	008001b4 	movhi	r2,6
   42798:	1086d604 	addi	r2,r2,7000
   4279c:	1885883a 	add	r2,r3,r2
   427a0:	e0ffff17 	ldw	r3,-4(fp)
   427a4:	1809883a 	mov	r4,r3
   427a8:	e0fffd17 	ldw	r3,-12(fp)
   427ac:	20c7c83a 	sub	r3,r4,r3
   427b0:	18ffffcc 	andi	r3,r3,65535
   427b4:	180d883a 	mov	r6,r3
   427b8:	100b883a 	mov	r5,r2
   427bc:	01000044 	movi	r4,1
   427c0:	0046f500 	call	46f50 <send>
                    IOWR_ALTERA_AVALON_PIO_DATA(W5500_INT_BASE, 0x00);
   427c4:	0007883a 	mov	r3,zero
   427c8:	00800234 	movhi	r2,8
   427cc:	10886804 	addi	r2,r2,8608
   427d0:	10c00035 	stwio	r3,0(r2)

                    // if(sys_warn.region_alarm != 0)
                    {
                        send_buffer[0]  = 0x12;
   427d4:	008001b4 	movhi	r2,6
   427d8:	1086d604 	addi	r2,r2,7000
   427dc:	00c00484 	movi	r3,18
   427e0:	10c00005 	stb	r3,0(r2)
                        send_buffer[1]  = 0x34;
   427e4:	008001b4 	movhi	r2,6
   427e8:	1086d604 	addi	r2,r2,7000
   427ec:	00c00d04 	movi	r3,52
   427f0:	10c00045 	stb	r3,1(r2)
                        send_buffer[2]  = (UP_ALARM_REGION_STATUS >> 8) & 0xff;
   427f4:	008001b4 	movhi	r2,6
   427f8:	1086d604 	addi	r2,r2,7000
   427fc:	00fff044 	movi	r3,-63
   42800:	10c00085 	stb	r3,2(r2)
                        send_buffer[3]  = (UP_ALARM_REGION_STATUS >> 0) & 0xff;
   42804:	008001b4 	movhi	r2,6
   42808:	1086d604 	addi	r2,r2,7000
   4280c:	00c00044 	movi	r3,1
   42810:	10c000c5 	stb	r3,3(r2)
                        send_buffer[4]  = 0;
   42814:	008001b4 	movhi	r2,6
   42818:	1086d604 	addi	r2,r2,7000
   4281c:	10000105 	stb	zero,4(r2)
                        send_buffer[5]  = 0;
   42820:	008001b4 	movhi	r2,6
   42824:	1086d604 	addi	r2,r2,7000
   42828:	10000145 	stb	zero,5(r2)
                        send_buffer[6]  = 0;
   4282c:	008001b4 	movhi	r2,6
   42830:	1086d604 	addi	r2,r2,7000
   42834:	10000185 	stb	zero,6(r2)
                        send_buffer[7]  = 4;
   42838:	008001b4 	movhi	r2,6
   4283c:	1086d604 	addi	r2,r2,7000
   42840:	00c00104 	movi	r3,4
   42844:	10c001c5 	stb	r3,7(r2)
                        send_buffer[8]  = 0;
   42848:	008001b4 	movhi	r2,6
   4284c:	1086d604 	addi	r2,r2,7000
   42850:	10000205 	stb	zero,8(r2)
                        send_buffer[9]  = 0;
   42854:	008001b4 	movhi	r2,6
   42858:	1086d604 	addi	r2,r2,7000
   4285c:	10000245 	stb	zero,9(r2)
                        send_buffer[10] = 0;
   42860:	008001b4 	movhi	r2,6
   42864:	1086d604 	addi	r2,r2,7000
   42868:	10000285 	stb	zero,10(r2)
                        send_buffer[11] = (unsigned char)sys_warn.region_alarm;
   4286c:	008001b4 	movhi	r2,6
   42870:	10b32b04 	addi	r2,r2,-13140
   42874:	10800417 	ldw	r2,16(r2)
   42878:	1007883a 	mov	r3,r2
   4287c:	008001b4 	movhi	r2,6
   42880:	1086d604 	addi	r2,r2,7000
   42884:	10c002c5 	stb	r3,11(r2)
                        send_buffer[12] = send_buffer[13] = send_buffer[14] = send_buffer[15] = 0xee;  // 当做校验码
   42888:	008001b4 	movhi	r2,6
   4288c:	1086d604 	addi	r2,r2,7000
   42890:	00fffb84 	movi	r3,-18
   42894:	10c003c5 	stb	r3,15(r2)
   42898:	008001b4 	movhi	r2,6
   4289c:	1086d604 	addi	r2,r2,7000
   428a0:	10c003c3 	ldbu	r3,15(r2)
   428a4:	008001b4 	movhi	r2,6
   428a8:	1086d604 	addi	r2,r2,7000
   428ac:	10c00385 	stb	r3,14(r2)
   428b0:	008001b4 	movhi	r2,6
   428b4:	1086d604 	addi	r2,r2,7000
   428b8:	10c00383 	ldbu	r3,14(r2)
   428bc:	008001b4 	movhi	r2,6
   428c0:	1086d604 	addi	r2,r2,7000
   428c4:	10c00345 	stb	r3,13(r2)
   428c8:	008001b4 	movhi	r2,6
   428cc:	1086d604 	addi	r2,r2,7000
   428d0:	10c00343 	ldbu	r3,13(r2)
   428d4:	008001b4 	movhi	r2,6
   428d8:	1086d604 	addi	r2,r2,7000
   428dc:	10c00305 	stb	r3,12(r2)
                        send(SOCKET0, send_buffer, 16);
   428e0:	01800404 	movi	r6,16
   428e4:	014001b4 	movhi	r5,6
   428e8:	2946d604 	addi	r5,r5,7000
   428ec:	0009883a 	mov	r4,zero
   428f0:	0046f500 	call	46f50 <send>
                        send(SOCKET1, send_buffer, 16);
   428f4:	01800404 	movi	r6,16
   428f8:	014001b4 	movhi	r5,6
   428fc:	2946d604 	addi	r5,r5,7000
   42900:	01000044 	movi	r4,1
   42904:	0046f500 	call	46f50 <send>
                else
                    break;
            }
        }

        if(sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm)
   42908:	008001b4 	movhi	r2,6
   4290c:	10b32b04 	addi	r2,r2,-13140
   42910:	10c00017 	ldw	r3,0(r2)
   42914:	008001b4 	movhi	r2,6
   42918:	10b32b04 	addi	r2,r2,-13140
   4291c:	10800117 	ldw	r2,4(r2)
   42920:	1884b03a 	or	r2,r3,r2
   42924:	10001626 	beq	r2,zero,42980 <main+0x4cc>
        {
            led_status_light(LED_ON);
   42928:	0009883a 	mov	r4,zero
   4292c:	00423f40 	call	423f4 <led_status_light>
            set_laser_paramter(&Nios2FPGA_pck, LASER_FREQ,
                               sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm | sys_warn.temp_out_alarm | sys_warn.window_dust_alarm);
   42930:	008001b4 	movhi	r2,6
   42934:	10b32b04 	addi	r2,r2,-13140
   42938:	10c00017 	ldw	r3,0(r2)
   4293c:	008001b4 	movhi	r2,6
   42940:	10b32b04 	addi	r2,r2,-13140
   42944:	10800117 	ldw	r2,4(r2)
   42948:	1886b03a 	or	r3,r3,r2
   4294c:	008001b4 	movhi	r2,6
   42950:	10b32b04 	addi	r2,r2,-13140
   42954:	10800317 	ldw	r2,12(r2)
   42958:	1886b03a 	or	r3,r3,r2
   4295c:	008001b4 	movhi	r2,6
   42960:	10b32b04 	addi	r2,r2,-13140
   42964:	10800217 	ldw	r2,8(r2)
        }

        if(sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm)
        {
            led_status_light(LED_ON);
            set_laser_paramter(&Nios2FPGA_pck, LASER_FREQ,
   42968:	1884b03a 	or	r2,r3,r2
   4296c:	100d883a 	mov	r6,r2
   42970:	01684054 	movui	r5,41217
   42974:	d1201804 	addi	r4,gp,-32672
   42978:	0042ed00 	call	42ed0 <set_laser_paramter>
   4297c:	00004906 	br	42aa4 <main+0x5f0>
                               sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm | sys_warn.temp_out_alarm | sys_warn.window_dust_alarm);
        }
        else if(sys_warn.window_dust_alarm)
   42980:	008001b4 	movhi	r2,6
   42984:	10b32b04 	addi	r2,r2,-13140
   42988:	10800217 	ldw	r2,8(r2)
   4298c:	10002126 	beq	r2,zero,42a14 <main+0x560>
        {
            if(led_time_flag.status_led_1s_flag)
   42990:	d0a01643 	ldbu	r2,-32679(gp)
   42994:	10803fcc 	andi	r2,r2,255
   42998:	10000a26 	beq	r2,zero,429c4 <main+0x510>
            {
                led_time_flag.status_led_1s_flag = 0x00;
   4299c:	d0201645 	stb	zero,-32679(gp)
                led_time_flag.status_led_value   = (~led_time_flag.status_led_value) & 0x01;
   429a0:	d0a01583 	ldbu	r2,-32682(gp)
   429a4:	10803fcc 	andi	r2,r2,255
   429a8:	1080004c 	andi	r2,r2,1
   429ac:	1005003a 	cmpeq	r2,r2,zero
   429b0:	d0a01585 	stb	r2,-32682(gp)
                led_status_light(led_time_flag.status_led_value);
   429b4:	d0a01583 	ldbu	r2,-32682(gp)
   429b8:	10803fcc 	andi	r2,r2,255
   429bc:	1009883a 	mov	r4,r2
   429c0:	00423f40 	call	423f4 <led_status_light>
            }
            set_laser_paramter(&Nios2FPGA_pck, LASER_FREQ,
                               sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm | sys_warn.temp_out_alarm | sys_warn.window_dust_alarm);
   429c4:	008001b4 	movhi	r2,6
   429c8:	10b32b04 	addi	r2,r2,-13140
   429cc:	10c00017 	ldw	r3,0(r2)
   429d0:	008001b4 	movhi	r2,6
   429d4:	10b32b04 	addi	r2,r2,-13140
   429d8:	10800117 	ldw	r2,4(r2)
   429dc:	1886b03a 	or	r3,r3,r2
   429e0:	008001b4 	movhi	r2,6
   429e4:	10b32b04 	addi	r2,r2,-13140
   429e8:	10800317 	ldw	r2,12(r2)
   429ec:	1886b03a 	or	r3,r3,r2
   429f0:	008001b4 	movhi	r2,6
   429f4:	10b32b04 	addi	r2,r2,-13140
   429f8:	10800217 	ldw	r2,8(r2)
            {
                led_time_flag.status_led_1s_flag = 0x00;
                led_time_flag.status_led_value   = (~led_time_flag.status_led_value) & 0x01;
                led_status_light(led_time_flag.status_led_value);
            }
            set_laser_paramter(&Nios2FPGA_pck, LASER_FREQ,
   429fc:	1884b03a 	or	r2,r3,r2
   42a00:	100d883a 	mov	r6,r2
   42a04:	01684054 	movui	r5,41217
   42a08:	d1201804 	addi	r4,gp,-32672
   42a0c:	0042ed00 	call	42ed0 <set_laser_paramter>
   42a10:	00002406 	br	42aa4 <main+0x5f0>
                               sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm | sys_warn.temp_out_alarm | sys_warn.window_dust_alarm);
        }
        else if(sys_warn.temp_out_alarm)
   42a14:	008001b4 	movhi	r2,6
   42a18:	10b32b04 	addi	r2,r2,-13140
   42a1c:	10800317 	ldw	r2,12(r2)
   42a20:	10002026 	beq	r2,zero,42aa4 <main+0x5f0>
        {
            if(led_time_flag.status_led_300ms_flag)
   42a24:	d0a01683 	ldbu	r2,-32678(gp)
   42a28:	10803fcc 	andi	r2,r2,255
   42a2c:	10000a26 	beq	r2,zero,42a58 <main+0x5a4>
            {
                led_time_flag.status_led_300ms_flag = 0x00;
   42a30:	d0201685 	stb	zero,-32678(gp)
                led_time_flag.status_led_value      = (~led_time_flag.status_led_value) & 0x01;
   42a34:	d0a01583 	ldbu	r2,-32682(gp)
   42a38:	10803fcc 	andi	r2,r2,255
   42a3c:	1080004c 	andi	r2,r2,1
   42a40:	1005003a 	cmpeq	r2,r2,zero
   42a44:	d0a01585 	stb	r2,-32682(gp)
                led_status_light(led_time_flag.status_led_value);
   42a48:	d0a01583 	ldbu	r2,-32682(gp)
   42a4c:	10803fcc 	andi	r2,r2,255
   42a50:	1009883a 	mov	r4,r2
   42a54:	00423f40 	call	423f4 <led_status_light>
            }
            set_laser_paramter(&Nios2FPGA_pck, LASER_FREQ,
                               sys_warn.motor_low_speed_alarm | sys_warn.ld_not_work_alarm | sys_warn.temp_out_alarm | sys_warn.window_dust_alarm);
   42a58:	008001b4 	movhi	r2,6
   42a5c:	10b32b04 	addi	r2,r2,-13140
   42a60:	10c00017 	ldw	r3,0(r2)
   42a64:	008001b4 	movhi	r2,6
   42a68:	10b32b04 	addi	r2,r2,-13140
   42a6c:	10800117 	ldw	r2,4(r2)
   42a70:	1886b03a 	or	r3,r3,r2
   42a74:	008001b4 	movhi	r2,6
   42a78:	10b32b04 	addi	r2,r2,-13140
   42a7c:	10800317 	ldw	r2,12(r2)
   42a80:	1886b03a 	or	r3,r3,r2
   42a84:	008001b4 	movhi	r2,6
   42a88:	10b32b04 	addi	r2,r2,-13140
   42a8c:	10800217 	ldw	r2,8(r2)
            {
                led_time_flag.status_led_300ms_flag = 0x00;
                led_time_flag.status_led_value      = (~led_time_flag.status_led_value) & 0x01;
                led_status_light(led_time_flag.status_led_value);
            }
            set_laser_paramter(&Nios2FPGA_pck, LASER_FREQ,
   42a90:	1884b03a 	or	r2,r3,r2
   42a94:	100d883a 	mov	r6,r2
   42a98:	01684054 	movui	r5,41217
   42a9c:	d1201804 	addi	r4,gp,-32672
   42aa0:	0042ed00 	call	42ed0 <set_laser_paramter>
        //     alarm_region.change_region_flag = 0x01;
        //     alarm_region.change_region_value = alarm_region.last_io_value[0];
        // }
        // alarm_region.last_io_value[1] = alarm_region.last_io_value[0];

        if(isTcpEstablished & isPowerUp)  // 刚上电且TCP连接建立时，发送一次
   42aa4:	d0e01303 	ldbu	r3,-32692(gp)
   42aa8:	d0a01503 	ldbu	r2,-32684(gp)
   42aac:	1884703a 	and	r2,r3,r2
   42ab0:	10803fcc 	andi	r2,r2,255
   42ab4:	10002426 	beq	r2,zero,42b48 <main+0x694>
        {
            isPowerUp        = 0x00;
   42ab8:	d0201505 	stb	zero,-32684(gp)
            nios2pc.command  = UP_ALARM_IO_VALUE;
   42abc:	008001b4 	movhi	r2,6
   42ac0:	10a48504 	addi	r2,r2,-28140
   42ac4:	00f04094 	movui	r3,49410
   42ac8:	10c00115 	stw	r3,4(r2)
            nios2pc.data_len = 4;
   42acc:	008001b4 	movhi	r2,6
   42ad0:	10a48504 	addi	r2,r2,-28140
   42ad4:	00c00104 	movi	r3,4
   42ad8:	10c00215 	stw	r3,8(r2)
            nios2pc.value    = alarm_region.change_region_value;
   42adc:	008001b4 	movhi	r2,6
   42ae0:	10a48a04 	addi	r2,r2,-28120
   42ae4:	108000c3 	ldbu	r2,3(r2)
   42ae8:	10c03fcc 	andi	r3,r2,255
   42aec:	008001b4 	movhi	r2,6
   42af0:	10a48504 	addi	r2,r2,-28140
   42af4:	10c00315 	stw	r3,12(r2)
            len              = pc2dev_packet(&nios2pc, send_buffer);
   42af8:	014001b4 	movhi	r5,6
   42afc:	2946d604 	addi	r5,r5,7000
   42b00:	010001b4 	movhi	r4,6
   42b04:	21248504 	addi	r4,r4,-28140
   42b08:	0044d380 	call	44d38 <pc2dev_packet>
   42b0c:	e0bfff15 	stw	r2,-4(fp)
            send(SOCKET0, send_buffer, len);
   42b10:	e0bfff17 	ldw	r2,-4(fp)
   42b14:	10bfffcc 	andi	r2,r2,65535
   42b18:	100d883a 	mov	r6,r2
   42b1c:	014001b4 	movhi	r5,6
   42b20:	2946d604 	addi	r5,r5,7000
   42b24:	0009883a 	mov	r4,zero
   42b28:	0046f500 	call	46f50 <send>
            send(SOCKET1, send_buffer, len);
   42b2c:	e0bfff17 	ldw	r2,-4(fp)
   42b30:	10bfffcc 	andi	r2,r2,65535
   42b34:	100d883a 	mov	r6,r2
   42b38:	014001b4 	movhi	r5,6
   42b3c:	2946d604 	addi	r5,r5,7000
   42b40:	01000044 	movi	r4,1
   42b44:	0046f500 	call	46f50 <send>
        }

        if(alarm_region.change_region_flag == 0x01)
   42b48:	008001b4 	movhi	r2,6
   42b4c:	10a48a04 	addi	r2,r2,-28120
   42b50:	10800083 	ldbu	r2,2(r2)
   42b54:	10803fcc 	andi	r2,r2,255
   42b58:	10800058 	cmpnei	r2,r2,1
   42b5c:	1000491e 	bne	r2,zero,42c84 <main+0x7d0>
        {
            alarm_region.change_region_flag = 0x00;
   42b60:	008001b4 	movhi	r2,6
   42b64:	10a48a04 	addi	r2,r2,-28120
   42b68:	10000085 	stb	zero,2(r2)
            region_read_from_rom(&alarm_region, alarm_region.change_region_value * 3);
   42b6c:	008001b4 	movhi	r2,6
   42b70:	10a48a04 	addi	r2,r2,-28120
   42b74:	108000c3 	ldbu	r2,3(r2)
   42b78:	10c03fcc 	andi	r3,r2,255
   42b7c:	1805883a 	mov	r2,r3
   42b80:	1085883a 	add	r2,r2,r2
   42b84:	10c5883a 	add	r2,r2,r3
   42b88:	100b883a 	mov	r5,r2
   42b8c:	010001b4 	movhi	r4,6
   42b90:	21248a04 	addi	r4,r4,-28120
   42b94:	00459880 	call	45988 <region_read_from_rom>
            region_read_from_rom(&alarm_region, alarm_region.change_region_value * 3 + 1);
   42b98:	008001b4 	movhi	r2,6
   42b9c:	10a48a04 	addi	r2,r2,-28120
   42ba0:	108000c3 	ldbu	r2,3(r2)
   42ba4:	10c03fcc 	andi	r3,r2,255
   42ba8:	1805883a 	mov	r2,r3
   42bac:	1085883a 	add	r2,r2,r2
   42bb0:	10c5883a 	add	r2,r2,r3
   42bb4:	10800044 	addi	r2,r2,1
   42bb8:	100b883a 	mov	r5,r2
   42bbc:	010001b4 	movhi	r4,6
   42bc0:	21248a04 	addi	r4,r4,-28120
   42bc4:	00459880 	call	45988 <region_read_from_rom>
            region_read_from_rom(&alarm_region, alarm_region.change_region_value * 3 + 2);
   42bc8:	008001b4 	movhi	r2,6
   42bcc:	10a48a04 	addi	r2,r2,-28120
   42bd0:	108000c3 	ldbu	r2,3(r2)
   42bd4:	10c03fcc 	andi	r3,r2,255
   42bd8:	1805883a 	mov	r2,r3
   42bdc:	1085883a 	add	r2,r2,r2
   42be0:	10c5883a 	add	r2,r2,r3
   42be4:	10800084 	addi	r2,r2,2
   42be8:	100b883a 	mov	r5,r2
   42bec:	010001b4 	movhi	r4,6
   42bf0:	21248a04 	addi	r4,r4,-28120
   42bf4:	00459880 	call	45988 <region_read_from_rom>

            //            if(isTcpEstablished)
            {
                nios2pc.command  = UP_ALARM_IO_VALUE;
   42bf8:	008001b4 	movhi	r2,6
   42bfc:	10a48504 	addi	r2,r2,-28140
   42c00:	00f04094 	movui	r3,49410
   42c04:	10c00115 	stw	r3,4(r2)
                nios2pc.data_len = 4;
   42c08:	008001b4 	movhi	r2,6
   42c0c:	10a48504 	addi	r2,r2,-28140
   42c10:	00c00104 	movi	r3,4
   42c14:	10c00215 	stw	r3,8(r2)
                nios2pc.value    = alarm_region.change_region_value;
   42c18:	008001b4 	movhi	r2,6
   42c1c:	10a48a04 	addi	r2,r2,-28120
   42c20:	108000c3 	ldbu	r2,3(r2)
   42c24:	10c03fcc 	andi	r3,r2,255
   42c28:	008001b4 	movhi	r2,6
   42c2c:	10a48504 	addi	r2,r2,-28140
   42c30:	10c00315 	stw	r3,12(r2)
                len              = pc2dev_packet(&nios2pc, send_buffer);
   42c34:	014001b4 	movhi	r5,6
   42c38:	2946d604 	addi	r5,r5,7000
   42c3c:	010001b4 	movhi	r4,6
   42c40:	21248504 	addi	r4,r4,-28140
   42c44:	0044d380 	call	44d38 <pc2dev_packet>
   42c48:	e0bfff15 	stw	r2,-4(fp)
                send(SOCKET0, send_buffer, len);
   42c4c:	e0bfff17 	ldw	r2,-4(fp)
   42c50:	10bfffcc 	andi	r2,r2,65535
   42c54:	100d883a 	mov	r6,r2
   42c58:	014001b4 	movhi	r5,6
   42c5c:	2946d604 	addi	r5,r5,7000
   42c60:	0009883a 	mov	r4,zero
   42c64:	0046f500 	call	46f50 <send>
                send(SOCKET1, send_buffer, len);
   42c68:	e0bfff17 	ldw	r2,-4(fp)
   42c6c:	10bfffcc 	andi	r2,r2,65535
   42c70:	100d883a 	mov	r6,r2
   42c74:	014001b4 	movhi	r5,6
   42c78:	2946d604 	addi	r5,r5,7000
   42c7c:	01000044 	movi	r4,1
   42c80:	0046f500 	call	46f50 <send>
            }
        }
        if(SysStatus.reset_nios != ENABLE)
   42c84:	d0e01417 	ldw	r3,-32688(gp)
   42c88:	00844474 	movhi	r2,4369
   42c8c:	10844444 	addi	r2,r2,4369
   42c90:	18be5526 	beq	r3,r2,425e8 <__reset+0xfffc15e8>
            watchdog_feed();
   42c94:	0047b5c0 	call	47b5c <watchdog_feed>
    }
   42c98:	003e5306 	br	425e8 <__reset+0xfffc15e8>

00042c9c <check_sum>:

UpDataFrame     CycleData;
NIOS2FPGA_Pck_t Nios2FPGA_pck;

static unsigned int check_sum(unsigned int *data, unsigned char len)
{
   42c9c:	defffb04 	addi	sp,sp,-20
   42ca0:	df000415 	stw	fp,16(sp)
   42ca4:	df000404 	addi	fp,sp,16
   42ca8:	e13ffe15 	stw	r4,-8(fp)
   42cac:	2805883a 	mov	r2,r5
   42cb0:	e0bfff05 	stb	r2,-4(fp)
    int          i;
    unsigned int checksum = 0;
   42cb4:	e03ffd15 	stw	zero,-12(fp)
    for(i = 0; i < len; i++)
   42cb8:	e03ffc15 	stw	zero,-16(fp)
   42cbc:	00000d06 	br	42cf4 <check_sum+0x58>
    {
        checksum ^= data[i];
   42cc0:	e0bffc17 	ldw	r2,-16(fp)
   42cc4:	1085883a 	add	r2,r2,r2
   42cc8:	1085883a 	add	r2,r2,r2
   42ccc:	1007883a 	mov	r3,r2
   42cd0:	e0bffe17 	ldw	r2,-8(fp)
   42cd4:	10c5883a 	add	r2,r2,r3
   42cd8:	10800017 	ldw	r2,0(r2)
   42cdc:	e0fffd17 	ldw	r3,-12(fp)
   42ce0:	1884f03a 	xor	r2,r3,r2
   42ce4:	e0bffd15 	stw	r2,-12(fp)

static unsigned int check_sum(unsigned int *data, unsigned char len)
{
    int          i;
    unsigned int checksum = 0;
    for(i = 0; i < len; i++)
   42ce8:	e0bffc17 	ldw	r2,-16(fp)
   42cec:	10800044 	addi	r2,r2,1
   42cf0:	e0bffc15 	stw	r2,-16(fp)
   42cf4:	e0bfff03 	ldbu	r2,-4(fp)
   42cf8:	e0fffc17 	ldw	r3,-16(fp)
   42cfc:	18bff016 	blt	r3,r2,42cc0 <__reset+0xfffc1cc0>
    {
        checksum ^= data[i];
    }

    return checksum;
   42d00:	e0bffd17 	ldw	r2,-12(fp)
}
   42d04:	e037883a 	mov	sp,fp
   42d08:	df000017 	ldw	fp,0(sp)
   42d0c:	dec00104 	addi	sp,sp,4
   42d10:	f800283a 	ret

00042d14 <motor_init>:

void motor_init()
{
   42d14:	deffff04 	addi	sp,sp,-4
   42d18:	df000015 	stw	fp,0(sp)
   42d1c:	d839883a 	mov	fp,sp
}
   42d20:	0001883a 	nop
   42d24:	e037883a 	mov	sp,fp
   42d28:	df000017 	ldw	fp,0(sp)
   42d2c:	dec00104 	addi	sp,sp,4
   42d30:	f800283a 	ret

00042d34 <nios2fpga_data_packet>:

/*
 * 鎵撳寘鏁版嵁骞跺彂閫�
 */
void nios2fpga_data_packet(unsigned short command, unsigned char len, unsigned int *src)
{
   42d34:	deffdb04 	addi	sp,sp,-148
   42d38:	dfc02415 	stw	ra,144(sp)
   42d3c:	df002315 	stw	fp,140(sp)
   42d40:	dc002215 	stw	r16,136(sp)
   42d44:	df002304 	addi	fp,sp,140
   42d48:	2007883a 	mov	r3,r4
   42d4c:	2805883a 	mov	r2,r5
   42d50:	e1bffe15 	stw	r6,-8(fp)
   42d54:	e0fffc0d 	sth	r3,-16(fp)
   42d58:	e0bffd05 	stb	r2,-12(fp)
    int          i;
    unsigned int buf[30];
    buf[0] = (0x1234 << 16) + command;
   42d5c:	e0fffc0b 	ldhu	r3,-16(fp)
   42d60:	00848d34 	movhi	r2,4660
   42d64:	1885883a 	add	r2,r3,r2
   42d68:	e0bfde15 	stw	r2,-136(fp)
    buf[1] = len;
   42d6c:	e0bffd03 	ldbu	r2,-12(fp)
   42d70:	e0bfdf15 	stw	r2,-132(fp)

    for(i = 0; i < len; i++)
   42d74:	e03fdd15 	stw	zero,-140(fp)
   42d78:	00001206 	br	42dc4 <nios2fpga_data_packet+0x90>
    {
        buf[i + 2] = src[i];
   42d7c:	e0bfdd17 	ldw	r2,-140(fp)
   42d80:	10800084 	addi	r2,r2,2
   42d84:	e0ffdd17 	ldw	r3,-140(fp)
   42d88:	18c7883a 	add	r3,r3,r3
   42d8c:	18c7883a 	add	r3,r3,r3
   42d90:	1809883a 	mov	r4,r3
   42d94:	e0fffe17 	ldw	r3,-8(fp)
   42d98:	1907883a 	add	r3,r3,r4
   42d9c:	18c00017 	ldw	r3,0(r3)
   42da0:	1085883a 	add	r2,r2,r2
   42da4:	1085883a 	add	r2,r2,r2
   42da8:	e13fdd04 	addi	r4,fp,-140
   42dac:	2085883a 	add	r2,r4,r2
   42db0:	10800104 	addi	r2,r2,4
   42db4:	10c00015 	stw	r3,0(r2)
    int          i;
    unsigned int buf[30];
    buf[0] = (0x1234 << 16) + command;
    buf[1] = len;

    for(i = 0; i < len; i++)
   42db8:	e0bfdd17 	ldw	r2,-140(fp)
   42dbc:	10800044 	addi	r2,r2,1
   42dc0:	e0bfdd15 	stw	r2,-140(fp)
   42dc4:	e0bffd03 	ldbu	r2,-12(fp)
   42dc8:	e0ffdd17 	ldw	r3,-140(fp)
   42dcc:	18bfeb16 	blt	r3,r2,42d7c <__reset+0xfffc1d7c>
    {
        buf[i + 2] = src[i];
    }
    buf[len + 2] = check_sum(buf, len + 2);
   42dd0:	e0bffd03 	ldbu	r2,-12(fp)
   42dd4:	14000084 	addi	r16,r2,2
   42dd8:	e0bffd03 	ldbu	r2,-12(fp)
   42ddc:	10800084 	addi	r2,r2,2
   42de0:	10c03fcc 	andi	r3,r2,255
   42de4:	e0bfde04 	addi	r2,fp,-136
   42de8:	180b883a 	mov	r5,r3
   42dec:	1009883a 	mov	r4,r2
   42df0:	0042c9c0 	call	42c9c <check_sum>
   42df4:	1007883a 	mov	r3,r2
   42df8:	8405883a 	add	r2,r16,r16
   42dfc:	1085883a 	add	r2,r2,r2
   42e00:	e13fdd04 	addi	r4,fp,-140
   42e04:	2085883a 	add	r2,r4,r2
   42e08:	10800104 	addi	r2,r2,4
   42e0c:	10c00015 	stw	r3,0(r2)

    nios2fpga_data_write(buf, len + 3);
   42e10:	e0bffd03 	ldbu	r2,-12(fp)
   42e14:	108000c4 	addi	r2,r2,3
   42e18:	1007883a 	mov	r3,r2
   42e1c:	e0bfde04 	addi	r2,fp,-136
   42e20:	180b883a 	mov	r5,r3
   42e24:	1009883a 	mov	r4,r2
   42e28:	0042e480 	call	42e48 <nios2fpga_data_write>
}
   42e2c:	0001883a 	nop
   42e30:	e6ffff04 	addi	sp,fp,-4
   42e34:	dfc00217 	ldw	ra,8(sp)
   42e38:	df000117 	ldw	fp,4(sp)
   42e3c:	dc000017 	ldw	r16,0(sp)
   42e40:	dec00304 	addi	sp,sp,12
   42e44:	f800283a 	ret

00042e48 <nios2fpga_data_write>:

/*
 * niso 鏁版嵁閫氳繃fifo鍐欏埌 FPGA
 */
bool nios2fpga_data_write(unsigned int *data, unsigned int len)
{
   42e48:	defffb04 	addi	sp,sp,-20
   42e4c:	dfc00415 	stw	ra,16(sp)
   42e50:	df000315 	stw	fp,12(sp)
   42e54:	df000304 	addi	fp,sp,12
   42e58:	e13ffe15 	stw	r4,-8(fp)
   42e5c:	e17fff15 	stw	r5,-4(fp)
    int i;
    for(i = 0; i < len; i++)
   42e60:	e03ffd15 	stw	zero,-12(fp)
   42e64:	00001106 	br	42eac <nios2fpga_data_write+0x64>
    {
        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data[i] >> 16) + (data[i] << 16));
   42e68:	e0bffd17 	ldw	r2,-12(fp)
   42e6c:	1085883a 	add	r2,r2,r2
   42e70:	1085883a 	add	r2,r2,r2
   42e74:	1007883a 	mov	r3,r2
   42e78:	e0bffe17 	ldw	r2,-8(fp)
   42e7c:	10c5883a 	add	r2,r2,r3
   42e80:	10800017 	ldw	r2,0(r2)
   42e84:	1004143a 	roli	r2,r2,16
   42e88:	100d883a 	mov	r6,r2
   42e8c:	01400234 	movhi	r5,8
   42e90:	29484004 	addi	r5,r5,8448
   42e94:	01000234 	movhi	r4,8
   42e98:	21087a04 	addi	r4,r4,8680
   42e9c:	004a8280 	call	4a828 <altera_avalon_fifo_write_fifo>
 * niso 鏁版嵁閫氳繃fifo鍐欏埌 FPGA
 */
bool nios2fpga_data_write(unsigned int *data, unsigned int len)
{
    int i;
    for(i = 0; i < len; i++)
   42ea0:	e0bffd17 	ldw	r2,-12(fp)
   42ea4:	10800044 	addi	r2,r2,1
   42ea8:	e0bffd15 	stw	r2,-12(fp)
   42eac:	e0fffd17 	ldw	r3,-12(fp)
   42eb0:	e0bfff17 	ldw	r2,-4(fp)
   42eb4:	18bfec36 	bltu	r3,r2,42e68 <__reset+0xfffc1e68>
    {
        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data[i] >> 16) + (data[i] << 16));
        // usleep(1000);
    }
    return true;
   42eb8:	00800044 	movi	r2,1
}
   42ebc:	e037883a 	mov	sp,fp
   42ec0:	dfc00117 	ldw	ra,4(sp)
   42ec4:	df000017 	ldw	fp,0(sp)
   42ec8:	dec00204 	addi	sp,sp,8
   42ecc:	f800283a 	ret

00042ed0 <set_laser_paramter>:

void set_laser_paramter(NIOS2FPGA_Pck_t *pck, unsigned short command, unsigned int data)
{
   42ed0:	defffa04 	addi	sp,sp,-24
   42ed4:	dfc00515 	stw	ra,20(sp)
   42ed8:	df000415 	stw	fp,16(sp)
   42edc:	df000404 	addi	fp,sp,16
   42ee0:	e13ffd15 	stw	r4,-12(fp)
   42ee4:	2805883a 	mov	r2,r5
   42ee8:	e1bfff15 	stw	r6,-4(fp)
   42eec:	e0bffe0d 	sth	r2,-8(fp)
    unsigned char len = 1;
   42ef0:	00800044 	movi	r2,1
   42ef4:	e0bffc05 	stb	r2,-16(fp)
    pck->command      = command;
   42ef8:	e0fffe0b 	ldhu	r3,-8(fp)
   42efc:	e0bffd17 	ldw	r2,-12(fp)
   42f00:	10c00015 	stw	r3,0(r2)
    nios2fpga_data_packet(pck->command, len, &data);
   42f04:	e0bffd17 	ldw	r2,-12(fp)
   42f08:	10800017 	ldw	r2,0(r2)
   42f0c:	10bfffcc 	andi	r2,r2,65535
   42f10:	e0fffc03 	ldbu	r3,-16(fp)
   42f14:	e13fff04 	addi	r4,fp,-4
   42f18:	200d883a 	mov	r6,r4
   42f1c:	180b883a 	mov	r5,r3
   42f20:	1009883a 	mov	r4,r2
   42f24:	0042d340 	call	42d34 <nios2fpga_data_packet>
}
   42f28:	0001883a 	nop
   42f2c:	e037883a 	mov	sp,fp
   42f30:	dfc00117 	ldw	ra,4(sp)
   42f34:	df000017 	ldw	fp,0(sp)
   42f38:	dec00204 	addi	sp,sp,8
   42f3c:	f800283a 	ret

00042f40 <init_fpga_sys>:

void init_fpga_sys(void)
{
   42f40:	defffe04 	addi	sp,sp,-8
   42f44:	dfc00115 	stw	ra,4(sp)
   42f48:	df000015 	stw	fp,0(sp)
   42f4c:	d839883a 	mov	fp,sp
    set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, ENABLE);
   42f50:	01844474 	movhi	r6,4369
   42f54:	31844444 	addi	r6,r6,4369
   42f58:	016c0014 	movui	r5,45056
   42f5c:	d1201804 	addi	r4,gp,-32672
   42f60:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, LASER_ENABLE, SysPara.laser_enable);
   42f64:	008001b4 	movhi	r2,6
   42f68:	10a43504 	addi	r2,r2,-28460
   42f6c:	10800117 	ldw	r2,4(r2)
   42f70:	100d883a 	mov	r6,r2
   42f74:	01684014 	movui	r5,41216
   42f78:	d1201804 	addi	r4,gp,-32672
   42f7c:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, LASER_FREQ, SysPara.laser_freq);
   42f80:	008001b4 	movhi	r2,6
   42f84:	10a43504 	addi	r2,r2,-28460
   42f88:	10800217 	ldw	r2,8(r2)
   42f8c:	100d883a 	mov	r6,r2
   42f90:	01684054 	movui	r5,41217
   42f94:	d1201804 	addi	r4,gp,-32672
   42f98:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, LASER_PULSE_WIDTH, SysPara.laser_pulse_width);
   42f9c:	008001b4 	movhi	r2,6
   42fa0:	10a43504 	addi	r2,r2,-28460
   42fa4:	10800b17 	ldw	r2,44(r2)
   42fa8:	100d883a 	mov	r6,r2
   42fac:	01684094 	movui	r5,41218
   42fb0:	d1201804 	addi	r4,gp,-32672
   42fb4:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, LASER_RECV_DELAY, SysPara.laser_recv_delay);
   42fb8:	008001b4 	movhi	r2,6
   42fbc:	10a43504 	addi	r2,r2,-28460
   42fc0:	10800317 	ldw	r2,12(r2)
   42fc4:	100d883a 	mov	r6,r2
   42fc8:	016840d4 	movui	r5,41219
   42fcc:	d1201804 	addi	r4,gp,-32672
   42fd0:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, MOTOR_ENABLE, SysPara.motor_enable);
   42fd4:	008001b4 	movhi	r2,6
   42fd8:	10a43504 	addi	r2,r2,-28460
   42fdc:	10800417 	ldw	r2,16(r2)
   42fe0:	100d883a 	mov	r6,r2
   42fe4:	01688014 	movui	r5,41472
   42fe8:	d1201804 	addi	r4,gp,-32672
   42fec:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, MOTOR_SPEED, SysPara.motor_expect_speed);
   42ff0:	008001b4 	movhi	r2,6
   42ff4:	10a43504 	addi	r2,r2,-28460
   42ff8:	10800517 	ldw	r2,20(r2)
   42ffc:	100d883a 	mov	r6,r2
   43000:	01688054 	movui	r5,41473
   43004:	d1201804 	addi	r4,gp,-32672
   43008:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, ZERO_DISTANCE_REVISE, SysPara.zero_distance_revise);
   4300c:	008001b4 	movhi	r2,6
   43010:	10a43504 	addi	r2,r2,-28460
   43014:	10800617 	ldw	r2,24(r2)
   43018:	100d883a 	mov	r6,r2
   4301c:	0168c054 	movui	r5,41729
   43020:	d1201804 	addi	r4,gp,-32672
   43024:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, ZERO_ANGLE_REVISE, SysPara.zero_angle_revise);
   43028:	008001b4 	movhi	r2,6
   4302c:	10a43504 	addi	r2,r2,-28460
   43030:	10800717 	ldw	r2,28(r2)
   43034:	100d883a 	mov	r6,r2
   43038:	0168c094 	movui	r5,41730
   4303c:	d1201804 	addi	r4,gp,-32672
   43040:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_DISTANCE_REVISE1, SysPara.gray_distance_revise1);
   43044:	008001b4 	movhi	r2,6
   43048:	10a43504 	addi	r2,r2,-28460
   4304c:	10800817 	ldw	r2,32(r2)
   43050:	100d883a 	mov	r6,r2
   43054:	01690054 	movui	r5,41985
   43058:	d1201804 	addi	r4,gp,-32672
   4305c:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_DISTANCE_REVISE2, SysPara.gray_distance_revise2);
   43060:	008001b4 	movhi	r2,6
   43064:	10a43504 	addi	r2,r2,-28460
   43068:	10800917 	ldw	r2,36(r2)
   4306c:	100d883a 	mov	r6,r2
   43070:	01690094 	movui	r5,41986
   43074:	d1201804 	addi	r4,gp,-32672
   43078:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_DISTANCE_REVISE3, SysPara.gray_distance_revise3);
   4307c:	008001b4 	movhi	r2,6
   43080:	10a43504 	addi	r2,r2,-28460
   43084:	10800a17 	ldw	r2,40(r2)
   43088:	100d883a 	mov	r6,r2
   4308c:	016900d4 	movui	r5,41987
   43090:	d1201804 	addi	r4,gp,-32672
   43094:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_DISTANCE_REVISE4, SysPara.gray_distance_revise4);
   43098:	008001b4 	movhi	r2,6
   4309c:	10a43504 	addi	r2,r2,-28460
   430a0:	10804717 	ldw	r2,284(r2)
   430a4:	100d883a 	mov	r6,r2
   430a8:	01690114 	movui	r5,41988
   430ac:	d1201804 	addi	r4,gp,-32672
   430b0:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_DISTANCE_REVISE5, SysPara.gray_distance_revise5);
   430b4:	008001b4 	movhi	r2,6
   430b8:	10a43504 	addi	r2,r2,-28460
   430bc:	10804817 	ldw	r2,288(r2)
   430c0:	100d883a 	mov	r6,r2
   430c4:	01690154 	movui	r5,41989
   430c8:	d1201804 	addi	r4,gp,-32672
   430cc:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_INFLECTION1, SysPara.gray_inflection1);
   430d0:	008001b4 	movhi	r2,6
   430d4:	10a43504 	addi	r2,r2,-28460
   430d8:	10801017 	ldw	r2,64(r2)
   430dc:	100d883a 	mov	r6,r2
   430e0:	01698054 	movui	r5,42497
   430e4:	d1201804 	addi	r4,gp,-32672
   430e8:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_INFLECTION2, SysPara.gray_inflection2);
   430ec:	008001b4 	movhi	r2,6
   430f0:	10a43504 	addi	r2,r2,-28460
   430f4:	10801117 	ldw	r2,68(r2)
   430f8:	100d883a 	mov	r6,r2
   430fc:	01698094 	movui	r5,42498
   43100:	d1201804 	addi	r4,gp,-32672
   43104:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_INFLECTION3, SysPara.gray_inflection3);
   43108:	008001b4 	movhi	r2,6
   4310c:	10a43504 	addi	r2,r2,-28460
   43110:	10804517 	ldw	r2,276(r2)
   43114:	100d883a 	mov	r6,r2
   43118:	016980d4 	movui	r5,42499
   4311c:	d1201804 	addi	r4,gp,-32672
   43120:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, GRAY_INFLECTION4, SysPara.gray_inflection4);
   43124:	008001b4 	movhi	r2,6
   43128:	10a43504 	addi	r2,r2,-28460
   4312c:	10804617 	ldw	r2,280(r2)
   43130:	100d883a 	mov	r6,r2
   43134:	01698114 	movui	r5,42500
   43138:	d1201804 	addi	r4,gp,-32672
   4313c:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, NOISE_DIFF_SETTING1, SysPara.noise_diff_setting1);
   43140:	008001b4 	movhi	r2,6
   43144:	10a43504 	addi	r2,r2,-28460
   43148:	10800d17 	ldw	r2,52(r2)
   4314c:	100d883a 	mov	r6,r2
   43150:	01694054 	movui	r5,42241
   43154:	d1201804 	addi	r4,gp,-32672
   43158:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, NOISE_DIFF_SETTING2, SysPara.noise_diff_setting2);
   4315c:	008001b4 	movhi	r2,6
   43160:	10a43504 	addi	r2,r2,-28460
   43164:	10800e17 	ldw	r2,56(r2)
   43168:	100d883a 	mov	r6,r2
   4316c:	01694094 	movui	r5,42242
   43170:	d1201804 	addi	r4,gp,-32672
   43174:	0042ed00 	call	42ed0 <set_laser_paramter>

    set_laser_paramter(&Nios2FPGA_pck, APD_VOL_SETTING, SysPara.signal_thresold);
   43178:	008001b4 	movhi	r2,6
   4317c:	10a43504 	addi	r2,r2,-28460
   43180:	10800c17 	ldw	r2,48(r2)
   43184:	100d883a 	mov	r6,r2
   43188:	0169c094 	movui	r5,42754
   4318c:	d1201804 	addi	r4,gp,-32672
   43190:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, APD_VOL_SETTING, SysPara.apd_vol_base);
   43194:	008001b4 	movhi	r2,6
   43198:	10a43504 	addi	r2,r2,-28460
   4319c:	10800f17 	ldw	r2,60(r2)
   431a0:	100d883a 	mov	r6,r2
   431a4:	0169c094 	movui	r5,42754
   431a8:	d1201804 	addi	r4,gp,-32672
   431ac:	0042ed00 	call	42ed0 <set_laser_paramter>

    set_laser_paramter(&Nios2FPGA_pck, TEMP_VOL_COF1, SysPara.temp_volt_cof1);
   431b0:	008001b4 	movhi	r2,6
   431b4:	10a43504 	addi	r2,r2,-28460
   431b8:	10801717 	ldw	r2,92(r2)
   431bc:	100d883a 	mov	r6,r2
   431c0:	0169c0d4 	movui	r5,42755
   431c4:	d1201804 	addi	r4,gp,-32672
   431c8:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, TEMP_VOL_COF2, SysPara.temp_volt_cof2);
   431cc:	008001b4 	movhi	r2,6
   431d0:	10a43504 	addi	r2,r2,-28460
   431d4:	10801817 	ldw	r2,96(r2)
   431d8:	100d883a 	mov	r6,r2
   431dc:	0169c114 	movui	r5,42756
   431e0:	d1201804 	addi	r4,gp,-32672
   431e4:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, TEMP_VOL_INFLECTION, SysPara.temp_volt_inflection);
   431e8:	008001b4 	movhi	r2,6
   431ec:	10a43504 	addi	r2,r2,-28460
   431f0:	10801917 	ldw	r2,100(r2)
   431f4:	100d883a 	mov	r6,r2
   431f8:	0169c154 	movui	r5,42757
   431fc:	d1201804 	addi	r4,gp,-32672
   43200:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, TEMP_DISTANCE_COF1, SysPara.temp_distance_cof1);
   43204:	008001b4 	movhi	r2,6
   43208:	10a43504 	addi	r2,r2,-28460
   4320c:	10801a17 	ldw	r2,104(r2)
   43210:	100d883a 	mov	r6,r2
   43214:	0169c194 	movui	r5,42758
   43218:	d1201804 	addi	r4,gp,-32672
   4321c:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, TEMP_DISTANCE_COF2, SysPara.temp_distance_cof2);
   43220:	008001b4 	movhi	r2,6
   43224:	10a43504 	addi	r2,r2,-28460
   43228:	10801b17 	ldw	r2,108(r2)
   4322c:	100d883a 	mov	r6,r2
   43230:	0169c1d4 	movui	r5,42759
   43234:	d1201804 	addi	r4,gp,-32672
   43238:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, TEMP_DISTANCE_INFLECTION, SysPara.temp_distance_inflection);
   4323c:	008001b4 	movhi	r2,6
   43240:	10a43504 	addi	r2,r2,-28460
   43244:	10801c17 	ldw	r2,112(r2)
   43248:	100d883a 	mov	r6,r2
   4324c:	0169c214 	movui	r5,42760
   43250:	d1201804 	addi	r4,gp,-32672
   43254:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, MIN_DISTANCE_VALUE, SysPara.min_display_distance);
   43258:	008001b4 	movhi	r2,6
   4325c:	10a43504 	addi	r2,r2,-28460
   43260:	10801217 	ldw	r2,72(r2)
   43264:	100d883a 	mov	r6,r2
   43268:	016a8054 	movui	r5,43521
   4326c:	d1201804 	addi	r4,gp,-32672
   43270:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, FIRST_NOISE_FILTER, SysPara.first_noise_filter);
   43274:	008001b4 	movhi	r2,6
   43278:	10a43504 	addi	r2,r2,-28460
   4327c:	10801417 	ldw	r2,80(r2)
   43280:	100d883a 	mov	r6,r2
   43284:	016a80d4 	movui	r5,43523
   43288:	d1201804 	addi	r4,gp,-32672
   4328c:	0042ed00 	call	42ed0 <set_laser_paramter>

    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA1, SysPara.da_cycle_para1);
   43290:	008001b4 	movhi	r2,6
   43294:	10a43504 	addi	r2,r2,-28460
   43298:	10802317 	ldw	r2,140(r2)
   4329c:	100d883a 	mov	r6,r2
   432a0:	016b0054 	movui	r5,44033
   432a4:	d1201804 	addi	r4,gp,-32672
   432a8:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA2, SysPara.da_cycle_para2);
   432ac:	008001b4 	movhi	r2,6
   432b0:	10a43504 	addi	r2,r2,-28460
   432b4:	10802417 	ldw	r2,144(r2)
   432b8:	100d883a 	mov	r6,r2
   432bc:	016b0094 	movui	r5,44034
   432c0:	d1201804 	addi	r4,gp,-32672
   432c4:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA3, SysPara.da_cycle_para3);
   432c8:	008001b4 	movhi	r2,6
   432cc:	10a43504 	addi	r2,r2,-28460
   432d0:	10802517 	ldw	r2,148(r2)
   432d4:	100d883a 	mov	r6,r2
   432d8:	016b00d4 	movui	r5,44035
   432dc:	d1201804 	addi	r4,gp,-32672
   432e0:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA4, SysPara.da_cycle_para4);
   432e4:	008001b4 	movhi	r2,6
   432e8:	10a43504 	addi	r2,r2,-28460
   432ec:	10802617 	ldw	r2,152(r2)
   432f0:	100d883a 	mov	r6,r2
   432f4:	016b0114 	movui	r5,44036
   432f8:	d1201804 	addi	r4,gp,-32672
   432fc:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA5, SysPara.da_cycle_para5);
   43300:	008001b4 	movhi	r2,6
   43304:	10a43504 	addi	r2,r2,-28460
   43308:	10802717 	ldw	r2,156(r2)
   4330c:	100d883a 	mov	r6,r2
   43310:	016b0154 	movui	r5,44037
   43314:	d1201804 	addi	r4,gp,-32672
   43318:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA6, SysPara.da_cycle_para6);
   4331c:	008001b4 	movhi	r2,6
   43320:	10a43504 	addi	r2,r2,-28460
   43324:	10802817 	ldw	r2,160(r2)
   43328:	100d883a 	mov	r6,r2
   4332c:	016b0194 	movui	r5,44038
   43330:	d1201804 	addi	r4,gp,-32672
   43334:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA7, SysPara.da_cycle_para7);
   43338:	008001b4 	movhi	r2,6
   4333c:	10a43504 	addi	r2,r2,-28460
   43340:	10802917 	ldw	r2,164(r2)
   43344:	100d883a 	mov	r6,r2
   43348:	016b01d4 	movui	r5,44039
   4334c:	d1201804 	addi	r4,gp,-32672
   43350:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA8, SysPara.da_cycle_para8);
   43354:	008001b4 	movhi	r2,6
   43358:	10a43504 	addi	r2,r2,-28460
   4335c:	10802a17 	ldw	r2,168(r2)
   43360:	100d883a 	mov	r6,r2
   43364:	016b0214 	movui	r5,44040
   43368:	d1201804 	addi	r4,gp,-32672
   4336c:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, DA_CYCLE_PARA9, SysPara.da_cycle_para9);
   43370:	008001b4 	movhi	r2,6
   43374:	10a43504 	addi	r2,r2,-28460
   43378:	10802b17 	ldw	r2,172(r2)
   4337c:	100d883a 	mov	r6,r2
   43380:	016b0254 	movui	r5,44041
   43384:	d1201804 	addi	r4,gp,-32672
   43388:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, MIN_TARGET_SIZE, SysPara.min_target_size);
   4338c:	008001b4 	movhi	r2,6
   43390:	10a43504 	addi	r2,r2,-28460
   43394:	10804a17 	ldw	r2,296(r2)
   43398:	100d883a 	mov	r6,r2
   4339c:	016b4014 	movui	r5,44288
   433a0:	d1201804 	addi	r4,gp,-32672
   433a4:	0042ed00 	call	42ed0 <set_laser_paramter>
    set_laser_paramter(&Nios2FPGA_pck, PC_SET_HW_TYPE, SysPara.board_type);
   433a8:	008001b4 	movhi	r2,6
   433ac:	10a43504 	addi	r2,r2,-28460
   433b0:	10802c17 	ldw	r2,176(r2)
   433b4:	100d883a 	mov	r6,r2
   433b8:	01500184 	movi	r5,16390
   433bc:	d1201804 	addi	r4,gp,-32672
   433c0:	0042ed00 	call	42ed0 <set_laser_paramter>
    write_laser_presdo(SysPara.laser_presdo);
   433c4:	010001b4 	movhi	r4,6
   433c8:	21247104 	addi	r4,r4,-28220
   433cc:	00434080 	call	43408 <write_laser_presdo>
}
   433d0:	0001883a 	nop
   433d4:	e037883a 	mov	sp,fp
   433d8:	dfc00117 	ldw	ra,4(sp)
   433dc:	df000017 	ldw	fp,0(sp)
   433e0:	dec00204 	addi	sp,sp,8
   433e4:	f800283a 	ret

000433e8 <close_peripheral_dev>:

void close_peripheral_dev(void)
{
   433e8:	deffff04 	addi	sp,sp,-4
   433ec:	df000015 	stw	fp,0(sp)
   433f0:	d839883a 	mov	fp,sp
    set_laser_paramter(&Nios2FPGA_pck, MOTOR_ENABLE, DISABLE);
    set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, DISABLE);
    // set_laser_paramter(&Nios2FPGA_pck, LASER_ENABLE, DISABLE);
    // set_laser_paramter(&Nios2FPGA_pck, APD_VOL_SETTING, 550);
#endif
}
   433f4:	0001883a 	nop
   433f8:	e037883a 	mov	sp,fp
   433fc:	df000017 	ldw	fp,0(sp)
   43400:	dec00104 	addi	sp,sp,4
   43404:	f800283a 	ret

00043408 <write_laser_presdo>:

void write_laser_presdo(unsigned char *arr)
{
   43408:	defffb04 	addi	sp,sp,-20
   4340c:	dfc00415 	stw	ra,16(sp)
   43410:	df000315 	stw	fp,12(sp)
   43414:	df000304 	addi	fp,sp,12
   43418:	e13fff15 	stw	r4,-4(fp)
    int          i;
    unsigned int data;
    data = 0x1234a104;
   4341c:	00848d74 	movhi	r2,4661
   43420:	10a84104 	addi	r2,r2,-24316
   43424:	e0bffe15 	stw	r2,-8(fp)

    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   43428:	e0bffe17 	ldw	r2,-8(fp)
   4342c:	1004143a 	roli	r2,r2,16
   43430:	100d883a 	mov	r6,r2
   43434:	01400234 	movhi	r5,8
   43438:	29484004 	addi	r5,r5,8448
   4343c:	01000234 	movhi	r4,8
   43440:	21087a04 	addi	r4,r4,8680
   43444:	004a8280 	call	4a828 <altera_avalon_fifo_write_fifo>
    data = 30;
   43448:	00800784 	movi	r2,30
   4344c:	e0bffe15 	stw	r2,-8(fp)
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   43450:	e0bffe17 	ldw	r2,-8(fp)
   43454:	1004143a 	roli	r2,r2,16
   43458:	100d883a 	mov	r6,r2
   4345c:	01400234 	movhi	r5,8
   43460:	29484004 	addi	r5,r5,8448
   43464:	01000234 	movhi	r4,8
   43468:	21087a04 	addi	r4,r4,8680
   4346c:	004a8280 	call	4a828 <altera_avalon_fifo_write_fifo>

    //    data = 0x1000;
    for(i = 0; i < sizeof(SysPara.laser_presdo); i = i + 4)
   43470:	e03ffd15 	stw	zero,-12(fp)
   43474:	00002906 	br	4351c <write_laser_presdo+0x114>
    {
        data = (arr[i] << 24) + (arr[i + 1] << 16) + (arr[i + 2] << 8) + (arr[i + 3] << 0);
   43478:	e0bffd17 	ldw	r2,-12(fp)
   4347c:	e0ffff17 	ldw	r3,-4(fp)
   43480:	1885883a 	add	r2,r3,r2
   43484:	10800003 	ldbu	r2,0(r2)
   43488:	10803fcc 	andi	r2,r2,255
   4348c:	1006963a 	slli	r3,r2,24
   43490:	e0bffd17 	ldw	r2,-12(fp)
   43494:	10800044 	addi	r2,r2,1
   43498:	e13fff17 	ldw	r4,-4(fp)
   4349c:	2085883a 	add	r2,r4,r2
   434a0:	10800003 	ldbu	r2,0(r2)
   434a4:	10803fcc 	andi	r2,r2,255
   434a8:	1004943a 	slli	r2,r2,16
   434ac:	1887883a 	add	r3,r3,r2
   434b0:	e0bffd17 	ldw	r2,-12(fp)
   434b4:	10800084 	addi	r2,r2,2
   434b8:	e13fff17 	ldw	r4,-4(fp)
   434bc:	2085883a 	add	r2,r4,r2
   434c0:	10800003 	ldbu	r2,0(r2)
   434c4:	10803fcc 	andi	r2,r2,255
   434c8:	1004923a 	slli	r2,r2,8
   434cc:	1887883a 	add	r3,r3,r2
   434d0:	e0bffd17 	ldw	r2,-12(fp)
   434d4:	108000c4 	addi	r2,r2,3
   434d8:	e13fff17 	ldw	r4,-4(fp)
   434dc:	2085883a 	add	r2,r4,r2
   434e0:	10800003 	ldbu	r2,0(r2)
   434e4:	10803fcc 	andi	r2,r2,255
   434e8:	1885883a 	add	r2,r3,r2
   434ec:	e0bffe15 	stw	r2,-8(fp)
        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   434f0:	e0bffe17 	ldw	r2,-8(fp)
   434f4:	1004143a 	roli	r2,r2,16
   434f8:	100d883a 	mov	r6,r2
   434fc:	01400234 	movhi	r5,8
   43500:	29484004 	addi	r5,r5,8448
   43504:	01000234 	movhi	r4,8
   43508:	21087a04 	addi	r4,r4,8680
   4350c:	004a8280 	call	4a828 <altera_avalon_fifo_write_fifo>
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
    data = 30;
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));

    //    data = 0x1000;
    for(i = 0; i < sizeof(SysPara.laser_presdo); i = i + 4)
   43510:	e0bffd17 	ldw	r2,-12(fp)
   43514:	10800104 	addi	r2,r2,4
   43518:	e0bffd15 	stw	r2,-12(fp)
   4351c:	e0bffd17 	ldw	r2,-12(fp)
   43520:	108007b0 	cmpltui	r2,r2,30
   43524:	103fd41e 	bne	r2,zero,43478 <__reset+0xfffc2478>
    {
        data = (arr[i] << 24) + (arr[i + 1] << 16) + (arr[i + 2] << 8) + (arr[i + 3] << 0);
        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
    }
    data = 0xccccdddd;
   43528:	00b33374 	movhi	r2,52429
   4352c:	10b77744 	addi	r2,r2,-8739
   43530:	e0bffe15 	stw	r2,-8(fp)
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   43534:	e0bffe17 	ldw	r2,-8(fp)
   43538:	1004143a 	roli	r2,r2,16
   4353c:	100d883a 	mov	r6,r2
   43540:	01400234 	movhi	r5,8
   43544:	29484004 	addi	r5,r5,8448
   43548:	01000234 	movhi	r4,8
   4354c:	21087a04 	addi	r4,r4,8680
   43550:	004a8280 	call	4a828 <altera_avalon_fifo_write_fifo>
}
   43554:	0001883a 	nop
   43558:	e037883a 	mov	sp,fp
   4355c:	dfc00117 	ldw	ra,4(sp)
   43560:	df000017 	ldw	fp,0(sp)
   43564:	dec00204 	addi	sp,sp,8
   43568:	f800283a 	ret

0004356c <pc_data_to_fpga>:
unsigned char send_buffer[8448];  // 定义一个2KB的数组，用来存放Socket的通信数据
/*
 *转发pc数据到fpga
 */
bool pc_data_to_fpga(unsigned int *data, unsigned int len)
{
   4356c:	defffb04 	addi	sp,sp,-20
   43570:	dfc00415 	stw	ra,16(sp)
   43574:	df000315 	stw	fp,12(sp)
   43578:	df000304 	addi	fp,sp,12
   4357c:	e13ffe15 	stw	r4,-8(fp)
   43580:	e17fff15 	stw	r5,-4(fp)
    int i;
    for(i = 0; i < len; i++)
   43584:	e03ffd15 	stw	zero,-12(fp)
   43588:	00003406 	br	4365c <pc_data_to_fpga+0xf0>
    {
        // nios 采用小端格式，char 数组 转 unsigned int 数组， 字节顺序会颠倒
        data[i] = ((data[i] & 0xff000000) >> 24) | ((data[i] & 0x00ff0000) >> 8) | ((data[i] & 0x0000ff00) << 8) | ((data[i] & 0x000000ff) << 32);
   4358c:	e0bffd17 	ldw	r2,-12(fp)
   43590:	1085883a 	add	r2,r2,r2
   43594:	1085883a 	add	r2,r2,r2
   43598:	1007883a 	mov	r3,r2
   4359c:	e0bffe17 	ldw	r2,-8(fp)
   435a0:	10c7883a 	add	r3,r2,r3
   435a4:	e0bffd17 	ldw	r2,-12(fp)
   435a8:	1085883a 	add	r2,r2,r2
   435ac:	1085883a 	add	r2,r2,r2
   435b0:	1009883a 	mov	r4,r2
   435b4:	e0bffe17 	ldw	r2,-8(fp)
   435b8:	1105883a 	add	r2,r2,r4
   435bc:	10800017 	ldw	r2,0(r2)
   435c0:	1008d63a 	srli	r4,r2,24
   435c4:	e0bffd17 	ldw	r2,-12(fp)
   435c8:	1085883a 	add	r2,r2,r2
   435cc:	1085883a 	add	r2,r2,r2
   435d0:	100b883a 	mov	r5,r2
   435d4:	e0bffe17 	ldw	r2,-8(fp)
   435d8:	1145883a 	add	r2,r2,r5
   435dc:	10800017 	ldw	r2,0(r2)
   435e0:	10803fec 	andhi	r2,r2,255
   435e4:	1004d23a 	srli	r2,r2,8
   435e8:	2088b03a 	or	r4,r4,r2
   435ec:	e0bffd17 	ldw	r2,-12(fp)
   435f0:	1085883a 	add	r2,r2,r2
   435f4:	1085883a 	add	r2,r2,r2
   435f8:	100b883a 	mov	r5,r2
   435fc:	e0bffe17 	ldw	r2,-8(fp)
   43600:	1145883a 	add	r2,r2,r5
   43604:	10800017 	ldw	r2,0(r2)
   43608:	10bfc00c 	andi	r2,r2,65280
   4360c:	1004923a 	slli	r2,r2,8
   43610:	2084b03a 	or	r2,r4,r2
   43614:	18800015 	stw	r2,0(r3)

        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data[i] >> 16) + (data[i] << 16));
   43618:	e0bffd17 	ldw	r2,-12(fp)
   4361c:	1085883a 	add	r2,r2,r2
   43620:	1085883a 	add	r2,r2,r2
   43624:	1007883a 	mov	r3,r2
   43628:	e0bffe17 	ldw	r2,-8(fp)
   4362c:	10c5883a 	add	r2,r2,r3
   43630:	10800017 	ldw	r2,0(r2)
   43634:	1004143a 	roli	r2,r2,16
   43638:	100d883a 	mov	r6,r2
   4363c:	01400234 	movhi	r5,8
   43640:	29484004 	addi	r5,r5,8448
   43644:	01000234 	movhi	r4,8
   43648:	21087a04 	addi	r4,r4,8680
   4364c:	004a8280 	call	4a828 <altera_avalon_fifo_write_fifo>
 *转发pc数据到fpga
 */
bool pc_data_to_fpga(unsigned int *data, unsigned int len)
{
    int i;
    for(i = 0; i < len; i++)
   43650:	e0bffd17 	ldw	r2,-12(fp)
   43654:	10800044 	addi	r2,r2,1
   43658:	e0bffd15 	stw	r2,-12(fp)
   4365c:	e0fffd17 	ldw	r3,-12(fp)
   43660:	e0bfff17 	ldw	r2,-4(fp)
   43664:	18bfc936 	bltu	r3,r2,4358c <__reset+0xfffc258c>
        // nios 采用小端格式，char 数组 转 unsigned int 数组， 字节顺序会颠倒
        data[i] = ((data[i] & 0xff000000) >> 24) | ((data[i] & 0x00ff0000) >> 8) | ((data[i] & 0x0000ff00) << 8) | ((data[i] & 0x000000ff) << 32);

        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data[i] >> 16) + (data[i] << 16));
    }
    return true;
   43668:	00800044 	movi	r2,1
}
   4366c:	e037883a 	mov	sp,fp
   43670:	dfc00117 	ldw	ra,4(sp)
   43674:	df000017 	ldw	fp,0(sp)
   43678:	dec00204 	addi	sp,sp,8
   4367c:	f800283a 	ret

00043680 <pc2dev_parse>:

void pc2dev_parse(SOCKET s, unsigned char *buf, int len)
{
   43680:	defff504 	addi	sp,sp,-44
   43684:	dfc00a15 	stw	ra,40(sp)
   43688:	df000915 	stw	fp,36(sp)
   4368c:	dc000815 	stw	r16,32(sp)
   43690:	df000904 	addi	fp,sp,36
   43694:	2005883a 	mov	r2,r4
   43698:	e17ffd15 	stw	r5,-12(fp)
   4369c:	e1bffe15 	stw	r6,-8(fp)
   436a0:	e0bffc05 	stb	r2,-16(fp)
    int            send_len;
    unsigned short recv_pos;
    unsigned int   para;        // PC 传给 nios 的参数值
    int            packet_len;  // buf里可能有多包数据，本包数据长度

    while(len != 0)
   436a4:	00059a06 	br	44d10 <pc2dev_parse+0x1690>
    {
        if(buf[0] == 0x02)  // 命令属于tim561协议
   436a8:	e0bffd17 	ldw	r2,-12(fp)
   436ac:	10800003 	ldbu	r2,0(r2)
   436b0:	10803fcc 	andi	r2,r2,255
   436b4:	10800098 	cmpnei	r2,r2,2
   436b8:	1000071e 	bne	r2,zero,436d8 <pc2dev_parse+0x58>
        {
            sick_protocol_process(s, buf, len);
   436bc:	e0bffc03 	ldbu	r2,-16(fp)
   436c0:	e1bffe17 	ldw	r6,-8(fp)
   436c4:	e17ffd17 	ldw	r5,-12(fp)
   436c8:	1009883a 	mov	r4,r2
   436cc:	0045fc00 	call	45fc0 <sick_protocol_process>
            len = 0;
   436d0:	e03ffe15 	stw	zero,-8(fp)
   436d4:	00058e06 	br	44d10 <pc2dev_parse+0x1690>
        }
        else  // 自定义协议
        {
            para = (buf[8] << 24) + (buf[9] << 16) + (buf[10] << 8) + buf[11];
   436d8:	e0bffd17 	ldw	r2,-12(fp)
   436dc:	10800204 	addi	r2,r2,8
   436e0:	10800003 	ldbu	r2,0(r2)
   436e4:	10803fcc 	andi	r2,r2,255
   436e8:	1006963a 	slli	r3,r2,24
   436ec:	e0bffd17 	ldw	r2,-12(fp)
   436f0:	10800244 	addi	r2,r2,9
   436f4:	10800003 	ldbu	r2,0(r2)
   436f8:	10803fcc 	andi	r2,r2,255
   436fc:	1004943a 	slli	r2,r2,16
   43700:	1887883a 	add	r3,r3,r2
   43704:	e0bffd17 	ldw	r2,-12(fp)
   43708:	10800284 	addi	r2,r2,10
   4370c:	10800003 	ldbu	r2,0(r2)
   43710:	10803fcc 	andi	r2,r2,255
   43714:	1004923a 	slli	r2,r2,8
   43718:	1887883a 	add	r3,r3,r2
   4371c:	e0bffd17 	ldw	r2,-12(fp)
   43720:	108002c4 	addi	r2,r2,11
   43724:	10800003 	ldbu	r2,0(r2)
   43728:	10803fcc 	andi	r2,r2,255
   4372c:	1885883a 	add	r2,r3,r2
   43730:	e0bff815 	stw	r2,-32(fp)
            /*
             *
             */
            pc2nios.head     = (buf[0] << 8) + buf[1];
   43734:	e0bffd17 	ldw	r2,-12(fp)
   43738:	10800003 	ldbu	r2,0(r2)
   4373c:	10803fcc 	andi	r2,r2,255
   43740:	1006923a 	slli	r3,r2,8
   43744:	e0bffd17 	ldw	r2,-12(fp)
   43748:	10800044 	addi	r2,r2,1
   4374c:	10800003 	ldbu	r2,0(r2)
   43750:	10803fcc 	andi	r2,r2,255
   43754:	1885883a 	add	r2,r3,r2
   43758:	1007883a 	mov	r3,r2
   4375c:	008001b4 	movhi	r2,6
   43760:	10a48104 	addi	r2,r2,-28156
   43764:	10c00015 	stw	r3,0(r2)
            pc2nios.command  = (buf[2] << 8) + buf[3];
   43768:	e0bffd17 	ldw	r2,-12(fp)
   4376c:	10800084 	addi	r2,r2,2
   43770:	10800003 	ldbu	r2,0(r2)
   43774:	10803fcc 	andi	r2,r2,255
   43778:	1006923a 	slli	r3,r2,8
   4377c:	e0bffd17 	ldw	r2,-12(fp)
   43780:	108000c4 	addi	r2,r2,3
   43784:	10800003 	ldbu	r2,0(r2)
   43788:	10803fcc 	andi	r2,r2,255
   4378c:	1885883a 	add	r2,r3,r2
   43790:	1007883a 	mov	r3,r2
   43794:	008001b4 	movhi	r2,6
   43798:	10a48104 	addi	r2,r2,-28156
   4379c:	10c00115 	stw	r3,4(r2)
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
   437a0:	e0bffd17 	ldw	r2,-12(fp)
   437a4:	10800104 	addi	r2,r2,4
   437a8:	10800003 	ldbu	r2,0(r2)
   437ac:	10803fcc 	andi	r2,r2,255
   437b0:	1006963a 	slli	r3,r2,24
   437b4:	e0bffd17 	ldw	r2,-12(fp)
   437b8:	10800144 	addi	r2,r2,5
   437bc:	10800003 	ldbu	r2,0(r2)
   437c0:	10803fcc 	andi	r2,r2,255
   437c4:	1004943a 	slli	r2,r2,16
   437c8:	1887883a 	add	r3,r3,r2
   437cc:	e0bffd17 	ldw	r2,-12(fp)
   437d0:	10800184 	addi	r2,r2,6
   437d4:	10800003 	ldbu	r2,0(r2)
   437d8:	10803fcc 	andi	r2,r2,255
   437dc:	1004923a 	slli	r2,r2,8
   437e0:	1887883a 	add	r3,r3,r2
   437e4:	e0bffd17 	ldw	r2,-12(fp)
   437e8:	108001c4 	addi	r2,r2,7
   437ec:	10800003 	ldbu	r2,0(r2)
   437f0:	10803fcc 	andi	r2,r2,255
   437f4:	1885883a 	add	r2,r3,r2
   437f8:	1007883a 	mov	r3,r2
   437fc:	008001b4 	movhi	r2,6
   43800:	10a48104 	addi	r2,r2,-28156
   43804:	10c00215 	stw	r3,8(r2)
            SysPara.pc_command_value++;
   43808:	008001b4 	movhi	r2,6
   4380c:	10a43504 	addi	r2,r2,-28460
   43810:	10804b17 	ldw	r2,300(r2)
   43814:	10c00044 	addi	r3,r2,1
   43818:	008001b4 	movhi	r2,6
   4381c:	10a43504 	addi	r2,r2,-28460
   43820:	10c04b15 	stw	r3,300(r2)

            switch(pc2nios.command)
   43824:	008001b4 	movhi	r2,6
   43828:	10a48104 	addi	r2,r2,-28156
   4382c:	10800117 	ldw	r2,4(r2)
   43830:	00e90154 	movui	r3,41989
   43834:	10c28f26 	beq	r2,r3,44274 <pc2dev_parse+0xbf4>
   43838:	10e901a8 	cmpgeui	r3,r2,41990
   4383c:	1800481e 	bne	r3,zero,43960 <pc2dev_parse+0x2e0>
   43840:	10d040a0 	cmpeqi	r3,r2,16642
   43844:	1804dd1e 	bne	r3,zero,44bbc <pc2dev_parse+0x153c>
   43848:	10d040e8 	cmpgeui	r3,r2,16643
   4384c:	1800221e 	bne	r3,zero,438d8 <pc2dev_parse+0x258>
   43850:	10d001e0 	cmpeqi	r3,r2,16391
   43854:	1801841e 	bne	r3,zero,43e68 <pc2dev_parse+0x7e8>
   43858:	10d00228 	cmpgeui	r3,r2,16392
   4385c:	18000e1e 	bne	r3,zero,43898 <pc2dev_parse+0x218>
   43860:	10d000e0 	cmpeqi	r3,r2,16387
   43864:	1800da1e 	bne	r3,zero,43bd0 <pc2dev_parse+0x550>
   43868:	10d00128 	cmpgeui	r3,r2,16388
   4386c:	1800051e 	bne	r3,zero,43884 <pc2dev_parse+0x204>
   43870:	10d00060 	cmpeqi	r3,r2,16385
   43874:	1800841e 	bne	r3,zero,43a88 <pc2dev_parse+0x408>
   43878:	109000a0 	cmpeqi	r2,r2,16386
   4387c:	1000ba1e 	bne	r2,zero,43b68 <pc2dev_parse+0x4e8>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   43880:	00051606 	br	44cdc <pc2dev_parse+0x165c>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   43884:	10d00160 	cmpeqi	r3,r2,16389
   43888:	18014f1e 	bne	r3,zero,43dc8 <pc2dev_parse+0x748>
   4388c:	109001a8 	cmpgeui	r2,r2,16390
   43890:	1001681e 	bne	r2,zero,43e34 <pc2dev_parse+0x7b4>
   43894:	00013006 	br	43d58 <pc2dev_parse+0x6d8>
   43898:	10d00420 	cmpeqi	r3,r2,16400
   4389c:	18018a1e 	bne	r3,zero,43ec8 <pc2dev_parse+0x848>
   438a0:	10d00468 	cmpgeui	r3,r2,16401
   438a4:	1800051e 	bne	r3,zero,438bc <pc2dev_parse+0x23c>
   438a8:	10d00220 	cmpeqi	r3,r2,16392
   438ac:	1801721e 	bne	r3,zero,43e78 <pc2dev_parse+0x7f8>
   438b0:	10900260 	cmpeqi	r2,r2,16393
   438b4:	1001731e 	bne	r2,zero,43e84 <pc2dev_parse+0x804>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   438b8:	00050806 	br	44cdc <pc2dev_parse+0x165c>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   438bc:	10d04020 	cmpeqi	r3,r2,16640
   438c0:	18043c1e 	bne	r3,zero,449b4 <pc2dev_parse+0x1334>
   438c4:	10d04068 	cmpgeui	r3,r2,16641
   438c8:	1804841e 	bne	r3,zero,44adc <pc2dev_parse+0x145c>
   438cc:	10900460 	cmpeqi	r2,r2,16401
   438d0:	10018e1e 	bne	r2,zero,43f0c <pc2dev_parse+0x88c>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   438d4:	00050106 	br	44cdc <pc2dev_parse+0x165c>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   438d8:	00e88054 	movui	r3,41473
   438dc:	10c1fb26 	beq	r2,r3,440cc <pc2dev_parse+0xa4c>
   438e0:	10e880a8 	cmpgeui	r3,r2,41474
   438e4:	1800101e 	bne	r3,zero,43928 <pc2dev_parse+0x2a8>
   438e8:	00e84094 	movui	r3,41218
   438ec:	10c1ae26 	beq	r2,r3,43fa8 <pc2dev_parse+0x928>
   438f0:	10e840e8 	cmpgeui	r3,r2,41219
   438f4:	1800051e 	bne	r3,zero,4390c <pc2dev_parse+0x28c>
   438f8:	00e84014 	movui	r3,41216
   438fc:	10c18826 	beq	r2,r3,43f20 <pc2dev_parse+0x8a0>
   43900:	00e84054 	movui	r3,41217
   43904:	10c19b26 	beq	r2,r3,43f74 <pc2dev_parse+0x8f4>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   43908:	0004f406 	br	44cdc <pc2dev_parse+0x165c>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   4390c:	00e84114 	movui	r3,41220
   43910:	10c1b826 	beq	r2,r3,43ff4 <pc2dev_parse+0x974>
   43914:	10e84130 	cmpltui	r3,r2,41220
   43918:	1801c71e 	bne	r3,zero,44038 <pc2dev_parse+0x9b8>
   4391c:	00e88014 	movui	r3,41472
   43920:	10c1d526 	beq	r2,r3,44078 <pc2dev_parse+0x9f8>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   43924:	0004ed06 	br	44cdc <pc2dev_parse+0x165c>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   43928:	00e90054 	movui	r3,41985
   4392c:	10c21d26 	beq	r2,r3,441a4 <pc2dev_parse+0xb24>
   43930:	10e900a8 	cmpgeui	r3,r2,41986
   43934:	1800051e 	bne	r3,zero,4394c <pc2dev_parse+0x2cc>
   43938:	00e8c054 	movui	r3,41729
   4393c:	10c1f626 	beq	r2,r3,44118 <pc2dev_parse+0xa98>
   43940:	00e8c094 	movui	r3,41730
   43944:	10c20426 	beq	r2,r3,44158 <pc2dev_parse+0xad8>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   43948:	0004e406 	br	44cdc <pc2dev_parse+0x165c>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   4394c:	00e900d4 	movui	r3,41987
   43950:	10c22e26 	beq	r2,r3,4420c <pc2dev_parse+0xb8c>
   43954:	10a90128 	cmpgeui	r2,r2,41988
   43958:	1002391e 	bne	r2,zero,44240 <pc2dev_parse+0xbc0>
   4395c:	00021e06 	br	441d8 <pc2dev_parse+0xb58>
   43960:	00e9c214 	movui	r3,42760
   43964:	10c31d26 	beq	r2,r3,445dc <pc2dev_parse+0xf5c>
   43968:	10e9c268 	cmpgeui	r3,r2,42761
   4396c:	1800221e 	bne	r3,zero,439f8 <pc2dev_parse+0x378>
   43970:	00e9c054 	movui	r3,42753
   43974:	10c29a26 	beq	r2,r3,443e0 <pc2dev_parse+0xd60>
   43978:	10e9c0a8 	cmpgeui	r3,r2,42754
   4397c:	1800101e 	bne	r3,zero,439c0 <pc2dev_parse+0x340>
   43980:	00e98054 	movui	r3,42497
   43984:	10c24826 	beq	r2,r3,442a8 <pc2dev_parse+0xc28>
   43988:	10e980a8 	cmpgeui	r3,r2,42498
   4398c:	1800051e 	bne	r3,zero,439a4 <pc2dev_parse+0x324>
   43990:	00e94054 	movui	r3,42241
   43994:	10c27826 	beq	r2,r3,44378 <pc2dev_parse+0xcf8>
   43998:	00e94094 	movui	r3,42242
   4399c:	10c28326 	beq	r2,r3,443ac <pc2dev_parse+0xd2c>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   439a0:	0004ce06 	br	44cdc <pc2dev_parse+0x165c>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   439a4:	00e980d4 	movui	r3,42499
   439a8:	10c25926 	beq	r2,r3,44310 <pc2dev_parse+0xc90>
   439ac:	10e980f0 	cmpltui	r3,r2,42499
   439b0:	18024a1e 	bne	r3,zero,442dc <pc2dev_parse+0xc5c>
   439b4:	00e98114 	movui	r3,42500
   439b8:	10c26226 	beq	r2,r3,44344 <pc2dev_parse+0xcc4>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   439bc:	0004c706 	br	44cdc <pc2dev_parse+0x165c>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   439c0:	00e9c114 	movui	r3,42756
   439c4:	10c2c226 	beq	r2,r3,444d0 <pc2dev_parse+0xe50>
   439c8:	10e9c168 	cmpgeui	r3,r2,42757
   439cc:	1800051e 	bne	r3,zero,439e4 <pc2dev_parse+0x364>
   439d0:	00e9c094 	movui	r3,42754
   439d4:	10c29226 	beq	r2,r3,44420 <pc2dev_parse+0xda0>
   439d8:	00e9c0d4 	movui	r3,42755
   439dc:	10c2a926 	beq	r2,r3,44484 <pc2dev_parse+0xe04>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   439e0:	0004be06 	br	44cdc <pc2dev_parse+0x165c>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   439e4:	00e9c194 	movui	r3,42758
   439e8:	10c2dc26 	beq	r2,r3,4455c <pc2dev_parse+0xedc>
   439ec:	10a9c1e8 	cmpgeui	r2,r2,42759
   439f0:	1002ea1e 	bne	r2,zero,4459c <pc2dev_parse+0xf1c>
   439f4:	0002c906 	br	4451c <pc2dev_parse+0xe9c>
   439f8:	00eb00d4 	movui	r3,44035
   439fc:	10c36d26 	beq	r2,r3,447b4 <pc2dev_parse+0x1134>
   43a00:	10eb0128 	cmpgeui	r3,r2,44036
   43a04:	1800101e 	bne	r3,zero,43a48 <pc2dev_parse+0x3c8>
   43a08:	00ea80d4 	movui	r3,43523
   43a0c:	10c32626 	beq	r2,r3,446a8 <pc2dev_parse+0x1028>
   43a10:	10ea8128 	cmpgeui	r3,r2,43524
   43a14:	1800051e 	bne	r3,zero,43a2c <pc2dev_parse+0x3ac>
   43a18:	00e9c254 	movui	r3,42761
   43a1c:	10c2ff26 	beq	r2,r3,4461c <pc2dev_parse+0xf9c>
   43a20:	00ea8054 	movui	r3,43521
   43a24:	10c31026 	beq	r2,r3,44668 <pc2dev_parse+0xfe8>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   43a28:	0004ac06 	br	44cdc <pc2dev_parse+0x165c>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   43a2c:	00eb0054 	movui	r3,44033
   43a30:	10c34026 	beq	r2,r3,44734 <pc2dev_parse+0x10b4>
   43a34:	10eb00a8 	cmpgeui	r3,r2,44034
   43a38:	18034e1e 	bne	r3,zero,44774 <pc2dev_parse+0x10f4>
   43a3c:	00eac014 	movui	r3,43776
   43a40:	10c32c26 	beq	r2,r3,446f4 <pc2dev_parse+0x1074>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   43a44:	0004a506 	br	44cdc <pc2dev_parse+0x165c>
            pc2nios.head     = (buf[0] << 8) + buf[1];
            pc2nios.command  = (buf[2] << 8) + buf[3];
            pc2nios.data_len = (buf[4] << 24) + (buf[5] << 16) + (buf[6] << 8) + (buf[7]);
            SysPara.pc_command_value++;

            switch(pc2nios.command)
   43a48:	00eb01d4 	movui	r3,44039
   43a4c:	10c39926 	beq	r2,r3,448b4 <pc2dev_parse+0x1234>
   43a50:	10eb0228 	cmpgeui	r3,r2,44040
   43a54:	1800051e 	bne	r3,zero,43a6c <pc2dev_parse+0x3ec>
   43a58:	00eb0154 	movui	r3,44037
   43a5c:	10c37526 	beq	r2,r3,44834 <pc2dev_parse+0x11b4>
   43a60:	10ab01a8 	cmpgeui	r2,r2,44038
   43a64:	1003831e 	bne	r2,zero,44874 <pc2dev_parse+0x11f4>
   43a68:	00036206 	br	447f4 <pc2dev_parse+0x1174>
   43a6c:	00eb0254 	movui	r3,44041
   43a70:	10c3b026 	beq	r2,r3,44934 <pc2dev_parse+0x12b4>
   43a74:	10eb0270 	cmpltui	r3,r2,44041
   43a78:	18039e1e 	bne	r3,zero,448f4 <pc2dev_parse+0x1274>
   43a7c:	00eb4014 	movui	r3,44288
   43a80:	10c3bc26 	beq	r2,r3,44974 <pc2dev_parse+0x12f4>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
                        image_erase(i);
                    break;
                default:
                    break;
   43a84:	00049506 	br	44cdc <pc2dev_parse+0x165c>
            switch(pc2nios.command)
            {
                // 设置使用那个报警区域，这个值会写到E2PROM，每次设置值都会有3bit为1
                // 从E2PROM里读出报警区域数据，作为比较
                case PC_SET_ALARM_REGION:
                    alarm_region.select = para;
   43a88:	008001b4 	movhi	r2,6
   43a8c:	10a48a04 	addi	r2,r2,-28120
   43a90:	e0fff817 	ldw	r3,-32(fp)
   43a94:	10c1bd15 	stw	r3,1780(r2)

                    if(alarm_region.select <= 15)  // 范围保护
   43a98:	008001b4 	movhi	r2,6
   43a9c:	10a48a04 	addi	r2,r2,-28120
   43aa0:	1081bd17 	ldw	r2,1780(r2)
   43aa4:	10800428 	cmpgeui	r2,r2,16
   43aa8:	10049c1e 	bne	r2,zero,44d1c <pc2dev_parse+0x169c>
                    {
                        eeprom_write_byte(CUR_ALARM_GROUP + 2, buf[10]);
   43aac:	e0bffd17 	ldw	r2,-12(fp)
   43ab0:	10800284 	addi	r2,r2,10
   43ab4:	10800003 	ldbu	r2,0(r2)
   43ab8:	10803fcc 	andi	r2,r2,255
   43abc:	100b883a 	mov	r5,r2
   43ac0:	01000084 	movi	r4,2
   43ac4:	0041f280 	call	41f28 <eeprom_write_byte>
                        eeprom_write_byte(CUR_ALARM_GROUP + 3, buf[11]);
   43ac8:	e0bffd17 	ldw	r2,-12(fp)
   43acc:	108002c4 	addi	r2,r2,11
   43ad0:	10800003 	ldbu	r2,0(r2)
   43ad4:	10803fcc 	andi	r2,r2,255
   43ad8:	100b883a 	mov	r5,r2
   43adc:	010000c4 	movi	r4,3
   43ae0:	0041f280 	call	41f28 <eeprom_write_byte>
                    }
                    else
                        return;
                    //  接受到设置后, 从E2PROM里读出之前的设置数据
                    region_read_from_rom(&alarm_region, alarm_region.select * 3 + 0);
   43ae4:	008001b4 	movhi	r2,6
   43ae8:	10a48a04 	addi	r2,r2,-28120
   43aec:	10c1bd17 	ldw	r3,1780(r2)
   43af0:	1805883a 	mov	r2,r3
   43af4:	1085883a 	add	r2,r2,r2
   43af8:	10c5883a 	add	r2,r2,r3
   43afc:	100b883a 	mov	r5,r2
   43b00:	010001b4 	movhi	r4,6
   43b04:	21248a04 	addi	r4,r4,-28120
   43b08:	00459880 	call	45988 <region_read_from_rom>
                    region_read_from_rom(&alarm_region, alarm_region.select * 3 + 1);
   43b0c:	008001b4 	movhi	r2,6
   43b10:	10a48a04 	addi	r2,r2,-28120
   43b14:	10c1bd17 	ldw	r3,1780(r2)
   43b18:	1805883a 	mov	r2,r3
   43b1c:	1085883a 	add	r2,r2,r2
   43b20:	10c5883a 	add	r2,r2,r3
   43b24:	10800044 	addi	r2,r2,1
   43b28:	100b883a 	mov	r5,r2
   43b2c:	010001b4 	movhi	r4,6
   43b30:	21248a04 	addi	r4,r4,-28120
   43b34:	00459880 	call	45988 <region_read_from_rom>
                    region_read_from_rom(&alarm_region, alarm_region.select * 3 + 2);
   43b38:	008001b4 	movhi	r2,6
   43b3c:	10a48a04 	addi	r2,r2,-28120
   43b40:	10c1bd17 	ldw	r3,1780(r2)
   43b44:	1805883a 	mov	r2,r3
   43b48:	1085883a 	add	r2,r2,r2
   43b4c:	10c5883a 	add	r2,r2,r3
   43b50:	10800084 	addi	r2,r2,2
   43b54:	100b883a 	mov	r5,r2
   43b58:	010001b4 	movhi	r4,6
   43b5c:	21248a04 	addi	r4,r4,-28120
   43b60:	00459880 	call	45988 <region_read_from_rom>
                    break;
   43b64:	00045d06 	br	44cdc <pc2dev_parse+0x165c>
                case PC_READ_ALARM_REGION:
                    if(para <= 15)
   43b68:	e0bff817 	ldw	r2,-32(fp)
   43b6c:	10800428 	cmpgeui	r2,r2,16
   43b70:	10041d1e 	bne	r2,zero,44be8 <pc2dev_parse+0x1568>
                    {
                        nios2pc.command  = NIOS_UP_ALARM_REGION;
   43b74:	008001b4 	movhi	r2,6
   43b78:	10a48504 	addi	r2,r2,-28140
   43b7c:	00d40044 	movi	r3,20481
   43b80:	10c00115 	stw	r3,4(r2)
                        nios2pc.data_len = 4;
   43b84:	008001b4 	movhi	r2,6
   43b88:	10a48504 	addi	r2,r2,-28140
   43b8c:	00c00104 	movi	r3,4
   43b90:	10c00215 	stw	r3,8(r2)
                        send_len         = pc2dev_packet(&nios2pc, send_buffer);
   43b94:	014001b4 	movhi	r5,6
   43b98:	2946d604 	addi	r5,r5,7000
   43b9c:	010001b4 	movhi	r4,6
   43ba0:	21248504 	addi	r4,r4,-28140
   43ba4:	0044d380 	call	44d38 <pc2dev_packet>
   43ba8:	e0bff915 	stw	r2,-28(fp)
                        send(s, send_buffer, send_len);
   43bac:	e0fffc03 	ldbu	r3,-16(fp)
   43bb0:	e0bff917 	ldw	r2,-28(fp)
   43bb4:	10bfffcc 	andi	r2,r2,65535
   43bb8:	100d883a 	mov	r6,r2
   43bbc:	014001b4 	movhi	r5,6
   43bc0:	2946d604 	addi	r5,r5,7000
   43bc4:	1809883a 	mov	r4,r3
   43bc8:	0046f500 	call	46f50 <send>
                    }
                    break;
   43bcc:	00040606 	br	44be8 <pc2dev_parse+0x1568>
                case PC_LOAD_REGION_DATA:
                    // 下传区域边界数据,写入E2PROM的时候,同时写入
                    alarm_region.wr_which = buf[8];
   43bd0:	e0bffd17 	ldw	r2,-12(fp)
   43bd4:	10c00203 	ldbu	r3,8(r2)
   43bd8:	008001b4 	movhi	r2,6
   43bdc:	10a48a04 	addi	r2,r2,-28120
   43be0:	10c00105 	stb	r3,4(r2)
                    for(i = 0; i < TARGET_NUMBER * 2; i = i + 2)
   43be4:	e03ff715 	stw	zero,-36(fp)
   43be8:	00001c06 	br	43c5c <pc2dev_parse+0x5dc>
                    {
                        recv_pos                    = (buf[i + 9] << 8) + buf[i + 1 + 9];
   43bec:	e0bff717 	ldw	r2,-36(fp)
   43bf0:	10800244 	addi	r2,r2,9
   43bf4:	e0fffd17 	ldw	r3,-12(fp)
   43bf8:	1885883a 	add	r2,r3,r2
   43bfc:	10800003 	ldbu	r2,0(r2)
   43c00:	10803fcc 	andi	r2,r2,255
   43c04:	1004923a 	slli	r2,r2,8
   43c08:	1009883a 	mov	r4,r2
   43c0c:	e0bff717 	ldw	r2,-36(fp)
   43c10:	10800284 	addi	r2,r2,10
   43c14:	e0fffd17 	ldw	r3,-12(fp)
   43c18:	1885883a 	add	r2,r3,r2
   43c1c:	10800003 	ldbu	r2,0(r2)
   43c20:	10803fcc 	andi	r2,r2,255
   43c24:	2085883a 	add	r2,r4,r2
   43c28:	e0bffa0d 	sth	r2,-24(fp)
                        alarm_region.buffer[i >> 1] = recv_pos;
   43c2c:	e0bff717 	ldw	r2,-36(fp)
   43c30:	1007d07a 	srai	r3,r2,1
   43c34:	008001b4 	movhi	r2,6
   43c38:	10a48a04 	addi	r2,r2,-28120
   43c3c:	18c01384 	addi	r3,r3,78
   43c40:	18c7883a 	add	r3,r3,r3
   43c44:	10c5883a 	add	r2,r2,r3
   43c48:	e0fffa0b 	ldhu	r3,-24(fp)
   43c4c:	10c0000d 	sth	r3,0(r2)
                    }
                    break;
                case PC_LOAD_REGION_DATA:
                    // 下传区域边界数据,写入E2PROM的时候,同时写入
                    alarm_region.wr_which = buf[8];
                    for(i = 0; i < TARGET_NUMBER * 2; i = i + 2)
   43c50:	e0bff717 	ldw	r2,-36(fp)
   43c54:	10800084 	addi	r2,r2,2
   43c58:	e0bff715 	stw	r2,-36(fp)
   43c5c:	e0bff717 	ldw	r2,-36(fp)
   43c60:	10819590 	cmplti	r2,r2,1622
   43c64:	103fe11e 	bne	r2,zero,43bec <__reset+0xfffc2bec>
                    {
                        recv_pos                    = (buf[i + 9] << 8) + buf[i + 1 + 9];
                        alarm_region.buffer[i >> 1] = recv_pos;
                    }
                    // 8+1+TARGET_NUMBER*2 		+ 1 + 102
                    for(i = 0; i < ZENITH_NUMBER; i++)
   43c68:	e03ff715 	stw	zero,-36(fp)
   43c6c:	00000f06 	br	43cac <pc2dev_parse+0x62c>
                    {
                        alarm_region.zenith_save[i] = buf[1631 + i];
   43c70:	e0bff717 	ldw	r2,-36(fp)
   43c74:	108197c4 	addi	r2,r2,1631
   43c78:	1007883a 	mov	r3,r2
   43c7c:	e0bffd17 	ldw	r2,-12(fp)
   43c80:	10c5883a 	add	r2,r2,r3
   43c84:	10c00003 	ldbu	r3,0(r2)
   43c88:	008001b4 	movhi	r2,6
   43c8c:	10a48a04 	addi	r2,r2,-28120
   43c90:	e13ff717 	ldw	r4,-36(fp)
   43c94:	1105883a 	add	r2,r2,r4
   43c98:	10800184 	addi	r2,r2,6
   43c9c:	10c00005 	stb	r3,0(r2)
                    {
                        recv_pos                    = (buf[i + 9] << 8) + buf[i + 1 + 9];
                        alarm_region.buffer[i >> 1] = recv_pos;
                    }
                    // 8+1+TARGET_NUMBER*2 		+ 1 + 102
                    for(i = 0; i < ZENITH_NUMBER; i++)
   43ca0:	e0bff717 	ldw	r2,-36(fp)
   43ca4:	10800044 	addi	r2,r2,1
   43ca8:	e0bff715 	stw	r2,-36(fp)
   43cac:	e0bff717 	ldw	r2,-36(fp)
   43cb0:	108019d0 	cmplti	r2,r2,103
   43cb4:	103fee1e 	bne	r2,zero,43c70 <__reset+0xfffc2c70>
                    {
                        alarm_region.zenith_save[i] = buf[1631 + i];
                    }
                    // 异或值暂不读取
                    if(SysPara.update_pos_flag)
   43cb8:	008001b4 	movhi	r2,6
   43cbc:	10a43504 	addi	r2,r2,-28460
   43cc0:	10800003 	ldbu	r2,0(r2)
   43cc4:	10803fcc 	andi	r2,r2,255
   43cc8:	10000e26 	beq	r2,zero,43d04 <pc2dev_parse+0x684>
                    {
                        set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, DISABLE);
   43ccc:	018888b4 	movhi	r6,8738
   43cd0:	31888884 	addi	r6,r6,8738
   43cd4:	016c0014 	movui	r5,45056
   43cd8:	d1201804 	addi	r4,gp,-32672
   43cdc:	0042ed00 	call	42ed0 <set_laser_paramter>
                        region_save2eeprom(&alarm_region);
   43ce0:	010001b4 	movhi	r4,6
   43ce4:	21248a04 	addi	r4,r4,-28120
   43ce8:	00457980 	call	45798 <region_save2eeprom>
                        set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, ENABLE);
   43cec:	01844474 	movhi	r6,4369
   43cf0:	31844444 	addi	r6,r6,4369
   43cf4:	016c0014 	movui	r5,45056
   43cf8:	d1201804 	addi	r4,gp,-32672
   43cfc:	0042ed00 	call	42ed0 <set_laser_paramter>
   43d00:	00000306 	br	43d10 <pc2dev_parse+0x690>
                    }
                    else
                        region_save2eeprom(&alarm_region);
   43d04:	010001b4 	movhi	r4,6
   43d08:	21248a04 	addi	r4,r4,-28120
   43d0c:	00457980 	call	45798 <region_save2eeprom>
                    // 如果当前开关输入量的值和修改区域的值一样，才去修改FPGA内报警区域值
                    if(alarm_region.change_region_value == alarm_region.wr_which / 3)
   43d10:	008001b4 	movhi	r2,6
   43d14:	10a48a04 	addi	r2,r2,-28120
   43d18:	140000c3 	ldbu	r16,3(r2)
   43d1c:	008001b4 	movhi	r2,6
   43d20:	10a48a04 	addi	r2,r2,-28120
   43d24:	10800103 	ldbu	r2,4(r2)
   43d28:	10803fcc 	andi	r2,r2,255
   43d2c:	014000c4 	movi	r5,3
   43d30:	1009883a 	mov	r4,r2
   43d34:	0048ecc0 	call	48ecc <__udivsi3>
   43d38:	80c03fcc 	andi	r3,r16,255
   43d3c:	10803fcc 	andi	r2,r2,255
   43d40:	1883ab1e 	bne	r3,r2,44bf0 <pc2dev_parse+0x1570>
                        alarm_region.change_region_flag = 0x01;
   43d44:	008001b4 	movhi	r2,6
   43d48:	10a48a04 	addi	r2,r2,-28120
   43d4c:	00c00044 	movi	r3,1
   43d50:	10c00085 	stb	r3,2(r2)
                    break;
   43d54:	0003a606 	br	44bf0 <pc2dev_parse+0x1570>
                case PC_REQ_REGION_DATA:
                    alarm_region.rd_which = (unsigned char)para;
   43d58:	e0bff817 	ldw	r2,-32(fp)
   43d5c:	1007883a 	mov	r3,r2
   43d60:	008001b4 	movhi	r2,6
   43d64:	10a48a04 	addi	r2,r2,-28120
   43d68:	10c00145 	stb	r3,5(r2)
                    nios2pc.command       = NIOS_UP_REGION_DATA;
   43d6c:	008001b4 	movhi	r2,6
   43d70:	10a48504 	addi	r2,r2,-28140
   43d74:	00d40084 	movi	r3,20482
   43d78:	10c00115 	stw	r3,4(r2)
                    nios2pc.data_len      = 1 + TARGET_NUMBER * 2 + ZENITH_NUMBER;
   43d7c:	008001b4 	movhi	r2,6
   43d80:	10a48504 	addi	r2,r2,-28140
   43d84:	00c1af84 	movi	r3,1726
   43d88:	10c00215 	stw	r3,8(r2)
                    send_len              = pc2dev_packet(&nios2pc, send_buffer);
   43d8c:	014001b4 	movhi	r5,6
   43d90:	2946d604 	addi	r5,r5,7000
   43d94:	010001b4 	movhi	r4,6
   43d98:	21248504 	addi	r4,r4,-28140
   43d9c:	0044d380 	call	44d38 <pc2dev_packet>
   43da0:	e0bff915 	stw	r2,-28(fp)
                    send(s, send_buffer, send_len);
   43da4:	e0fffc03 	ldbu	r3,-16(fp)
   43da8:	e0bff917 	ldw	r2,-28(fp)
   43dac:	10bfffcc 	andi	r2,r2,65535
   43db0:	100d883a 	mov	r6,r2
   43db4:	014001b4 	movhi	r5,6
   43db8:	2946d604 	addi	r5,r5,7000
   43dbc:	1809883a 	mov	r4,r3
   43dc0:	0046f500 	call	46f50 <send>
                    break;
   43dc4:	0003c506 	br	44cdc <pc2dev_parse+0x165c>
                case PC_REQ_RADAR_PARA:  // 请求系统状态参数
                    nios2pc.command  = NIOS_UP_RADAR_PARA;
   43dc8:	008001b4 	movhi	r2,6
   43dcc:	10a48504 	addi	r2,r2,-28140
   43dd0:	00d40144 	movi	r3,20485
   43dd4:	10c00115 	stw	r3,4(r2)
                    nios2pc.data_len = sizeof(SysPara);
   43dd8:	008001b4 	movhi	r2,6
   43ddc:	10a48504 	addi	r2,r2,-28140
   43de0:	00c04c04 	movi	r3,304
   43de4:	10c00215 	stw	r3,8(r2)
                    send_len         = pc2dev_packet(&nios2pc, send_buffer);
   43de8:	014001b4 	movhi	r5,6
   43dec:	2946d604 	addi	r5,r5,7000
   43df0:	010001b4 	movhi	r4,6
   43df4:	21248504 	addi	r4,r4,-28140
   43df8:	0044d380 	call	44d38 <pc2dev_packet>
   43dfc:	e0bff915 	stw	r2,-28(fp)
                    send(s, send_buffer, send_len);
   43e00:	e0fffc03 	ldbu	r3,-16(fp)
   43e04:	e0bff917 	ldw	r2,-28(fp)
   43e08:	10bfffcc 	andi	r2,r2,65535
   43e0c:	100d883a 	mov	r6,r2
   43e10:	014001b4 	movhi	r5,6
   43e14:	2946d604 	addi	r5,r5,7000
   43e18:	1809883a 	mov	r4,r3
   43e1c:	0046f500 	call	46f50 <send>

                    set_laser_paramter(&Nios2FPGA_pck, 0xc000, 0xaaaa);
   43e20:	01aaaa94 	movui	r6,43690
   43e24:	01700014 	movui	r5,49152
   43e28:	d1201804 	addi	r4,gp,-32672
   43e2c:	0042ed00 	call	42ed0 <set_laser_paramter>
                    break;
   43e30:	0003aa06 	br	44cdc <pc2dev_parse+0x165c>
                case PC_SET_HW_TYPE:
                    SysPara.board_type = para;
   43e34:	008001b4 	movhi	r2,6
   43e38:	10a43504 	addi	r2,r2,-28460
   43e3c:	e0fff817 	ldw	r3,-32(fp)
   43e40:	10c02c15 	stw	r3,176(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   43e44:	008001b4 	movhi	r2,6
   43e48:	10a48104 	addi	r2,r2,-28156
   43e4c:	10800117 	ldw	r2,4(r2)
   43e50:	10bfffcc 	andi	r2,r2,65535
   43e54:	e1bff817 	ldw	r6,-32(fp)
   43e58:	100b883a 	mov	r5,r2
   43e5c:	d1201804 	addi	r4,gp,-32672
   43e60:	0042ed00 	call	42ed0 <set_laser_paramter>
                    break;
   43e64:	00039d06 	br	44cdc <pc2dev_parse+0x165c>
                case PC_SAVA_SYS_PARA:
                    save_sys_para(&SysPara);
   43e68:	010001b4 	movhi	r4,6
   43e6c:	21243504 	addi	r4,r4,-28460
   43e70:	0045a000 	call	45a00 <save_sys_para>
                    break;
   43e74:	00039906 	br	44cdc <pc2dev_parse+0x165c>
                case PC_RESET_NIOS:
                    SysStatus.reset_nios = para;
   43e78:	e0bff817 	ldw	r2,-32(fp)
   43e7c:	d0a01415 	stw	r2,-32688(gp)
                    break;
   43e80:	00039606 	br	44cdc <pc2dev_parse+0x165c>
                case PC_SET_SN:
                    memset(SysPara.dev_sn, 0, sizeof(SysPara.dev_sn));
   43e84:	01800404 	movi	r6,16
   43e88:	000b883a 	mov	r5,zero
   43e8c:	010001b4 	movhi	r4,6
   43e90:	21246d04 	addi	r4,r4,-28236
   43e94:	00490d00 	call	490d0 <memset>
                    memcpy(SysPara.dev_sn, &buf[8], sizeof(SysPara.dev_sn));
   43e98:	e0bffd17 	ldw	r2,-12(fp)
   43e9c:	10c00204 	addi	r3,r2,8
   43ea0:	008001b4 	movhi	r2,6
   43ea4:	10a43504 	addi	r2,r2,-28460
   43ea8:	10803804 	addi	r2,r2,224
   43eac:	1809883a 	mov	r4,r3
   43eb0:	00c00404 	movi	r3,16
   43eb4:	180d883a 	mov	r6,r3
   43eb8:	200b883a 	mov	r5,r4
   43ebc:	1009883a 	mov	r4,r2
   43ec0:	0048f880 	call	48f88 <memcpy>
                    break;
   43ec4:	00038506 	br	44cdc <pc2dev_parse+0x165c>
                case PC_SET_DEV_TYPE:
                    memset(SysPara.dev_type, 0, sizeof(SysPara.dev_type));
   43ec8:	01800504 	movi	r6,20
   43ecc:	000b883a 	mov	r5,zero
   43ed0:	010001b4 	movhi	r4,6
   43ed4:	21246304 	addi	r4,r4,-28276
   43ed8:	00490d00 	call	490d0 <memset>
                    memcpy(SysPara.dev_type, &buf[8], sizeof(SysPara.dev_type));
   43edc:	e0bffd17 	ldw	r2,-12(fp)
   43ee0:	10c00204 	addi	r3,r2,8
   43ee4:	008001b4 	movhi	r2,6
   43ee8:	10a43504 	addi	r2,r2,-28460
   43eec:	10802e04 	addi	r2,r2,184
   43ef0:	1809883a 	mov	r4,r3
   43ef4:	00c00504 	movi	r3,20
   43ef8:	180d883a 	mov	r6,r3
   43efc:	200b883a 	mov	r5,r4
   43f00:	1009883a 	mov	r4,r2
   43f04:	0048f880 	call	48f88 <memcpy>
                    break;
   43f08:	00037406 	br	44cdc <pc2dev_parse+0x165c>
                case PC_SET_DUST_THRESHOLD:
                    SysPara.dust_threshold = para;
   43f0c:	008001b4 	movhi	r2,6
   43f10:	10a43504 	addi	r2,r2,-28460
   43f14:	e0fff817 	ldw	r3,-32(fp)
   43f18:	10c04915 	stw	r3,292(r2)
                    break;
   43f1c:	00036f06 	br	44cdc <pc2dev_parse+0x165c>
                case LASER_ENABLE:
                    if((para == ENABLE) || (para == DISABLE))
   43f20:	e0fff817 	ldw	r3,-32(fp)
   43f24:	00844474 	movhi	r2,4369
   43f28:	10844444 	addi	r2,r2,4369
   43f2c:	18800426 	beq	r3,r2,43f40 <pc2dev_parse+0x8c0>
   43f30:	e0fff817 	ldw	r3,-32(fp)
   43f34:	008888b4 	movhi	r2,8738
   43f38:	10888884 	addi	r2,r2,8738
   43f3c:	18832e1e 	bne	r3,r2,44bf8 <pc2dev_parse+0x1578>
                    {
                        SysPara.laser_enable = para;
   43f40:	008001b4 	movhi	r2,6
   43f44:	10a43504 	addi	r2,r2,-28460
   43f48:	e0fff817 	ldw	r3,-32(fp)
   43f4c:	10c00115 	stw	r3,4(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   43f50:	008001b4 	movhi	r2,6
   43f54:	10a48104 	addi	r2,r2,-28156
   43f58:	10800117 	ldw	r2,4(r2)
   43f5c:	10bfffcc 	andi	r2,r2,65535
   43f60:	e1bff817 	ldw	r6,-32(fp)
   43f64:	100b883a 	mov	r5,r2
   43f68:	d1201804 	addi	r4,gp,-32672
   43f6c:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   43f70:	00032106 	br	44bf8 <pc2dev_parse+0x1578>
                case LASER_FREQ:
                    SysPara.laser_freq = para;
   43f74:	008001b4 	movhi	r2,6
   43f78:	10a43504 	addi	r2,r2,-28460
   43f7c:	e0fff817 	ldw	r3,-32(fp)
   43f80:	10c00215 	stw	r3,8(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   43f84:	008001b4 	movhi	r2,6
   43f88:	10a48104 	addi	r2,r2,-28156
   43f8c:	10800117 	ldw	r2,4(r2)
   43f90:	10bfffcc 	andi	r2,r2,65535
   43f94:	e1bff817 	ldw	r6,-32(fp)
   43f98:	100b883a 	mov	r5,r2
   43f9c:	d1201804 	addi	r4,gp,-32672
   43fa0:	0042ed00 	call	42ed0 <set_laser_paramter>
                    break;
   43fa4:	00034d06 	br	44cdc <pc2dev_parse+0x165c>
                case LASER_PULSE_WIDTH:
                    if((para >= 3) && (para <= 10))
   43fa8:	e0bff817 	ldw	r2,-32(fp)
   43fac:	108000f0 	cmpltui	r2,r2,3
   43fb0:	1003131e 	bne	r2,zero,44c00 <pc2dev_parse+0x1580>
   43fb4:	e0bff817 	ldw	r2,-32(fp)
   43fb8:	108002e8 	cmpgeui	r2,r2,11
   43fbc:	1003101e 	bne	r2,zero,44c00 <pc2dev_parse+0x1580>
                    {
                        SysPara.laser_pulse_width = para;
   43fc0:	008001b4 	movhi	r2,6
   43fc4:	10a43504 	addi	r2,r2,-28460
   43fc8:	e0fff817 	ldw	r3,-32(fp)
   43fcc:	10c00b15 	stw	r3,44(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   43fd0:	008001b4 	movhi	r2,6
   43fd4:	10a48104 	addi	r2,r2,-28156
   43fd8:	10800117 	ldw	r2,4(r2)
   43fdc:	10bfffcc 	andi	r2,r2,65535
   43fe0:	e1bff817 	ldw	r6,-32(fp)
   43fe4:	100b883a 	mov	r5,r2
   43fe8:	d1201804 	addi	r4,gp,-32672
   43fec:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   43ff0:	00030306 	br	44c00 <pc2dev_parse+0x1580>
                case LASER_PRESDO:
                    memset(SysPara.laser_presdo, 0, sizeof(SysPara.laser_presdo));
   43ff4:	01800784 	movi	r6,30
   43ff8:	000b883a 	mov	r5,zero
   43ffc:	010001b4 	movhi	r4,6
   44000:	21247104 	addi	r4,r4,-28220
   44004:	00490d00 	call	490d0 <memset>
                    memcpy(SysPara.laser_presdo, &buf[8], sizeof(SysPara.laser_presdo));
   44008:	e0bffd17 	ldw	r2,-12(fp)
   4400c:	10c00204 	addi	r3,r2,8
   44010:	008001b4 	movhi	r2,6
   44014:	10a43504 	addi	r2,r2,-28460
   44018:	10803c04 	addi	r2,r2,240
   4401c:	1809883a 	mov	r4,r3
   44020:	00c00784 	movi	r3,30
   44024:	180d883a 	mov	r6,r3
   44028:	200b883a 	mov	r5,r4
   4402c:	1009883a 	mov	r4,r2
   44030:	0048f880 	call	48f88 <memcpy>
                    break;
   44034:	00032906 	br	44cdc <pc2dev_parse+0x165c>
                case LASER_RECV_DELAY:
                    if(para <= 16)
   44038:	e0bff817 	ldw	r2,-32(fp)
   4403c:	10800468 	cmpgeui	r2,r2,17
   44040:	1002f11e 	bne	r2,zero,44c08 <pc2dev_parse+0x1588>
                    {
                        SysPara.laser_recv_delay = para;
   44044:	008001b4 	movhi	r2,6
   44048:	10a43504 	addi	r2,r2,-28460
   4404c:	e0fff817 	ldw	r3,-32(fp)
   44050:	10c00315 	stw	r3,12(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44054:	008001b4 	movhi	r2,6
   44058:	10a48104 	addi	r2,r2,-28156
   4405c:	10800117 	ldw	r2,4(r2)
   44060:	10bfffcc 	andi	r2,r2,65535
   44064:	e1bff817 	ldw	r6,-32(fp)
   44068:	100b883a 	mov	r5,r2
   4406c:	d1201804 	addi	r4,gp,-32672
   44070:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   44074:	0002e406 	br	44c08 <pc2dev_parse+0x1588>
                case MOTOR_ENABLE:
                    if((para == ENABLE) || (para == DISABLE))
   44078:	e0fff817 	ldw	r3,-32(fp)
   4407c:	00844474 	movhi	r2,4369
   44080:	10844444 	addi	r2,r2,4369
   44084:	18800426 	beq	r3,r2,44098 <pc2dev_parse+0xa18>
   44088:	e0fff817 	ldw	r3,-32(fp)
   4408c:	008888b4 	movhi	r2,8738
   44090:	10888884 	addi	r2,r2,8738
   44094:	1882de1e 	bne	r3,r2,44c10 <pc2dev_parse+0x1590>
                    {
                        SysPara.motor_enable = para;
   44098:	008001b4 	movhi	r2,6
   4409c:	10a43504 	addi	r2,r2,-28460
   440a0:	e0fff817 	ldw	r3,-32(fp)
   440a4:	10c00415 	stw	r3,16(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   440a8:	008001b4 	movhi	r2,6
   440ac:	10a48104 	addi	r2,r2,-28156
   440b0:	10800117 	ldw	r2,4(r2)
   440b4:	10bfffcc 	andi	r2,r2,65535
   440b8:	e1bff817 	ldw	r6,-32(fp)
   440bc:	100b883a 	mov	r5,r2
   440c0:	d1201804 	addi	r4,gp,-32672
   440c4:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   440c8:	0002d106 	br	44c10 <pc2dev_parse+0x1590>
                case MOTOR_SPEED:
                    if((para >= 8) && (para <= 15))
   440cc:	e0bff817 	ldw	r2,-32(fp)
   440d0:	10800230 	cmpltui	r2,r2,8
   440d4:	1002d01e 	bne	r2,zero,44c18 <pc2dev_parse+0x1598>
   440d8:	e0bff817 	ldw	r2,-32(fp)
   440dc:	10800428 	cmpgeui	r2,r2,16
   440e0:	1002cd1e 	bne	r2,zero,44c18 <pc2dev_parse+0x1598>
                    {
                        SysPara.motor_expect_speed = para;
   440e4:	008001b4 	movhi	r2,6
   440e8:	10a43504 	addi	r2,r2,-28460
   440ec:	e0fff817 	ldw	r3,-32(fp)
   440f0:	10c00515 	stw	r3,20(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   440f4:	008001b4 	movhi	r2,6
   440f8:	10a48104 	addi	r2,r2,-28156
   440fc:	10800117 	ldw	r2,4(r2)
   44100:	10bfffcc 	andi	r2,r2,65535
   44104:	e1bff817 	ldw	r6,-32(fp)
   44108:	100b883a 	mov	r5,r2
   4410c:	d1201804 	addi	r4,gp,-32672
   44110:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   44114:	0002c006 	br	44c18 <pc2dev_parse+0x1598>
                case ZERO_DISTANCE_REVISE:
                    if(para <= 1024)
   44118:	e0bff817 	ldw	r2,-32(fp)
   4411c:	10810068 	cmpgeui	r2,r2,1025
   44120:	1002bf1e 	bne	r2,zero,44c20 <pc2dev_parse+0x15a0>
                    {
                        SysPara.zero_distance_revise = para;
   44124:	008001b4 	movhi	r2,6
   44128:	10a43504 	addi	r2,r2,-28460
   4412c:	e0fff817 	ldw	r3,-32(fp)
   44130:	10c00615 	stw	r3,24(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44134:	008001b4 	movhi	r2,6
   44138:	10a48104 	addi	r2,r2,-28156
   4413c:	10800117 	ldw	r2,4(r2)
   44140:	10bfffcc 	andi	r2,r2,65535
   44144:	e1bff817 	ldw	r6,-32(fp)
   44148:	100b883a 	mov	r5,r2
   4414c:	d1201804 	addi	r4,gp,-32672
   44150:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   44154:	0002b206 	br	44c20 <pc2dev_parse+0x15a0>
                case ZERO_ANGLE_REVISE:
                    if((para >= 2) && (para <= 240))
   44158:	e0bff817 	ldw	r2,-32(fp)
   4415c:	108000b0 	cmpltui	r2,r2,2
   44160:	1002b11e 	bne	r2,zero,44c28 <pc2dev_parse+0x15a8>
   44164:	e0bff817 	ldw	r2,-32(fp)
   44168:	10803c68 	cmpgeui	r2,r2,241
   4416c:	1002ae1e 	bne	r2,zero,44c28 <pc2dev_parse+0x15a8>
                    {
                        SysPara.zero_angle_revise = para;
   44170:	008001b4 	movhi	r2,6
   44174:	10a43504 	addi	r2,r2,-28460
   44178:	e0fff817 	ldw	r3,-32(fp)
   4417c:	10c00715 	stw	r3,28(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44180:	008001b4 	movhi	r2,6
   44184:	10a48104 	addi	r2,r2,-28156
   44188:	10800117 	ldw	r2,4(r2)
   4418c:	10bfffcc 	andi	r2,r2,65535
   44190:	e1bff817 	ldw	r6,-32(fp)
   44194:	100b883a 	mov	r5,r2
   44198:	d1201804 	addi	r4,gp,-32672
   4419c:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   441a0:	0002a106 	br	44c28 <pc2dev_parse+0x15a8>
                case GRAY_DISTANCE_REVISE1:
                    SysPara.gray_distance_revise1 = para;
   441a4:	008001b4 	movhi	r2,6
   441a8:	10a43504 	addi	r2,r2,-28460
   441ac:	e0fff817 	ldw	r3,-32(fp)
   441b0:	10c00815 	stw	r3,32(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   441b4:	008001b4 	movhi	r2,6
   441b8:	10a48104 	addi	r2,r2,-28156
   441bc:	10800117 	ldw	r2,4(r2)
   441c0:	10bfffcc 	andi	r2,r2,65535
   441c4:	e1bff817 	ldw	r6,-32(fp)
   441c8:	100b883a 	mov	r5,r2
   441cc:	d1201804 	addi	r4,gp,-32672
   441d0:	0042ed00 	call	42ed0 <set_laser_paramter>
                    break;
   441d4:	0002c106 	br	44cdc <pc2dev_parse+0x165c>
                case GRAY_DISTANCE_REVISE2:
                    SysPara.gray_distance_revise2 = para;
   441d8:	008001b4 	movhi	r2,6
   441dc:	10a43504 	addi	r2,r2,-28460
   441e0:	e0fff817 	ldw	r3,-32(fp)
   441e4:	10c00915 	stw	r3,36(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   441e8:	008001b4 	movhi	r2,6
   441ec:	10a48104 	addi	r2,r2,-28156
   441f0:	10800117 	ldw	r2,4(r2)
   441f4:	10bfffcc 	andi	r2,r2,65535
   441f8:	e1bff817 	ldw	r6,-32(fp)
   441fc:	100b883a 	mov	r5,r2
   44200:	d1201804 	addi	r4,gp,-32672
   44204:	0042ed00 	call	42ed0 <set_laser_paramter>
                    break;
   44208:	0002b406 	br	44cdc <pc2dev_parse+0x165c>
                case GRAY_DISTANCE_REVISE3:
                    SysPara.gray_distance_revise3 = para;
   4420c:	008001b4 	movhi	r2,6
   44210:	10a43504 	addi	r2,r2,-28460
   44214:	e0fff817 	ldw	r3,-32(fp)
   44218:	10c00a15 	stw	r3,40(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   4421c:	008001b4 	movhi	r2,6
   44220:	10a48104 	addi	r2,r2,-28156
   44224:	10800117 	ldw	r2,4(r2)
   44228:	10bfffcc 	andi	r2,r2,65535
   4422c:	e1bff817 	ldw	r6,-32(fp)
   44230:	100b883a 	mov	r5,r2
   44234:	d1201804 	addi	r4,gp,-32672
   44238:	0042ed00 	call	42ed0 <set_laser_paramter>
                    break;
   4423c:	0002a706 	br	44cdc <pc2dev_parse+0x165c>
                case GRAY_DISTANCE_REVISE4:
                    SysPara.gray_distance_revise4 = para;
   44240:	008001b4 	movhi	r2,6
   44244:	10a43504 	addi	r2,r2,-28460
   44248:	e0fff817 	ldw	r3,-32(fp)
   4424c:	10c04715 	stw	r3,284(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44250:	008001b4 	movhi	r2,6
   44254:	10a48104 	addi	r2,r2,-28156
   44258:	10800117 	ldw	r2,4(r2)
   4425c:	10bfffcc 	andi	r2,r2,65535
   44260:	e1bff817 	ldw	r6,-32(fp)
   44264:	100b883a 	mov	r5,r2
   44268:	d1201804 	addi	r4,gp,-32672
   4426c:	0042ed00 	call	42ed0 <set_laser_paramter>
                    break;
   44270:	00029a06 	br	44cdc <pc2dev_parse+0x165c>
                case GRAY_DISTANCE_REVISE5:
                    SysPara.gray_distance_revise5 = para;
   44274:	008001b4 	movhi	r2,6
   44278:	10a43504 	addi	r2,r2,-28460
   4427c:	e0fff817 	ldw	r3,-32(fp)
   44280:	10c04815 	stw	r3,288(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44284:	008001b4 	movhi	r2,6
   44288:	10a48104 	addi	r2,r2,-28156
   4428c:	10800117 	ldw	r2,4(r2)
   44290:	10bfffcc 	andi	r2,r2,65535
   44294:	e1bff817 	ldw	r6,-32(fp)
   44298:	100b883a 	mov	r5,r2
   4429c:	d1201804 	addi	r4,gp,-32672
   442a0:	0042ed00 	call	42ed0 <set_laser_paramter>
                    break;
   442a4:	00028d06 	br	44cdc <pc2dev_parse+0x165c>
                case GRAY_INFLECTION1:
                    SysPara.gray_inflection1 = para;
   442a8:	008001b4 	movhi	r2,6
   442ac:	10a43504 	addi	r2,r2,-28460
   442b0:	e0fff817 	ldw	r3,-32(fp)
   442b4:	10c01015 	stw	r3,64(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   442b8:	008001b4 	movhi	r2,6
   442bc:	10a48104 	addi	r2,r2,-28156
   442c0:	10800117 	ldw	r2,4(r2)
   442c4:	10bfffcc 	andi	r2,r2,65535
   442c8:	e1bff817 	ldw	r6,-32(fp)
   442cc:	100b883a 	mov	r5,r2
   442d0:	d1201804 	addi	r4,gp,-32672
   442d4:	0042ed00 	call	42ed0 <set_laser_paramter>
                    break;
   442d8:	00028006 	br	44cdc <pc2dev_parse+0x165c>
                case GRAY_INFLECTION2:
                    SysPara.gray_inflection2 = para;
   442dc:	008001b4 	movhi	r2,6
   442e0:	10a43504 	addi	r2,r2,-28460
   442e4:	e0fff817 	ldw	r3,-32(fp)
   442e8:	10c01115 	stw	r3,68(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   442ec:	008001b4 	movhi	r2,6
   442f0:	10a48104 	addi	r2,r2,-28156
   442f4:	10800117 	ldw	r2,4(r2)
   442f8:	10bfffcc 	andi	r2,r2,65535
   442fc:	e1bff817 	ldw	r6,-32(fp)
   44300:	100b883a 	mov	r5,r2
   44304:	d1201804 	addi	r4,gp,-32672
   44308:	0042ed00 	call	42ed0 <set_laser_paramter>
                    break;
   4430c:	00027306 	br	44cdc <pc2dev_parse+0x165c>
                case GRAY_INFLECTION3:
                    SysPara.gray_inflection3 = para;
   44310:	008001b4 	movhi	r2,6
   44314:	10a43504 	addi	r2,r2,-28460
   44318:	e0fff817 	ldw	r3,-32(fp)
   4431c:	10c04515 	stw	r3,276(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44320:	008001b4 	movhi	r2,6
   44324:	10a48104 	addi	r2,r2,-28156
   44328:	10800117 	ldw	r2,4(r2)
   4432c:	10bfffcc 	andi	r2,r2,65535
   44330:	e1bff817 	ldw	r6,-32(fp)
   44334:	100b883a 	mov	r5,r2
   44338:	d1201804 	addi	r4,gp,-32672
   4433c:	0042ed00 	call	42ed0 <set_laser_paramter>
                    break;
   44340:	00026606 	br	44cdc <pc2dev_parse+0x165c>
                case GRAY_INFLECTION4:
                    SysPara.gray_inflection4 = para;
   44344:	008001b4 	movhi	r2,6
   44348:	10a43504 	addi	r2,r2,-28460
   4434c:	e0fff817 	ldw	r3,-32(fp)
   44350:	10c04615 	stw	r3,280(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44354:	008001b4 	movhi	r2,6
   44358:	10a48104 	addi	r2,r2,-28156
   4435c:	10800117 	ldw	r2,4(r2)
   44360:	10bfffcc 	andi	r2,r2,65535
   44364:	e1bff817 	ldw	r6,-32(fp)
   44368:	100b883a 	mov	r5,r2
   4436c:	d1201804 	addi	r4,gp,-32672
   44370:	0042ed00 	call	42ed0 <set_laser_paramter>
                    break;
   44374:	00025906 	br	44cdc <pc2dev_parse+0x165c>
                case NOISE_DIFF_SETTING1:
                    SysPara.noise_diff_setting1 = para;
   44378:	008001b4 	movhi	r2,6
   4437c:	10a43504 	addi	r2,r2,-28460
   44380:	e0fff817 	ldw	r3,-32(fp)
   44384:	10c00d15 	stw	r3,52(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44388:	008001b4 	movhi	r2,6
   4438c:	10a48104 	addi	r2,r2,-28156
   44390:	10800117 	ldw	r2,4(r2)
   44394:	10bfffcc 	andi	r2,r2,65535
   44398:	e1bff817 	ldw	r6,-32(fp)
   4439c:	100b883a 	mov	r5,r2
   443a0:	d1201804 	addi	r4,gp,-32672
   443a4:	0042ed00 	call	42ed0 <set_laser_paramter>
                    break;
   443a8:	00024c06 	br	44cdc <pc2dev_parse+0x165c>
                case NOISE_DIFF_SETTING2:
                    SysPara.noise_diff_setting2 = para;
   443ac:	008001b4 	movhi	r2,6
   443b0:	10a43504 	addi	r2,r2,-28460
   443b4:	e0fff817 	ldw	r3,-32(fp)
   443b8:	10c00e15 	stw	r3,56(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   443bc:	008001b4 	movhi	r2,6
   443c0:	10a48104 	addi	r2,r2,-28156
   443c4:	10800117 	ldw	r2,4(r2)
   443c8:	10bfffcc 	andi	r2,r2,65535
   443cc:	e1bff817 	ldw	r6,-32(fp)
   443d0:	100b883a 	mov	r5,r2
   443d4:	d1201804 	addi	r4,gp,-32672
   443d8:	0042ed00 	call	42ed0 <set_laser_paramter>
                    break;
   443dc:	00023f06 	br	44cdc <pc2dev_parse+0x165c>

                case SIGNAL_THRESHOLD:
                    if(para <= 1024)
   443e0:	e0bff817 	ldw	r2,-32(fp)
   443e4:	10810068 	cmpgeui	r2,r2,1025
   443e8:	1002111e 	bne	r2,zero,44c30 <pc2dev_parse+0x15b0>
                    {
                        SysPara.signal_thresold = para;
   443ec:	008001b4 	movhi	r2,6
   443f0:	10a43504 	addi	r2,r2,-28460
   443f4:	e0fff817 	ldw	r3,-32(fp)
   443f8:	10c00c15 	stw	r3,48(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   443fc:	008001b4 	movhi	r2,6
   44400:	10a48104 	addi	r2,r2,-28156
   44404:	10800117 	ldw	r2,4(r2)
   44408:	10bfffcc 	andi	r2,r2,65535
   4440c:	e1bff817 	ldw	r6,-32(fp)
   44410:	100b883a 	mov	r5,r2
   44414:	d1201804 	addi	r4,gp,-32672
   44418:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   4441c:	00020406 	br	44c30 <pc2dev_parse+0x15b0>
                case APD_VOL_SETTING:
                    if((para & 0x3f) <= 1024)
   44420:	e0bff817 	ldw	r2,-32(fp)
   44424:	10800fcc 	andi	r2,r2,63
   44428:	10810068 	cmpgeui	r2,r2,1025
   4442c:	1002021e 	bne	r2,zero,44c38 <pc2dev_parse+0x15b8>
                    {
                        if((para >> 15 & 0x01) == 0x01)
   44430:	e0bff817 	ldw	r2,-32(fp)
   44434:	10a0000c 	andi	r2,r2,32768
   44438:	10000526 	beq	r2,zero,44450 <pc2dev_parse+0xdd0>
                            SysPara.signal_thresold = para;
   4443c:	008001b4 	movhi	r2,6
   44440:	10a43504 	addi	r2,r2,-28460
   44444:	e0fff817 	ldw	r3,-32(fp)
   44448:	10c00c15 	stw	r3,48(r2)
   4444c:	00000406 	br	44460 <pc2dev_parse+0xde0>
                        else
                            SysPara.apd_vol_base = para;
   44450:	008001b4 	movhi	r2,6
   44454:	10a43504 	addi	r2,r2,-28460
   44458:	e0fff817 	ldw	r3,-32(fp)
   4445c:	10c00f15 	stw	r3,60(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44460:	008001b4 	movhi	r2,6
   44464:	10a48104 	addi	r2,r2,-28156
   44468:	10800117 	ldw	r2,4(r2)
   4446c:	10bfffcc 	andi	r2,r2,65535
   44470:	e1bff817 	ldw	r6,-32(fp)
   44474:	100b883a 	mov	r5,r2
   44478:	d1201804 	addi	r4,gp,-32672
   4447c:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   44480:	0001ed06 	br	44c38 <pc2dev_parse+0x15b8>
                case TEMP_VOL_COF1:
                    if((para >= 20) && (para <= 45))
   44484:	e0bff817 	ldw	r2,-32(fp)
   44488:	10800530 	cmpltui	r2,r2,20
   4448c:	1001ec1e 	bne	r2,zero,44c40 <pc2dev_parse+0x15c0>
   44490:	e0bff817 	ldw	r2,-32(fp)
   44494:	10800ba8 	cmpgeui	r2,r2,46
   44498:	1001e91e 	bne	r2,zero,44c40 <pc2dev_parse+0x15c0>
                    {
                        SysPara.temp_volt_cof1 = para;
   4449c:	008001b4 	movhi	r2,6
   444a0:	10a43504 	addi	r2,r2,-28460
   444a4:	e0fff817 	ldw	r3,-32(fp)
   444a8:	10c01715 	stw	r3,92(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   444ac:	008001b4 	movhi	r2,6
   444b0:	10a48104 	addi	r2,r2,-28156
   444b4:	10800117 	ldw	r2,4(r2)
   444b8:	10bfffcc 	andi	r2,r2,65535
   444bc:	e1bff817 	ldw	r6,-32(fp)
   444c0:	100b883a 	mov	r5,r2
   444c4:	d1201804 	addi	r4,gp,-32672
   444c8:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   444cc:	0001dc06 	br	44c40 <pc2dev_parse+0x15c0>
                case TEMP_VOL_COF2:
                    if((para >= 20) && (para <= 45))
   444d0:	e0bff817 	ldw	r2,-32(fp)
   444d4:	10800530 	cmpltui	r2,r2,20
   444d8:	1001db1e 	bne	r2,zero,44c48 <pc2dev_parse+0x15c8>
   444dc:	e0bff817 	ldw	r2,-32(fp)
   444e0:	10800ba8 	cmpgeui	r2,r2,46
   444e4:	1001d81e 	bne	r2,zero,44c48 <pc2dev_parse+0x15c8>
                    {
                        SysPara.temp_volt_cof2 = para;
   444e8:	008001b4 	movhi	r2,6
   444ec:	10a43504 	addi	r2,r2,-28460
   444f0:	e0fff817 	ldw	r3,-32(fp)
   444f4:	10c01815 	stw	r3,96(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   444f8:	008001b4 	movhi	r2,6
   444fc:	10a48104 	addi	r2,r2,-28156
   44500:	10800117 	ldw	r2,4(r2)
   44504:	10bfffcc 	andi	r2,r2,65535
   44508:	e1bff817 	ldw	r6,-32(fp)
   4450c:	100b883a 	mov	r5,r2
   44510:	d1201804 	addi	r4,gp,-32672
   44514:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   44518:	0001cb06 	br	44c48 <pc2dev_parse+0x15c8>
                case TEMP_VOL_INFLECTION:
                    if(para <= 50)
   4451c:	e0bff817 	ldw	r2,-32(fp)
   44520:	10800ce8 	cmpgeui	r2,r2,51
   44524:	1001ca1e 	bne	r2,zero,44c50 <pc2dev_parse+0x15d0>
                    {
                        SysPara.temp_volt_inflection = para;
   44528:	008001b4 	movhi	r2,6
   4452c:	10a43504 	addi	r2,r2,-28460
   44530:	e0fff817 	ldw	r3,-32(fp)
   44534:	10c01915 	stw	r3,100(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44538:	008001b4 	movhi	r2,6
   4453c:	10a48104 	addi	r2,r2,-28156
   44540:	10800117 	ldw	r2,4(r2)
   44544:	10bfffcc 	andi	r2,r2,65535
   44548:	e1bff817 	ldw	r6,-32(fp)
   4454c:	100b883a 	mov	r5,r2
   44550:	d1201804 	addi	r4,gp,-32672
   44554:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   44558:	0001bd06 	br	44c50 <pc2dev_parse+0x15d0>
                case TEMP_DISTANCE_COF1:
                    if(para <= 128)
   4455c:	e0bff817 	ldw	r2,-32(fp)
   44560:	10802068 	cmpgeui	r2,r2,129
   44564:	1001bc1e 	bne	r2,zero,44c58 <pc2dev_parse+0x15d8>
                    {
                        SysPara.temp_distance_cof1 = para;
   44568:	008001b4 	movhi	r2,6
   4456c:	10a43504 	addi	r2,r2,-28460
   44570:	e0fff817 	ldw	r3,-32(fp)
   44574:	10c01a15 	stw	r3,104(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44578:	008001b4 	movhi	r2,6
   4457c:	10a48104 	addi	r2,r2,-28156
   44580:	10800117 	ldw	r2,4(r2)
   44584:	10bfffcc 	andi	r2,r2,65535
   44588:	e1bff817 	ldw	r6,-32(fp)
   4458c:	100b883a 	mov	r5,r2
   44590:	d1201804 	addi	r4,gp,-32672
   44594:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   44598:	0001af06 	br	44c58 <pc2dev_parse+0x15d8>

                case TEMP_DISTANCE_COF2:
                    if(para <= 128)
   4459c:	e0bff817 	ldw	r2,-32(fp)
   445a0:	10802068 	cmpgeui	r2,r2,129
   445a4:	1001ae1e 	bne	r2,zero,44c60 <pc2dev_parse+0x15e0>
                    {
                        SysPara.temp_distance_cof2 = para;
   445a8:	008001b4 	movhi	r2,6
   445ac:	10a43504 	addi	r2,r2,-28460
   445b0:	e0fff817 	ldw	r3,-32(fp)
   445b4:	10c01b15 	stw	r3,108(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   445b8:	008001b4 	movhi	r2,6
   445bc:	10a48104 	addi	r2,r2,-28156
   445c0:	10800117 	ldw	r2,4(r2)
   445c4:	10bfffcc 	andi	r2,r2,65535
   445c8:	e1bff817 	ldw	r6,-32(fp)
   445cc:	100b883a 	mov	r5,r2
   445d0:	d1201804 	addi	r4,gp,-32672
   445d4:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   445d8:	0001a106 	br	44c60 <pc2dev_parse+0x15e0>
                case TEMP_DISTANCE_INFLECTION:
                    if(para <= 60)
   445dc:	e0bff817 	ldw	r2,-32(fp)
   445e0:	10800f68 	cmpgeui	r2,r2,61
   445e4:	1001a01e 	bne	r2,zero,44c68 <pc2dev_parse+0x15e8>
                    {
                        SysPara.temp_distance_inflection = para;
   445e8:	e0fff817 	ldw	r3,-32(fp)
   445ec:	008001b4 	movhi	r2,6
   445f0:	10a43504 	addi	r2,r2,-28460
   445f4:	10c01c15 	stw	r3,112(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   445f8:	008001b4 	movhi	r2,6
   445fc:	10a48104 	addi	r2,r2,-28156
   44600:	10800117 	ldw	r2,4(r2)
   44604:	10bfffcc 	andi	r2,r2,65535
   44608:	e1bff817 	ldw	r6,-32(fp)
   4460c:	100b883a 	mov	r5,r2
   44610:	d1201804 	addi	r4,gp,-32672
   44614:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   44618:	00019306 	br	44c68 <pc2dev_parse+0x15e8>
                case VALID_NUM_THRESHOLD:
                    if((para > 1) && (para < 40))
   4461c:	e0bff817 	ldw	r2,-32(fp)
   44620:	108000b0 	cmpltui	r2,r2,2
   44624:	1001921e 	bne	r2,zero,44c70 <pc2dev_parse+0x15f0>
   44628:	e0bff817 	ldw	r2,-32(fp)
   4462c:	10800a28 	cmpgeui	r2,r2,40
   44630:	10018f1e 	bne	r2,zero,44c70 <pc2dev_parse+0x15f0>
                    {
                        SysPara.valid_num_threshold = para;
   44634:	008001b4 	movhi	r2,6
   44638:	10a43504 	addi	r2,r2,-28460
   4463c:	e0fff817 	ldw	r3,-32(fp)
   44640:	10c04415 	stw	r3,272(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44644:	008001b4 	movhi	r2,6
   44648:	10a48104 	addi	r2,r2,-28156
   4464c:	10800117 	ldw	r2,4(r2)
   44650:	10bfffcc 	andi	r2,r2,65535
   44654:	e1bff817 	ldw	r6,-32(fp)
   44658:	100b883a 	mov	r5,r2
   4465c:	d1201804 	addi	r4,gp,-32672
   44660:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   44664:	00018206 	br	44c70 <pc2dev_parse+0x15f0>
                case MIN_DISTANCE_VALUE:
                    if(para <= 500)
   44668:	e0bff817 	ldw	r2,-32(fp)
   4466c:	10807d68 	cmpgeui	r2,r2,501
   44670:	1001811e 	bne	r2,zero,44c78 <pc2dev_parse+0x15f8>
                    {
                        SysPara.min_display_distance = para;
   44674:	008001b4 	movhi	r2,6
   44678:	10a43504 	addi	r2,r2,-28460
   4467c:	e0fff817 	ldw	r3,-32(fp)
   44680:	10c01215 	stw	r3,72(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44684:	008001b4 	movhi	r2,6
   44688:	10a48104 	addi	r2,r2,-28156
   4468c:	10800117 	ldw	r2,4(r2)
   44690:	10bfffcc 	andi	r2,r2,65535
   44694:	e1bff817 	ldw	r6,-32(fp)
   44698:	100b883a 	mov	r5,r2
   4469c:	d1201804 	addi	r4,gp,-32672
   446a0:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   446a4:	00017406 	br	44c78 <pc2dev_parse+0x15f8>
                case FIRST_NOISE_FILTER:
                    if((para >= 2) && (para <= 12))
   446a8:	e0bff817 	ldw	r2,-32(fp)
   446ac:	108000b0 	cmpltui	r2,r2,2
   446b0:	1001731e 	bne	r2,zero,44c80 <pc2dev_parse+0x1600>
   446b4:	e0bff817 	ldw	r2,-32(fp)
   446b8:	10800368 	cmpgeui	r2,r2,13
   446bc:	1001701e 	bne	r2,zero,44c80 <pc2dev_parse+0x1600>
                    {
                        SysPara.first_noise_filter = para;
   446c0:	008001b4 	movhi	r2,6
   446c4:	10a43504 	addi	r2,r2,-28460
   446c8:	e0fff817 	ldw	r3,-32(fp)
   446cc:	10c01415 	stw	r3,80(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   446d0:	008001b4 	movhi	r2,6
   446d4:	10a48104 	addi	r2,r2,-28156
   446d8:	10800117 	ldw	r2,4(r2)
   446dc:	10bfffcc 	andi	r2,r2,65535
   446e0:	e1bff817 	ldw	r6,-32(fp)
   446e4:	100b883a 	mov	r5,r2
   446e8:	d1201804 	addi	r4,gp,-32672
   446ec:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   446f0:	00016306 	br	44c80 <pc2dev_parse+0x1600>
                case DUST_ALARM_THRESHOLD:
                    if(para <= 100)
   446f4:	e0bff817 	ldw	r2,-32(fp)
   446f8:	10801968 	cmpgeui	r2,r2,101
   446fc:	1001621e 	bne	r2,zero,44c88 <pc2dev_parse+0x1608>
                    {
                        SysPara.dust_alarm_threshold = para;
   44700:	008001b4 	movhi	r2,6
   44704:	10a43504 	addi	r2,r2,-28460
   44708:	e0fff817 	ldw	r3,-32(fp)
   4470c:	10c02215 	stw	r3,136(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44710:	008001b4 	movhi	r2,6
   44714:	10a48104 	addi	r2,r2,-28156
   44718:	10800117 	ldw	r2,4(r2)
   4471c:	10bfffcc 	andi	r2,r2,65535
   44720:	e1bff817 	ldw	r6,-32(fp)
   44724:	100b883a 	mov	r5,r2
   44728:	d1201804 	addi	r4,gp,-32672
   4472c:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   44730:	00015506 	br	44c88 <pc2dev_parse+0x1608>

                case DA_CYCLE_PARA1:
                    if(para <= 1023)
   44734:	e0bff817 	ldw	r2,-32(fp)
   44738:	10810028 	cmpgeui	r2,r2,1024
   4473c:	1001541e 	bne	r2,zero,44c90 <pc2dev_parse+0x1610>
                    {
                        SysPara.da_cycle_para1 = para;
   44740:	008001b4 	movhi	r2,6
   44744:	10a43504 	addi	r2,r2,-28460
   44748:	e0fff817 	ldw	r3,-32(fp)
   4474c:	10c02315 	stw	r3,140(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44750:	008001b4 	movhi	r2,6
   44754:	10a48104 	addi	r2,r2,-28156
   44758:	10800117 	ldw	r2,4(r2)
   4475c:	10bfffcc 	andi	r2,r2,65535
   44760:	e1bff817 	ldw	r6,-32(fp)
   44764:	100b883a 	mov	r5,r2
   44768:	d1201804 	addi	r4,gp,-32672
   4476c:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   44770:	00014706 	br	44c90 <pc2dev_parse+0x1610>
                case DA_CYCLE_PARA2:
                    if(para <= 1023)
   44774:	e0bff817 	ldw	r2,-32(fp)
   44778:	10810028 	cmpgeui	r2,r2,1024
   4477c:	1001461e 	bne	r2,zero,44c98 <pc2dev_parse+0x1618>
                    {
                        SysPara.da_cycle_para2 = para;
   44780:	008001b4 	movhi	r2,6
   44784:	10a43504 	addi	r2,r2,-28460
   44788:	e0fff817 	ldw	r3,-32(fp)
   4478c:	10c02415 	stw	r3,144(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44790:	008001b4 	movhi	r2,6
   44794:	10a48104 	addi	r2,r2,-28156
   44798:	10800117 	ldw	r2,4(r2)
   4479c:	10bfffcc 	andi	r2,r2,65535
   447a0:	e1bff817 	ldw	r6,-32(fp)
   447a4:	100b883a 	mov	r5,r2
   447a8:	d1201804 	addi	r4,gp,-32672
   447ac:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   447b0:	00013906 	br	44c98 <pc2dev_parse+0x1618>
                case DA_CYCLE_PARA3:
                    if(para <= 1023)
   447b4:	e0bff817 	ldw	r2,-32(fp)
   447b8:	10810028 	cmpgeui	r2,r2,1024
   447bc:	1001381e 	bne	r2,zero,44ca0 <pc2dev_parse+0x1620>
                    {
                        SysPara.da_cycle_para3 = para;
   447c0:	008001b4 	movhi	r2,6
   447c4:	10a43504 	addi	r2,r2,-28460
   447c8:	e0fff817 	ldw	r3,-32(fp)
   447cc:	10c02515 	stw	r3,148(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   447d0:	008001b4 	movhi	r2,6
   447d4:	10a48104 	addi	r2,r2,-28156
   447d8:	10800117 	ldw	r2,4(r2)
   447dc:	10bfffcc 	andi	r2,r2,65535
   447e0:	e1bff817 	ldw	r6,-32(fp)
   447e4:	100b883a 	mov	r5,r2
   447e8:	d1201804 	addi	r4,gp,-32672
   447ec:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   447f0:	00012b06 	br	44ca0 <pc2dev_parse+0x1620>
                case DA_CYCLE_PARA4:
                    if(para <= 1023)
   447f4:	e0bff817 	ldw	r2,-32(fp)
   447f8:	10810028 	cmpgeui	r2,r2,1024
   447fc:	10012a1e 	bne	r2,zero,44ca8 <pc2dev_parse+0x1628>
                    {
                        SysPara.da_cycle_para4 = para;
   44800:	008001b4 	movhi	r2,6
   44804:	10a43504 	addi	r2,r2,-28460
   44808:	e0fff817 	ldw	r3,-32(fp)
   4480c:	10c02615 	stw	r3,152(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44810:	008001b4 	movhi	r2,6
   44814:	10a48104 	addi	r2,r2,-28156
   44818:	10800117 	ldw	r2,4(r2)
   4481c:	10bfffcc 	andi	r2,r2,65535
   44820:	e1bff817 	ldw	r6,-32(fp)
   44824:	100b883a 	mov	r5,r2
   44828:	d1201804 	addi	r4,gp,-32672
   4482c:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   44830:	00011d06 	br	44ca8 <pc2dev_parse+0x1628>
                case DA_CYCLE_PARA5:
                    if(para <= 1023)
   44834:	e0bff817 	ldw	r2,-32(fp)
   44838:	10810028 	cmpgeui	r2,r2,1024
   4483c:	10011c1e 	bne	r2,zero,44cb0 <pc2dev_parse+0x1630>
                    {
                        SysPara.da_cycle_para5 = para;
   44840:	008001b4 	movhi	r2,6
   44844:	10a43504 	addi	r2,r2,-28460
   44848:	e0fff817 	ldw	r3,-32(fp)
   4484c:	10c02715 	stw	r3,156(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44850:	008001b4 	movhi	r2,6
   44854:	10a48104 	addi	r2,r2,-28156
   44858:	10800117 	ldw	r2,4(r2)
   4485c:	10bfffcc 	andi	r2,r2,65535
   44860:	e1bff817 	ldw	r6,-32(fp)
   44864:	100b883a 	mov	r5,r2
   44868:	d1201804 	addi	r4,gp,-32672
   4486c:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   44870:	00010f06 	br	44cb0 <pc2dev_parse+0x1630>
                case DA_CYCLE_PARA6:
                    if(para <= 1023)
   44874:	e0bff817 	ldw	r2,-32(fp)
   44878:	10810028 	cmpgeui	r2,r2,1024
   4487c:	10010e1e 	bne	r2,zero,44cb8 <pc2dev_parse+0x1638>
                    {
                        SysPara.da_cycle_para6 = para;
   44880:	008001b4 	movhi	r2,6
   44884:	10a43504 	addi	r2,r2,-28460
   44888:	e0fff817 	ldw	r3,-32(fp)
   4488c:	10c02815 	stw	r3,160(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44890:	008001b4 	movhi	r2,6
   44894:	10a48104 	addi	r2,r2,-28156
   44898:	10800117 	ldw	r2,4(r2)
   4489c:	10bfffcc 	andi	r2,r2,65535
   448a0:	e1bff817 	ldw	r6,-32(fp)
   448a4:	100b883a 	mov	r5,r2
   448a8:	d1201804 	addi	r4,gp,-32672
   448ac:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   448b0:	00010106 	br	44cb8 <pc2dev_parse+0x1638>
                case DA_CYCLE_PARA7:
                    if(para <= 1023)
   448b4:	e0bff817 	ldw	r2,-32(fp)
   448b8:	10810028 	cmpgeui	r2,r2,1024
   448bc:	1001001e 	bne	r2,zero,44cc0 <pc2dev_parse+0x1640>
                    {
                        SysPara.da_cycle_para7 = para;
   448c0:	008001b4 	movhi	r2,6
   448c4:	10a43504 	addi	r2,r2,-28460
   448c8:	e0fff817 	ldw	r3,-32(fp)
   448cc:	10c02915 	stw	r3,164(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   448d0:	008001b4 	movhi	r2,6
   448d4:	10a48104 	addi	r2,r2,-28156
   448d8:	10800117 	ldw	r2,4(r2)
   448dc:	10bfffcc 	andi	r2,r2,65535
   448e0:	e1bff817 	ldw	r6,-32(fp)
   448e4:	100b883a 	mov	r5,r2
   448e8:	d1201804 	addi	r4,gp,-32672
   448ec:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   448f0:	0000f306 	br	44cc0 <pc2dev_parse+0x1640>
                case DA_CYCLE_PARA8:
                    if(para <= 1023)
   448f4:	e0bff817 	ldw	r2,-32(fp)
   448f8:	10810028 	cmpgeui	r2,r2,1024
   448fc:	1000f21e 	bne	r2,zero,44cc8 <pc2dev_parse+0x1648>
                    {
                        SysPara.da_cycle_para8 = para;
   44900:	008001b4 	movhi	r2,6
   44904:	10a43504 	addi	r2,r2,-28460
   44908:	e0fff817 	ldw	r3,-32(fp)
   4490c:	10c02a15 	stw	r3,168(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44910:	008001b4 	movhi	r2,6
   44914:	10a48104 	addi	r2,r2,-28156
   44918:	10800117 	ldw	r2,4(r2)
   4491c:	10bfffcc 	andi	r2,r2,65535
   44920:	e1bff817 	ldw	r6,-32(fp)
   44924:	100b883a 	mov	r5,r2
   44928:	d1201804 	addi	r4,gp,-32672
   4492c:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   44930:	0000e506 	br	44cc8 <pc2dev_parse+0x1648>
                case DA_CYCLE_PARA9:
                    if(para <= 1023)
   44934:	e0bff817 	ldw	r2,-32(fp)
   44938:	10810028 	cmpgeui	r2,r2,1024
   4493c:	1000e41e 	bne	r2,zero,44cd0 <pc2dev_parse+0x1650>
                    {
                        SysPara.da_cycle_para9 = para;
   44940:	008001b4 	movhi	r2,6
   44944:	10a43504 	addi	r2,r2,-28460
   44948:	e0fff817 	ldw	r3,-32(fp)
   4494c:	10c02b15 	stw	r3,172(r2)
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44950:	008001b4 	movhi	r2,6
   44954:	10a48104 	addi	r2,r2,-28156
   44958:	10800117 	ldw	r2,4(r2)
   4495c:	10bfffcc 	andi	r2,r2,65535
   44960:	e1bff817 	ldw	r6,-32(fp)
   44964:	100b883a 	mov	r5,r2
   44968:	d1201804 	addi	r4,gp,-32672
   4496c:	0042ed00 	call	42ed0 <set_laser_paramter>
                    }
                    break;
   44970:	0000d706 	br	44cd0 <pc2dev_parse+0x1650>
                case MIN_TARGET_SIZE:
                	if((para >= 0) && (para <= 8000))
   44974:	e0bff817 	ldw	r2,-32(fp)
   44978:	1087d068 	cmpgeui	r2,r2,8001
   4497c:	1000d61e 	bne	r2,zero,44cd8 <pc2dev_parse+0x1658>
                	{
                    SysPara.min_target_size = para;
   44980:	008001b4 	movhi	r2,6
   44984:	10a43504 	addi	r2,r2,-28460
   44988:	e0fff817 	ldw	r3,-32(fp)
   4498c:	10c04a15 	stw	r3,296(r2)
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
   44990:	008001b4 	movhi	r2,6
   44994:	10a48104 	addi	r2,r2,-28156
   44998:	10800117 	ldw	r2,4(r2)
   4499c:	10bfffcc 	andi	r2,r2,65535
   449a0:	e1bff817 	ldw	r6,-32(fp)
   449a4:	100b883a 	mov	r5,r2
   449a8:	d1201804 	addi	r4,gp,-32672
   449ac:	0042ed00 	call	42ed0 <set_laser_paramter>
                	}
                    break;
   449b0:	0000c906 	br	44cd8 <pc2dev_parse+0x1658>

                case PC_REMOTE_UPDATE_WRITE:
                    image.addr = (buf[8] << 24) + (buf[9] << 16) + (buf[10] << 8) + (buf[11]);
   449b4:	e0bffd17 	ldw	r2,-12(fp)
   449b8:	10800204 	addi	r2,r2,8
   449bc:	10800003 	ldbu	r2,0(r2)
   449c0:	10803fcc 	andi	r2,r2,255
   449c4:	1006963a 	slli	r3,r2,24
   449c8:	e0bffd17 	ldw	r2,-12(fp)
   449cc:	10800244 	addi	r2,r2,9
   449d0:	10800003 	ldbu	r2,0(r2)
   449d4:	10803fcc 	andi	r2,r2,255
   449d8:	1004943a 	slli	r2,r2,16
   449dc:	1887883a 	add	r3,r3,r2
   449e0:	e0bffd17 	ldw	r2,-12(fp)
   449e4:	10800284 	addi	r2,r2,10
   449e8:	10800003 	ldbu	r2,0(r2)
   449ec:	10803fcc 	andi	r2,r2,255
   449f0:	1004923a 	slli	r2,r2,8
   449f4:	1887883a 	add	r3,r3,r2
   449f8:	e0bffd17 	ldw	r2,-12(fp)
   449fc:	108002c4 	addi	r2,r2,11
   44a00:	10800003 	ldbu	r2,0(r2)
   44a04:	10803fcc 	andi	r2,r2,255
   44a08:	1885883a 	add	r2,r3,r2
   44a0c:	1007883a 	mov	r3,r2
   44a10:	008001b4 	movhi	r2,6
   44a14:	108f1604 	addi	r2,r2,15448
   44a18:	10c00015 	stw	r3,0(r2)
                    memcpy(image.data, &buf[12], 256);
   44a1c:	e0bffd17 	ldw	r2,-12(fp)
   44a20:	10c00304 	addi	r3,r2,12
   44a24:	008001b4 	movhi	r2,6
   44a28:	108f1604 	addi	r2,r2,15448
   44a2c:	10800104 	addi	r2,r2,4
   44a30:	1809883a 	mov	r4,r3
   44a34:	00c04004 	movi	r3,256
   44a38:	180d883a 	mov	r6,r3
   44a3c:	200b883a 	mov	r5,r4
   44a40:	1009883a 	mov	r4,r2
   44a44:	0048f880 	call	48f88 <memcpy>
                    image_write(image.addr, image.data);
   44a48:	008001b4 	movhi	r2,6
   44a4c:	108f1604 	addi	r2,r2,15448
   44a50:	10800017 	ldw	r2,0(r2)
   44a54:	014001b4 	movhi	r5,6
   44a58:	294f1704 	addi	r5,r5,15452
   44a5c:	1009883a 	mov	r4,r2
   44a60:	0045c300 	call	45c30 <image_write>

                    image_read(image.addr, image.data);
   44a64:	008001b4 	movhi	r2,6
   44a68:	108f1604 	addi	r2,r2,15448
   44a6c:	10800017 	ldw	r2,0(r2)
   44a70:	014001b4 	movhi	r5,6
   44a74:	294f1704 	addi	r5,r5,15452
   44a78:	1009883a 	mov	r4,r2
   44a7c:	0045d280 	call	45d28 <image_read>
                    nios2pc.command  = NIOS_REMOTE_WRITE_REPONSE;
   44a80:	008001b4 	movhi	r2,6
   44a84:	10a48504 	addi	r2,r2,-28140
   44a88:	00d44004 	movi	r3,20736
   44a8c:	10c00115 	stw	r3,4(r2)
                    nios2pc.data_len = 4 + 256;
   44a90:	008001b4 	movhi	r2,6
   44a94:	10a48504 	addi	r2,r2,-28140
   44a98:	00c04104 	movi	r3,260
   44a9c:	10c00215 	stw	r3,8(r2)
                    send_len         = pc2dev_packet(&nios2pc, send_buffer);
   44aa0:	014001b4 	movhi	r5,6
   44aa4:	2946d604 	addi	r5,r5,7000
   44aa8:	010001b4 	movhi	r4,6
   44aac:	21248504 	addi	r4,r4,-28140
   44ab0:	0044d380 	call	44d38 <pc2dev_packet>
   44ab4:	e0bff915 	stw	r2,-28(fp)
                    send(s, send_buffer, send_len);
   44ab8:	e0fffc03 	ldbu	r3,-16(fp)
   44abc:	e0bff917 	ldw	r2,-28(fp)
   44ac0:	10bfffcc 	andi	r2,r2,65535
   44ac4:	100d883a 	mov	r6,r2
   44ac8:	014001b4 	movhi	r5,6
   44acc:	2946d604 	addi	r5,r5,7000
   44ad0:	1809883a 	mov	r4,r3
   44ad4:	0046f500 	call	46f50 <send>
                    break;
   44ad8:	00008006 	br	44cdc <pc2dev_parse+0x165c>
                case PC_REMOTE_UPDATE_READ:
                    image.addr = (buf[8] << 24) + (buf[9] << 16) + (buf[10] << 8) + (buf[11]);
   44adc:	e0bffd17 	ldw	r2,-12(fp)
   44ae0:	10800204 	addi	r2,r2,8
   44ae4:	10800003 	ldbu	r2,0(r2)
   44ae8:	10803fcc 	andi	r2,r2,255
   44aec:	1006963a 	slli	r3,r2,24
   44af0:	e0bffd17 	ldw	r2,-12(fp)
   44af4:	10800244 	addi	r2,r2,9
   44af8:	10800003 	ldbu	r2,0(r2)
   44afc:	10803fcc 	andi	r2,r2,255
   44b00:	1004943a 	slli	r2,r2,16
   44b04:	1887883a 	add	r3,r3,r2
   44b08:	e0bffd17 	ldw	r2,-12(fp)
   44b0c:	10800284 	addi	r2,r2,10
   44b10:	10800003 	ldbu	r2,0(r2)
   44b14:	10803fcc 	andi	r2,r2,255
   44b18:	1004923a 	slli	r2,r2,8
   44b1c:	1887883a 	add	r3,r3,r2
   44b20:	e0bffd17 	ldw	r2,-12(fp)
   44b24:	108002c4 	addi	r2,r2,11
   44b28:	10800003 	ldbu	r2,0(r2)
   44b2c:	10803fcc 	andi	r2,r2,255
   44b30:	1885883a 	add	r2,r3,r2
   44b34:	1007883a 	mov	r3,r2
   44b38:	008001b4 	movhi	r2,6
   44b3c:	108f1604 	addi	r2,r2,15448
   44b40:	10c00015 	stw	r3,0(r2)
                    image_read(image.addr, image.data);
   44b44:	008001b4 	movhi	r2,6
   44b48:	108f1604 	addi	r2,r2,15448
   44b4c:	10800017 	ldw	r2,0(r2)
   44b50:	014001b4 	movhi	r5,6
   44b54:	294f1704 	addi	r5,r5,15452
   44b58:	1009883a 	mov	r4,r2
   44b5c:	0045d280 	call	45d28 <image_read>

                    nios2pc.command  = NIOS_UP_REMOTE_UPDATE_IMAGE;
   44b60:	008001b4 	movhi	r2,6
   44b64:	10a48504 	addi	r2,r2,-28140
   44b68:	00d44044 	movi	r3,20737
   44b6c:	10c00115 	stw	r3,4(r2)
                    nios2pc.data_len = 4 + 256;
   44b70:	008001b4 	movhi	r2,6
   44b74:	10a48504 	addi	r2,r2,-28140
   44b78:	00c04104 	movi	r3,260
   44b7c:	10c00215 	stw	r3,8(r2)
                    send_len         = pc2dev_packet(&nios2pc, send_buffer);
   44b80:	014001b4 	movhi	r5,6
   44b84:	2946d604 	addi	r5,r5,7000
   44b88:	010001b4 	movhi	r4,6
   44b8c:	21248504 	addi	r4,r4,-28140
   44b90:	0044d380 	call	44d38 <pc2dev_packet>
   44b94:	e0bff915 	stw	r2,-28(fp)
                    send(s, send_buffer, send_len);
   44b98:	e0fffc03 	ldbu	r3,-16(fp)
   44b9c:	e0bff917 	ldw	r2,-28(fp)
   44ba0:	10bfffcc 	andi	r2,r2,65535
   44ba4:	100d883a 	mov	r6,r2
   44ba8:	014001b4 	movhi	r5,6
   44bac:	2946d604 	addi	r5,r5,7000
   44bb0:	1809883a 	mov	r4,r3
   44bb4:	0046f500 	call	46f50 <send>
                    break;
   44bb8:	00004806 	br	44cdc <pc2dev_parse+0x165c>
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
   44bbc:	e03ff715 	stw	zero,-36(fp)
   44bc0:	00000506 	br	44bd8 <pc2dev_parse+0x1558>
                        image_erase(i);
   44bc4:	e13ff717 	ldw	r4,-36(fp)
   44bc8:	0045dc00 	call	45dc0 <image_erase>
                    nios2pc.data_len = 4 + 256;
                    send_len         = pc2dev_packet(&nios2pc, send_buffer);
                    send(s, send_buffer, send_len);
                    break;
                case PC_REMOTE_UPDATE_ERASE:
                    for(i = 0; i < para; i++)
   44bcc:	e0bff717 	ldw	r2,-36(fp)
   44bd0:	10800044 	addi	r2,r2,1
   44bd4:	e0bff715 	stw	r2,-36(fp)
   44bd8:	e0fff717 	ldw	r3,-36(fp)
   44bdc:	e0bff817 	ldw	r2,-32(fp)
   44be0:	18bff836 	bltu	r3,r2,44bc4 <__reset+0xfffc3bc4>
                        image_erase(i);
                    break;
   44be4:	00003d06 	br	44cdc <pc2dev_parse+0x165c>
                        nios2pc.command  = NIOS_UP_ALARM_REGION;
                        nios2pc.data_len = 4;
                        send_len         = pc2dev_packet(&nios2pc, send_buffer);
                        send(s, send_buffer, send_len);
                    }
                    break;
   44be8:	0001883a 	nop
   44bec:	00003b06 	br	44cdc <pc2dev_parse+0x165c>
                    else
                        region_save2eeprom(&alarm_region);
                    // 如果当前开关输入量的值和修改区域的值一样，才去修改FPGA内报警区域值
                    if(alarm_region.change_region_value == alarm_region.wr_which / 3)
                        alarm_region.change_region_flag = 0x01;
                    break;
   44bf0:	0001883a 	nop
   44bf4:	00003906 	br	44cdc <pc2dev_parse+0x165c>
                    if((para == ENABLE) || (para == DISABLE))
                    {
                        SysPara.laser_enable = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44bf8:	0001883a 	nop
   44bfc:	00003706 	br	44cdc <pc2dev_parse+0x165c>
                    if((para >= 3) && (para <= 10))
                    {
                        SysPara.laser_pulse_width = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c00:	0001883a 	nop
   44c04:	00003506 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 16)
                    {
                        SysPara.laser_recv_delay = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c08:	0001883a 	nop
   44c0c:	00003306 	br	44cdc <pc2dev_parse+0x165c>
                    if((para == ENABLE) || (para == DISABLE))
                    {
                        SysPara.motor_enable = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c10:	0001883a 	nop
   44c14:	00003106 	br	44cdc <pc2dev_parse+0x165c>
                    if((para >= 8) && (para <= 15))
                    {
                        SysPara.motor_expect_speed = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c18:	0001883a 	nop
   44c1c:	00002f06 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 1024)
                    {
                        SysPara.zero_distance_revise = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c20:	0001883a 	nop
   44c24:	00002d06 	br	44cdc <pc2dev_parse+0x165c>
                    if((para >= 2) && (para <= 240))
                    {
                        SysPara.zero_angle_revise = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c28:	0001883a 	nop
   44c2c:	00002b06 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 1024)
                    {
                        SysPara.signal_thresold = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c30:	0001883a 	nop
   44c34:	00002906 	br	44cdc <pc2dev_parse+0x165c>
                            SysPara.signal_thresold = para;
                        else
                            SysPara.apd_vol_base = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c38:	0001883a 	nop
   44c3c:	00002706 	br	44cdc <pc2dev_parse+0x165c>
                    if((para >= 20) && (para <= 45))
                    {
                        SysPara.temp_volt_cof1 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c40:	0001883a 	nop
   44c44:	00002506 	br	44cdc <pc2dev_parse+0x165c>
                    if((para >= 20) && (para <= 45))
                    {
                        SysPara.temp_volt_cof2 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c48:	0001883a 	nop
   44c4c:	00002306 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 50)
                    {
                        SysPara.temp_volt_inflection = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c50:	0001883a 	nop
   44c54:	00002106 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 128)
                    {
                        SysPara.temp_distance_cof1 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c58:	0001883a 	nop
   44c5c:	00001f06 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 128)
                    {
                        SysPara.temp_distance_cof2 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c60:	0001883a 	nop
   44c64:	00001d06 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 60)
                    {
                        SysPara.temp_distance_inflection = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c68:	0001883a 	nop
   44c6c:	00001b06 	br	44cdc <pc2dev_parse+0x165c>
                    if((para > 1) && (para < 40))
                    {
                        SysPara.valid_num_threshold = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c70:	0001883a 	nop
   44c74:	00001906 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 500)
                    {
                        SysPara.min_display_distance = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c78:	0001883a 	nop
   44c7c:	00001706 	br	44cdc <pc2dev_parse+0x165c>
                    if((para >= 2) && (para <= 12))
                    {
                        SysPara.first_noise_filter = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c80:	0001883a 	nop
   44c84:	00001506 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 100)
                    {
                        SysPara.dust_alarm_threshold = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c88:	0001883a 	nop
   44c8c:	00001306 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para1 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c90:	0001883a 	nop
   44c94:	00001106 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para2 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44c98:	0001883a 	nop
   44c9c:	00000f06 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para3 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44ca0:	0001883a 	nop
   44ca4:	00000d06 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para4 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44ca8:	0001883a 	nop
   44cac:	00000b06 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para5 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44cb0:	0001883a 	nop
   44cb4:	00000906 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para6 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44cb8:	0001883a 	nop
   44cbc:	00000706 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para7 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44cc0:	0001883a 	nop
   44cc4:	00000506 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para8 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44cc8:	0001883a 	nop
   44ccc:	00000306 	br	44cdc <pc2dev_parse+0x165c>
                    if(para <= 1023)
                    {
                        SysPara.da_cycle_para9 = para;
                        set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                    }
                    break;
   44cd0:	0001883a 	nop
   44cd4:	00000106 	br	44cdc <pc2dev_parse+0x165c>
                	if((para >= 0) && (para <= 8000))
                	{
                    SysPara.min_target_size = para;
                    set_laser_paramter(&Nios2FPGA_pck, pc2nios.command, para);
                	}
                    break;
   44cd8:	0001883a 	nop
                        image_erase(i);
                    break;
                default:
                    break;
            }
            packet_len = pc2nios.data_len + 12;
   44cdc:	008001b4 	movhi	r2,6
   44ce0:	10a48104 	addi	r2,r2,-28156
   44ce4:	10800217 	ldw	r2,8(r2)
   44ce8:	10800304 	addi	r2,r2,12
   44cec:	e0bffb15 	stw	r2,-20(fp)
            len        = len - packet_len;
   44cf0:	e0fffe17 	ldw	r3,-8(fp)
   44cf4:	e0bffb17 	ldw	r2,-20(fp)
   44cf8:	1885c83a 	sub	r2,r3,r2
   44cfc:	e0bffe15 	stw	r2,-8(fp)
            buf        = buf + packet_len;
   44d00:	e0bffb17 	ldw	r2,-20(fp)
   44d04:	e0fffd17 	ldw	r3,-12(fp)
   44d08:	1885883a 	add	r2,r3,r2
   44d0c:	e0bffd15 	stw	r2,-12(fp)
    int            send_len;
    unsigned short recv_pos;
    unsigned int   para;        // PC 传给 nios 的参数值
    int            packet_len;  // buf里可能有多包数据，本包数据长度

    while(len != 0)
   44d10:	e0bffe17 	ldw	r2,-8(fp)
   44d14:	103a641e 	bne	r2,zero,436a8 <__reset+0xfffc26a8>
   44d18:	00000106 	br	44d20 <pc2dev_parse+0x16a0>
                    {
                        eeprom_write_byte(CUR_ALARM_GROUP + 2, buf[10]);
                        eeprom_write_byte(CUR_ALARM_GROUP + 3, buf[11]);
                    }
                    else
                        return;
   44d1c:	0001883a 	nop
            // nios2pc.data_len = 4;
            // send_len = pc2dev_packet(&nios2pc, send_buffer);
            // send(s, send_buffer, send_len);
        }
    }
}
   44d20:	e6ffff04 	addi	sp,fp,-4
   44d24:	dfc00217 	ldw	ra,8(sp)
   44d28:	df000117 	ldw	fp,4(sp)
   44d2c:	dc000017 	ldw	r16,0(sp)
   44d30:	dec00304 	addi	sp,sp,12
   44d34:	f800283a 	ret

00044d38 <pc2dev_packet>:
 * @param data
 * @param buf
 * @return int 打包后要发送给上位机的字节数
 */
int pc2dev_packet(struct __nios2pc *data, unsigned char *buf)
{
   44d38:	defff604 	addi	sp,sp,-40
   44d3c:	dfc00915 	stw	ra,36(sp)
   44d40:	df000815 	stw	fp,32(sp)
   44d44:	dc000715 	stw	r16,28(sp)
   44d48:	df000804 	addi	fp,sp,32
   44d4c:	e13ffd15 	stw	r4,-12(fp)
   44d50:	e17ffe15 	stw	r5,-8(fp)
    int           i;
    int           offset_addr;
    int           buf_len;
    unsigned char checksum;
    unsigned char temp;
    buf[0] = (data->head >> 8) & 0xff;
   44d54:	e0bffd17 	ldw	r2,-12(fp)
   44d58:	10800017 	ldw	r2,0(r2)
   44d5c:	1004d23a 	srli	r2,r2,8
   44d60:	1007883a 	mov	r3,r2
   44d64:	e0bffe17 	ldw	r2,-8(fp)
   44d68:	10c00005 	stb	r3,0(r2)
    buf[1] = (data->head >> 0) & 0xff;
   44d6c:	e0bffe17 	ldw	r2,-8(fp)
   44d70:	10800044 	addi	r2,r2,1
   44d74:	e0fffd17 	ldw	r3,-12(fp)
   44d78:	18c00017 	ldw	r3,0(r3)
   44d7c:	10c00005 	stb	r3,0(r2)
    buf[2] = (data->command >> 8) & 0xff;
   44d80:	e0bffe17 	ldw	r2,-8(fp)
   44d84:	10800084 	addi	r2,r2,2
   44d88:	e0fffd17 	ldw	r3,-12(fp)
   44d8c:	18c00117 	ldw	r3,4(r3)
   44d90:	1806d23a 	srli	r3,r3,8
   44d94:	10c00005 	stb	r3,0(r2)
    buf[3] = (data->command >> 0) & 0xff;
   44d98:	e0bffe17 	ldw	r2,-8(fp)
   44d9c:	108000c4 	addi	r2,r2,3
   44da0:	e0fffd17 	ldw	r3,-12(fp)
   44da4:	18c00117 	ldw	r3,4(r3)
   44da8:	10c00005 	stb	r3,0(r2)

    buf[4] = (data->data_len >> 24) & 0xff;  // 数据长度
   44dac:	e0bffe17 	ldw	r2,-8(fp)
   44db0:	10800104 	addi	r2,r2,4
   44db4:	e0fffd17 	ldw	r3,-12(fp)
   44db8:	18c00217 	ldw	r3,8(r3)
   44dbc:	1806d63a 	srli	r3,r3,24
   44dc0:	10c00005 	stb	r3,0(r2)
    buf[5] = (data->data_len >> 16) & 0xff;
   44dc4:	e0bffe17 	ldw	r2,-8(fp)
   44dc8:	10800144 	addi	r2,r2,5
   44dcc:	e0fffd17 	ldw	r3,-12(fp)
   44dd0:	18c00217 	ldw	r3,8(r3)
   44dd4:	1806d43a 	srli	r3,r3,16
   44dd8:	10c00005 	stb	r3,0(r2)
    buf[6] = (data->data_len >> 8) & 0xff;
   44ddc:	e0bffe17 	ldw	r2,-8(fp)
   44de0:	10800184 	addi	r2,r2,6
   44de4:	e0fffd17 	ldw	r3,-12(fp)
   44de8:	18c00217 	ldw	r3,8(r3)
   44dec:	1806d23a 	srli	r3,r3,8
   44df0:	10c00005 	stb	r3,0(r2)
    buf[7] = (data->data_len >> 0) & 0xff;
   44df4:	e0bffe17 	ldw	r2,-8(fp)
   44df8:	108001c4 	addi	r2,r2,7
   44dfc:	e0fffd17 	ldw	r3,-12(fp)
   44e00:	18c00217 	ldw	r3,8(r3)
   44e04:	10c00005 	stb	r3,0(r2)

    switch(data->command)
   44e08:	e0bffd17 	ldw	r2,-12(fp)
   44e0c:	10800117 	ldw	r2,4(r2)
   44e10:	10d400a0 	cmpeqi	r3,r2,20482
   44e14:	1800621e 	bne	r3,zero,44fa0 <pc2dev_packet+0x268>
   44e18:	10d400e8 	cmpgeui	r3,r2,20483
   44e1c:	1800051e 	bne	r3,zero,44e34 <pc2dev_packet+0xfc>
   44e20:	10d40020 	cmpeqi	r3,r2,20480
   44e24:	1800bd1e 	bne	r3,zero,4511c <pc2dev_packet+0x3e4>
   44e28:	10940060 	cmpeqi	r2,r2,20481
   44e2c:	1000091e 	bne	r2,zero,44e54 <pc2dev_packet+0x11c>
   44e30:	00016306 	br	453c0 <pc2dev_packet+0x688>
   44e34:	10d40160 	cmpeqi	r3,r2,20485
   44e38:	1800f21e 	bne	r3,zero,45204 <pc2dev_packet+0x4cc>
   44e3c:	10d40170 	cmpltui	r3,r2,20485
   44e40:	18015f1e 	bne	r3,zero,453c0 <pc2dev_packet+0x688>
   44e44:	10abc004 	addi	r2,r2,-20736
   44e48:	108000a8 	cmpgeui	r2,r2,2
   44e4c:	10015c1e 	bne	r2,zero,453c0 <pc2dev_packet+0x688>
   44e50:	00011506 	br	452a8 <pc2dev_packet+0x570>
    {
        case NIOS_UP_ALARM_REGION:
            offset_addr = CUR_ALARM_GROUP;
   44e54:	e03ffb15 	stw	zero,-20(fp)
            for(i = 0; i < data->data_len; i++)
   44e58:	e03ff815 	stw	zero,-32(fp)
   44e5c:	00000d06 	br	44e94 <pc2dev_packet+0x15c>
            {
                buf[i + 8] = eeprom_read_byte(offset_addr + i);
   44e60:	e0bff817 	ldw	r2,-32(fp)
   44e64:	10800204 	addi	r2,r2,8
   44e68:	e0fffe17 	ldw	r3,-8(fp)
   44e6c:	18a1883a 	add	r16,r3,r2
   44e70:	e0fffb17 	ldw	r3,-20(fp)
   44e74:	e0bff817 	ldw	r2,-32(fp)
   44e78:	1885883a 	add	r2,r3,r2
   44e7c:	1009883a 	mov	r4,r2
   44e80:	00421d40 	call	421d4 <eeprom_read_byte>
   44e84:	80800005 	stb	r2,0(r16)

    switch(data->command)
    {
        case NIOS_UP_ALARM_REGION:
            offset_addr = CUR_ALARM_GROUP;
            for(i = 0; i < data->data_len; i++)
   44e88:	e0bff817 	ldw	r2,-32(fp)
   44e8c:	10800044 	addi	r2,r2,1
   44e90:	e0bff815 	stw	r2,-32(fp)
   44e94:	e0bffd17 	ldw	r2,-12(fp)
   44e98:	10800217 	ldw	r2,8(r2)
   44e9c:	e0fff817 	ldw	r3,-32(fp)
   44ea0:	18bfef36 	bltu	r3,r2,44e60 <__reset+0xfffc3e60>
            {
                buf[i + 8] = eeprom_read_byte(offset_addr + i);
            }
            buf[8]   = 0x00;
   44ea4:	e0bffe17 	ldw	r2,-8(fp)
   44ea8:	10800204 	addi	r2,r2,8
   44eac:	10000005 	stb	zero,0(r2)
            buf[9]   = 0x00;
   44eb0:	e0bffe17 	ldw	r2,-8(fp)
   44eb4:	10800244 	addi	r2,r2,9
   44eb8:	10000005 	stb	zero,0(r2)
            buf[10]  = 0x00;
   44ebc:	e0bffe17 	ldw	r2,-8(fp)
   44ec0:	10800284 	addi	r2,r2,10
   44ec4:	10000005 	stb	zero,0(r2)
            buf[11]  = alarm_region.change_region_value;
   44ec8:	e0bffe17 	ldw	r2,-8(fp)
   44ecc:	10c002c4 	addi	r3,r2,11
   44ed0:	008001b4 	movhi	r2,6
   44ed4:	10a48a04 	addi	r2,r2,-28120
   44ed8:	108000c3 	ldbu	r2,3(r2)
   44edc:	18800005 	stb	r2,0(r3)
            checksum = 0;
   44ee0:	e03ffa05 	stb	zero,-24(fp)
            for(i = 0; i < 8 + data->data_len; i++)
   44ee4:	e03ff815 	stw	zero,-32(fp)
   44ee8:	00000a06 	br	44f14 <pc2dev_packet+0x1dc>
            {
                checksum ^= buf[i];
   44eec:	e0bff817 	ldw	r2,-32(fp)
   44ef0:	e0fffe17 	ldw	r3,-8(fp)
   44ef4:	1885883a 	add	r2,r3,r2
   44ef8:	10c00003 	ldbu	r3,0(r2)
   44efc:	e0bffa03 	ldbu	r2,-24(fp)
   44f00:	1884f03a 	xor	r2,r3,r2
   44f04:	e0bffa05 	stb	r2,-24(fp)
            buf[8]   = 0x00;
            buf[9]   = 0x00;
            buf[10]  = 0x00;
            buf[11]  = alarm_region.change_region_value;
            checksum = 0;
            for(i = 0; i < 8 + data->data_len; i++)
   44f08:	e0bff817 	ldw	r2,-32(fp)
   44f0c:	10800044 	addi	r2,r2,1
   44f10:	e0bff815 	stw	r2,-32(fp)
   44f14:	e0bffd17 	ldw	r2,-12(fp)
   44f18:	10800217 	ldw	r2,8(r2)
   44f1c:	10800204 	addi	r2,r2,8
   44f20:	e0fff817 	ldw	r3,-32(fp)
   44f24:	18bff136 	bltu	r3,r2,44eec <__reset+0xfffc3eec>
            {
                checksum ^= buf[i];
            }
            buf[8 + data->data_len + 0] = 0x00;
   44f28:	e0bffd17 	ldw	r2,-12(fp)
   44f2c:	10800217 	ldw	r2,8(r2)
   44f30:	10800204 	addi	r2,r2,8
   44f34:	e0fffe17 	ldw	r3,-8(fp)
   44f38:	1885883a 	add	r2,r3,r2
   44f3c:	10000005 	stb	zero,0(r2)
            buf[8 + data->data_len + 1] = 0x00;
   44f40:	e0bffd17 	ldw	r2,-12(fp)
   44f44:	10800217 	ldw	r2,8(r2)
   44f48:	10800244 	addi	r2,r2,9
   44f4c:	e0fffe17 	ldw	r3,-8(fp)
   44f50:	1885883a 	add	r2,r3,r2
   44f54:	10000005 	stb	zero,0(r2)
            buf[8 + data->data_len + 2] = 0x00;
   44f58:	e0bffd17 	ldw	r2,-12(fp)
   44f5c:	10800217 	ldw	r2,8(r2)
   44f60:	10800284 	addi	r2,r2,10
   44f64:	e0fffe17 	ldw	r3,-8(fp)
   44f68:	1885883a 	add	r2,r3,r2
   44f6c:	10000005 	stb	zero,0(r2)
            buf[8 + data->data_len + 3] = checksum;
   44f70:	e0bffd17 	ldw	r2,-12(fp)
   44f74:	10800217 	ldw	r2,8(r2)
   44f78:	108002c4 	addi	r2,r2,11
   44f7c:	e0fffe17 	ldw	r3,-8(fp)
   44f80:	1885883a 	add	r2,r3,r2
   44f84:	e0fffa03 	ldbu	r3,-24(fp)
   44f88:	10c00005 	stb	r3,0(r2)

            buf_len = (8 + data->data_len + 4);
   44f8c:	e0bffd17 	ldw	r2,-12(fp)
   44f90:	10800217 	ldw	r2,8(r2)
   44f94:	10800304 	addi	r2,r2,12
   44f98:	e0bff915 	stw	r2,-28(fp)
            break;
   44f9c:	00013e06 	br	45498 <pc2dev_packet+0x760>
        case NIOS_UP_REGION_DATA:
            // 8 + TARGET_NUMBER*2 + 1 + 102
            offset_addr = GROUP_OFFSET_ADDR + alarm_region.rd_which * REGION_SPACE_SIZE;
   44fa0:	008001b4 	movhi	r2,6
   44fa4:	10a48a04 	addi	r2,r2,-28120
   44fa8:	10800143 	ldbu	r2,5(r2)
   44fac:	10803fcc 	andi	r2,r2,255
   44fb0:	10800084 	addi	r2,r2,2
   44fb4:	100492fa 	slli	r2,r2,11
   44fb8:	e0bffb15 	stw	r2,-20(fp)
            buf[8]      = alarm_region.rd_which;
   44fbc:	e0bffe17 	ldw	r2,-8(fp)
   44fc0:	10c00204 	addi	r3,r2,8
   44fc4:	008001b4 	movhi	r2,6
   44fc8:	10a48a04 	addi	r2,r2,-28120
   44fcc:	10800143 	ldbu	r2,5(r2)
   44fd0:	18800005 	stb	r2,0(r3)
            buf_len     = 9;
   44fd4:	00800244 	movi	r2,9
   44fd8:	e0bff915 	stw	r2,-28(fp)
            eeprom_sequential_read(offset_addr, buf + 9, TARGET_NUMBER * 2 + 1 + 102);
   44fdc:	e0fffb17 	ldw	r3,-20(fp)
   44fe0:	e0bffe17 	ldw	r2,-8(fp)
   44fe4:	10800244 	addi	r2,r2,9
   44fe8:	0181af44 	movi	r6,1725
   44fec:	100b883a 	mov	r5,r2
   44ff0:	1809883a 	mov	r4,r3
   44ff4:	00422a40 	call	422a4 <eeprom_sequential_read>
            for(i = 9; i < 9 + TARGET_NUMBER * 2; i += 2)
   44ff8:	00800244 	movi	r2,9
   44ffc:	e0bff815 	stw	r2,-32(fp)
   45000:	00001706 	br	45060 <pc2dev_packet+0x328>
            {
                temp       = buf[i + 1];
   45004:	e0bff817 	ldw	r2,-32(fp)
   45008:	10800044 	addi	r2,r2,1
   4500c:	e0fffe17 	ldw	r3,-8(fp)
   45010:	1885883a 	add	r2,r3,r2
   45014:	10800003 	ldbu	r2,0(r2)
   45018:	e0bffc05 	stb	r2,-16(fp)
                buf[i + 1] = buf[i];
   4501c:	e0bff817 	ldw	r2,-32(fp)
   45020:	10800044 	addi	r2,r2,1
   45024:	e0fffe17 	ldw	r3,-8(fp)
   45028:	1885883a 	add	r2,r3,r2
   4502c:	e0fff817 	ldw	r3,-32(fp)
   45030:	e13ffe17 	ldw	r4,-8(fp)
   45034:	20c7883a 	add	r3,r4,r3
   45038:	18c00003 	ldbu	r3,0(r3)
   4503c:	10c00005 	stb	r3,0(r2)
                buf[i]     = temp;
   45040:	e0bff817 	ldw	r2,-32(fp)
   45044:	e0fffe17 	ldw	r3,-8(fp)
   45048:	1885883a 	add	r2,r3,r2
   4504c:	e0fffc03 	ldbu	r3,-16(fp)
   45050:	10c00005 	stb	r3,0(r2)
            // 8 + TARGET_NUMBER*2 + 1 + 102
            offset_addr = GROUP_OFFSET_ADDR + alarm_region.rd_which * REGION_SPACE_SIZE;
            buf[8]      = alarm_region.rd_which;
            buf_len     = 9;
            eeprom_sequential_read(offset_addr, buf + 9, TARGET_NUMBER * 2 + 1 + 102);
            for(i = 9; i < 9 + TARGET_NUMBER * 2; i += 2)
   45054:	e0bff817 	ldw	r2,-32(fp)
   45058:	10800084 	addi	r2,r2,2
   4505c:	e0bff815 	stw	r2,-32(fp)
   45060:	e0bff817 	ldw	r2,-32(fp)
   45064:	108197d0 	cmplti	r2,r2,1631
   45068:	103fe61e 	bne	r2,zero,45004 <__reset+0xfffc4004>
                temp       = buf[i + 1];
                buf[i + 1] = buf[i];
                buf[i]     = temp;
            }

            buf_len += TARGET_NUMBER * 2 + 1 + 102;
   4506c:	e0bff917 	ldw	r2,-28(fp)
   45070:	1081af44 	addi	r2,r2,1725
   45074:	e0bff915 	stw	r2,-28(fp)

            checksum = 0;
   45078:	e03ffa05 	stb	zero,-24(fp)
            for(i = 0; i < buf_len; i++)
   4507c:	e03ff815 	stw	zero,-32(fp)
   45080:	00000a06 	br	450ac <pc2dev_packet+0x374>
            {
                checksum ^= buf[i];
   45084:	e0bff817 	ldw	r2,-32(fp)
   45088:	e0fffe17 	ldw	r3,-8(fp)
   4508c:	1885883a 	add	r2,r3,r2
   45090:	10c00003 	ldbu	r3,0(r2)
   45094:	e0bffa03 	ldbu	r2,-24(fp)
   45098:	1884f03a 	xor	r2,r3,r2
   4509c:	e0bffa05 	stb	r2,-24(fp)
            }

            buf_len += TARGET_NUMBER * 2 + 1 + 102;

            checksum = 0;
            for(i = 0; i < buf_len; i++)
   450a0:	e0bff817 	ldw	r2,-32(fp)
   450a4:	10800044 	addi	r2,r2,1
   450a8:	e0bff815 	stw	r2,-32(fp)
   450ac:	e0fff817 	ldw	r3,-32(fp)
   450b0:	e0bff917 	ldw	r2,-28(fp)
   450b4:	18bff316 	blt	r3,r2,45084 <__reset+0xfffc4084>
            {
                checksum ^= buf[i];
            }
            buf[buf_len + 1] = 0x00;
   450b8:	e0bff917 	ldw	r2,-28(fp)
   450bc:	10800044 	addi	r2,r2,1
   450c0:	e0fffe17 	ldw	r3,-8(fp)
   450c4:	1885883a 	add	r2,r3,r2
   450c8:	10000005 	stb	zero,0(r2)
            buf[buf_len + 2] = 0x00;
   450cc:	e0bff917 	ldw	r2,-28(fp)
   450d0:	10800084 	addi	r2,r2,2
   450d4:	e0fffe17 	ldw	r3,-8(fp)
   450d8:	1885883a 	add	r2,r3,r2
   450dc:	10000005 	stb	zero,0(r2)
            buf[buf_len + 3] = 0x00;
   450e0:	e0bff917 	ldw	r2,-28(fp)
   450e4:	108000c4 	addi	r2,r2,3
   450e8:	e0fffe17 	ldw	r3,-8(fp)
   450ec:	1885883a 	add	r2,r3,r2
   450f0:	10000005 	stb	zero,0(r2)
            buf[buf_len + 4] = checksum;
   450f4:	e0bff917 	ldw	r2,-28(fp)
   450f8:	10800104 	addi	r2,r2,4
   450fc:	e0fffe17 	ldw	r3,-8(fp)
   45100:	1885883a 	add	r2,r3,r2
   45104:	e0fffa03 	ldbu	r3,-24(fp)
   45108:	10c00005 	stb	r3,0(r2)
            buf_len += 4;
   4510c:	e0bff917 	ldw	r2,-28(fp)
   45110:	10800104 	addi	r2,r2,4
   45114:	e0bff915 	stw	r2,-28(fp)
            break;
   45118:	0000df06 	br	45498 <pc2dev_packet+0x760>
        case NIOS_UP_RESPONSE_PC:
            buf[8]  = (SysPara.pc_command_value >> 24) & 0xff;
   4511c:	e0bffe17 	ldw	r2,-8(fp)
   45120:	10c00204 	addi	r3,r2,8
   45124:	008001b4 	movhi	r2,6
   45128:	10a43504 	addi	r2,r2,-28460
   4512c:	10804b17 	ldw	r2,300(r2)
   45130:	1004d63a 	srli	r2,r2,24
   45134:	18800005 	stb	r2,0(r3)
            buf[9]  = (SysPara.pc_command_value >> 16) & 0xff;
   45138:	e0bffe17 	ldw	r2,-8(fp)
   4513c:	10c00244 	addi	r3,r2,9
   45140:	008001b4 	movhi	r2,6
   45144:	10a43504 	addi	r2,r2,-28460
   45148:	10804b17 	ldw	r2,300(r2)
   4514c:	1004d43a 	srli	r2,r2,16
   45150:	18800005 	stb	r2,0(r3)
            buf[10] = (SysPara.pc_command_value >> 8) & 0xff;
   45154:	e0bffe17 	ldw	r2,-8(fp)
   45158:	10c00284 	addi	r3,r2,10
   4515c:	008001b4 	movhi	r2,6
   45160:	10a43504 	addi	r2,r2,-28460
   45164:	10804b17 	ldw	r2,300(r2)
   45168:	1004d23a 	srli	r2,r2,8
   4516c:	18800005 	stb	r2,0(r3)
            buf[11] = (SysPara.pc_command_value >> 0) & 0xff;
   45170:	e0bffe17 	ldw	r2,-8(fp)
   45174:	10c002c4 	addi	r3,r2,11
   45178:	008001b4 	movhi	r2,6
   4517c:	10a43504 	addi	r2,r2,-28460
   45180:	10804b17 	ldw	r2,300(r2)
   45184:	18800005 	stb	r2,0(r3)
            for(i = 0; i < 12; i++)
   45188:	e03ff815 	stw	zero,-32(fp)
   4518c:	00000a06 	br	451b8 <pc2dev_packet+0x480>
            {
                checksum ^= buf[i];
   45190:	e0bff817 	ldw	r2,-32(fp)
   45194:	e0fffe17 	ldw	r3,-8(fp)
   45198:	1885883a 	add	r2,r3,r2
   4519c:	10c00003 	ldbu	r3,0(r2)
   451a0:	e0bffa03 	ldbu	r2,-24(fp)
   451a4:	1884f03a 	xor	r2,r3,r2
   451a8:	e0bffa05 	stb	r2,-24(fp)
        case NIOS_UP_RESPONSE_PC:
            buf[8]  = (SysPara.pc_command_value >> 24) & 0xff;
            buf[9]  = (SysPara.pc_command_value >> 16) & 0xff;
            buf[10] = (SysPara.pc_command_value >> 8) & 0xff;
            buf[11] = (SysPara.pc_command_value >> 0) & 0xff;
            for(i = 0; i < 12; i++)
   451ac:	e0bff817 	ldw	r2,-32(fp)
   451b0:	10800044 	addi	r2,r2,1
   451b4:	e0bff815 	stw	r2,-32(fp)
   451b8:	e0bff817 	ldw	r2,-32(fp)
   451bc:	10800310 	cmplti	r2,r2,12
   451c0:	103ff31e 	bne	r2,zero,45190 <__reset+0xfffc4190>
            {
                checksum ^= buf[i];
            }
            buf[12] = 0;
   451c4:	e0bffe17 	ldw	r2,-8(fp)
   451c8:	10800304 	addi	r2,r2,12
   451cc:	10000005 	stb	zero,0(r2)
            buf[13] = 0;
   451d0:	e0bffe17 	ldw	r2,-8(fp)
   451d4:	10800344 	addi	r2,r2,13
   451d8:	10000005 	stb	zero,0(r2)
            buf[14] = 0;
   451dc:	e0bffe17 	ldw	r2,-8(fp)
   451e0:	10800384 	addi	r2,r2,14
   451e4:	10000005 	stb	zero,0(r2)
            buf[15] = checksum;
   451e8:	e0bffe17 	ldw	r2,-8(fp)
   451ec:	108003c4 	addi	r2,r2,15
   451f0:	e0fffa03 	ldbu	r3,-24(fp)
   451f4:	10c00005 	stb	r3,0(r2)
            buf_len = 16;
   451f8:	00800404 	movi	r2,16
   451fc:	e0bff915 	stw	r2,-28(fp)
            break;
   45200:	0000a506 	br	45498 <pc2dev_packet+0x760>
        case NIOS_UP_RADAR_PARA:
            memcpy(&buf[8], (unsigned char *)&SysPara, sizeof(SysPara));
   45204:	e0bffe17 	ldw	r2,-8(fp)
   45208:	10800204 	addi	r2,r2,8
   4520c:	01804c04 	movi	r6,304
   45210:	014001b4 	movhi	r5,6
   45214:	29643504 	addi	r5,r5,-28460
   45218:	1009883a 	mov	r4,r2
   4521c:	0048f880 	call	48f88 <memcpy>
            for(i = 0; i < 8 + sizeof(SysPara); i++)
   45220:	e03ff815 	stw	zero,-32(fp)
   45224:	00000a06 	br	45250 <pc2dev_packet+0x518>
            {
                checksum ^= buf[i];
   45228:	e0bff817 	ldw	r2,-32(fp)
   4522c:	e0fffe17 	ldw	r3,-8(fp)
   45230:	1885883a 	add	r2,r3,r2
   45234:	10c00003 	ldbu	r3,0(r2)
   45238:	e0bffa03 	ldbu	r2,-24(fp)
   4523c:	1884f03a 	xor	r2,r3,r2
   45240:	e0bffa05 	stb	r2,-24(fp)
            buf[15] = checksum;
            buf_len = 16;
            break;
        case NIOS_UP_RADAR_PARA:
            memcpy(&buf[8], (unsigned char *)&SysPara, sizeof(SysPara));
            for(i = 0; i < 8 + sizeof(SysPara); i++)
   45244:	e0bff817 	ldw	r2,-32(fp)
   45248:	10800044 	addi	r2,r2,1
   4524c:	e0bff815 	stw	r2,-32(fp)
   45250:	e0bff817 	ldw	r2,-32(fp)
   45254:	10804e30 	cmpltui	r2,r2,312
   45258:	103ff31e 	bne	r2,zero,45228 <__reset+0xfffc4228>
            {
                checksum ^= buf[i];
            }
            buf[8 + sizeof(SysPara) + 0] = 0xaa;
   4525c:	e0bffe17 	ldw	r2,-8(fp)
   45260:	10804e04 	addi	r2,r2,312
   45264:	00ffea84 	movi	r3,-86
   45268:	10c00005 	stb	r3,0(r2)
            buf[8 + sizeof(SysPara) + 1] = 0xbb;
   4526c:	e0bffe17 	ldw	r2,-8(fp)
   45270:	10804e44 	addi	r2,r2,313
   45274:	00ffeec4 	movi	r3,-69
   45278:	10c00005 	stb	r3,0(r2)
            buf[8 + sizeof(SysPara) + 2] = 0xcc;
   4527c:	e0bffe17 	ldw	r2,-8(fp)
   45280:	10804e84 	addi	r2,r2,314
   45284:	00fff304 	movi	r3,-52
   45288:	10c00005 	stb	r3,0(r2)
            buf[8 + sizeof(SysPara) + 3] = checksum;
   4528c:	e0bffe17 	ldw	r2,-8(fp)
   45290:	10804ec4 	addi	r2,r2,315
   45294:	e0fffa03 	ldbu	r3,-24(fp)
   45298:	10c00005 	stb	r3,0(r2)
            buf_len                      = 8 + sizeof(SysPara) + 4;
   4529c:	00804f04 	movi	r2,316
   452a0:	e0bff915 	stw	r2,-28(fp)
            break;
   452a4:	00007c06 	br	45498 <pc2dev_packet+0x760>
        case NIOS_REMOTE_WRITE_REPONSE:
        case NIOS_UP_REMOTE_UPDATE_IMAGE:
            buf[8]  = (image.addr >> 24) & 0xff;
   452a8:	e0bffe17 	ldw	r2,-8(fp)
   452ac:	10c00204 	addi	r3,r2,8
   452b0:	008001b4 	movhi	r2,6
   452b4:	108f1604 	addi	r2,r2,15448
   452b8:	10800017 	ldw	r2,0(r2)
   452bc:	1004d63a 	srli	r2,r2,24
   452c0:	18800005 	stb	r2,0(r3)
            buf[9]  = (image.addr >> 16) & 0xff;
   452c4:	e0bffe17 	ldw	r2,-8(fp)
   452c8:	10c00244 	addi	r3,r2,9
   452cc:	008001b4 	movhi	r2,6
   452d0:	108f1604 	addi	r2,r2,15448
   452d4:	10800017 	ldw	r2,0(r2)
   452d8:	1004d43a 	srli	r2,r2,16
   452dc:	18800005 	stb	r2,0(r3)
            buf[10] = (image.addr >> 8) & 0xff;
   452e0:	e0bffe17 	ldw	r2,-8(fp)
   452e4:	10c00284 	addi	r3,r2,10
   452e8:	008001b4 	movhi	r2,6
   452ec:	108f1604 	addi	r2,r2,15448
   452f0:	10800017 	ldw	r2,0(r2)
   452f4:	1004d23a 	srli	r2,r2,8
   452f8:	18800005 	stb	r2,0(r3)
            buf[11] = (image.addr >> 0) & 0xff;
   452fc:	e0bffe17 	ldw	r2,-8(fp)
   45300:	10c002c4 	addi	r3,r2,11
   45304:	008001b4 	movhi	r2,6
   45308:	108f1604 	addi	r2,r2,15448
   4530c:	10800017 	ldw	r2,0(r2)
   45310:	18800005 	stb	r2,0(r3)
            memcpy(&buf[12], image.data, 256);
   45314:	e0bffe17 	ldw	r2,-8(fp)
   45318:	10c00304 	addi	r3,r2,12
   4531c:	008001b4 	movhi	r2,6
   45320:	108f1604 	addi	r2,r2,15448
   45324:	1809883a 	mov	r4,r3
   45328:	10800104 	addi	r2,r2,4
   4532c:	00c04004 	movi	r3,256
   45330:	180d883a 	mov	r6,r3
   45334:	100b883a 	mov	r5,r2
   45338:	0048f880 	call	48f88 <memcpy>
            for(i = 0; i < 8 + 4 + 256; i++)
   4533c:	e03ff815 	stw	zero,-32(fp)
   45340:	00000a06 	br	4536c <pc2dev_packet+0x634>
                checksum ^= buf[i];
   45344:	e0bff817 	ldw	r2,-32(fp)
   45348:	e0fffe17 	ldw	r3,-8(fp)
   4534c:	1885883a 	add	r2,r3,r2
   45350:	10c00003 	ldbu	r3,0(r2)
   45354:	e0bffa03 	ldbu	r2,-24(fp)
   45358:	1884f03a 	xor	r2,r3,r2
   4535c:	e0bffa05 	stb	r2,-24(fp)
            buf[8]  = (image.addr >> 24) & 0xff;
            buf[9]  = (image.addr >> 16) & 0xff;
            buf[10] = (image.addr >> 8) & 0xff;
            buf[11] = (image.addr >> 0) & 0xff;
            memcpy(&buf[12], image.data, 256);
            for(i = 0; i < 8 + 4 + 256; i++)
   45360:	e0bff817 	ldw	r2,-32(fp)
   45364:	10800044 	addi	r2,r2,1
   45368:	e0bff815 	stw	r2,-32(fp)
   4536c:	e0bff817 	ldw	r2,-32(fp)
   45370:	10804310 	cmplti	r2,r2,268
   45374:	103ff31e 	bne	r2,zero,45344 <__reset+0xfffc4344>
                checksum ^= buf[i];
            buf[272] = buf[273] = buf[274] = 0;
   45378:	e0bffe17 	ldw	r2,-8(fp)
   4537c:	11004404 	addi	r4,r2,272
   45380:	e0bffe17 	ldw	r2,-8(fp)
   45384:	10804444 	addi	r2,r2,273
   45388:	e0fffe17 	ldw	r3,-8(fp)
   4538c:	18c04484 	addi	r3,r3,274
   45390:	18000005 	stb	zero,0(r3)
   45394:	18c00003 	ldbu	r3,0(r3)
   45398:	10c00005 	stb	r3,0(r2)
   4539c:	10800003 	ldbu	r2,0(r2)
   453a0:	20800005 	stb	r2,0(r4)
            buf[275]                       = checksum;
   453a4:	e0bffe17 	ldw	r2,-8(fp)
   453a8:	108044c4 	addi	r2,r2,275
   453ac:	e0fffa03 	ldbu	r3,-24(fp)
   453b0:	10c00005 	stb	r3,0(r2)
            buf_len                        = 8 + 4 + 256 + 4;
   453b4:	00804404 	movi	r2,272
   453b8:	e0bff915 	stw	r2,-28(fp)
            break;
   453bc:	00003606 	br	45498 <pc2dev_packet+0x760>
        default:
            buf[8]  = (data->value >> 24) & 0xff;
   453c0:	e0bffe17 	ldw	r2,-8(fp)
   453c4:	10800204 	addi	r2,r2,8
   453c8:	e0fffd17 	ldw	r3,-12(fp)
   453cc:	18c00317 	ldw	r3,12(r3)
   453d0:	1806d63a 	srli	r3,r3,24
   453d4:	10c00005 	stb	r3,0(r2)
            buf[9]  = (data->value >> 16) & 0xff;
   453d8:	e0bffe17 	ldw	r2,-8(fp)
   453dc:	10800244 	addi	r2,r2,9
   453e0:	e0fffd17 	ldw	r3,-12(fp)
   453e4:	18c00317 	ldw	r3,12(r3)
   453e8:	1806d43a 	srli	r3,r3,16
   453ec:	10c00005 	stb	r3,0(r2)
            buf[10] = (data->value >> 8) & 0xff;
   453f0:	e0bffe17 	ldw	r2,-8(fp)
   453f4:	10800284 	addi	r2,r2,10
   453f8:	e0fffd17 	ldw	r3,-12(fp)
   453fc:	18c00317 	ldw	r3,12(r3)
   45400:	1806d23a 	srli	r3,r3,8
   45404:	10c00005 	stb	r3,0(r2)
            buf[11] = (data->value >> 0) & 0xff;
   45408:	e0bffe17 	ldw	r2,-8(fp)
   4540c:	108002c4 	addi	r2,r2,11
   45410:	e0fffd17 	ldw	r3,-12(fp)
   45414:	18c00317 	ldw	r3,12(r3)
   45418:	10c00005 	stb	r3,0(r2)
            for(i = 0; i < 12; i++)
   4541c:	e03ff815 	stw	zero,-32(fp)
   45420:	00000a06 	br	4544c <pc2dev_packet+0x714>
            {
                checksum ^= buf[i];
   45424:	e0bff817 	ldw	r2,-32(fp)
   45428:	e0fffe17 	ldw	r3,-8(fp)
   4542c:	1885883a 	add	r2,r3,r2
   45430:	10c00003 	ldbu	r3,0(r2)
   45434:	e0bffa03 	ldbu	r2,-24(fp)
   45438:	1884f03a 	xor	r2,r3,r2
   4543c:	e0bffa05 	stb	r2,-24(fp)
        default:
            buf[8]  = (data->value >> 24) & 0xff;
            buf[9]  = (data->value >> 16) & 0xff;
            buf[10] = (data->value >> 8) & 0xff;
            buf[11] = (data->value >> 0) & 0xff;
            for(i = 0; i < 12; i++)
   45440:	e0bff817 	ldw	r2,-32(fp)
   45444:	10800044 	addi	r2,r2,1
   45448:	e0bff815 	stw	r2,-32(fp)
   4544c:	e0bff817 	ldw	r2,-32(fp)
   45450:	10800310 	cmplti	r2,r2,12
   45454:	103ff31e 	bne	r2,zero,45424 <__reset+0xfffc4424>
            {
                checksum ^= buf[i];
            }
            buf[12] = 0;
   45458:	e0bffe17 	ldw	r2,-8(fp)
   4545c:	10800304 	addi	r2,r2,12
   45460:	10000005 	stb	zero,0(r2)
            buf[13] = 0;
   45464:	e0bffe17 	ldw	r2,-8(fp)
   45468:	10800344 	addi	r2,r2,13
   4546c:	10000005 	stb	zero,0(r2)
            buf[14] = 0;
   45470:	e0bffe17 	ldw	r2,-8(fp)
   45474:	10800384 	addi	r2,r2,14
   45478:	10000005 	stb	zero,0(r2)
            buf[15] = checksum;
   4547c:	e0bffe17 	ldw	r2,-8(fp)
   45480:	108003c4 	addi	r2,r2,15
   45484:	e0fffa03 	ldbu	r3,-24(fp)
   45488:	10c00005 	stb	r3,0(r2)
            buf_len = 16;
   4548c:	00800404 	movi	r2,16
   45490:	e0bff915 	stw	r2,-28(fp)
            break;
   45494:	0001883a 	nop
    }

    return buf_len;
   45498:	e0bff917 	ldw	r2,-28(fp)
}
   4549c:	e6ffff04 	addi	sp,fp,-4
   454a0:	dfc00217 	ldw	ra,8(sp)
   454a4:	df000117 	ldw	fp,4(sp)
   454a8:	dc000017 	ldw	r16,0(sp)
   454ac:	dec00304 	addi	sp,sp,12
   454b0:	f800283a 	ret

000454b4 <queue_init>:
 * @param   queue_element_t* const ptr: pointer to the array to store the data.
 * @param   const unsigned size: the size of the queue.
 * @return  None
 */
void queue_init(Queue* const queue, queue_item_t* const ptr, const unsigned size)
{
   454b4:	defffb04 	addi	sp,sp,-20
   454b8:	dfc00415 	stw	ra,16(sp)
   454bc:	df000315 	stw	fp,12(sp)
   454c0:	df000304 	addi	fp,sp,12
   454c4:	e13ffd15 	stw	r4,-12(fp)
   454c8:	e17ffe15 	stw	r5,-8(fp)
   454cc:	e1bfff15 	stw	r6,-4(fp)
    queue->front = 0;
   454d0:	e0bffd17 	ldw	r2,-12(fp)
   454d4:	10000015 	stw	zero,0(r2)
    queue->rear = 0;
   454d8:	e0bffd17 	ldw	r2,-12(fp)
   454dc:	10000115 	stw	zero,4(r2)
    queue->depth = size;
   454e0:	e0bffd17 	ldw	r2,-12(fp)
   454e4:	e0ffff17 	ldw	r3,-4(fp)
   454e8:	10c00215 	stw	r3,8(r2)
    queue->data = ptr;
   454ec:	e0bffd17 	ldw	r2,-12(fp)
   454f0:	e0fffe17 	ldw	r3,-8(fp)
   454f4:	10c00415 	stw	r3,16(r2)
    memset(queue->data, 0, sizeof(queue_item_t) * queue->depth);
   454f8:	e0bffd17 	ldw	r2,-12(fp)
   454fc:	10c00417 	ldw	r3,16(r2)
   45500:	e0bffd17 	ldw	r2,-12(fp)
   45504:	10800217 	ldw	r2,8(r2)
   45508:	1085883a 	add	r2,r2,r2
   4550c:	1085883a 	add	r2,r2,r2
   45510:	100d883a 	mov	r6,r2
   45514:	000b883a 	mov	r5,zero
   45518:	1809883a 	mov	r4,r3
   4551c:	00490d00 	call	490d0 <memset>
    queue->frame_over_flag = 0;
   45520:	e0bffd17 	ldw	r2,-12(fp)
   45524:	10000315 	stw	zero,12(r2)
}
   45528:	0001883a 	nop
   4552c:	e037883a 	mov	sp,fp
   45530:	dfc00117 	ldw	ra,4(sp)
   45534:	df000017 	ldw	fp,0(sp)
   45538:	dec00204 	addi	sp,sp,8
   4553c:	f800283a 	ret

00045540 <queue_clear>:
 * @brief   Sets the front and the back to the same index and flags the queue as empty.
 * @param   Queue* const queue: pointer to a Queue.
 * @return  Queue_Status: returns the status of the queue. Should read Queue_Empty.
 */
void queue_clear(Queue* const queue)
{
   45540:	defffe04 	addi	sp,sp,-8
   45544:	df000115 	stw	fp,4(sp)
   45548:	df000104 	addi	fp,sp,4
   4554c:	e13fff15 	stw	r4,-4(fp)
    /* Perform the same operation as queue_init(). */
    queue->front = queue->rear = 0;
   45550:	e0bfff17 	ldw	r2,-4(fp)
   45554:	10000115 	stw	zero,4(r2)
   45558:	e0bfff17 	ldw	r2,-4(fp)
   4555c:	10c00117 	ldw	r3,4(r2)
   45560:	e0bfff17 	ldw	r2,-4(fp)
   45564:	10c00015 	stw	r3,0(r2)
//    memset(queue->data, 0, sizeof(queue_item_t) * queue->depth);
}
   45568:	0001883a 	nop
   4556c:	e037883a 	mov	sp,fp
   45570:	df000017 	ldw	fp,0(sp)
   45574:	dec00104 	addi	sp,sp,4
   45578:	f800283a 	ret

0004557c <queue_push>:
 * @param   Queue* const queue: pointer to a Queue.
 *          queue_element_t queue_element: data to be emplaced upon the queue.
 * @return  None.
 */
bool queue_push(Queue* const queue, const queue_item_t queue_element)
{
   4557c:	defffc04 	addi	sp,sp,-16
   45580:	dfc00315 	stw	ra,12(sp)
   45584:	df000215 	stw	fp,8(sp)
   45588:	df000204 	addi	fp,sp,8
   4558c:	e13ffe15 	stw	r4,-8(fp)
   45590:	e17fff15 	stw	r5,-4(fp)
	queue->data[queue->rear] = queue_element;
   45594:	e0bffe17 	ldw	r2,-8(fp)
   45598:	10c00417 	ldw	r3,16(r2)
   4559c:	e0bffe17 	ldw	r2,-8(fp)
   455a0:	10800117 	ldw	r2,4(r2)
   455a4:	1085883a 	add	r2,r2,r2
   455a8:	1085883a 	add	r2,r2,r2
   455ac:	1885883a 	add	r2,r3,r2
   455b0:	e0ffff17 	ldw	r3,-4(fp)
   455b4:	10c00015 	stw	r3,0(r2)
	queue->rear = (queue->rear+1) % queue->depth;
   455b8:	e0bffe17 	ldw	r2,-8(fp)
   455bc:	10800117 	ldw	r2,4(r2)
   455c0:	10c00044 	addi	r3,r2,1
   455c4:	e0bffe17 	ldw	r2,-8(fp)
   455c8:	10800217 	ldw	r2,8(r2)
   455cc:	100b883a 	mov	r5,r2
   455d0:	1809883a 	mov	r4,r3
   455d4:	0048f300 	call	48f30 <__umodsi3>
   455d8:	1007883a 	mov	r3,r2
   455dc:	e0bffe17 	ldw	r2,-8(fp)
   455e0:	10c00115 	stw	r3,4(r2)
    return true;
   455e4:	00800044 	movi	r2,1
}
   455e8:	e037883a 	mov	sp,fp
   455ec:	dfc00117 	ldw	ra,4(sp)
   455f0:	df000017 	ldw	fp,0(sp)
   455f4:	dec00204 	addi	sp,sp,8
   455f8:	f800283a 	ret

000455fc <queue_pop>:
 * @brief   Removes an entry from the queue.
 * @param   Queue* const queue: pointer to a Queue.
 * @return  queue_element_t: the last element in the queue.
 */
queue_item_t queue_pop(Queue* const queue)
{
   455fc:	defffc04 	addi	sp,sp,-16
   45600:	dfc00315 	stw	ra,12(sp)
   45604:	df000215 	stw	fp,8(sp)
   45608:	df000204 	addi	fp,sp,8
   4560c:	e13fff15 	stw	r4,-4(fp)
    /* First check to see if the queue is full. Since enqueue() doesn't update the front
     * pointer there is a possibility that the queue could've wrapped. Performing the
     * overfull check here means that 'front' is read only and not write. */
    queue_item_t data = queue->data[queue->front];
   45610:	e0bfff17 	ldw	r2,-4(fp)
   45614:	10c00417 	ldw	r3,16(r2)
   45618:	e0bfff17 	ldw	r2,-4(fp)
   4561c:	10800017 	ldw	r2,0(r2)
   45620:	1085883a 	add	r2,r2,r2
   45624:	1085883a 	add	r2,r2,r2
   45628:	1885883a 	add	r2,r3,r2
   4562c:	10800017 	ldw	r2,0(r2)
   45630:	e0bffe15 	stw	r2,-8(fp)
    queue->front = (queue->front + 1) % queue->depth;
   45634:	e0bfff17 	ldw	r2,-4(fp)
   45638:	10800017 	ldw	r2,0(r2)
   4563c:	10c00044 	addi	r3,r2,1
   45640:	e0bfff17 	ldw	r2,-4(fp)
   45644:	10800217 	ldw	r2,8(r2)
   45648:	100b883a 	mov	r5,r2
   4564c:	1809883a 	mov	r4,r3
   45650:	0048f300 	call	48f30 <__umodsi3>
   45654:	1007883a 	mov	r3,r2
   45658:	e0bfff17 	ldw	r2,-4(fp)
   4565c:	10c00015 	stw	r3,0(r2)
    return data;
   45660:	e0bffe17 	ldw	r2,-8(fp)
}
   45664:	e037883a 	mov	sp,fp
   45668:	dfc00117 	ldw	ra,4(sp)
   4566c:	df000017 	ldw	fp,0(sp)
   45670:	dec00204 	addi	sp,sp,8
   45674:	f800283a 	ret

00045678 <queue_count>:
 * @brief   Returns the number of objects in a queue.
 * @param   const Queue *queue: the queue to be checked.
 * @return  unsigned int: count
 */
unsigned int queue_count(const Queue* const queue)
{
   45678:	defffd04 	addi	sp,sp,-12
   4567c:	dfc00215 	stw	ra,8(sp)
   45680:	df000115 	stw	fp,4(sp)
   45684:	df000104 	addi	fp,sp,4
   45688:	e13fff15 	stw	r4,-4(fp)
    if(queue_is_empty(queue) == false)
   4568c:	e13fff17 	ldw	r4,-4(fp)
   45690:	00457580 	call	45758 <queue_is_empty>
   45694:	1080005c 	xori	r2,r2,1
   45698:	10803fcc 	andi	r2,r2,255
   4569c:	10000e26 	beq	r2,zero,456d8 <queue_count+0x60>
        return (queue->rear + queue->depth - queue->front) % queue->depth;
   456a0:	e0bfff17 	ldw	r2,-4(fp)
   456a4:	10c00117 	ldw	r3,4(r2)
   456a8:	e0bfff17 	ldw	r2,-4(fp)
   456ac:	10800217 	ldw	r2,8(r2)
   456b0:	1887883a 	add	r3,r3,r2
   456b4:	e0bfff17 	ldw	r2,-4(fp)
   456b8:	10800017 	ldw	r2,0(r2)
   456bc:	1887c83a 	sub	r3,r3,r2
   456c0:	e0bfff17 	ldw	r2,-4(fp)
   456c4:	10800217 	ldw	r2,8(r2)
   456c8:	100b883a 	mov	r5,r2
   456cc:	1809883a 	mov	r4,r3
   456d0:	0048f300 	call	48f30 <__umodsi3>
   456d4:	00000106 	br	456dc <queue_count+0x64>
    else
        return 0;
   456d8:	0005883a 	mov	r2,zero
}
   456dc:	e037883a 	mov	sp,fp
   456e0:	dfc00117 	ldw	ra,4(sp)
   456e4:	df000017 	ldw	fp,0(sp)
   456e8:	dec00204 	addi	sp,sp,8
   456ec:	f800283a 	ret

000456f0 <queue_is_full>:
 * @brief   Boolean check to see if the queue is full
 * @param   const Queue *queue: the queue to be checked.
 * @return  bool: false if not full. true if full.
 */
bool queue_is_full(const Queue* const queue)
{
   456f0:	defffc04 	addi	sp,sp,-16
   456f4:	dfc00315 	stw	ra,12(sp)
   456f8:	df000215 	stw	fp,8(sp)
   456fc:	dc000115 	stw	r16,4(sp)
   45700:	df000204 	addi	fp,sp,8
   45704:	e13ffe15 	stw	r4,-8(fp)
    if(queue->front == ( (queue->rear+1) % queue->depth) )
   45708:	e0bffe17 	ldw	r2,-8(fp)
   4570c:	14000017 	ldw	r16,0(r2)
   45710:	e0bffe17 	ldw	r2,-8(fp)
   45714:	10800117 	ldw	r2,4(r2)
   45718:	10c00044 	addi	r3,r2,1
   4571c:	e0bffe17 	ldw	r2,-8(fp)
   45720:	10800217 	ldw	r2,8(r2)
   45724:	100b883a 	mov	r5,r2
   45728:	1809883a 	mov	r4,r3
   4572c:	0048f300 	call	48f30 <__umodsi3>
   45730:	8080021e 	bne	r16,r2,4573c <queue_is_full+0x4c>
        return true;
   45734:	00800044 	movi	r2,1
   45738:	00000106 	br	45740 <queue_is_full+0x50>
    else
        return false;
   4573c:	0005883a 	mov	r2,zero
}
   45740:	e6ffff04 	addi	sp,fp,-4
   45744:	dfc00217 	ldw	ra,8(sp)
   45748:	df000117 	ldw	fp,4(sp)
   4574c:	dc000017 	ldw	r16,0(sp)
   45750:	dec00304 	addi	sp,sp,12
   45754:	f800283a 	ret

00045758 <queue_is_empty>:
 * @brief   Boolean check to see if the queue is empty.
 * @param   const Queue *queue: the queue to be checked.
 * @return  bool: false if not empty. true if empty.
 */
bool queue_is_empty(const Queue* const queue)
{
   45758:	defffe04 	addi	sp,sp,-8
   4575c:	df000115 	stw	fp,4(sp)
   45760:	df000104 	addi	fp,sp,4
   45764:	e13fff15 	stw	r4,-4(fp)
    if(queue->front == queue->rear)
   45768:	e0bfff17 	ldw	r2,-4(fp)
   4576c:	10c00017 	ldw	r3,0(r2)
   45770:	e0bfff17 	ldw	r2,-4(fp)
   45774:	10800117 	ldw	r2,4(r2)
   45778:	1880021e 	bne	r3,r2,45784 <queue_is_empty+0x2c>
        return true;
   4577c:	00800044 	movi	r2,1
   45780:	00000106 	br	45788 <queue_is_empty+0x30>
    else
        return false;
   45784:	0005883a 	mov	r2,zero
}
   45788:	e037883a 	mov	sp,fp
   4578c:	df000017 	ldw	fp,0(sp)
   45790:	dec00104 	addi	sp,sp,4
   45794:	f800283a 	ret

00045798 <region_save2eeprom>:
 * @param region
 * @return true
 * @return false
 */
bool region_save2eeprom(struct __region *region)
{
   45798:	defffc04 	addi	sp,sp,-16
   4579c:	dfc00315 	stw	ra,12(sp)
   457a0:	df000215 	stw	fp,8(sp)
   457a4:	df000204 	addi	fp,sp,8
   457a8:	e13fff15 	stw	r4,-4(fp)
    unsigned int offset_addr;

    eeprom_write_byte(3, (unsigned char)region->select);  //
   457ac:	e0bfff17 	ldw	r2,-4(fp)
   457b0:	1081bd17 	ldw	r2,1780(r2)
   457b4:	10803fcc 	andi	r2,r2,255
   457b8:	100b883a 	mov	r5,r2
   457bc:	010000c4 	movi	r4,3
   457c0:	0041f280 	call	41f28 <eeprom_write_byte>
    delay_us(10000);
   457c4:	0109c404 	movi	r4,10000
   457c8:	00402c80 	call	402c8 <delay_us>

    offset_addr = GROUP_OFFSET_ADDR + REGION_SPACE_SIZE * region->wr_which;
   457cc:	e0bfff17 	ldw	r2,-4(fp)
   457d0:	10800103 	ldbu	r2,4(r2)
   457d4:	10803fcc 	andi	r2,r2,255
   457d8:	10800084 	addi	r2,r2,2
   457dc:	100492fa 	slli	r2,r2,11
   457e0:	e0bffe15 	stw	r2,-8(fp)
    eeprom_write_page(offset_addr, (alt_u8 *)region->buffer, TARGET_NUMBER * 2);
   457e4:	e0bfff17 	ldw	r2,-4(fp)
   457e8:	10802704 	addi	r2,r2,156
   457ec:	01819584 	movi	r6,1622
   457f0:	100b883a 	mov	r5,r2
   457f4:	e13ffe17 	ldw	r4,-8(fp)
   457f8:	0041fd40 	call	41fd4 <eeprom_write_page>
    offset_addr += TARGET_NUMBER * 2;
   457fc:	e0bffe17 	ldw	r2,-8(fp)
   45800:	10819584 	addi	r2,r2,1622
   45804:	e0bffe15 	stw	r2,-8(fp)
    eeprom_write_page(offset_addr, (alt_u8 *)region->zenith_save, ZENITH_NUMBER);
   45808:	e0bfff17 	ldw	r2,-4(fp)
   4580c:	10800184 	addi	r2,r2,6
   45810:	018019c4 	movi	r6,103
   45814:	100b883a 	mov	r5,r2
   45818:	e13ffe17 	ldw	r4,-8(fp)
   4581c:	0041fd40 	call	41fd4 <eeprom_write_page>

    return true;
   45820:	00800044 	movi	r2,1
}
   45824:	e037883a 	mov	sp,fp
   45828:	dfc00117 	ldw	ra,4(sp)
   4582c:	df000017 	ldw	fp,0(sp)
   45830:	dec00204 	addi	sp,sp,8
   45834:	f800283a 	ret

00045838 <region_save2fpga>:
 * @param num 0,内层; 1, 中间层; 2:外层
 * @return true
 * @return false
 */
bool region_save2fpga(struct __region *region, int num)
{
   45838:	defffa04 	addi	sp,sp,-24
   4583c:	dfc00515 	stw	ra,20(sp)
   45840:	df000415 	stw	fp,16(sp)
   45844:	df000404 	addi	fp,sp,16
   45848:	e13ffe15 	stw	r4,-8(fp)
   4584c:	e17fff15 	stw	r5,-4(fp)
    int          i;
    unsigned int data;
    if(num == 0)
   45850:	e0bfff17 	ldw	r2,-4(fp)
   45854:	1000041e 	bne	r2,zero,45868 <region_save2fpga+0x30>
        data = 0x12340000 + WR_REGION0_DATA;
   45858:	00848d74 	movhi	r2,4661
   4585c:	10ac4004 	addi	r2,r2,-20224
   45860:	e0bffd15 	stw	r2,-12(fp)
   45864:	00000d06 	br	4589c <region_save2fpga+0x64>
    else if(num == 1)
   45868:	e0bfff17 	ldw	r2,-4(fp)
   4586c:	10800058 	cmpnei	r2,r2,1
   45870:	1000041e 	bne	r2,zero,45884 <region_save2fpga+0x4c>
        data = 0x12340000 + WR_REGION1_DATA;
   45874:	00848d74 	movhi	r2,4661
   45878:	10ac4044 	addi	r2,r2,-20223
   4587c:	e0bffd15 	stw	r2,-12(fp)
   45880:	00000606 	br	4589c <region_save2fpga+0x64>
    else if(num == 2)
   45884:	e0bfff17 	ldw	r2,-4(fp)
   45888:	10800098 	cmpnei	r2,r2,2
   4588c:	1000031e 	bne	r2,zero,4589c <region_save2fpga+0x64>
        data = 0x12340000 + WR_REGION2_DATA;
   45890:	00848d74 	movhi	r2,4661
   45894:	10ac4084 	addi	r2,r2,-20222
   45898:	e0bffd15 	stw	r2,-12(fp)

    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   4589c:	e0bffd17 	ldw	r2,-12(fp)
   458a0:	1004143a 	roli	r2,r2,16
   458a4:	100d883a 	mov	r6,r2
   458a8:	01400234 	movhi	r5,8
   458ac:	29484004 	addi	r5,r5,8448
   458b0:	01000234 	movhi	r4,8
   458b4:	21087a04 	addi	r4,r4,8680
   458b8:	004a8280 	call	4a828 <altera_avalon_fifo_write_fifo>
    data = 811;
   458bc:	0080cac4 	movi	r2,811
   458c0:	e0bffd15 	stw	r2,-12(fp)
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   458c4:	e0bffd17 	ldw	r2,-12(fp)
   458c8:	1004143a 	roli	r2,r2,16
   458cc:	100d883a 	mov	r6,r2
   458d0:	01400234 	movhi	r5,8
   458d4:	29484004 	addi	r5,r5,8448
   458d8:	01000234 	movhi	r4,8
   458dc:	21087a04 	addi	r4,r4,8680
   458e0:	004a8280 	call	4a828 <altera_avalon_fifo_write_fifo>

    //    data = 0x1000;
    for(i = 0; i < 811; i++)
   458e4:	e03ffc15 	stw	zero,-16(fp)
   458e8:	00001306 	br	45938 <region_save2fpga+0x100>
    {
        data = region->buffer[i];
   458ec:	e0fffe17 	ldw	r3,-8(fp)
   458f0:	e0bffc17 	ldw	r2,-16(fp)
   458f4:	10801384 	addi	r2,r2,78
   458f8:	1085883a 	add	r2,r2,r2
   458fc:	1885883a 	add	r2,r3,r2
   45900:	1080000b 	ldhu	r2,0(r2)
   45904:	10bfffcc 	andi	r2,r2,65535
   45908:	e0bffd15 	stw	r2,-12(fp)
        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   4590c:	e0bffd17 	ldw	r2,-12(fp)
   45910:	1004143a 	roli	r2,r2,16
   45914:	100d883a 	mov	r6,r2
   45918:	01400234 	movhi	r5,8
   4591c:	29484004 	addi	r5,r5,8448
   45920:	01000234 	movhi	r4,8
   45924:	21087a04 	addi	r4,r4,8680
   45928:	004a8280 	call	4a828 <altera_avalon_fifo_write_fifo>
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
    data = 811;
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));

    //    data = 0x1000;
    for(i = 0; i < 811; i++)
   4592c:	e0bffc17 	ldw	r2,-16(fp)
   45930:	10800044 	addi	r2,r2,1
   45934:	e0bffc15 	stw	r2,-16(fp)
   45938:	e0bffc17 	ldw	r2,-16(fp)
   4593c:	1080cad0 	cmplti	r2,r2,811
   45940:	103fea1e 	bne	r2,zero,458ec <__reset+0xfffc48ec>
    {
        data = region->buffer[i];
        altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
    }
    data = 0xccccdddd;
   45944:	00b33374 	movhi	r2,52429
   45948:	10b77744 	addi	r2,r2,-8739
   4594c:	e0bffd15 	stw	r2,-12(fp)
    altera_avalon_fifo_write_fifo(PROTOCOL_FIFO_IN_BASE, PROTOCOL_FIFO_IN_CSR_BASE, (data >> 16) + (data << 16));
   45950:	e0bffd17 	ldw	r2,-12(fp)
   45954:	1004143a 	roli	r2,r2,16
   45958:	100d883a 	mov	r6,r2
   4595c:	01400234 	movhi	r5,8
   45960:	29484004 	addi	r5,r5,8448
   45964:	01000234 	movhi	r4,8
   45968:	21087a04 	addi	r4,r4,8680
   4596c:	004a8280 	call	4a828 <altera_avalon_fifo_write_fifo>
    return true;
   45970:	00800044 	movi	r2,1
}
   45974:	e037883a 	mov	sp,fp
   45978:	dfc00117 	ldw	ra,4(sp)
   4597c:	df000017 	ldw	fp,0(sp)
   45980:	dec00204 	addi	sp,sp,8
   45984:	f800283a 	ret

00045988 <region_read_from_rom>:
 * @param num e2prom内存空间编号. 0, 3内存; 1,4,中间层; 2,5 外层
 * @return true
 * @return false
 */
bool region_read_from_rom(struct __region *region, int num)
{
   45988:	defffb04 	addi	sp,sp,-20
   4598c:	dfc00415 	stw	ra,16(sp)
   45990:	df000315 	stw	fp,12(sp)
   45994:	df000304 	addi	fp,sp,12
   45998:	e13ffe15 	stw	r4,-8(fp)
   4599c:	e17fff15 	stw	r5,-4(fp)
    unsigned int offset_addr;

    offset_addr = GROUP_OFFSET_ADDR + num * REGION_SPACE_SIZE;
   459a0:	e0bfff17 	ldw	r2,-4(fp)
   459a4:	10800084 	addi	r2,r2,2
   459a8:	100492fa 	slli	r2,r2,11
   459ac:	e0bffd15 	stw	r2,-12(fp)
    eeprom_sequential_read(offset_addr, (alt_u8 *)region->buffer, TARGET_NUMBER * 2);
   459b0:	e0bffe17 	ldw	r2,-8(fp)
   459b4:	10802704 	addi	r2,r2,156
   459b8:	01819584 	movi	r6,1622
   459bc:	100b883a 	mov	r5,r2
   459c0:	e13ffd17 	ldw	r4,-12(fp)
   459c4:	00422a40 	call	422a4 <eeprom_sequential_read>
    region_save2fpga(&alarm_region, num % 3);
   459c8:	e0bfff17 	ldw	r2,-4(fp)
   459cc:	014000c4 	movi	r5,3
   459d0:	1009883a 	mov	r4,r2
   459d4:	0048e580 	call	48e58 <__modsi3>
   459d8:	100b883a 	mov	r5,r2
   459dc:	010001b4 	movhi	r4,6
   459e0:	21248a04 	addi	r4,r4,-28120
   459e4:	00458380 	call	45838 <region_save2fpga>

    return true;
   459e8:	00800044 	movi	r2,1
}
   459ec:	e037883a 	mov	sp,fp
   459f0:	dfc00117 	ldw	ra,4(sp)
   459f4:	df000017 	ldw	fp,0(sp)
   459f8:	dec00204 	addi	sp,sp,8
   459fc:	f800283a 	ret

00045a00 <save_sys_para>:
 * @brief 将SysStatus里的系统运行参数保存到Flash里, 小端模式写入
 * TODO: 解决参数区域内容被意外擦除
 * @param data
 */
void save_sys_para(Sys_Para *data)
{
   45a00:	deff9d04 	addi	sp,sp,-396
   45a04:	dfc06215 	stw	ra,392(sp)
   45a08:	df006115 	stw	fp,388(sp)
   45a0c:	df006104 	addi	fp,sp,388
   45a10:	e13fff15 	stw	r4,-4(fp)
    unsigned char buf[384];
    memset(buf, 0, sizeof(buf));
   45a14:	01806004 	movi	r6,384
   45a18:	000b883a 	mov	r5,zero
   45a1c:	e13f9f04 	addi	r4,fp,-388
   45a20:	00490d00 	call	490d0 <memset>
    memcpy(buf, (unsigned char *)data, sizeof(Sys_Para));
   45a24:	01804c04 	movi	r6,304
   45a28:	e17fff17 	ldw	r5,-4(fp)
   45a2c:	e13f9f04 	addi	r4,fp,-388
   45a30:	0048f880 	call	48f88 <memcpy>
    eeprom_write_page(SYS_PARA_ADDR, buf, sizeof(Sys_Para));
   45a34:	01804c04 	movi	r6,304
   45a38:	e17f9f04 	addi	r5,fp,-388
   45a3c:	01010004 	movi	r4,1024
   45a40:	0041fd40 	call	41fd4 <eeprom_write_page>
}
   45a44:	0001883a 	nop
   45a48:	e037883a 	mov	sp,fp
   45a4c:	dfc00117 	ldw	ra,4(sp)
   45a50:	df000017 	ldw	fp,0(sp)
   45a54:	dec00204 	addi	sp,sp,8
   45a58:	f800283a 	ret

00045a5c <read_sys_para>:
 * @brief 如果Flash为空，则版本号为0.01。保存参数重新上电后，版本号正常
 *
 * @param status
 */
void read_sys_para(Sys_Para *status)
{
   45a5c:	deff9c04 	addi	sp,sp,-400
   45a60:	dfc06315 	stw	ra,396(sp)
   45a64:	df006215 	stw	fp,392(sp)
   45a68:	df006204 	addi	fp,sp,392
   45a6c:	e13fff15 	stw	r4,-4(fp)
    unsigned int  num = 5;
   45a70:	00800144 	movi	r2,5
   45a74:	e0bf9e15 	stw	r2,-392(fp)
    unsigned char buf[384];

    while(num--)
   45a78:	00005406 	br	45bcc <read_sys_para+0x170>
    {
        eeprom_sequential_read(SYS_PARA_ADDR, buf, sizeof(Sys_Para));
   45a7c:	e0bf9f04 	addi	r2,fp,-388
   45a80:	01804c04 	movi	r6,304
   45a84:	100b883a 	mov	r5,r2
   45a88:	01010004 	movi	r4,1024
   45a8c:	00422a40 	call	422a4 <eeprom_sequential_read>
        status->dust_threshold = 400;
   45a90:	e0bfff17 	ldw	r2,-4(fp)
   45a94:	00c06404 	movi	r3,400
   45a98:	10c04915 	stw	r3,292(r2)
        // 简单判断从eeprom读出来的数据是否正确
        if(((buf[4] == 0x11) && (buf[5] == 0x11) && (buf[6] == 0x11) && (buf[7] == 0x11)) ||
   45a9c:	e0bfa003 	ldbu	r2,-384(fp)
   45aa0:	10803fcc 	andi	r2,r2,255
   45aa4:	10800458 	cmpnei	r2,r2,17
   45aa8:	10000c1e 	bne	r2,zero,45adc <read_sys_para+0x80>
   45aac:	e0bfa043 	ldbu	r2,-383(fp)
   45ab0:	10803fcc 	andi	r2,r2,255
   45ab4:	10800458 	cmpnei	r2,r2,17
   45ab8:	1000081e 	bne	r2,zero,45adc <read_sys_para+0x80>
   45abc:	e0bfa083 	ldbu	r2,-382(fp)
   45ac0:	10803fcc 	andi	r2,r2,255
   45ac4:	10800458 	cmpnei	r2,r2,17
   45ac8:	1000041e 	bne	r2,zero,45adc <read_sys_para+0x80>
   45acc:	e0bfa0c3 	ldbu	r2,-381(fp)
   45ad0:	10803fcc 	andi	r2,r2,255
   45ad4:	10800460 	cmpeqi	r2,r2,17
   45ad8:	1000101e 	bne	r2,zero,45b1c <read_sys_para+0xc0>
           ((buf[4] == 0x22) && (buf[5] == 0x22) && (buf[6] == 0x22) && (buf[7] == 0x22)))
   45adc:	e0bfa003 	ldbu	r2,-384(fp)
    while(num--)
    {
        eeprom_sequential_read(SYS_PARA_ADDR, buf, sizeof(Sys_Para));
        status->dust_threshold = 400;
        // 简单判断从eeprom读出来的数据是否正确
        if(((buf[4] == 0x11) && (buf[5] == 0x11) && (buf[6] == 0x11) && (buf[7] == 0x11)) ||
   45ae0:	10803fcc 	andi	r2,r2,255
   45ae4:	10800898 	cmpnei	r2,r2,34
   45ae8:	1000381e 	bne	r2,zero,45bcc <read_sys_para+0x170>
           ((buf[4] == 0x22) && (buf[5] == 0x22) && (buf[6] == 0x22) && (buf[7] == 0x22)))
   45aec:	e0bfa043 	ldbu	r2,-383(fp)
   45af0:	10803fcc 	andi	r2,r2,255
   45af4:	10800898 	cmpnei	r2,r2,34
   45af8:	1000341e 	bne	r2,zero,45bcc <read_sys_para+0x170>
   45afc:	e0bfa083 	ldbu	r2,-382(fp)
   45b00:	10803fcc 	andi	r2,r2,255
   45b04:	10800898 	cmpnei	r2,r2,34
   45b08:	1000301e 	bne	r2,zero,45bcc <read_sys_para+0x170>
   45b0c:	e0bfa0c3 	ldbu	r2,-381(fp)
   45b10:	10803fcc 	andi	r2,r2,255
   45b14:	10800898 	cmpnei	r2,r2,34
   45b18:	10002c1e 	bne	r2,zero,45bcc <read_sys_para+0x170>
        {
            memcpy(status, buf, sizeof(Sys_Para));
   45b1c:	e0bf9f04 	addi	r2,fp,-388
   45b20:	01804c04 	movi	r6,304
   45b24:	100b883a 	mov	r5,r2
   45b28:	e13fff17 	ldw	r4,-4(fp)
   45b2c:	0048f880 	call	48f88 <memcpy>

            // 标识位即时写入E2PROM, 如果此时系统断电, 重新上电后系统状态会出错
            status->update_pos_flag = true;
   45b30:	e0bfff17 	ldw	r2,-4(fp)
   45b34:	00c00044 	movi	r3,1
   45b38:	10c00005 	stb	r3,0(r2)
            status->motor_enable    = ENABLE;
   45b3c:	e0ffff17 	ldw	r3,-4(fp)
   45b40:	00844474 	movhi	r2,4369
   45b44:	10844444 	addi	r2,r2,4369
   45b48:	18800415 	stw	r2,16(r3)
            status->laser_enable    = ENABLE;
   45b4c:	e0ffff17 	ldw	r3,-4(fp)
   45b50:	00844474 	movhi	r2,4369
   45b54:	10844444 	addi	r2,r2,4369
   45b58:	18800115 	stw	r2,4(r3)
            status->max_pwm_duty    = 10;
   45b5c:	e0bfff17 	ldw	r2,-4(fp)
   45b60:	00c00284 	movi	r3,10
   45b64:	10c01f15 	stw	r3,124(r2)
            status->dust_threshold  = 400;
   45b68:	e0bfff17 	ldw	r2,-4(fp)
   45b6c:	00c06404 	movi	r3,400
   45b70:	10c04915 	stw	r3,292(r2)
            memcpy(status->nios_ver, NIOS_VERSION, 4);
   45b74:	e0bfff17 	ldw	r2,-4(fp)
   45b78:	10801504 	addi	r2,r2,84
   45b7c:	01800104 	movi	r6,4
   45b80:	01400174 	movhi	r5,5
   45b84:	2973a504 	addi	r5,r5,-12652
   45b88:	1009883a 	mov	r4,r2
   45b8c:	0048f880 	call	48f88 <memcpy>
            memcpy(status->fpga_ver, FPGA_VERSION, 4);
   45b90:	e0bfff17 	ldw	r2,-4(fp)
   45b94:	10801604 	addi	r2,r2,88
   45b98:	01800104 	movi	r6,4
   45b9c:	01400174 	movhi	r5,5
   45ba0:	2973a504 	addi	r5,r5,-12652
   45ba4:	1009883a 	mov	r4,r2
   45ba8:	0048f880 	call	48f88 <memcpy>
            memcpy(status->dev_pn, DEV_PN_NUM, 20);
   45bac:	e0bfff17 	ldw	r2,-4(fp)
   45bb0:	10803304 	addi	r2,r2,204
   45bb4:	01800504 	movi	r6,20
   45bb8:	01400174 	movhi	r5,5
   45bbc:	2973a704 	addi	r5,r5,-12644
   45bc0:	1009883a 	mov	r4,r2
   45bc4:	0048f880 	call	48f88 <memcpy>
   45bc8:	00000406 	br	45bdc <read_sys_para+0x180>
void read_sys_para(Sys_Para *status)
{
    unsigned int  num = 5;
    unsigned char buf[384];

    while(num--)
   45bcc:	e0bf9e17 	ldw	r2,-392(fp)
   45bd0:	10ffffc4 	addi	r3,r2,-1
   45bd4:	e0ff9e15 	stw	r3,-392(fp)
   45bd8:	103fa81e 	bne	r2,zero,45a7c <__reset+0xfffc4a7c>
            memcpy(status->dev_pn, DEV_PN_NUM, 20);

            return;
        }
    }
}
   45bdc:	e037883a 	mov	sp,fp
   45be0:	dfc00117 	ldw	ra,4(sp)
   45be4:	df000017 	ldw	fp,0(sp)
   45be8:	dec00204 	addi	sp,sp,8
   45bec:	f800283a 	ret

00045bf0 <rd_switch_io_value>:

unsigned char rd_switch_io_value(void)
{
   45bf0:	defffe04 	addi	sp,sp,-8
   45bf4:	df000115 	stw	fp,4(sp)
   45bf8:	df000104 	addi	fp,sp,4
    unsigned char data;
    data = IORD_ALTERA_AVALON_PIO_DATA(ALARM_SELECT_BASE);
   45bfc:	00800234 	movhi	r2,8
   45c00:	10885004 	addi	r2,r2,8512
   45c04:	10800037 	ldwio	r2,0(r2)
   45c08:	e0bfff05 	stb	r2,-4(fp)
    data = (~data) & 0x0f;
   45c0c:	e0bfff03 	ldbu	r2,-4(fp)
   45c10:	0084303a 	nor	r2,zero,r2
   45c14:	108003cc 	andi	r2,r2,15
   45c18:	e0bfff05 	stb	r2,-4(fp)
    return data;
   45c1c:	e0bfff03 	ldbu	r2,-4(fp)
}
   45c20:	e037883a 	mov	sp,fp
   45c24:	df000017 	ldw	fp,0(sp)
   45c28:	dec00104 	addi	sp,sp,4
   45c2c:	f800283a 	ret

00045c30 <image_write>:
#include "remote_update.h"

update_t image;

int image_write(int addr, unsigned char *data)
{
   45c30:	defff104 	addi	sp,sp,-60
   45c34:	dfc00e15 	stw	ra,56(sp)
   45c38:	df000d15 	stw	fp,52(sp)
   45c3c:	df000d04 	addi	fp,sp,52
   45c40:	e13ffe15 	stw	r4,-8(fp)
   45c44:	e17fff15 	stw	r5,-4(fp)
    int           block_addr;
    int           offset;
    int           ret_code;
    alt_flash_fd *fd;

    block_addr = (int)(addr / EPCS_BLOCK_SIZE) * EPCS_BLOCK_SIZE;
   45c48:	e0bffe17 	ldw	r2,-8(fp)
   45c4c:	1000020e 	bge	r2,zero,45c58 <image_write+0x28>
   45c50:	00ffffd4 	movui	r3,65535
   45c54:	10c5883a 	add	r2,r2,r3
   45c58:	1005d43a 	srai	r2,r2,16
   45c5c:	1004943a 	slli	r2,r2,16
   45c60:	e0bff415 	stw	r2,-48(fp)
    offset     = addr % EPCS_BLOCK_SIZE;
   45c64:	e0fffe17 	ldw	r3,-8(fp)
   45c68:	00a00074 	movhi	r2,32769
   45c6c:	10bfffc4 	addi	r2,r2,-1
   45c70:	1884703a 	and	r2,r3,r2
   45c74:	1000030e 	bge	r2,zero,45c84 <image_write+0x54>
   45c78:	10bfffc4 	addi	r2,r2,-1
   45c7c:	10bffff4 	orhi	r2,r2,65535
   45c80:	10800044 	addi	r2,r2,1
   45c84:	e0bff515 	stw	r2,-44(fp)
    fd         = alt_flash_open_dev(EPCS_FLASH_NAME);
   45c88:	01000174 	movhi	r4,5
   45c8c:	2133ab04 	addi	r4,r4,-12628
   45c90:	004943c0 	call	4943c <alt_flash_open_dev>
   45c94:	e0bff615 	stw	r2,-40(fp)
    if(!fd)
   45c98:	e0bff617 	ldw	r2,-40(fp)
   45c9c:	1000021e 	bne	r2,zero,45ca8 <image_write+0x78>
        return 0;
   45ca0:	0005883a 	mov	r2,zero
   45ca4:	00001b06 	br	45d14 <image_write+0xe4>
    else
    {
        ret_code = alt_write_flash_block(fd, block_addr, block_addr + offset, data, 256);
   45ca8:	e0fff417 	ldw	r3,-48(fp)
   45cac:	e0bff517 	ldw	r2,-44(fp)
   45cb0:	1885883a 	add	r2,r3,r2
   45cb4:	e0fff617 	ldw	r3,-40(fp)
   45cb8:	e0fff815 	stw	r3,-32(fp)
   45cbc:	e0fff417 	ldw	r3,-48(fp)
   45cc0:	e0fff915 	stw	r3,-28(fp)
   45cc4:	e0bffa15 	stw	r2,-24(fp)
   45cc8:	e0bfff17 	ldw	r2,-4(fp)
   45ccc:	e0bffb15 	stw	r2,-20(fp)
   45cd0:	00804004 	movi	r2,256
   45cd4:	e0bffc15 	stw	r2,-16(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
   45cd8:	e0bff817 	ldw	r2,-32(fp)
   45cdc:	10800917 	ldw	r2,36(r2)
   45ce0:	e0fffc17 	ldw	r3,-16(fp)
   45ce4:	d8c00015 	stw	r3,0(sp)
   45ce8:	e1fffb17 	ldw	r7,-20(fp)
   45cec:	e1bffa17 	ldw	r6,-24(fp)
   45cf0:	e17ff917 	ldw	r5,-28(fp)
   45cf4:	e13ff817 	ldw	r4,-32(fp)
   45cf8:	103ee83a 	callr	r2
   45cfc:	e0bffd15 	stw	r2,-12(fp)

/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
*/
  return ret_code;
   45d00:	e0bffd17 	ldw	r2,-12(fp)
   45d04:	e0bff715 	stw	r2,-36(fp)
        alt_flash_close_dev(fd);
   45d08:	e13ff617 	ldw	r4,-40(fp)
   45d0c:	00494a40 	call	494a4 <alt_flash_close_dev>
        return ret_code;
   45d10:	e0bff717 	ldw	r2,-36(fp)
    }
}
   45d14:	e037883a 	mov	sp,fp
   45d18:	dfc00117 	ldw	ra,4(sp)
   45d1c:	df000017 	ldw	fp,0(sp)
   45d20:	dec00204 	addi	sp,sp,8
   45d24:	f800283a 	ret

00045d28 <image_read>:

int image_read(int addr, unsigned char *data)
{
   45d28:	defff604 	addi	sp,sp,-40
   45d2c:	dfc00915 	stw	ra,36(sp)
   45d30:	df000815 	stw	fp,32(sp)
   45d34:	df000804 	addi	fp,sp,32
   45d38:	e13ffe15 	stw	r4,-8(fp)
   45d3c:	e17fff15 	stw	r5,-4(fp)
    int           ret_code;
    alt_flash_fd *fd;

    fd = alt_flash_open_dev(EPCS_FLASH_NAME);
   45d40:	01000174 	movhi	r4,5
   45d44:	2133ab04 	addi	r4,r4,-12628
   45d48:	004943c0 	call	4943c <alt_flash_open_dev>
   45d4c:	e0bff815 	stw	r2,-32(fp)
    if(!fd)
   45d50:	e0bff817 	ldw	r2,-32(fp)
   45d54:	1000021e 	bne	r2,zero,45d60 <image_read+0x38>
        return 0;
   45d58:	0005883a 	mov	r2,zero
   45d5c:	00001306 	br	45dac <image_read+0x84>
   45d60:	e0bff817 	ldw	r2,-32(fp)
   45d64:	e0bffa15 	stw	r2,-24(fp)
   45d68:	e0bffe17 	ldw	r2,-8(fp)
   45d6c:	e0bffb15 	stw	r2,-20(fp)
   45d70:	e0bfff17 	ldw	r2,-4(fp)
   45d74:	e0bffc15 	stw	r2,-16(fp)
   45d78:	00804004 	movi	r2,256
   45d7c:	e0bffd15 	stw	r2,-12(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
   45d80:	e0bffa17 	ldw	r2,-24(fp)
   45d84:	10800617 	ldw	r2,24(r2)
   45d88:	e1fffd17 	ldw	r7,-12(fp)
   45d8c:	e1bffc17 	ldw	r6,-16(fp)
   45d90:	e17ffb17 	ldw	r5,-20(fp)
   45d94:	e13ffa17 	ldw	r4,-24(fp)
   45d98:	103ee83a 	callr	r2
    else
    {
        ret_code = alt_read_flash(fd, addr, data, 256);
   45d9c:	e0bff915 	stw	r2,-28(fp)
        alt_flash_close_dev(fd);
   45da0:	e13ff817 	ldw	r4,-32(fp)
   45da4:	00494a40 	call	494a4 <alt_flash_close_dev>

        return ret_code;
   45da8:	e0bff917 	ldw	r2,-28(fp)
    }
}
   45dac:	e037883a 	mov	sp,fp
   45db0:	dfc00117 	ldw	ra,4(sp)
   45db4:	df000017 	ldw	fp,0(sp)
   45db8:	dec00204 	addi	sp,sp,8
   45dbc:	f800283a 	ret

00045dc0 <image_erase>:

int image_erase(int block_offset)
{
   45dc0:	defff704 	addi	sp,sp,-36
   45dc4:	dfc00815 	stw	ra,32(sp)
   45dc8:	df000715 	stw	fp,28(sp)
   45dcc:	df000704 	addi	fp,sp,28
   45dd0:	e13fff15 	stw	r4,-4(fp)
    int           ret_code;
    alt_flash_fd *fd;

    fd = alt_flash_open_dev(EPCS_FLASH_NAME);
   45dd4:	01000174 	movhi	r4,5
   45dd8:	2133ab04 	addi	r4,r4,-12628
   45ddc:	004943c0 	call	4943c <alt_flash_open_dev>
   45de0:	e0bff915 	stw	r2,-28(fp)
    if(!fd)
   45de4:	e0bff917 	ldw	r2,-28(fp)
   45de8:	1000021e 	bne	r2,zero,45df4 <image_erase+0x34>
        return 0;
   45dec:	0005883a 	mov	r2,zero
   45df0:	00001206 	br	45e3c <image_erase+0x7c>
    else
    {
        ret_code = alt_erase_flash_block(fd, block_offset * EPCS_BLOCK_SIZE, EPCS_BLOCK_SIZE);
   45df4:	e0bfff17 	ldw	r2,-4(fp)
   45df8:	1004943a 	slli	r2,r2,16
   45dfc:	e0fff917 	ldw	r3,-28(fp)
   45e00:	e0fffb15 	stw	r3,-20(fp)
   45e04:	e0bffc15 	stw	r2,-16(fp)
   45e08:	00800074 	movhi	r2,1
   45e0c:	e0bffd15 	stw	r2,-12(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
   45e10:	e0bffb17 	ldw	r2,-20(fp)
   45e14:	10800817 	ldw	r2,32(r2)
   45e18:	e17ffc17 	ldw	r5,-16(fp)
   45e1c:	e13ffb17 	ldw	r4,-20(fp)
   45e20:	103ee83a 	callr	r2
   45e24:	e0bffe15 	stw	r2,-8(fp)
  
/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
*/
  return ret_code;
   45e28:	e0bffe17 	ldw	r2,-8(fp)
   45e2c:	e0bffa15 	stw	r2,-24(fp)
        alt_flash_close_dev(fd);
   45e30:	e13ff917 	ldw	r4,-28(fp)
   45e34:	00494a40 	call	494a4 <alt_flash_close_dev>
        return ret_code;
   45e38:	e0bffa17 	ldw	r2,-24(fp)
    }
}
   45e3c:	e037883a 	mov	sp,fp
   45e40:	dfc00117 	ldw	ra,4(sp)
   45e44:	df000017 	ldw	fp,0(sp)
   45e48:	dec00204 	addi	sp,sp,8
   45e4c:	f800283a 	ret

00045e50 <string2hex>:
 * @param src 源字符串
 * @param len 源字符串长度
 * @param dest
 */
static void string2hex(const char *src, int len, char *dest)
{
   45e50:	defffa04 	addi	sp,sp,-24
   45e54:	df000515 	stw	fp,20(sp)
   45e58:	df000504 	addi	fp,sp,20
   45e5c:	e13ffd15 	stw	r4,-12(fp)
   45e60:	e17ffe15 	stw	r5,-8(fp)
   45e64:	e1bfff15 	stw	r6,-4(fp)
    int  i;
    char data[2];
    for(i = 0; i < len; i++)
   45e68:	e03ffb15 	stw	zero,-20(fp)
   45e6c:	00001a06 	br	45ed8 <string2hex+0x88>
    {
        data[0] = *src++;  // 取出前面2个字符
   45e70:	e0bffd17 	ldw	r2,-12(fp)
   45e74:	10c00044 	addi	r3,r2,1
   45e78:	e0fffd15 	stw	r3,-12(fp)
   45e7c:	10800003 	ldbu	r2,0(r2)
   45e80:	e0bffc05 	stb	r2,-16(fp)
        data[1] = *src++;
   45e84:	e0bffd17 	ldw	r2,-12(fp)
   45e88:	10c00044 	addi	r3,r2,1
   45e8c:	e0fffd15 	stw	r3,-12(fp)
   45e90:	10800003 	ldbu	r2,0(r2)
   45e94:	e0bffc45 	stb	r2,-15(fp)
        //        *dest = strtol(data, &pEnd, 16);
        *dest = ((data[0] - 0x30) << 4) + (data[1] - 0x30);
   45e98:	e0bffc03 	ldbu	r2,-16(fp)
   45e9c:	10bff404 	addi	r2,r2,-48
   45ea0:	1004913a 	slli	r2,r2,4
   45ea4:	1007883a 	mov	r3,r2
   45ea8:	e0bffc43 	ldbu	r2,-15(fp)
   45eac:	1885883a 	add	r2,r3,r2
   45eb0:	10bff404 	addi	r2,r2,-48
   45eb4:	1007883a 	mov	r3,r2
   45eb8:	e0bfff17 	ldw	r2,-4(fp)
   45ebc:	10c00005 	stb	r3,0(r2)
        dest++;
   45ec0:	e0bfff17 	ldw	r2,-4(fp)
   45ec4:	10800044 	addi	r2,r2,1
   45ec8:	e0bfff15 	stw	r2,-4(fp)
 */
static void string2hex(const char *src, int len, char *dest)
{
    int  i;
    char data[2];
    for(i = 0; i < len; i++)
   45ecc:	e0bffb17 	ldw	r2,-20(fp)
   45ed0:	10800044 	addi	r2,r2,1
   45ed4:	e0bffb15 	stw	r2,-20(fp)
   45ed8:	e0fffb17 	ldw	r3,-20(fp)
   45edc:	e0bffe17 	ldw	r2,-8(fp)
   45ee0:	18bfe316 	blt	r3,r2,45e70 <__reset+0xfffc4e70>
        data[1] = *src++;
        //        *dest = strtol(data, &pEnd, 16);
        *dest = ((data[0] - 0x30) << 4) + (data[1] - 0x30);
        dest++;
    }
}
   45ee4:	0001883a 	nop
   45ee8:	e037883a 	mov	sp,fp
   45eec:	df000017 	ldw	fp,0(sp)
   45ef0:	dec00104 	addi	sp,sp,4
   45ef4:	f800283a 	ret

00045ef8 <find_index>:

static int find_index(char *str, int str_len, char **array, int length)
{
   45ef8:	defff804 	addi	sp,sp,-32
   45efc:	dfc00715 	stw	ra,28(sp)
   45f00:	df000615 	stw	fp,24(sp)
   45f04:	df000604 	addi	fp,sp,24
   45f08:	e13ffc15 	stw	r4,-16(fp)
   45f0c:	e17ffd15 	stw	r5,-12(fp)
   45f10:	e1bffe15 	stw	r6,-8(fp)
   45f14:	e1ffff15 	stw	r7,-4(fp)
    int i;
    int len;
    for(i = 0; i < length; i++)
   45f18:	e03ffa15 	stw	zero,-24(fp)
   45f1c:	00001f06 	br	45f9c <find_index+0xa4>
    {
        len = strlen(array[i]);
   45f20:	e0bffa17 	ldw	r2,-24(fp)
   45f24:	1085883a 	add	r2,r2,r2
   45f28:	1085883a 	add	r2,r2,r2
   45f2c:	1007883a 	mov	r3,r2
   45f30:	e0bffe17 	ldw	r2,-8(fp)
   45f34:	10c5883a 	add	r2,r2,r3
   45f38:	10800017 	ldw	r2,0(r2)
   45f3c:	1009883a 	mov	r4,r2
   45f40:	00492d40 	call	492d4 <strlen>
   45f44:	e0bffb15 	stw	r2,-20(fp)
        if(strncmp(str, array[i], str_len) == 0 && (len == str_len))
   45f48:	e0bffa17 	ldw	r2,-24(fp)
   45f4c:	1085883a 	add	r2,r2,r2
   45f50:	1085883a 	add	r2,r2,r2
   45f54:	1007883a 	mov	r3,r2
   45f58:	e0bffe17 	ldw	r2,-8(fp)
   45f5c:	10c5883a 	add	r2,r2,r3
   45f60:	10800017 	ldw	r2,0(r2)
   45f64:	e0fffd17 	ldw	r3,-12(fp)
   45f68:	180d883a 	mov	r6,r3
   45f6c:	100b883a 	mov	r5,r2
   45f70:	e13ffc17 	ldw	r4,-16(fp)
   45f74:	004936c0 	call	4936c <strncmp>
   45f78:	1000051e 	bne	r2,zero,45f90 <find_index+0x98>
   45f7c:	e0fffb17 	ldw	r3,-20(fp)
   45f80:	e0bffd17 	ldw	r2,-12(fp)
   45f84:	1880021e 	bne	r3,r2,45f90 <find_index+0x98>
            return i;
   45f88:	e0bffa17 	ldw	r2,-24(fp)
   45f8c:	00000706 	br	45fac <find_index+0xb4>

static int find_index(char *str, int str_len, char **array, int length)
{
    int i;
    int len;
    for(i = 0; i < length; i++)
   45f90:	e0bffa17 	ldw	r2,-24(fp)
   45f94:	10800044 	addi	r2,r2,1
   45f98:	e0bffa15 	stw	r2,-24(fp)
   45f9c:	e0fffa17 	ldw	r3,-24(fp)
   45fa0:	e0bfff17 	ldw	r2,-4(fp)
   45fa4:	18bfde16 	blt	r3,r2,45f20 <__reset+0xfffc4f20>
    {
        len = strlen(array[i]);
        if(strncmp(str, array[i], str_len) == 0 && (len == str_len))
            return i;
    }
    return -1;
   45fa8:	00bfffc4 	movi	r2,-1
}
   45fac:	e037883a 	mov	sp,fp
   45fb0:	dfc00117 	ldw	ra,4(sp)
   45fb4:	df000017 	ldw	fp,0(sp)
   45fb8:	dec00204 	addi	sp,sp,8
   45fbc:	f800283a 	ret

00045fc0 <sick_protocol_process>:

void sick_protocol_process(SOCKET s, unsigned char *buf, int len)
{
   45fc0:	defff604 	addi	sp,sp,-40
   45fc4:	dfc00915 	stw	ra,36(sp)
   45fc8:	df000815 	stw	fp,32(sp)
   45fcc:	df000804 	addi	fp,sp,32
   45fd0:	2005883a 	mov	r2,r4
   45fd4:	e17ffe15 	stw	r5,-8(fp)
   45fd8:	e1bfff15 	stw	r6,-4(fp)
   45fdc:	e0bffd05 	stb	r2,-12(fp)
    int            send_len;
    int            i;
    unsigned char  enable_flag  = 0;  //  enable = 1, 上传数据， enable = 2 停止上传数据
   45fe0:	e03ff905 	stb	zero,-28(fp)
    unsigned char *recv_command = buf + 1;
   45fe4:	e0bffe17 	ldw	r2,-8(fp)
   45fe8:	10800044 	addi	r2,r2,1
   45fec:	e0bffa15 	stw	r2,-24(fp)
    int            pos          = 0;
   45ff0:	e03ffb15 	stw	zero,-20(fp)
    pos                         = find_index((char *)recv_command, len - 2, tim561_index, 572);
   45ff4:	e0bfff17 	ldw	r2,-4(fp)
   45ff8:	10bfff84 	addi	r2,r2,-2
   45ffc:	01c08f04 	movi	r7,572
   46000:	018001b4 	movhi	r6,6
   46004:	31a7a304 	addi	r6,r6,-24948
   46008:	100b883a 	mov	r5,r2
   4600c:	e13ffa17 	ldw	r4,-24(fp)
   46010:	0045ef80 	call	45ef8 <find_index>
   46014:	e0bffb15 	stw	r2,-20(fp)
    if(pos != -1)  // 命令属于tim561协议
   46018:	e0bffb17 	ldw	r2,-20(fp)
   4601c:	10bfffe0 	cmpeqi	r2,r2,-1
   46020:	1001b91e 	bne	r2,zero,46708 <sick_protocol_process+0x748>
    {
        /*
         *  "sMI 0 3 F4724744" , "sMI 2"需要回复很多命令，需要特殊处理
         */
        if(strncmp((char *)recv_command, "sMI 0 3 F4724744", strlen((char *)"sMI 0 3 F4724744")) == 0)
   46024:	01800404 	movi	r6,16
   46028:	01400174 	movhi	r5,5
   4602c:	2973af04 	addi	r5,r5,-12612
   46030:	e13ffa17 	ldw	r4,-24(fp)
   46034:	004936c0 	call	4936c <strncmp>
   46038:	1000701e 	bne	r2,zero,461fc <sick_protocol_process+0x23c>
        {
            if(SysPara.update_pos_flag == false)  //   没有上传数据时，sops软件电机点击stop measure响应下面数据
   4603c:	008001b4 	movhi	r2,6
   46040:	10a43504 	addi	r2,r2,-28460
   46044:	10800003 	ldbu	r2,0(r2)
   46048:	1080005c 	xori	r2,r2,1
   4604c:	10803fcc 	andi	r2,r2,255
   46050:	10003526 	beq	r2,zero,46128 <sick_protocol_process+0x168>
            {
                for(i = 0; i < 2; i++)
   46054:	e03ff815 	stw	zero,-32(fp)
   46058:	00002f06 	br	46118 <sick_protocol_process+0x158>
                {
                    send_len = strlen(sMI_0_3_F4724744_start[i]);
   4605c:	008001b4 	movhi	r2,6
   46060:	10b30c04 	addi	r2,r2,-13264
   46064:	e0fff817 	ldw	r3,-32(fp)
   46068:	18c7883a 	add	r3,r3,r3
   4606c:	18c7883a 	add	r3,r3,r3
   46070:	10c5883a 	add	r2,r2,r3
   46074:	10800017 	ldw	r2,0(r2)
   46078:	1009883a 	mov	r4,r2
   4607c:	00492d40 	call	492d4 <strlen>
   46080:	e0bffc15 	stw	r2,-16(fp)
                    memcpy(send_buffer + 1, sMI_0_3_F4724744_start[i], send_len);
   46084:	00c001b4 	movhi	r3,6
   46088:	18c6d644 	addi	r3,r3,7001
   4608c:	008001b4 	movhi	r2,6
   46090:	10b30c04 	addi	r2,r2,-13264
   46094:	e13ff817 	ldw	r4,-32(fp)
   46098:	2109883a 	add	r4,r4,r4
   4609c:	2109883a 	add	r4,r4,r4
   460a0:	1105883a 	add	r2,r2,r4
   460a4:	10800017 	ldw	r2,0(r2)
   460a8:	e13ffc17 	ldw	r4,-16(fp)
   460ac:	200d883a 	mov	r6,r4
   460b0:	100b883a 	mov	r5,r2
   460b4:	1809883a 	mov	r4,r3
   460b8:	0048f880 	call	48f88 <memcpy>
                    send_buffer[0]            = 0x02;
   460bc:	008001b4 	movhi	r2,6
   460c0:	1086d604 	addi	r2,r2,7000
   460c4:	00c00084 	movi	r3,2
   460c8:	10c00005 	stb	r3,0(r2)
                    send_buffer[send_len + 1] = 0x03;
   460cc:	e0bffc17 	ldw	r2,-16(fp)
   460d0:	10c00044 	addi	r3,r2,1
   460d4:	008001b4 	movhi	r2,6
   460d8:	1086d604 	addi	r2,r2,7000
   460dc:	10c5883a 	add	r2,r2,r3
   460e0:	00c000c4 	movi	r3,3
   460e4:	10c00005 	stb	r3,0(r2)
                    send(s, send_buffer, send_len + 2);
   460e8:	e0bffd03 	ldbu	r2,-12(fp)
   460ec:	e0fffc17 	ldw	r3,-16(fp)
   460f0:	18c00084 	addi	r3,r3,2
   460f4:	18ffffcc 	andi	r3,r3,65535
   460f8:	180d883a 	mov	r6,r3
   460fc:	014001b4 	movhi	r5,6
   46100:	2946d604 	addi	r5,r5,7000
   46104:	1009883a 	mov	r4,r2
   46108:	0046f500 	call	46f50 <send>
         */
        if(strncmp((char *)recv_command, "sMI 0 3 F4724744", strlen((char *)"sMI 0 3 F4724744")) == 0)
        {
            if(SysPara.update_pos_flag == false)  //   没有上传数据时，sops软件电机点击stop measure响应下面数据
            {
                for(i = 0; i < 2; i++)
   4610c:	e0bff817 	ldw	r2,-32(fp)
   46110:	10800044 	addi	r2,r2,1
   46114:	e0bff815 	stw	r2,-32(fp)
   46118:	e0bff817 	ldw	r2,-32(fp)
   4611c:	10800090 	cmplti	r2,r2,2
   46120:	103fce1e 	bne	r2,zero,4605c <__reset+0xfffc505c>
   46124:	00010406 	br	46538 <sick_protocol_process+0x578>
                    send(s, send_buffer, send_len + 2);
                }
            }
            else  // 上传数据
            {
                for(i = 0; i < 4; i++)
   46128:	e03ff815 	stw	zero,-32(fp)
   4612c:	00002f06 	br	461ec <sick_protocol_process+0x22c>
                {
                    send_len = strlen(sMI_0_3_F4724744_stop[i]);
   46130:	008001b4 	movhi	r2,6
   46134:	10ac2504 	addi	r2,r2,-20332
   46138:	e0fff817 	ldw	r3,-32(fp)
   4613c:	18c7883a 	add	r3,r3,r3
   46140:	18c7883a 	add	r3,r3,r3
   46144:	10c5883a 	add	r2,r2,r3
   46148:	10800017 	ldw	r2,0(r2)
   4614c:	1009883a 	mov	r4,r2
   46150:	00492d40 	call	492d4 <strlen>
   46154:	e0bffc15 	stw	r2,-16(fp)
                    memcpy(send_buffer + 1, sMI_0_3_F4724744_stop[i], send_len);
   46158:	00c001b4 	movhi	r3,6
   4615c:	18c6d644 	addi	r3,r3,7001
   46160:	008001b4 	movhi	r2,6
   46164:	10ac2504 	addi	r2,r2,-20332
   46168:	e13ff817 	ldw	r4,-32(fp)
   4616c:	2109883a 	add	r4,r4,r4
   46170:	2109883a 	add	r4,r4,r4
   46174:	1105883a 	add	r2,r2,r4
   46178:	10800017 	ldw	r2,0(r2)
   4617c:	e13ffc17 	ldw	r4,-16(fp)
   46180:	200d883a 	mov	r6,r4
   46184:	100b883a 	mov	r5,r2
   46188:	1809883a 	mov	r4,r3
   4618c:	0048f880 	call	48f88 <memcpy>
                    send_buffer[0]            = 0x02;
   46190:	008001b4 	movhi	r2,6
   46194:	1086d604 	addi	r2,r2,7000
   46198:	00c00084 	movi	r3,2
   4619c:	10c00005 	stb	r3,0(r2)
                    send_buffer[send_len + 1] = 0x03;
   461a0:	e0bffc17 	ldw	r2,-16(fp)
   461a4:	10c00044 	addi	r3,r2,1
   461a8:	008001b4 	movhi	r2,6
   461ac:	1086d604 	addi	r2,r2,7000
   461b0:	10c5883a 	add	r2,r2,r3
   461b4:	00c000c4 	movi	r3,3
   461b8:	10c00005 	stb	r3,0(r2)
                    send(s, send_buffer, send_len + 2);
   461bc:	e0bffd03 	ldbu	r2,-12(fp)
   461c0:	e0fffc17 	ldw	r3,-16(fp)
   461c4:	18c00084 	addi	r3,r3,2
   461c8:	18ffffcc 	andi	r3,r3,65535
   461cc:	180d883a 	mov	r6,r3
   461d0:	014001b4 	movhi	r5,6
   461d4:	2946d604 	addi	r5,r5,7000
   461d8:	1009883a 	mov	r4,r2
   461dc:	0046f500 	call	46f50 <send>
                    send(s, send_buffer, send_len + 2);
                }
            }
            else  // 上传数据
            {
                for(i = 0; i < 4; i++)
   461e0:	e0bff817 	ldw	r2,-32(fp)
   461e4:	10800044 	addi	r2,r2,1
   461e8:	e0bff815 	stw	r2,-32(fp)
   461ec:	e0bff817 	ldw	r2,-32(fp)
   461f0:	10800110 	cmplti	r2,r2,4
   461f4:	103fce1e 	bne	r2,zero,46130 <__reset+0xfffc5130>
   461f8:	0000cf06 	br	46538 <sick_protocol_process+0x578>
                    send(s, send_buffer, send_len + 2);
                }
            }
        }

        else if(strncmp((char *)recv_command, "sMI 2", strlen((char *)"sMI 2")) == 0)
   461fc:	01800144 	movi	r6,5
   46200:	01400174 	movhi	r5,5
   46204:	2973b404 	addi	r5,r5,-12592
   46208:	e13ffa17 	ldw	r4,-24(fp)
   4620c:	004936c0 	call	4936c <strncmp>
   46210:	1000621e 	bne	r2,zero,4639c <sick_protocol_process+0x3dc>
        {
            // if(SysStatus.update_pos_flag == false)
            if(sMI_3E_flag == 1)
   46214:	d0a01903 	ldbu	r2,-32668(gp)
   46218:	10803fcc 	andi	r2,r2,255
   4621c:	10800058 	cmpnei	r2,r2,1
   46220:	1000371e 	bne	r2,zero,46300 <sick_protocol_process+0x340>
            {
                for(i = 0; i < 11; i++)
   46224:	e03ff815 	stw	zero,-32(fp)
   46228:	00002f06 	br	462e8 <sick_protocol_process+0x328>
                {
                    send_len = strlen(sMI_reply[i]);
   4622c:	008001b4 	movhi	r2,6
   46230:	10ad3f04 	addi	r2,r2,-19204
   46234:	e0fff817 	ldw	r3,-32(fp)
   46238:	18c7883a 	add	r3,r3,r3
   4623c:	18c7883a 	add	r3,r3,r3
   46240:	10c5883a 	add	r2,r2,r3
   46244:	10800017 	ldw	r2,0(r2)
   46248:	1009883a 	mov	r4,r2
   4624c:	00492d40 	call	492d4 <strlen>
   46250:	e0bffc15 	stw	r2,-16(fp)
                    memcpy(send_buffer + 1, sMI_reply[i], send_len);
   46254:	00c001b4 	movhi	r3,6
   46258:	18c6d644 	addi	r3,r3,7001
   4625c:	008001b4 	movhi	r2,6
   46260:	10ad3f04 	addi	r2,r2,-19204
   46264:	e13ff817 	ldw	r4,-32(fp)
   46268:	2109883a 	add	r4,r4,r4
   4626c:	2109883a 	add	r4,r4,r4
   46270:	1105883a 	add	r2,r2,r4
   46274:	10800017 	ldw	r2,0(r2)
   46278:	e13ffc17 	ldw	r4,-16(fp)
   4627c:	200d883a 	mov	r6,r4
   46280:	100b883a 	mov	r5,r2
   46284:	1809883a 	mov	r4,r3
   46288:	0048f880 	call	48f88 <memcpy>
                    send_buffer[0]            = 0x02;
   4628c:	008001b4 	movhi	r2,6
   46290:	1086d604 	addi	r2,r2,7000
   46294:	00c00084 	movi	r3,2
   46298:	10c00005 	stb	r3,0(r2)
                    send_buffer[send_len + 1] = 0x03;
   4629c:	e0bffc17 	ldw	r2,-16(fp)
   462a0:	10c00044 	addi	r3,r2,1
   462a4:	008001b4 	movhi	r2,6
   462a8:	1086d604 	addi	r2,r2,7000
   462ac:	10c5883a 	add	r2,r2,r3
   462b0:	00c000c4 	movi	r3,3
   462b4:	10c00005 	stb	r3,0(r2)
                    send(s, send_buffer, send_len + 2);
   462b8:	e0bffd03 	ldbu	r2,-12(fp)
   462bc:	e0fffc17 	ldw	r3,-16(fp)
   462c0:	18c00084 	addi	r3,r3,2
   462c4:	18ffffcc 	andi	r3,r3,65535
   462c8:	180d883a 	mov	r6,r3
   462cc:	014001b4 	movhi	r5,6
   462d0:	2946d604 	addi	r5,r5,7000
   462d4:	1009883a 	mov	r4,r2
   462d8:	0046f500 	call	46f50 <send>
        else if(strncmp((char *)recv_command, "sMI 2", strlen((char *)"sMI 2")) == 0)
        {
            // if(SysStatus.update_pos_flag == false)
            if(sMI_3E_flag == 1)
            {
                for(i = 0; i < 11; i++)
   462dc:	e0bff817 	ldw	r2,-32(fp)
   462e0:	10800044 	addi	r2,r2,1
   462e4:	e0bff815 	stw	r2,-32(fp)
   462e8:	e0bff817 	ldw	r2,-32(fp)
   462ec:	108002d0 	cmplti	r2,r2,11
   462f0:	103fce1e 	bne	r2,zero,4622c <__reset+0xfffc522c>
                    memcpy(send_buffer + 1, sMI_reply[i], send_len);
                    send_buffer[0]            = 0x02;
                    send_buffer[send_len + 1] = 0x03;
                    send(s, send_buffer, send_len + 2);
                }
                enable_flag = 1;
   462f4:	00800044 	movi	r2,1
   462f8:	e0bff905 	stb	r2,-28(fp)
   462fc:	00008e06 	br	46538 <sick_protocol_process+0x578>
            }
            else
            {
                send_len = strlen(sMI_reply[0]);
   46300:	008001b4 	movhi	r2,6
   46304:	10ad3f04 	addi	r2,r2,-19204
   46308:	10800017 	ldw	r2,0(r2)
   4630c:	1009883a 	mov	r4,r2
   46310:	00492d40 	call	492d4 <strlen>
   46314:	e0bffc15 	stw	r2,-16(fp)
                memcpy(send_buffer + 1, sMI_reply[0], send_len);
   46318:	00c001b4 	movhi	r3,6
   4631c:	18c6d644 	addi	r3,r3,7001
   46320:	008001b4 	movhi	r2,6
   46324:	10ad3f04 	addi	r2,r2,-19204
   46328:	10800017 	ldw	r2,0(r2)
   4632c:	e13ffc17 	ldw	r4,-16(fp)
   46330:	200d883a 	mov	r6,r4
   46334:	100b883a 	mov	r5,r2
   46338:	1809883a 	mov	r4,r3
   4633c:	0048f880 	call	48f88 <memcpy>
                send_buffer[0]            = 0x02;
   46340:	008001b4 	movhi	r2,6
   46344:	1086d604 	addi	r2,r2,7000
   46348:	00c00084 	movi	r3,2
   4634c:	10c00005 	stb	r3,0(r2)
                send_buffer[send_len + 1] = 0x03;
   46350:	e0bffc17 	ldw	r2,-16(fp)
   46354:	10c00044 	addi	r3,r2,1
   46358:	008001b4 	movhi	r2,6
   4635c:	1086d604 	addi	r2,r2,7000
   46360:	10c5883a 	add	r2,r2,r3
   46364:	00c000c4 	movi	r3,3
   46368:	10c00005 	stb	r3,0(r2)
                send(s, send_buffer, send_len + 2);
   4636c:	e0bffd03 	ldbu	r2,-12(fp)
   46370:	e0fffc17 	ldw	r3,-16(fp)
   46374:	18c00084 	addi	r3,r3,2
   46378:	18ffffcc 	andi	r3,r3,65535
   4637c:	180d883a 	mov	r6,r3
   46380:	014001b4 	movhi	r5,6
   46384:	2946d604 	addi	r5,r5,7000
   46388:	1009883a 	mov	r4,r2
   4638c:	0046f500 	call	46f50 <send>
                enable_flag = 2;
   46390:	00800084 	movi	r2,2
   46394:	e0bff905 	stb	r2,-28(fp)
   46398:	00006706 	br	46538 <sick_protocol_process+0x578>
        }
        /*
         * 正常的tim561协议中，数据分成两种：ascii格式和hex格式
         * 只需要从对应的表中找到需要回复的字符串响应上去就可以了
         */
        else if(tim561_respons[pos][0] == 0x30)  // hex字符串
   4639c:	008001b4 	movhi	r2,6
   463a0:	10a9df04 	addi	r2,r2,-22660
   463a4:	e0fffb17 	ldw	r3,-20(fp)
   463a8:	18c7883a 	add	r3,r3,r3
   463ac:	18c7883a 	add	r3,r3,r3
   463b0:	10c5883a 	add	r2,r2,r3
   463b4:	10800017 	ldw	r2,0(r2)
   463b8:	10800003 	ldbu	r2,0(r2)
   463bc:	10803fcc 	andi	r2,r2,255
   463c0:	1080201c 	xori	r2,r2,128
   463c4:	10bfe004 	addi	r2,r2,-128
   463c8:	10800c18 	cmpnei	r2,r2,48
   463cc:	1000211e 	bne	r2,zero,46454 <sick_protocol_process+0x494>
        {
            send_len = strlen(tim561_respons[pos]);
   463d0:	008001b4 	movhi	r2,6
   463d4:	10a9df04 	addi	r2,r2,-22660
   463d8:	e0fffb17 	ldw	r3,-20(fp)
   463dc:	18c7883a 	add	r3,r3,r3
   463e0:	18c7883a 	add	r3,r3,r3
   463e4:	10c5883a 	add	r2,r2,r3
   463e8:	10800017 	ldw	r2,0(r2)
   463ec:	1009883a 	mov	r4,r2
   463f0:	00492d40 	call	492d4 <strlen>
   463f4:	e0bffc15 	stw	r2,-16(fp)
            string2hex(tim561_respons[pos], send_len, (char *)send_buffer);
   463f8:	008001b4 	movhi	r2,6
   463fc:	10a9df04 	addi	r2,r2,-22660
   46400:	e0fffb17 	ldw	r3,-20(fp)
   46404:	18c7883a 	add	r3,r3,r3
   46408:	18c7883a 	add	r3,r3,r3
   4640c:	10c5883a 	add	r2,r2,r3
   46410:	10800017 	ldw	r2,0(r2)
   46414:	018001b4 	movhi	r6,6
   46418:	3186d604 	addi	r6,r6,7000
   4641c:	e17ffc17 	ldw	r5,-16(fp)
   46420:	1009883a 	mov	r4,r2
   46424:	0045e500 	call	45e50 <string2hex>
            send(s, send_buffer, send_len / 2);
   46428:	e13ffd03 	ldbu	r4,-12(fp)
   4642c:	e0bffc17 	ldw	r2,-16(fp)
   46430:	1006d7fa 	srli	r3,r2,31
   46434:	1885883a 	add	r2,r3,r2
   46438:	1005d07a 	srai	r2,r2,1
   4643c:	10bfffcc 	andi	r2,r2,65535
   46440:	100d883a 	mov	r6,r2
   46444:	014001b4 	movhi	r5,6
   46448:	2946d604 	addi	r5,r5,7000
   4644c:	0046f500 	call	46f50 <send>
   46450:	00003906 	br	46538 <sick_protocol_process+0x578>
        }
        else if(tim561_respons[pos][0] == 0x73)  // 's' 开头， ascii字符串
   46454:	008001b4 	movhi	r2,6
   46458:	10a9df04 	addi	r2,r2,-22660
   4645c:	e0fffb17 	ldw	r3,-20(fp)
   46460:	18c7883a 	add	r3,r3,r3
   46464:	18c7883a 	add	r3,r3,r3
   46468:	10c5883a 	add	r2,r2,r3
   4646c:	10800017 	ldw	r2,0(r2)
   46470:	10800003 	ldbu	r2,0(r2)
   46474:	10803fcc 	andi	r2,r2,255
   46478:	1080201c 	xori	r2,r2,128
   4647c:	10bfe004 	addi	r2,r2,-128
   46480:	10801cd8 	cmpnei	r2,r2,115
   46484:	10002c1e 	bne	r2,zero,46538 <sick_protocol_process+0x578>
        {
            send_len = strlen(tim561_respons[pos]);
   46488:	008001b4 	movhi	r2,6
   4648c:	10a9df04 	addi	r2,r2,-22660
   46490:	e0fffb17 	ldw	r3,-20(fp)
   46494:	18c7883a 	add	r3,r3,r3
   46498:	18c7883a 	add	r3,r3,r3
   4649c:	10c5883a 	add	r2,r2,r3
   464a0:	10800017 	ldw	r2,0(r2)
   464a4:	1009883a 	mov	r4,r2
   464a8:	00492d40 	call	492d4 <strlen>
   464ac:	e0bffc15 	stw	r2,-16(fp)
            memcpy(send_buffer + 1, tim561_respons[pos], send_len);
   464b0:	00c001b4 	movhi	r3,6
   464b4:	18c6d644 	addi	r3,r3,7001
   464b8:	008001b4 	movhi	r2,6
   464bc:	10a9df04 	addi	r2,r2,-22660
   464c0:	e13ffb17 	ldw	r4,-20(fp)
   464c4:	2109883a 	add	r4,r4,r4
   464c8:	2109883a 	add	r4,r4,r4
   464cc:	1105883a 	add	r2,r2,r4
   464d0:	10800017 	ldw	r2,0(r2)
   464d4:	e13ffc17 	ldw	r4,-16(fp)
   464d8:	200d883a 	mov	r6,r4
   464dc:	100b883a 	mov	r5,r2
   464e0:	1809883a 	mov	r4,r3
   464e4:	0048f880 	call	48f88 <memcpy>
            send_buffer[0]            = 0x02;
   464e8:	008001b4 	movhi	r2,6
   464ec:	1086d604 	addi	r2,r2,7000
   464f0:	00c00084 	movi	r3,2
   464f4:	10c00005 	stb	r3,0(r2)
            send_buffer[send_len + 1] = 0x03;
   464f8:	e0bffc17 	ldw	r2,-16(fp)
   464fc:	10c00044 	addi	r3,r2,1
   46500:	008001b4 	movhi	r2,6
   46504:	1086d604 	addi	r2,r2,7000
   46508:	10c5883a 	add	r2,r2,r3
   4650c:	00c000c4 	movi	r3,3
   46510:	10c00005 	stb	r3,0(r2)
            send(s, send_buffer, send_len + 2);
   46514:	e0bffd03 	ldbu	r2,-12(fp)
   46518:	e0fffc17 	ldw	r3,-16(fp)
   4651c:	18c00084 	addi	r3,r3,2
   46520:	18ffffcc 	andi	r3,r3,65535
   46524:	180d883a 	mov	r6,r3
   46528:	014001b4 	movhi	r5,6
   4652c:	2946d604 	addi	r5,r5,7000
   46530:	1009883a 	mov	r4,r2
   46534:	0046f500 	call	46f50 <send>
        }

        if(strncmp((char *)recv_command, "sMI 3E", strlen((char *)"sMI 3E")) == 0)
   46538:	01800184 	movi	r6,6
   4653c:	01400174 	movhi	r5,5
   46540:	2973b604 	addi	r5,r5,-12584
   46544:	e13ffa17 	ldw	r4,-24(fp)
   46548:	004936c0 	call	4936c <strncmp>
   4654c:	1000031e 	bne	r2,zero,4655c <sick_protocol_process+0x59c>
        {
            sMI_3E_flag = 1;
   46550:	00800044 	movi	r2,1
   46554:	d0a01905 	stb	r2,-32668(gp)
   46558:	00000706 	br	46578 <sick_protocol_process+0x5b8>
        }
        else if(strncmp((char *)recv_command, "sMI 3F", strlen((char *)"sMI 3F")) == 0)
   4655c:	01800184 	movi	r6,6
   46560:	01400174 	movhi	r5,5
   46564:	2973b804 	addi	r5,r5,-12576
   46568:	e13ffa17 	ldw	r4,-24(fp)
   4656c:	004936c0 	call	4936c <strncmp>
   46570:	1000011e 	bne	r2,zero,46578 <sick_protocol_process+0x5b8>
        {
            sMI_3E_flag = 0;
   46574:	d0201905 	stb	zero,-32668(gp)
        }

        if(strncmp((char *)recv_command, "sRI E6", strlen((char *)"sRI E6")) == 0)  // 长字符串，分开处理
   46578:	01800184 	movi	r6,6
   4657c:	01400174 	movhi	r5,5
   46580:	2973ba04 	addi	r5,r5,-12568
   46584:	e13ffa17 	ldw	r4,-24(fp)
   46588:	004936c0 	call	4936c <strncmp>
   4658c:	1000291e 	bne	r2,zero,46634 <sick_protocol_process+0x674>
        {
            for(i = 0; i < 5; i++)
   46590:	e03ff815 	stw	zero,-32(fp)
   46594:	00002306 	br	46624 <sick_protocol_process+0x664>
            {
                send_len = strlen(sRI_E6_reply[i]);
   46598:	008001b4 	movhi	r2,6
   4659c:	10ac2904 	addi	r2,r2,-20316
   465a0:	e0fff817 	ldw	r3,-32(fp)
   465a4:	18c7883a 	add	r3,r3,r3
   465a8:	18c7883a 	add	r3,r3,r3
   465ac:	10c5883a 	add	r2,r2,r3
   465b0:	10800017 	ldw	r2,0(r2)
   465b4:	1009883a 	mov	r4,r2
   465b8:	00492d40 	call	492d4 <strlen>
   465bc:	e0bffc15 	stw	r2,-16(fp)
                string2hex(sRI_E6_reply[i], send_len, (char *)send_buffer);
   465c0:	008001b4 	movhi	r2,6
   465c4:	10ac2904 	addi	r2,r2,-20316
   465c8:	e0fff817 	ldw	r3,-32(fp)
   465cc:	18c7883a 	add	r3,r3,r3
   465d0:	18c7883a 	add	r3,r3,r3
   465d4:	10c5883a 	add	r2,r2,r3
   465d8:	10800017 	ldw	r2,0(r2)
   465dc:	018001b4 	movhi	r6,6
   465e0:	3186d604 	addi	r6,r6,7000
   465e4:	e17ffc17 	ldw	r5,-16(fp)
   465e8:	1009883a 	mov	r4,r2
   465ec:	0045e500 	call	45e50 <string2hex>
                send(s, send_buffer, send_len / 2);
   465f0:	e13ffd03 	ldbu	r4,-12(fp)
   465f4:	e0bffc17 	ldw	r2,-16(fp)
   465f8:	1006d7fa 	srli	r3,r2,31
   465fc:	1885883a 	add	r2,r3,r2
   46600:	1005d07a 	srai	r2,r2,1
   46604:	10bfffcc 	andi	r2,r2,65535
   46608:	100d883a 	mov	r6,r2
   4660c:	014001b4 	movhi	r5,6
   46610:	2946d604 	addi	r5,r5,7000
   46614:	0046f500 	call	46f50 <send>
            sMI_3E_flag = 0;
        }

        if(strncmp((char *)recv_command, "sRI E6", strlen((char *)"sRI E6")) == 0)  // 长字符串，分开处理
        {
            for(i = 0; i < 5; i++)
   46618:	e0bff817 	ldw	r2,-32(fp)
   4661c:	10800044 	addi	r2,r2,1
   46620:	e0bff815 	stw	r2,-32(fp)
   46624:	e0bff817 	ldw	r2,-32(fp)
   46628:	10800150 	cmplti	r2,r2,5
   4662c:	103fda1e 	bne	r2,zero,46598 <__reset+0xfffc5598>
   46630:	00003506 	br	46708 <sick_protocol_process+0x748>
                send_len = strlen(sRI_E6_reply[i]);
                string2hex(sRI_E6_reply[i], send_len, (char *)send_buffer);
                send(s, send_buffer, send_len / 2);
            }
        }
        else if(strncmp((char *)recv_command, "sRI 15B", strlen((char *)"sRI 15B")) == 0)
   46634:	018001c4 	movi	r6,7
   46638:	01400174 	movhi	r5,5
   4663c:	2973bc04 	addi	r5,r5,-12560
   46640:	e13ffa17 	ldw	r4,-24(fp)
   46644:	004936c0 	call	4936c <strncmp>
   46648:	1000151e 	bne	r2,zero,466a0 <sick_protocol_process+0x6e0>
        {
            send_len = strlen(sRI_15B_reply);
   4664c:	010001b4 	movhi	r4,6
   46650:	212c2e04 	addi	r4,r4,-20296
   46654:	00492d40 	call	492d4 <strlen>
   46658:	e0bffc15 	stw	r2,-16(fp)
            string2hex(sRI_15B_reply, send_len, (char *)send_buffer);
   4665c:	018001b4 	movhi	r6,6
   46660:	3186d604 	addi	r6,r6,7000
   46664:	e17ffc17 	ldw	r5,-16(fp)
   46668:	010001b4 	movhi	r4,6
   4666c:	212c2e04 	addi	r4,r4,-20296
   46670:	0045e500 	call	45e50 <string2hex>
            send(s, send_buffer, send_len / 2);
   46674:	e13ffd03 	ldbu	r4,-12(fp)
   46678:	e0bffc17 	ldw	r2,-16(fp)
   4667c:	1006d7fa 	srli	r3,r2,31
   46680:	1885883a 	add	r2,r3,r2
   46684:	1005d07a 	srai	r2,r2,1
   46688:	10bfffcc 	andi	r2,r2,65535
   4668c:	100d883a 	mov	r6,r2
   46690:	014001b4 	movhi	r5,6
   46694:	2946d604 	addi	r5,r5,7000
   46698:	0046f500 	call	46f50 <send>
   4669c:	00001a06 	br	46708 <sick_protocol_process+0x748>
        }
        else if(strncmp((char *)recv_command, "sRI 1DC", strlen((char *)"sRI 1DC")) == 0)
   466a0:	018001c4 	movi	r6,7
   466a4:	01400174 	movhi	r5,5
   466a8:	2973be04 	addi	r5,r5,-12552
   466ac:	e13ffa17 	ldw	r4,-24(fp)
   466b0:	004936c0 	call	4936c <strncmp>
   466b4:	1000141e 	bne	r2,zero,46708 <sick_protocol_process+0x748>
        {
            send_len = strlen(sRI_1DC_reply);
   466b8:	010001b4 	movhi	r4,6
   466bc:	212d1204 	addi	r4,r4,-19384
   466c0:	00492d40 	call	492d4 <strlen>
   466c4:	e0bffc15 	stw	r2,-16(fp)
            string2hex(sRI_1DC_reply, send_len, (char *)send_buffer);
   466c8:	018001b4 	movhi	r6,6
   466cc:	3186d604 	addi	r6,r6,7000
   466d0:	e17ffc17 	ldw	r5,-16(fp)
   466d4:	010001b4 	movhi	r4,6
   466d8:	212d1204 	addi	r4,r4,-19384
   466dc:	0045e500 	call	45e50 <string2hex>
            send(s, send_buffer, send_len / 2);
   466e0:	e13ffd03 	ldbu	r4,-12(fp)
   466e4:	e0bffc17 	ldw	r2,-16(fp)
   466e8:	1006d7fa 	srli	r3,r2,31
   466ec:	1885883a 	add	r2,r3,r2
   466f0:	1005d07a 	srai	r2,r2,1
   466f4:	10bfffcc 	andi	r2,r2,65535
   466f8:	100d883a 	mov	r6,r2
   466fc:	014001b4 	movhi	r5,6
   46700:	2946d604 	addi	r5,r5,7000
   46704:	0046f500 	call	46f50 <send>
        }
    }

    if(enable_flag == 1)  // 上传数据
   46708:	e0bff903 	ldbu	r2,-28(fp)
   4670c:	10800058 	cmpnei	r2,r2,1
   46710:	10000b1e 	bne	r2,zero,46740 <sick_protocol_process+0x780>
    {
        enable_flag = 0;
   46714:	e03ff905 	stb	zero,-28(fp)
        set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, ENABLE);
   46718:	01844474 	movhi	r6,4369
   4671c:	31844444 	addi	r6,r6,4369
   46720:	016c0014 	movui	r5,45056
   46724:	d1201804 	addi	r4,gp,-32672
   46728:	0042ed00 	call	42ed0 <set_laser_paramter>
        SysPara.update_pos_flag = true;
   4672c:	008001b4 	movhi	r2,6
   46730:	10a43504 	addi	r2,r2,-28460
   46734:	00c00044 	movi	r3,1
   46738:	10c00005 	stb	r3,0(r2)
    {
        enable_flag = 0;
        set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, DISABLE);
        SysPara.update_pos_flag = false;
    }
}
   4673c:	00000c06 	br	46770 <sick_protocol_process+0x7b0>
    {
        enable_flag = 0;
        set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, ENABLE);
        SysPara.update_pos_flag = true;
    }
    else if(enable_flag == 2)
   46740:	e0bff903 	ldbu	r2,-28(fp)
   46744:	10800098 	cmpnei	r2,r2,2
   46748:	1000091e 	bne	r2,zero,46770 <sick_protocol_process+0x7b0>
    {
        enable_flag = 0;
   4674c:	e03ff905 	stb	zero,-28(fp)
        set_laser_paramter(&Nios2FPGA_pck, UPLOAD_EN, DISABLE);
   46750:	018888b4 	movhi	r6,8738
   46754:	31888884 	addi	r6,r6,8738
   46758:	016c0014 	movui	r5,45056
   4675c:	d1201804 	addi	r4,gp,-32672
   46760:	0042ed00 	call	42ed0 <set_laser_paramter>
        SysPara.update_pos_flag = false;
   46764:	008001b4 	movhi	r2,6
   46768:	10a43504 	addi	r2,r2,-28460
   4676c:	10000005 	stb	zero,0(r2)
    }
}
   46770:	0001883a 	nop
   46774:	e037883a 	mov	sp,fp
   46778:	dfc00117 	ldw	ra,4(sp)
   4677c:	df000017 	ldw	fp,0(sp)
   46780:	dec00204 	addi	sp,sp,8
   46784:	f800283a 	ret

00046788 <sick_pos_packet>:

void sick_pos_packet(void)
{
   46788:	defffc04 	addi	sp,sp,-16
   4678c:	dfc00315 	stw	ra,12(sp)
   46790:	df000215 	stw	fp,8(sp)
   46794:	df000204 	addi	fp,sp,8
    int offset = 0;
   46798:	e03ffe15 	stw	zero,-8(fp)
    int len    = 0;
   4679c:	e03fff15 	stw	zero,-4(fp)
    memset(send_buffer, 0, 8448);
   467a0:	01884004 	movi	r6,8448
   467a4:	000b883a 	mov	r5,zero
   467a8:	010001b4 	movhi	r4,6
   467ac:	2106d604 	addi	r4,r4,7000
   467b0:	00490d00 	call	490d0 <memset>
    send_buffer[0] = 0x02;
   467b4:	008001b4 	movhi	r2,6
   467b8:	1086d604 	addi	r2,r2,7000
   467bc:	00c00084 	movi	r3,2
   467c0:	10c00005 	stb	r3,0(r2)

    len = strlen(frame_start);  // 108
   467c4:	010001b4 	movhi	r4,6
   467c8:	21264804 	addi	r4,r4,-26336
   467cc:	00492d40 	call	492d4 <strlen>
   467d0:	e0bfff15 	stw	r2,-4(fp)
    memcpy(send_buffer + 1, frame_start, len);
   467d4:	008001b4 	movhi	r2,6
   467d8:	1086d644 	addi	r2,r2,7001
   467dc:	e0ffff17 	ldw	r3,-4(fp)
   467e0:	180d883a 	mov	r6,r3
   467e4:	014001b4 	movhi	r5,6
   467e8:	29664804 	addi	r5,r5,-26336
   467ec:	1009883a 	mov	r4,r2
   467f0:	0048f880 	call	48f88 <memcpy>
    offset = offset + len + 1;
   467f4:	e0fffe17 	ldw	r3,-8(fp)
   467f8:	e0bfff17 	ldw	r2,-4(fp)
   467fc:	1885883a 	add	r2,r3,r2
   46800:	10800044 	addi	r2,r2,1
   46804:	e0bffe15 	stw	r2,-8(fp)

    memcpy(send_buffer + offset, CycleData.distance_data,
   46808:	e0fffe17 	ldw	r3,-8(fp)
   4680c:	008001b4 	movhi	r2,6
   46810:	1086d604 	addi	r2,r2,7000
   46814:	1887883a 	add	r3,r3,r2
   46818:	008001b4 	movhi	r2,6
   4681c:	10bee704 	addi	r2,r2,-1124
   46820:	10800117 	ldw	r2,4(r2)
   46824:	100d883a 	mov	r6,r2
   46828:	014001b4 	movhi	r5,6
   4682c:	297eea04 	addi	r5,r5,-1112
   46830:	1809883a 	mov	r4,r3
   46834:	0048f880 	call	48f88 <memcpy>
           CycleData.distance_len);  // 4055
    offset = offset + CycleData.distance_len;
   46838:	008001b4 	movhi	r2,6
   4683c:	10bee704 	addi	r2,r2,-1124
   46840:	10c00117 	ldw	r3,4(r2)
   46844:	e0bffe17 	ldw	r2,-8(fp)
   46848:	1885883a 	add	r2,r3,r2
   4684c:	e0bffe15 	stw	r2,-8(fp)

    len = strlen(RSSI_Field_start);                       // 41
   46850:	010001b4 	movhi	r4,6
   46854:	21266404 	addi	r4,r4,-26224
   46858:	00492d40 	call	492d4 <strlen>
   4685c:	e0bfff15 	stw	r2,-4(fp)
    memcpy(send_buffer + offset, RSSI_Field_start, len);  // frame_end放到后面
   46860:	e0fffe17 	ldw	r3,-8(fp)
   46864:	008001b4 	movhi	r2,6
   46868:	1086d604 	addi	r2,r2,7000
   4686c:	1885883a 	add	r2,r3,r2
   46870:	e0ffff17 	ldw	r3,-4(fp)
   46874:	180d883a 	mov	r6,r3
   46878:	014001b4 	movhi	r5,6
   4687c:	29666404 	addi	r5,r5,-26224
   46880:	1009883a 	mov	r4,r2
   46884:	0048f880 	call	48f88 <memcpy>
    offset = offset + len;
   46888:	e0fffe17 	ldw	r3,-8(fp)
   4688c:	e0bfff17 	ldw	r2,-4(fp)
   46890:	1885883a 	add	r2,r3,r2
   46894:	e0bffe15 	stw	r2,-8(fp)

    memcpy(send_buffer + offset, CycleData.gray_data,
   46898:	e0fffe17 	ldw	r3,-8(fp)
   4689c:	008001b4 	movhi	r2,6
   468a0:	1086d604 	addi	r2,r2,7000
   468a4:	1887883a 	add	r3,r3,r2
   468a8:	008001b4 	movhi	r2,6
   468ac:	10bee704 	addi	r2,r2,-1124
   468b0:	10800217 	ldw	r2,8(r2)
   468b4:	100d883a 	mov	r6,r2
   468b8:	014001b4 	movhi	r5,6
   468bc:	2942dfc4 	addi	r5,r5,2943
   468c0:	1809883a 	mov	r4,r3
   468c4:	0048f880 	call	48f88 <memcpy>
           CycleData.gray_len);  // 4055
    offset = offset + CycleData.gray_len;
   468c8:	008001b4 	movhi	r2,6
   468cc:	10bee704 	addi	r2,r2,-1124
   468d0:	10c00217 	ldw	r3,8(r2)
   468d4:	e0bffe17 	ldw	r2,-8(fp)
   468d8:	1885883a 	add	r2,r3,r2
   468dc:	e0bffe15 	stw	r2,-8(fp)

    len = strlen(RSSI_Field_end);                       // 12
   468e0:	010001b4 	movhi	r4,6
   468e4:	21266f04 	addi	r4,r4,-26180
   468e8:	00492d40 	call	492d4 <strlen>
   468ec:	e0bfff15 	stw	r2,-4(fp)
    memcpy(send_buffer + offset, RSSI_Field_end, len);  // frame_end放到后面
   468f0:	e0fffe17 	ldw	r3,-8(fp)
   468f4:	008001b4 	movhi	r2,6
   468f8:	1086d604 	addi	r2,r2,7000
   468fc:	1885883a 	add	r2,r3,r2
   46900:	e0ffff17 	ldw	r3,-4(fp)
   46904:	180d883a 	mov	r6,r3
   46908:	014001b4 	movhi	r5,6
   4690c:	29666f04 	addi	r5,r5,-26180
   46910:	1009883a 	mov	r4,r2
   46914:	0048f880 	call	48f88 <memcpy>
    offset = offset + len;
   46918:	e0fffe17 	ldw	r3,-8(fp)
   4691c:	e0bfff17 	ldw	r2,-4(fp)
   46920:	1885883a 	add	r2,r3,r2
   46924:	e0bffe15 	stw	r2,-8(fp)

    send_buffer[offset] = 0x03;
   46928:	008001b4 	movhi	r2,6
   4692c:	1086d604 	addi	r2,r2,7000
   46930:	e0fffe17 	ldw	r3,-8(fp)
   46934:	10c5883a 	add	r2,r2,r3
   46938:	00c000c4 	movi	r3,3
   4693c:	10c00005 	stb	r3,0(r2)
}
   46940:	0001883a 	nop
   46944:	e037883a 	mov	sp,fp
   46948:	dfc00117 	ldw	ra,4(sp)
   4694c:	df000017 	ldw	fp,0(sp)
   46950:	dec00204 	addi	sp,sp,8
   46954:	f800283a 	ret

00046958 <socket>:
/**
  @brief   This Socket function initialize the channel in perticular mode, and set the port and wait for W5200 done it.
  @return  1 for sucess else 0.
  */
uint8 socket(SOCKET s, uint8 protocol, uint16 port, uint8 flag)
{
   46958:	defff904 	addi	sp,sp,-28
   4695c:	dfc00615 	stw	ra,24(sp)
   46960:	df000515 	stw	fp,20(sp)
   46964:	df000504 	addi	fp,sp,20
   46968:	2011883a 	mov	r8,r4
   4696c:	2809883a 	mov	r4,r5
   46970:	3007883a 	mov	r3,r6
   46974:	3805883a 	mov	r2,r7
   46978:	e23ffc05 	stb	r8,-16(fp)
   4697c:	e13ffd05 	stb	r4,-12(fp)
   46980:	e0fffe0d 	sth	r3,-8(fp)
   46984:	e0bfff05 	stb	r2,-4(fp)
    uint8 ret;
    if (
            ((protocol&0x0F) == Sn_MR_TCP)    ||
   46988:	e0bffd03 	ldbu	r2,-12(fp)
   4698c:	108003cc 	andi	r2,r2,15
  @return  1 for sucess else 0.
  */
uint8 socket(SOCKET s, uint8 protocol, uint16 port, uint8 flag)
{
    uint8 ret;
    if (
   46990:	10800060 	cmpeqi	r2,r2,1
   46994:	1000101e 	bne	r2,zero,469d8 <socket+0x80>
            ((protocol&0x0F) == Sn_MR_TCP)    ||
            ((protocol&0x0F) == Sn_MR_UDP)    ||
   46998:	e0bffd03 	ldbu	r2,-12(fp)
   4699c:	108003cc 	andi	r2,r2,15
  */
uint8 socket(SOCKET s, uint8 protocol, uint16 port, uint8 flag)
{
    uint8 ret;
    if (
            ((protocol&0x0F) == Sn_MR_TCP)    ||
   469a0:	108000a0 	cmpeqi	r2,r2,2
   469a4:	10000c1e 	bne	r2,zero,469d8 <socket+0x80>
            ((protocol&0x0F) == Sn_MR_UDP)    ||
            ((protocol&0x0F) == Sn_MR_IPRAW)  ||
   469a8:	e0bffd03 	ldbu	r2,-12(fp)
   469ac:	108003cc 	andi	r2,r2,15
uint8 socket(SOCKET s, uint8 protocol, uint16 port, uint8 flag)
{
    uint8 ret;
    if (
            ((protocol&0x0F) == Sn_MR_TCP)    ||
            ((protocol&0x0F) == Sn_MR_UDP)    ||
   469b0:	108000e0 	cmpeqi	r2,r2,3
   469b4:	1000081e 	bne	r2,zero,469d8 <socket+0x80>
            ((protocol&0x0F) == Sn_MR_IPRAW)  ||
            ((protocol&0x0F) == Sn_MR_MACRAW) ||
   469b8:	e0bffd03 	ldbu	r2,-12(fp)
   469bc:	108003cc 	andi	r2,r2,15
{
    uint8 ret;
    if (
            ((protocol&0x0F) == Sn_MR_TCP)    ||
            ((protocol&0x0F) == Sn_MR_UDP)    ||
            ((protocol&0x0F) == Sn_MR_IPRAW)  ||
   469c0:	10800120 	cmpeqi	r2,r2,4
   469c4:	1000041e 	bne	r2,zero,469d8 <socket+0x80>
            ((protocol&0x0F) == Sn_MR_MACRAW) ||
            ((protocol&0x0F) == Sn_MR_PPPOE)
   469c8:	e0bffd03 	ldbu	r2,-12(fp)
   469cc:	108003cc 	andi	r2,r2,15
    uint8 ret;
    if (
            ((protocol&0x0F) == Sn_MR_TCP)    ||
            ((protocol&0x0F) == Sn_MR_UDP)    ||
            ((protocol&0x0F) == Sn_MR_IPRAW)  ||
            ((protocol&0x0F) == Sn_MR_MACRAW) ||
   469d0:	10800158 	cmpnei	r2,r2,5
   469d4:	10004b1e 	bne	r2,zero,46b04 <socket+0x1ac>
            ((protocol&0x0F) == Sn_MR_PPPOE)
       )
    {
        close_socket(s);
   469d8:	e0bffc03 	ldbu	r2,-16(fp)
   469dc:	1009883a 	mov	r4,r2
   469e0:	0046b200 	call	46b20 <close_socket>
        IINCHIP_WRITE(Sn_MR(s) ,protocol | flag);
   469e4:	e0bffc03 	ldbu	r2,-16(fp)
   469e8:	1004917a 	slli	r2,r2,5
   469ec:	10800204 	addi	r2,r2,8
   469f0:	1009883a 	mov	r4,r2
   469f4:	e0fffd03 	ldbu	r3,-12(fp)
   469f8:	e0bfff03 	ldbu	r2,-4(fp)
   469fc:	1884b03a 	or	r2,r3,r2
   46a00:	10803fcc 	andi	r2,r2,255
   46a04:	100b883a 	mov	r5,r2
   46a08:	0047d380 	call	47d38 <IINCHIP_WRITE>
        if (port != 0) {
   46a0c:	e0bffe0b 	ldhu	r2,-8(fp)
   46a10:	10001426 	beq	r2,zero,46a64 <socket+0x10c>
            IINCHIP_WRITE( Sn_PORT0(s) ,(uint8)((port & 0xff00) >> 8));
   46a14:	e0bffc03 	ldbu	r2,-16(fp)
   46a18:	1004917a 	slli	r2,r2,5
   46a1c:	10810204 	addi	r2,r2,1032
   46a20:	1007883a 	mov	r3,r2
   46a24:	e0bffe0b 	ldhu	r2,-8(fp)
   46a28:	1004d23a 	srli	r2,r2,8
   46a2c:	10803fcc 	andi	r2,r2,255
   46a30:	100b883a 	mov	r5,r2
   46a34:	1809883a 	mov	r4,r3
   46a38:	0047d380 	call	47d38 <IINCHIP_WRITE>
            IINCHIP_WRITE( Sn_PORT1(s) ,(uint8)(port & 0x00ff));
   46a3c:	e0bffc03 	ldbu	r2,-16(fp)
   46a40:	1004917a 	slli	r2,r2,5
   46a44:	10814204 	addi	r2,r2,1288
   46a48:	1007883a 	mov	r3,r2
   46a4c:	e0bffe0b 	ldhu	r2,-8(fp)
   46a50:	10803fcc 	andi	r2,r2,255
   46a54:	100b883a 	mov	r5,r2
   46a58:	1809883a 	mov	r4,r3
   46a5c:	0047d380 	call	47d38 <IINCHIP_WRITE>
   46a60:	00001706 	br	46ac0 <socket+0x168>
        } else {
            local_port++; // if don't set the source port, set local_port number.
   46a64:	d0a0198b 	ldhu	r2,-32666(gp)
   46a68:	10800044 	addi	r2,r2,1
   46a6c:	d0a0198d 	sth	r2,-32666(gp)
            IINCHIP_WRITE(Sn_PORT0(s) ,(uint8)((local_port & 0xff00) >> 8));
   46a70:	e0bffc03 	ldbu	r2,-16(fp)
   46a74:	1004917a 	slli	r2,r2,5
   46a78:	10810204 	addi	r2,r2,1032
   46a7c:	1007883a 	mov	r3,r2
   46a80:	d0a0198b 	ldhu	r2,-32666(gp)
   46a84:	10bfffcc 	andi	r2,r2,65535
   46a88:	1004d23a 	srli	r2,r2,8
   46a8c:	10803fcc 	andi	r2,r2,255
   46a90:	100b883a 	mov	r5,r2
   46a94:	1809883a 	mov	r4,r3
   46a98:	0047d380 	call	47d38 <IINCHIP_WRITE>
            IINCHIP_WRITE(Sn_PORT1(s) ,(uint8)(local_port & 0x00ff));
   46a9c:	e0bffc03 	ldbu	r2,-16(fp)
   46aa0:	1004917a 	slli	r2,r2,5
   46aa4:	10814204 	addi	r2,r2,1288
   46aa8:	1007883a 	mov	r3,r2
   46aac:	d0a0198b 	ldhu	r2,-32666(gp)
   46ab0:	10803fcc 	andi	r2,r2,255
   46ab4:	100b883a 	mov	r5,r2
   46ab8:	1809883a 	mov	r4,r3
   46abc:	0047d380 	call	47d38 <IINCHIP_WRITE>
        }
        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_OPEN); // run sockinit Sn_CR
   46ac0:	e0bffc03 	ldbu	r2,-16(fp)
   46ac4:	1004917a 	slli	r2,r2,5
   46ac8:	10804204 	addi	r2,r2,264
   46acc:	01400044 	movi	r5,1
   46ad0:	1009883a 	mov	r4,r2
   46ad4:	0047d380 	call	47d38 <IINCHIP_WRITE>

        /* wait to process the command... */
        while( IINCHIP_READ(Sn_CR(s)) )
   46ad8:	0001883a 	nop
   46adc:	e0bffc03 	ldbu	r2,-16(fp)
   46ae0:	1004917a 	slli	r2,r2,5
   46ae4:	10804204 	addi	r2,r2,264
   46ae8:	1009883a 	mov	r4,r2
   46aec:	0047dc40 	call	47dc4 <IINCHIP_READ>
   46af0:	10803fcc 	andi	r2,r2,255
   46af4:	103ff91e 	bne	r2,zero,46adc <__reset+0xfffc5adc>
            ;
        /* ------- */
        ret = 1;
   46af8:	00800044 	movi	r2,1
   46afc:	e0bffb05 	stb	r2,-20(fp)
   46b00:	00000106 	br	46b08 <socket+0x1b0>
    }
    else
    {
        ret = 0;
   46b04:	e03ffb05 	stb	zero,-20(fp)
    }
    return ret;
   46b08:	e0bffb03 	ldbu	r2,-20(fp)
}
   46b0c:	e037883a 	mov	sp,fp
   46b10:	dfc00117 	ldw	ra,4(sp)
   46b14:	df000017 	ldw	fp,0(sp)
   46b18:	dec00204 	addi	sp,sp,8
   46b1c:	f800283a 	ret

00046b20 <close_socket>:

/**
  @brief   This function close_socket the socket and parameter is "s" which represent the socket number
  */
void close_socket(SOCKET s)
{
   46b20:	defffd04 	addi	sp,sp,-12
   46b24:	dfc00215 	stw	ra,8(sp)
   46b28:	df000115 	stw	fp,4(sp)
   46b2c:	df000104 	addi	fp,sp,4
   46b30:	2005883a 	mov	r2,r4
   46b34:	e0bfff05 	stb	r2,-4(fp)

    IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_CLOSE);
   46b38:	e0bfff03 	ldbu	r2,-4(fp)
   46b3c:	1004917a 	slli	r2,r2,5
   46b40:	10804204 	addi	r2,r2,264
   46b44:	01400404 	movi	r5,16
   46b48:	1009883a 	mov	r4,r2
   46b4c:	0047d380 	call	47d38 <IINCHIP_WRITE>

    /* wait to process the command... */
    while( IINCHIP_READ(Sn_CR(s) ) )
   46b50:	0001883a 	nop
   46b54:	e0bfff03 	ldbu	r2,-4(fp)
   46b58:	1004917a 	slli	r2,r2,5
   46b5c:	10804204 	addi	r2,r2,264
   46b60:	1009883a 	mov	r4,r2
   46b64:	0047dc40 	call	47dc4 <IINCHIP_READ>
   46b68:	10803fcc 	andi	r2,r2,255
   46b6c:	103ff91e 	bne	r2,zero,46b54 <__reset+0xfffc5b54>
        ;
    /* ------- */
    /* all clear */
    IINCHIP_WRITE( Sn_IR(s) , 0xFF);
   46b70:	e0bfff03 	ldbu	r2,-4(fp)
   46b74:	1004917a 	slli	r2,r2,5
   46b78:	10808204 	addi	r2,r2,520
   46b7c:	01403fc4 	movi	r5,255
   46b80:	1009883a 	mov	r4,r2
   46b84:	0047d380 	call	47d38 <IINCHIP_WRITE>
}
   46b88:	0001883a 	nop
   46b8c:	e037883a 	mov	sp,fp
   46b90:	dfc00117 	ldw	ra,4(sp)
   46b94:	df000017 	ldw	fp,0(sp)
   46b98:	dec00204 	addi	sp,sp,8
   46b9c:	f800283a 	ret

00046ba0 <listen>:
/**
  @brief   This function established  the connection for the channel in passive (server) mode. This function waits for the request from the peer.
  @return  1 for success else 0.
  */
uint8 listen(SOCKET s)
{
   46ba0:	defffc04 	addi	sp,sp,-16
   46ba4:	dfc00315 	stw	ra,12(sp)
   46ba8:	df000215 	stw	fp,8(sp)
   46bac:	df000204 	addi	fp,sp,8
   46bb0:	2005883a 	mov	r2,r4
   46bb4:	e0bfff05 	stb	r2,-4(fp)
    uint8 ret;			// 定义一个监听标志位，若Sn_CR的LISTEN命令发送成功，其值为1，否则为0

    if (IINCHIP_READ( Sn_SR(s) ) == SOCK_INIT)		// 若Sn_SR处于初始化状态，进入循环
   46bb8:	e0bfff03 	ldbu	r2,-4(fp)
   46bbc:	1004917a 	slli	r2,r2,5
   46bc0:	1080c204 	addi	r2,r2,776
   46bc4:	1009883a 	mov	r4,r2
   46bc8:	0047dc40 	call	47dc4 <IINCHIP_READ>
   46bcc:	10803fcc 	andi	r2,r2,255
   46bd0:	108004d8 	cmpnei	r2,r2,19
   46bd4:	1000111e 	bne	r2,zero,46c1c <listen+0x7c>
    {
        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_LISTEN);		// MCU配置W5500为监听状态
   46bd8:	e0bfff03 	ldbu	r2,-4(fp)
   46bdc:	1004917a 	slli	r2,r2,5
   46be0:	10804204 	addi	r2,r2,264
   46be4:	01400084 	movi	r5,2
   46be8:	1009883a 	mov	r4,r2
   46bec:	0047d380 	call	47d38 <IINCHIP_WRITE>

        while( IINCHIP_READ(Sn_CR(s) ) )					// 配置完成，Sn_CR自动清零
   46bf0:	0001883a 	nop
   46bf4:	e0bfff03 	ldbu	r2,-4(fp)
   46bf8:	1004917a 	slli	r2,r2,5
   46bfc:	10804204 	addi	r2,r2,264
   46c00:	1009883a 	mov	r4,r2
   46c04:	0047dc40 	call	47dc4 <IINCHIP_READ>
   46c08:	10803fcc 	andi	r2,r2,255
   46c0c:	103ff91e 	bne	r2,zero,46bf4 <__reset+0xfffc5bf4>
            ;
        ret = 1;																	// LISTEN命令发送成功，ret=1
   46c10:	00800044 	movi	r2,1
   46c14:	e0bffe05 	stb	r2,-8(fp)
   46c18:	00000106 	br	46c20 <listen+0x80>
    }
    else
    {
        ret = 0;																	// 否则，ret=0
   46c1c:	e03ffe05 	stb	zero,-8(fp)
    }
    return ret;
   46c20:	e0bffe03 	ldbu	r2,-8(fp)
}
   46c24:	e037883a 	mov	sp,fp
   46c28:	dfc00117 	ldw	ra,4(sp)
   46c2c:	df000017 	ldw	fp,0(sp)
   46c30:	dec00204 	addi	sp,sp,8
   46c34:	f800283a 	ret

00046c38 <connect>:
  This function waits for the untill the connection is established.

  @return  1 for success else 0.
  */
uint8 connect(SOCKET s, uint8 * addr, uint16 port)
{
   46c38:	defffa04 	addi	sp,sp,-24
   46c3c:	dfc00515 	stw	ra,20(sp)
   46c40:	df000415 	stw	fp,16(sp)
   46c44:	df000404 	addi	fp,sp,16
   46c48:	2007883a 	mov	r3,r4
   46c4c:	e17ffe15 	stw	r5,-8(fp)
   46c50:	3005883a 	mov	r2,r6
   46c54:	e0fffd05 	stb	r3,-12(fp)
   46c58:	e0bfff0d 	sth	r2,-4(fp)
    uint8 ret;
    if
        (
         ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
   46c5c:	e0bffe17 	ldw	r2,-8(fp)
   46c60:	10800003 	ldbu	r2,0(r2)
  */
uint8 connect(SOCKET s, uint8 * addr, uint16 port)
{
    uint8 ret;
    if
        (
   46c64:	10803fcc 	andi	r2,r2,255
   46c68:	10803fd8 	cmpnei	r2,r2,255
   46c6c:	1000121e 	bne	r2,zero,46cb8 <connect+0x80>
         ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
   46c70:	e0bffe17 	ldw	r2,-8(fp)
   46c74:	10800044 	addi	r2,r2,1
   46c78:	10800003 	ldbu	r2,0(r2)
   46c7c:	10803fcc 	andi	r2,r2,255
   46c80:	10803fd8 	cmpnei	r2,r2,255
   46c84:	10000c1e 	bne	r2,zero,46cb8 <connect+0x80>
   46c88:	e0bffe17 	ldw	r2,-8(fp)
   46c8c:	10800084 	addi	r2,r2,2
   46c90:	10800003 	ldbu	r2,0(r2)
   46c94:	10803fcc 	andi	r2,r2,255
   46c98:	10803fd8 	cmpnei	r2,r2,255
   46c9c:	1000061e 	bne	r2,zero,46cb8 <connect+0x80>
   46ca0:	e0bffe17 	ldw	r2,-8(fp)
   46ca4:	108000c4 	addi	r2,r2,3
   46ca8:	10800003 	ldbu	r2,0(r2)
   46cac:	10803fcc 	andi	r2,r2,255
   46cb0:	10803fe0 	cmpeqi	r2,r2,255
   46cb4:	1000151e 	bne	r2,zero,46d0c <connect+0xd4>
         ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   46cb8:	e0bffe17 	ldw	r2,-8(fp)
   46cbc:	10800003 	ldbu	r2,0(r2)
uint8 connect(SOCKET s, uint8 * addr, uint16 port)
{
    uint8 ret;
    if
        (
         ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
   46cc0:	10803fcc 	andi	r2,r2,255
   46cc4:	10000f1e 	bne	r2,zero,46d04 <connect+0xcc>
         ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   46cc8:	e0bffe17 	ldw	r2,-8(fp)
   46ccc:	10800044 	addi	r2,r2,1
   46cd0:	10800003 	ldbu	r2,0(r2)
   46cd4:	10803fcc 	andi	r2,r2,255
   46cd8:	10000a1e 	bne	r2,zero,46d04 <connect+0xcc>
   46cdc:	e0bffe17 	ldw	r2,-8(fp)
   46ce0:	10800084 	addi	r2,r2,2
   46ce4:	10800003 	ldbu	r2,0(r2)
   46ce8:	10803fcc 	andi	r2,r2,255
   46cec:	1000051e 	bne	r2,zero,46d04 <connect+0xcc>
   46cf0:	e0bffe17 	ldw	r2,-8(fp)
   46cf4:	108000c4 	addi	r2,r2,3
   46cf8:	10800003 	ldbu	r2,0(r2)
   46cfc:	10803fcc 	andi	r2,r2,255
   46d00:	10000226 	beq	r2,zero,46d0c <connect+0xd4>
   46d04:	e0bfff0b 	ldhu	r2,-4(fp)
   46d08:	1000021e 	bne	r2,zero,46d14 <connect+0xdc>
         (port == 0x00)
        )
        {
            ret = 0;
   46d0c:	e03ffc05 	stb	zero,-16(fp)
   46d10:	00006f06 	br	46ed0 <connect+0x298>
        }
    else
    {
        ret = 1;
   46d14:	00800044 	movi	r2,1
   46d18:	e0bffc05 	stb	r2,-16(fp)
        // set destination IP
        IINCHIP_WRITE( Sn_DIPR0(s), addr[0]);
   46d1c:	e0bffd03 	ldbu	r2,-12(fp)
   46d20:	1004917a 	slli	r2,r2,5
   46d24:	10830204 	addi	r2,r2,3080
   46d28:	1007883a 	mov	r3,r2
   46d2c:	e0bffe17 	ldw	r2,-8(fp)
   46d30:	10800003 	ldbu	r2,0(r2)
   46d34:	10803fcc 	andi	r2,r2,255
   46d38:	100b883a 	mov	r5,r2
   46d3c:	1809883a 	mov	r4,r3
   46d40:	0047d380 	call	47d38 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DIPR1(s), addr[1]);
   46d44:	e0bffd03 	ldbu	r2,-12(fp)
   46d48:	1004917a 	slli	r2,r2,5
   46d4c:	10834204 	addi	r2,r2,3336
   46d50:	1007883a 	mov	r3,r2
   46d54:	e0bffe17 	ldw	r2,-8(fp)
   46d58:	10800044 	addi	r2,r2,1
   46d5c:	10800003 	ldbu	r2,0(r2)
   46d60:	10803fcc 	andi	r2,r2,255
   46d64:	100b883a 	mov	r5,r2
   46d68:	1809883a 	mov	r4,r3
   46d6c:	0047d380 	call	47d38 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DIPR2(s), addr[2]);
   46d70:	e0bffd03 	ldbu	r2,-12(fp)
   46d74:	1004917a 	slli	r2,r2,5
   46d78:	10838204 	addi	r2,r2,3592
   46d7c:	1007883a 	mov	r3,r2
   46d80:	e0bffe17 	ldw	r2,-8(fp)
   46d84:	10800084 	addi	r2,r2,2
   46d88:	10800003 	ldbu	r2,0(r2)
   46d8c:	10803fcc 	andi	r2,r2,255
   46d90:	100b883a 	mov	r5,r2
   46d94:	1809883a 	mov	r4,r3
   46d98:	0047d380 	call	47d38 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DIPR3(s), addr[3]);
   46d9c:	e0bffd03 	ldbu	r2,-12(fp)
   46da0:	1004917a 	slli	r2,r2,5
   46da4:	1083c204 	addi	r2,r2,3848
   46da8:	1007883a 	mov	r3,r2
   46dac:	e0bffe17 	ldw	r2,-8(fp)
   46db0:	108000c4 	addi	r2,r2,3
   46db4:	10800003 	ldbu	r2,0(r2)
   46db8:	10803fcc 	andi	r2,r2,255
   46dbc:	100b883a 	mov	r5,r2
   46dc0:	1809883a 	mov	r4,r3
   46dc4:	0047d380 	call	47d38 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DPORT0(s), (uint8)((port & 0xff00) >> 8));
   46dc8:	e0bffd03 	ldbu	r2,-12(fp)
   46dcc:	1004917a 	slli	r2,r2,5
   46dd0:	10840204 	addi	r2,r2,4104
   46dd4:	1007883a 	mov	r3,r2
   46dd8:	e0bfff0b 	ldhu	r2,-4(fp)
   46ddc:	1004d23a 	srli	r2,r2,8
   46de0:	10803fcc 	andi	r2,r2,255
   46de4:	100b883a 	mov	r5,r2
   46de8:	1809883a 	mov	r4,r3
   46dec:	0047d380 	call	47d38 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DPORT1(s), (uint8)(port & 0x00ff));
   46df0:	e0bffd03 	ldbu	r2,-12(fp)
   46df4:	1004917a 	slli	r2,r2,5
   46df8:	10844204 	addi	r2,r2,4360
   46dfc:	1007883a 	mov	r3,r2
   46e00:	e0bfff0b 	ldhu	r2,-4(fp)
   46e04:	10803fcc 	andi	r2,r2,255
   46e08:	100b883a 	mov	r5,r2
   46e0c:	1809883a 	mov	r4,r3
   46e10:	0047d380 	call	47d38 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_CONNECT);
   46e14:	e0bffd03 	ldbu	r2,-12(fp)
   46e18:	1004917a 	slli	r2,r2,5
   46e1c:	10804204 	addi	r2,r2,264
   46e20:	01400104 	movi	r5,4
   46e24:	1009883a 	mov	r4,r2
   46e28:	0047d380 	call	47d38 <IINCHIP_WRITE>
        /* wait for completion */
        while ( IINCHIP_READ(Sn_CR(s) ) ) ;
   46e2c:	0001883a 	nop
   46e30:	e0bffd03 	ldbu	r2,-12(fp)
   46e34:	1004917a 	slli	r2,r2,5
   46e38:	10804204 	addi	r2,r2,264
   46e3c:	1009883a 	mov	r4,r2
   46e40:	0047dc40 	call	47dc4 <IINCHIP_READ>
   46e44:	10803fcc 	andi	r2,r2,255
   46e48:	103ff91e 	bne	r2,zero,46e30 <__reset+0xfffc5e30>

        while ( IINCHIP_READ(Sn_SR(s)) != SOCK_SYNSENT )
   46e4c:	00001606 	br	46ea8 <connect+0x270>
        {
            if(IINCHIP_READ(Sn_SR(s)) == SOCK_ESTABLISHED)
   46e50:	e0bffd03 	ldbu	r2,-12(fp)
   46e54:	1004917a 	slli	r2,r2,5
   46e58:	1080c204 	addi	r2,r2,776
   46e5c:	1009883a 	mov	r4,r2
   46e60:	0047dc40 	call	47dc4 <IINCHIP_READ>
   46e64:	10803fcc 	andi	r2,r2,255
   46e68:	108005d8 	cmpnei	r2,r2,23
   46e6c:	10001726 	beq	r2,zero,46ecc <connect+0x294>
            {
                break;
            }
            if (getSn_IR(s) & Sn_IR_TIMEOUT)
   46e70:	e0bffd03 	ldbu	r2,-12(fp)
   46e74:	1009883a 	mov	r4,r2
   46e78:	00488d40 	call	488d4 <getSn_IR>
   46e7c:	10803fcc 	andi	r2,r2,255
   46e80:	1080020c 	andi	r2,r2,8
   46e84:	10000826 	beq	r2,zero,46ea8 <connect+0x270>
            {
                IINCHIP_WRITE(Sn_IR(s), (Sn_IR_TIMEOUT));  // clear TIMEOUT Interrupt
   46e88:	e0bffd03 	ldbu	r2,-12(fp)
   46e8c:	1004917a 	slli	r2,r2,5
   46e90:	10808204 	addi	r2,r2,520
   46e94:	01400204 	movi	r5,8
   46e98:	1009883a 	mov	r4,r2
   46e9c:	0047d380 	call	47d38 <IINCHIP_WRITE>
                ret = 0;
   46ea0:	e03ffc05 	stb	zero,-16(fp)
                break;
   46ea4:	00000a06 	br	46ed0 <connect+0x298>
        IINCHIP_WRITE( Sn_DPORT1(s), (uint8)(port & 0x00ff));
        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_CONNECT);
        /* wait for completion */
        while ( IINCHIP_READ(Sn_CR(s) ) ) ;

        while ( IINCHIP_READ(Sn_SR(s)) != SOCK_SYNSENT )
   46ea8:	e0bffd03 	ldbu	r2,-12(fp)
   46eac:	1004917a 	slli	r2,r2,5
   46eb0:	1080c204 	addi	r2,r2,776
   46eb4:	1009883a 	mov	r4,r2
   46eb8:	0047dc40 	call	47dc4 <IINCHIP_READ>
   46ebc:	10803fcc 	andi	r2,r2,255
   46ec0:	10800558 	cmpnei	r2,r2,21
   46ec4:	103fe21e 	bne	r2,zero,46e50 <__reset+0xfffc5e50>
   46ec8:	00000106 	br	46ed0 <connect+0x298>
        {
            if(IINCHIP_READ(Sn_SR(s)) == SOCK_ESTABLISHED)
            {
                break;
   46ecc:	0001883a 	nop
                break;
            }
        }
    }

    return ret;
   46ed0:	e0bffc03 	ldbu	r2,-16(fp)
}
   46ed4:	e037883a 	mov	sp,fp
   46ed8:	dfc00117 	ldw	ra,4(sp)
   46edc:	df000017 	ldw	fp,0(sp)
   46ee0:	dec00204 	addi	sp,sp,8
   46ee4:	f800283a 	ret

00046ee8 <disconnect>:
/**
  @brief   This function used for disconnect the socket and parameter is "s" which represent the socket number
  @return  1 for success else 0.
  */
void disconnect(SOCKET s)
{
   46ee8:	defffd04 	addi	sp,sp,-12
   46eec:	dfc00215 	stw	ra,8(sp)
   46ef0:	df000115 	stw	fp,4(sp)
   46ef4:	df000104 	addi	fp,sp,4
   46ef8:	2005883a 	mov	r2,r4
   46efc:	e0bfff05 	stb	r2,-4(fp)
    IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_DISCON);
   46f00:	e0bfff03 	ldbu	r2,-4(fp)
   46f04:	1004917a 	slli	r2,r2,5
   46f08:	10804204 	addi	r2,r2,264
   46f0c:	01400204 	movi	r5,8
   46f10:	1009883a 	mov	r4,r2
   46f14:	0047d380 	call	47d38 <IINCHIP_WRITE>

    /* wait to process the command... */
    while( IINCHIP_READ(Sn_CR(s) ) )
   46f18:	0001883a 	nop
   46f1c:	e0bfff03 	ldbu	r2,-4(fp)
   46f20:	1004917a 	slli	r2,r2,5
   46f24:	10804204 	addi	r2,r2,264
   46f28:	1009883a 	mov	r4,r2
   46f2c:	0047dc40 	call	47dc4 <IINCHIP_READ>
   46f30:	10803fcc 	andi	r2,r2,255
   46f34:	103ff91e 	bne	r2,zero,46f1c <__reset+0xfffc5f1c>
        ;
    /* ------- */
}
   46f38:	0001883a 	nop
   46f3c:	e037883a 	mov	sp,fp
   46f40:	dfc00117 	ldw	ra,4(sp)
   46f44:	df000017 	ldw	fp,0(sp)
   46f48:	dec00204 	addi	sp,sp,8
   46f4c:	f800283a 	ret

00046f50 <send>:
/**
  @brief   This function used to send the data in TCP mode
  @return  1 for success else 0.
  */
uint16 send(SOCKET s, const uint8 * buf, uint16 len)
{
   46f50:	defff904 	addi	sp,sp,-28
   46f54:	dfc00615 	stw	ra,24(sp)
   46f58:	df000515 	stw	fp,20(sp)
   46f5c:	df000504 	addi	fp,sp,20
   46f60:	2007883a 	mov	r3,r4
   46f64:	e17ffe15 	stw	r5,-8(fp)
   46f68:	3005883a 	mov	r2,r6
   46f6c:	e0fffd05 	stb	r3,-12(fp)
   46f70:	e0bfff0d 	sth	r2,-4(fp)
    uint8 status=0;
   46f74:	e03ffb85 	stb	zero,-18(fp)
    uint16 ret=0;
   46f78:	e03ffb0d 	sth	zero,-20(fp)
    uint16 freesize=0;
   46f7c:	e03ffc0d 	sth	zero,-16(fp)

    if (len > getIINCHIP_TxMAX(s))
   46f80:	e0bffd03 	ldbu	r2,-12(fp)
   46f84:	1009883a 	mov	r4,r2
   46f88:	0047c280 	call	47c28 <getIINCHIP_TxMAX>
   46f8c:	10ffffcc 	andi	r3,r2,65535
   46f90:	e0bfff0b 	ldhu	r2,-4(fp)
   46f94:	1880052e 	bgeu	r3,r2,46fac <send+0x5c>
    	ret = getIINCHIP_TxMAX(s);
   46f98:	e0bffd03 	ldbu	r2,-12(fp)
   46f9c:	1009883a 	mov	r4,r2
   46fa0:	0047c280 	call	47c28 <getIINCHIP_TxMAX>
   46fa4:	e0bffb0d 	sth	r2,-20(fp)
   46fa8:	00000206 	br	46fb4 <send+0x64>
    else
    	ret = len;
   46fac:	e0bfff0b 	ldhu	r2,-4(fp)
   46fb0:	e0bffb0d 	sth	r2,-20(fp)

    do
    {
        freesize = getSn_TX_FSR(s);
   46fb4:	e0bffd03 	ldbu	r2,-12(fp)
   46fb8:	1009883a 	mov	r4,r2
   46fbc:	00489540 	call	48954 <getSn_TX_FSR>
   46fc0:	e0bffc0d 	sth	r2,-16(fp)
        status = IINCHIP_READ(Sn_SR(s));
   46fc4:	e0bffd03 	ldbu	r2,-12(fp)
   46fc8:	1004917a 	slli	r2,r2,5
   46fcc:	1080c204 	addi	r2,r2,776
   46fd0:	1009883a 	mov	r4,r2
   46fd4:	0047dc40 	call	47dc4 <IINCHIP_READ>
   46fd8:	e0bffb85 	stb	r2,-18(fp)
        if ((status != SOCK_ESTABLISHED) && (status != SOCK_CLOSE_WAIT))
   46fdc:	e0bffb83 	ldbu	r2,-18(fp)
   46fe0:	108005e0 	cmpeqi	r2,r2,23
   46fe4:	1000051e 	bne	r2,zero,46ffc <send+0xac>
   46fe8:	e0bffb83 	ldbu	r2,-18(fp)
   46fec:	10800720 	cmpeqi	r2,r2,28
   46ff0:	1000021e 	bne	r2,zero,46ffc <send+0xac>
        {
            ret = 0;
   46ff4:	e03ffb0d 	sth	zero,-20(fp)
            break;
   46ff8:	00000306 	br	47008 <send+0xb8>
        }
    } while (freesize < ret);
   46ffc:	e0fffc0b 	ldhu	r3,-16(fp)
   47000:	e0bffb0b 	ldhu	r2,-20(fp)
   47004:	18bfeb36 	bltu	r3,r2,46fb4 <__reset+0xfffc5fb4>

    send_data_processing(s, (uint8 *)buf, ret);
   47008:	e0bffd03 	ldbu	r2,-12(fp)
   4700c:	e0fffb0b 	ldhu	r3,-20(fp)
   47010:	180d883a 	mov	r6,r3
   47014:	e17ffe17 	ldw	r5,-8(fp)
   47018:	1009883a 	mov	r4,r2
   4701c:	0048b1c0 	call	48b1c <send_data_processing>
    IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_SEND);
   47020:	e0bffd03 	ldbu	r2,-12(fp)
   47024:	1004917a 	slli	r2,r2,5
   47028:	10804204 	addi	r2,r2,264
   4702c:	01400804 	movi	r5,32
   47030:	1009883a 	mov	r4,r2
   47034:	0047d380 	call	47d38 <IINCHIP_WRITE>

    while( IINCHIP_READ(Sn_CR(s) ) );
   47038:	0001883a 	nop
   4703c:	e0bffd03 	ldbu	r2,-12(fp)
   47040:	1004917a 	slli	r2,r2,5
   47044:	10804204 	addi	r2,r2,264
   47048:	1009883a 	mov	r4,r2
   4704c:	0047dc40 	call	47dc4 <IINCHIP_READ>
   47050:	10803fcc 	andi	r2,r2,255
   47054:	103ff91e 	bne	r2,zero,4703c <__reset+0xfffc603c>

    while ( (IINCHIP_READ(Sn_IR(s) ) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK )
   47058:	00001106 	br	470a0 <send+0x150>
    {
        status = IINCHIP_READ(Sn_SR(s));
   4705c:	e0bffd03 	ldbu	r2,-12(fp)
   47060:	1004917a 	slli	r2,r2,5
   47064:	1080c204 	addi	r2,r2,776
   47068:	1009883a 	mov	r4,r2
   4706c:	0047dc40 	call	47dc4 <IINCHIP_READ>
   47070:	e0bffb85 	stb	r2,-18(fp)
        if ((status != SOCK_ESTABLISHED) && (status != SOCK_CLOSE_WAIT) )
   47074:	e0bffb83 	ldbu	r2,-18(fp)
   47078:	108005e0 	cmpeqi	r2,r2,23
   4707c:	1000081e 	bne	r2,zero,470a0 <send+0x150>
   47080:	e0bffb83 	ldbu	r2,-18(fp)
   47084:	10800720 	cmpeqi	r2,r2,28
   47088:	1000051e 	bne	r2,zero,470a0 <send+0x150>
        {
            close_socket(s);
   4708c:	e0bffd03 	ldbu	r2,-12(fp)
   47090:	1009883a 	mov	r4,r2
   47094:	0046b200 	call	46b20 <close_socket>
            return 0;
   47098:	0005883a 	mov	r2,zero
   4709c:	00001506 	br	470f4 <send+0x1a4>
    send_data_processing(s, (uint8 *)buf, ret);
    IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_SEND);

    while( IINCHIP_READ(Sn_CR(s) ) );

    while ( (IINCHIP_READ(Sn_IR(s) ) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK )
   470a0:	e0bffd03 	ldbu	r2,-12(fp)
   470a4:	1004917a 	slli	r2,r2,5
   470a8:	10808204 	addi	r2,r2,520
   470ac:	1009883a 	mov	r4,r2
   470b0:	0047dc40 	call	47dc4 <IINCHIP_READ>
   470b4:	10803fcc 	andi	r2,r2,255
   470b8:	1080040c 	andi	r2,r2,16
   470bc:	103fe726 	beq	r2,zero,4705c <__reset+0xfffc605c>
        {
            close_socket(s);
            return 0;
        }
    }
    IINCHIP_WRITE( Sn_IR(s) , Sn_IR_SEND_OK);
   470c0:	e0bffd03 	ldbu	r2,-12(fp)
   470c4:	1004917a 	slli	r2,r2,5
   470c8:	10808204 	addi	r2,r2,520
   470cc:	01400404 	movi	r5,16
   470d0:	1009883a 	mov	r4,r2
   470d4:	0047d380 	call	47d38 <IINCHIP_WRITE>

#ifdef __DEF_IINCHIP_INT__
    putISR(s, getISR(s) & (~Sn_IR_SEND_OK));
#else
    IINCHIP_WRITE( Sn_IR(s) , Sn_IR_SEND_OK);
   470d8:	e0bffd03 	ldbu	r2,-12(fp)
   470dc:	1004917a 	slli	r2,r2,5
   470e0:	10808204 	addi	r2,r2,520
   470e4:	01400404 	movi	r5,16
   470e8:	1009883a 	mov	r4,r2
   470ec:	0047d380 	call	47d38 <IINCHIP_WRITE>
#endif

    return ret;
   470f0:	e0bffb0b 	ldhu	r2,-20(fp)
}
   470f4:	e037883a 	mov	sp,fp
   470f8:	dfc00117 	ldw	ra,4(sp)
   470fc:	df000017 	ldw	fp,0(sp)
   47100:	dec00204 	addi	sp,sp,8
   47104:	f800283a 	ret

00047108 <recv>:
  It continues to wait for data as much as the application wants to receive.

  @return  received data size for success else -1.
  */
uint16 recv(SOCKET s, uint8 * buf, uint16 len)
{
   47108:	defffa04 	addi	sp,sp,-24
   4710c:	dfc00515 	stw	ra,20(sp)
   47110:	df000415 	stw	fp,16(sp)
   47114:	df000404 	addi	fp,sp,16
   47118:	2007883a 	mov	r3,r4
   4711c:	e17ffe15 	stw	r5,-8(fp)
   47120:	3005883a 	mov	r2,r6
   47124:	e0fffd05 	stb	r3,-12(fp)
   47128:	e0bfff0d 	sth	r2,-4(fp)
    uint16 ret=0;
   4712c:	e03ffc0d 	sth	zero,-16(fp)
    if ( len > 0 )
   47130:	e0bfff0b 	ldhu	r2,-4(fp)
   47134:	10001626 	beq	r2,zero,47190 <recv+0x88>
    {
        recv_data_processing(s, buf, len);				// 数据接收进程：将通过Sockets的buf接受的长度为len的数据写入指针对应的MCU的缓存地址
   47138:	e0bffd03 	ldbu	r2,-12(fp)
   4713c:	e0ffff0b 	ldhu	r3,-4(fp)
   47140:	180d883a 	mov	r6,r3
   47144:	e17ffe17 	ldw	r5,-8(fp)
   47148:	1009883a 	mov	r4,r2
   4714c:	0048c4c0 	call	48c4c <recv_data_processing>

        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_RECV);			// MCU配置Sn_CR为RECV
   47150:	e0bffd03 	ldbu	r2,-12(fp)
   47154:	1004917a 	slli	r2,r2,5
   47158:	10804204 	addi	r2,r2,264
   4715c:	01401004 	movi	r5,64
   47160:	1009883a 	mov	r4,r2
   47164:	0047d380 	call	47d38 <IINCHIP_WRITE>

        while( IINCHIP_READ(Sn_CR(s) ));					// 配置完成，Sn_CR自动清零
   47168:	0001883a 	nop
   4716c:	e0bffd03 	ldbu	r2,-12(fp)
   47170:	1004917a 	slli	r2,r2,5
   47174:	10804204 	addi	r2,r2,264
   47178:	1009883a 	mov	r4,r2
   4717c:	0047dc40 	call	47dc4 <IINCHIP_READ>
   47180:	10803fcc 	andi	r2,r2,255
   47184:	103ff91e 	bne	r2,zero,4716c <__reset+0xfffc616c>

        ret = len;																// 将接收数据长度值赋给ret
   47188:	e0bfff0b 	ldhu	r2,-4(fp)
   4718c:	e0bffc0d 	sth	r2,-16(fp)
    }
    return ret;																	// 返回ret的值。有返回值说明W5500有数据接收，并不断重复接收这一进程
   47190:	e0bffc0b 	ldhu	r2,-16(fp)
}
   47194:	e037883a 	mov	sp,fp
   47198:	dfc00117 	ldw	ra,4(sp)
   4719c:	df000017 	ldw	fp,0(sp)
   471a0:	dec00204 	addi	sp,sp,8
   471a4:	f800283a 	ret

000471a8 <sendto>:
  Unlike TCP transmission, The peer's destination address and the port is needed.

  @return  This function return send data size for success else -1.
  */
uint16 sendto(SOCKET s, const uint8 * buf, uint16 len, uint8 * addr, uint16 port)
{
   471a8:	defff804 	addi	sp,sp,-32
   471ac:	dfc00715 	stw	ra,28(sp)
   471b0:	df000615 	stw	fp,24(sp)
   471b4:	df000604 	addi	fp,sp,24
   471b8:	e17ffc15 	stw	r5,-16(fp)
   471bc:	3007883a 	mov	r3,r6
   471c0:	e1fffe15 	stw	r7,-8(fp)
   471c4:	e0800217 	ldw	r2,8(fp)
   471c8:	e13ffb05 	stb	r4,-20(fp)
   471cc:	e0fffd0d 	sth	r3,-12(fp)
   471d0:	e0bfff0d 	sth	r2,-4(fp)
    uint16 ret=0;
   471d4:	e03ffa0d 	sth	zero,-24(fp)

    if (len > getIINCHIP_TxMAX(s)) 
   471d8:	e0bffb03 	ldbu	r2,-20(fp)
   471dc:	1009883a 	mov	r4,r2
   471e0:	0047c280 	call	47c28 <getIINCHIP_TxMAX>
   471e4:	10ffffcc 	andi	r3,r2,65535
   471e8:	e0bffd0b 	ldhu	r2,-12(fp)
   471ec:	1880052e 	bgeu	r3,r2,47204 <sendto+0x5c>
        ret = getIINCHIP_TxMAX(s); // check size not to exceed MAX size.
   471f0:	e0bffb03 	ldbu	r2,-20(fp)
   471f4:	1009883a 	mov	r4,r2
   471f8:	0047c280 	call	47c28 <getIINCHIP_TxMAX>
   471fc:	e0bffa0d 	sth	r2,-24(fp)
   47200:	00000206 	br	4720c <sendto+0x64>
    else ret = len;
   47204:	e0bffd0b 	ldhu	r2,-12(fp)
   47208:	e0bffa0d 	sth	r2,-24(fp)

    if( ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) || ((port == 0x00)) )//||(ret == 0) )
   4720c:	e0bffe17 	ldw	r2,-8(fp)
   47210:	10800003 	ldbu	r2,0(r2)
   47214:	10803fcc 	andi	r2,r2,255
   47218:	10000f1e 	bne	r2,zero,47258 <sendto+0xb0>
   4721c:	e0bffe17 	ldw	r2,-8(fp)
   47220:	10800044 	addi	r2,r2,1
   47224:	10800003 	ldbu	r2,0(r2)
   47228:	10803fcc 	andi	r2,r2,255
   4722c:	10000a1e 	bne	r2,zero,47258 <sendto+0xb0>
   47230:	e0bffe17 	ldw	r2,-8(fp)
   47234:	10800084 	addi	r2,r2,2
   47238:	10800003 	ldbu	r2,0(r2)
   4723c:	10803fcc 	andi	r2,r2,255
   47240:	1000051e 	bne	r2,zero,47258 <sendto+0xb0>
   47244:	e0bffe17 	ldw	r2,-8(fp)
   47248:	108000c4 	addi	r2,r2,3
   4724c:	10800003 	ldbu	r2,0(r2)
   47250:	10803fcc 	andi	r2,r2,255
   47254:	10000226 	beq	r2,zero,47260 <sendto+0xb8>
   47258:	e0bfff0b 	ldhu	r2,-4(fp)
   4725c:	1000021e 	bne	r2,zero,47268 <sendto+0xc0>
    {
        /* added return value */
        ret = 0;
   47260:	e03ffa0d 	sth	zero,-24(fp)
   47264:	00007106 	br	4742c <sendto+0x284>
    }
    else
    {
        IINCHIP_WRITE( Sn_DIPR0(s), addr[0]);
   47268:	e0bffb03 	ldbu	r2,-20(fp)
   4726c:	1004917a 	slli	r2,r2,5
   47270:	10830204 	addi	r2,r2,3080
   47274:	1007883a 	mov	r3,r2
   47278:	e0bffe17 	ldw	r2,-8(fp)
   4727c:	10800003 	ldbu	r2,0(r2)
   47280:	10803fcc 	andi	r2,r2,255
   47284:	100b883a 	mov	r5,r2
   47288:	1809883a 	mov	r4,r3
   4728c:	0047d380 	call	47d38 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DIPR1(s), addr[1]);
   47290:	e0bffb03 	ldbu	r2,-20(fp)
   47294:	1004917a 	slli	r2,r2,5
   47298:	10834204 	addi	r2,r2,3336
   4729c:	1007883a 	mov	r3,r2
   472a0:	e0bffe17 	ldw	r2,-8(fp)
   472a4:	10800044 	addi	r2,r2,1
   472a8:	10800003 	ldbu	r2,0(r2)
   472ac:	10803fcc 	andi	r2,r2,255
   472b0:	100b883a 	mov	r5,r2
   472b4:	1809883a 	mov	r4,r3
   472b8:	0047d380 	call	47d38 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DIPR2(s), addr[2]);
   472bc:	e0bffb03 	ldbu	r2,-20(fp)
   472c0:	1004917a 	slli	r2,r2,5
   472c4:	10838204 	addi	r2,r2,3592
   472c8:	1007883a 	mov	r3,r2
   472cc:	e0bffe17 	ldw	r2,-8(fp)
   472d0:	10800084 	addi	r2,r2,2
   472d4:	10800003 	ldbu	r2,0(r2)
   472d8:	10803fcc 	andi	r2,r2,255
   472dc:	100b883a 	mov	r5,r2
   472e0:	1809883a 	mov	r4,r3
   472e4:	0047d380 	call	47d38 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DIPR3(s), addr[3]);
   472e8:	e0bffb03 	ldbu	r2,-20(fp)
   472ec:	1004917a 	slli	r2,r2,5
   472f0:	1083c204 	addi	r2,r2,3848
   472f4:	1007883a 	mov	r3,r2
   472f8:	e0bffe17 	ldw	r2,-8(fp)
   472fc:	108000c4 	addi	r2,r2,3
   47300:	10800003 	ldbu	r2,0(r2)
   47304:	10803fcc 	andi	r2,r2,255
   47308:	100b883a 	mov	r5,r2
   4730c:	1809883a 	mov	r4,r3
   47310:	0047d380 	call	47d38 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DPORT0(s),(uint8)((port & 0xff00) >> 8));
   47314:	e0bffb03 	ldbu	r2,-20(fp)
   47318:	1004917a 	slli	r2,r2,5
   4731c:	10840204 	addi	r2,r2,4104
   47320:	1007883a 	mov	r3,r2
   47324:	e0bfff0b 	ldhu	r2,-4(fp)
   47328:	1004d23a 	srli	r2,r2,8
   4732c:	10803fcc 	andi	r2,r2,255
   47330:	100b883a 	mov	r5,r2
   47334:	1809883a 	mov	r4,r3
   47338:	0047d380 	call	47d38 <IINCHIP_WRITE>
        IINCHIP_WRITE( Sn_DPORT1(s),(uint8)(port & 0x00ff));
   4733c:	e0bffb03 	ldbu	r2,-20(fp)
   47340:	1004917a 	slli	r2,r2,5
   47344:	10844204 	addi	r2,r2,4360
   47348:	1007883a 	mov	r3,r2
   4734c:	e0bfff0b 	ldhu	r2,-4(fp)
   47350:	10803fcc 	andi	r2,r2,255
   47354:	100b883a 	mov	r5,r2
   47358:	1809883a 	mov	r4,r3
   4735c:	0047d380 	call	47d38 <IINCHIP_WRITE>
        // copy data
        send_data_processing(s, (uint8 *)buf, ret);
   47360:	e0bffb03 	ldbu	r2,-20(fp)
   47364:	e0fffa0b 	ldhu	r3,-24(fp)
   47368:	180d883a 	mov	r6,r3
   4736c:	e17ffc17 	ldw	r5,-16(fp)
   47370:	1009883a 	mov	r4,r2
   47374:	0048b1c0 	call	48b1c <send_data_processing>
        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_SEND);
   47378:	e0bffb03 	ldbu	r2,-20(fp)
   4737c:	1004917a 	slli	r2,r2,5
   47380:	10804204 	addi	r2,r2,264
   47384:	01400804 	movi	r5,32
   47388:	1009883a 	mov	r4,r2
   4738c:	0047d380 	call	47d38 <IINCHIP_WRITE>
        /* wait to process the command... */
        while( IINCHIP_READ( Sn_CR(s) ) )
   47390:	0001883a 	nop
   47394:	e0bffb03 	ldbu	r2,-20(fp)
   47398:	1004917a 	slli	r2,r2,5
   4739c:	10804204 	addi	r2,r2,264
   473a0:	1009883a 	mov	r4,r2
   473a4:	0047dc40 	call	47dc4 <IINCHIP_READ>
   473a8:	10803fcc 	andi	r2,r2,255
   473ac:	103ff91e 	bne	r2,zero,47394 <__reset+0xfffc6394>
            ;
        /* ------- */
        while( (IINCHIP_READ( Sn_IR(s) ) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK )
   473b0:	00001006 	br	473f4 <sendto+0x24c>
        {
            if (IINCHIP_READ( Sn_IR(s) ) & Sn_IR_TIMEOUT)
   473b4:	e0bffb03 	ldbu	r2,-20(fp)
   473b8:	1004917a 	slli	r2,r2,5
   473bc:	10808204 	addi	r2,r2,520
   473c0:	1009883a 	mov	r4,r2
   473c4:	0047dc40 	call	47dc4 <IINCHIP_READ>
   473c8:	10803fcc 	andi	r2,r2,255
   473cc:	1080020c 	andi	r2,r2,8
   473d0:	10000826 	beq	r2,zero,473f4 <sendto+0x24c>
            {
                /* clear interrupt */
                IINCHIP_WRITE( Sn_IR(s) , (Sn_IR_SEND_OK | Sn_IR_TIMEOUT)); /* clear SEND_OK & TIMEOUT */
   473d4:	e0bffb03 	ldbu	r2,-20(fp)
   473d8:	1004917a 	slli	r2,r2,5
   473dc:	10808204 	addi	r2,r2,520
   473e0:	01400604 	movi	r5,24
   473e4:	1009883a 	mov	r4,r2
   473e8:	0047d380 	call	47d38 <IINCHIP_WRITE>
                return 0;
   473ec:	0005883a 	mov	r2,zero
   473f0:	00000f06 	br	47430 <sendto+0x288>
        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_SEND);
        /* wait to process the command... */
        while( IINCHIP_READ( Sn_CR(s) ) )
            ;
        /* ------- */
        while( (IINCHIP_READ( Sn_IR(s) ) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK )
   473f4:	e0bffb03 	ldbu	r2,-20(fp)
   473f8:	1004917a 	slli	r2,r2,5
   473fc:	10808204 	addi	r2,r2,520
   47400:	1009883a 	mov	r4,r2
   47404:	0047dc40 	call	47dc4 <IINCHIP_READ>
   47408:	10803fcc 	andi	r2,r2,255
   4740c:	1080040c 	andi	r2,r2,16
   47410:	103fe826 	beq	r2,zero,473b4 <__reset+0xfffc63b4>
                /* clear interrupt */
                IINCHIP_WRITE( Sn_IR(s) , (Sn_IR_SEND_OK | Sn_IR_TIMEOUT)); /* clear SEND_OK & TIMEOUT */
                return 0;
            }
        }
        IINCHIP_WRITE( Sn_IR(s) , Sn_IR_SEND_OK);
   47414:	e0bffb03 	ldbu	r2,-20(fp)
   47418:	1004917a 	slli	r2,r2,5
   4741c:	10808204 	addi	r2,r2,520
   47420:	01400404 	movi	r5,16
   47424:	1009883a 	mov	r4,r2
   47428:	0047d380 	call	47d38 <IINCHIP_WRITE>
    }
    return ret;
   4742c:	e0bffa0b 	ldhu	r2,-24(fp)
}
   47430:	e037883a 	mov	sp,fp
   47434:	dfc00117 	ldw	ra,4(sp)
   47438:	df000017 	ldw	fp,0(sp)
   4743c:	dec00204 	addi	sp,sp,8
   47440:	f800283a 	ret

00047444 <recvfrom>:
  TCP mode. This function is used to receive UDP, IP_RAW and MAC_RAW mode, and handle the header as well.

  @return  This function return received data size for success else -1.
  */
uint16 recvfrom(SOCKET s, uint8 * buf, uint16 len, uint8 * addr, uint16 *port)
{
   47444:	defff504 	addi	sp,sp,-44
   47448:	dfc00a15 	stw	ra,40(sp)
   4744c:	df000915 	stw	fp,36(sp)
   47450:	dc000815 	stw	r16,32(sp)
   47454:	df000904 	addi	fp,sp,36
   47458:	2007883a 	mov	r3,r4
   4745c:	e17ffc15 	stw	r5,-16(fp)
   47460:	3005883a 	mov	r2,r6
   47464:	e1fffe15 	stw	r7,-8(fp)
   47468:	e0fffb05 	stb	r3,-20(fp)
   4746c:	e0bffd0d 	sth	r2,-12(fp)
    uint8 head[8];
    uint16 data_len=0;
   47470:	e03ff70d 	sth	zero,-36(fp)
    uint16 ptr=0;
   47474:	e03ff78d 	sth	zero,-34(fp)
    uint32 addrbsb =0;
   47478:	e03ff815 	stw	zero,-32(fp)
    if ( len > 0 )
   4747c:	e0bffd0b 	ldhu	r2,-12(fp)
   47480:	10010c26 	beq	r2,zero,478b4 <recvfrom+0x470>
    {
        ptr     = IINCHIP_READ(Sn_RX_RD0(s) );
   47484:	e0bffb03 	ldbu	r2,-20(fp)
   47488:	1004917a 	slli	r2,r2,5
   4748c:	108a0204 	addi	r2,r2,10248
   47490:	1009883a 	mov	r4,r2
   47494:	0047dc40 	call	47dc4 <IINCHIP_READ>
   47498:	10803fcc 	andi	r2,r2,255
   4749c:	e0bff78d 	sth	r2,-34(fp)
        ptr     = ((ptr & 0x00ff) << 8) + IINCHIP_READ(Sn_RX_RD1(s));
   474a0:	e0bff78b 	ldhu	r2,-34(fp)
   474a4:	1004923a 	slli	r2,r2,8
   474a8:	1021883a 	mov	r16,r2
   474ac:	e0bffb03 	ldbu	r2,-20(fp)
   474b0:	1004917a 	slli	r2,r2,5
   474b4:	108a4204 	addi	r2,r2,10504
   474b8:	1009883a 	mov	r4,r2
   474bc:	0047dc40 	call	47dc4 <IINCHIP_READ>
   474c0:	10803fcc 	andi	r2,r2,255
   474c4:	8085883a 	add	r2,r16,r2
   474c8:	e0bff78d 	sth	r2,-34(fp)
        addrbsb = (uint32)(ptr<<8) +  (s<<5) + 0x18;
   474cc:	e0bff78b 	ldhu	r2,-34(fp)
   474d0:	1004923a 	slli	r2,r2,8
   474d4:	1007883a 	mov	r3,r2
   474d8:	e0bffb03 	ldbu	r2,-20(fp)
   474dc:	1004917a 	slli	r2,r2,5
   474e0:	1885883a 	add	r2,r3,r2
   474e4:	10800604 	addi	r2,r2,24
   474e8:	e0bff815 	stw	r2,-32(fp)

        switch (IINCHIP_READ(Sn_MR(s) ) & 0x07)
   474ec:	e0bffb03 	ldbu	r2,-20(fp)
   474f0:	1004917a 	slli	r2,r2,5
   474f4:	10800204 	addi	r2,r2,8
   474f8:	1009883a 	mov	r4,r2
   474fc:	0047dc40 	call	47dc4 <IINCHIP_READ>
   47500:	10803fcc 	andi	r2,r2,255
   47504:	108001cc 	andi	r2,r2,7
   47508:	10c000e0 	cmpeqi	r3,r2,3
   4750c:	1800591e 	bne	r3,zero,47674 <recvfrom+0x230>
   47510:	10c00120 	cmpeqi	r3,r2,4
   47514:	18009d1e 	bne	r3,zero,4778c <recvfrom+0x348>
   47518:	108000a0 	cmpeqi	r2,r2,2
   4751c:	1000011e 	bne	r2,zero,47524 <recvfrom+0xe0>
                IINCHIP_WRITE( Sn_RX_RD0(s), (uint8)((ptr & 0xff00) >> 8));
                IINCHIP_WRITE( Sn_RX_RD1(s), (uint8)(ptr & 0x00ff));
                break;

            default :
                break;
   47520:	0000d606 	br	4787c <recvfrom+0x438>
        addrbsb = (uint32)(ptr<<8) +  (s<<5) + 0x18;

        switch (IINCHIP_READ(Sn_MR(s) ) & 0x07)
        {
            case Sn_MR_UDP :
                wiz_read_buf(addrbsb, head, 0x08);        
   47524:	e0bff904 	addi	r2,fp,-28
   47528:	01800204 	movi	r6,8
   4752c:	100b883a 	mov	r5,r2
   47530:	e13ff817 	ldw	r4,-32(fp)
   47534:	0047f2c0 	call	47f2c <wiz_read_buf>
                ptr += 8;
   47538:	e0bff78b 	ldhu	r2,-34(fp)
   4753c:	10800204 	addi	r2,r2,8
   47540:	e0bff78d 	sth	r2,-34(fp)
                // read peer's IP address, port number.
                addr[0]  = head[0];
   47544:	e0fff903 	ldbu	r3,-28(fp)
   47548:	e0bffe17 	ldw	r2,-8(fp)
   4754c:	10c00005 	stb	r3,0(r2)
                addr[1]  = head[1];
   47550:	e0bffe17 	ldw	r2,-8(fp)
   47554:	10800044 	addi	r2,r2,1
   47558:	e0fff943 	ldbu	r3,-27(fp)
   4755c:	10c00005 	stb	r3,0(r2)
                addr[2]  = head[2];
   47560:	e0bffe17 	ldw	r2,-8(fp)
   47564:	10800084 	addi	r2,r2,2
   47568:	e0fff983 	ldbu	r3,-26(fp)
   4756c:	10c00005 	stb	r3,0(r2)
                addr[3]  = head[3];
   47570:	e0bffe17 	ldw	r2,-8(fp)
   47574:	108000c4 	addi	r2,r2,3
   47578:	e0fff9c3 	ldbu	r3,-25(fp)
   4757c:	10c00005 	stb	r3,0(r2)
                *port    = head[4];
   47580:	e0bffa03 	ldbu	r2,-24(fp)
   47584:	10c03fcc 	andi	r3,r2,255
   47588:	e0800217 	ldw	r2,8(fp)
   4758c:	10c0000d 	sth	r3,0(r2)
                *port    = (*port << 8) + head[5];
   47590:	e0800217 	ldw	r2,8(fp)
   47594:	1080000b 	ldhu	r2,0(r2)
   47598:	1004923a 	slli	r2,r2,8
   4759c:	1007883a 	mov	r3,r2
   475a0:	e0bffa43 	ldbu	r2,-23(fp)
   475a4:	10803fcc 	andi	r2,r2,255
   475a8:	1885883a 	add	r2,r3,r2
   475ac:	1007883a 	mov	r3,r2
   475b0:	e0800217 	ldw	r2,8(fp)
   475b4:	10c0000d 	sth	r3,0(r2)
                data_len = head[6];
   475b8:	e0bffa83 	ldbu	r2,-22(fp)
   475bc:	10803fcc 	andi	r2,r2,255
   475c0:	e0bff70d 	sth	r2,-36(fp)
                data_len = (data_len << 8) + head[7];
   475c4:	e0bff70b 	ldhu	r2,-36(fp)
   475c8:	1004923a 	slli	r2,r2,8
   475cc:	1007883a 	mov	r3,r2
   475d0:	e0bffac3 	ldbu	r2,-21(fp)
   475d4:	10803fcc 	andi	r2,r2,255
   475d8:	1885883a 	add	r2,r3,r2
   475dc:	e0bff70d 	sth	r2,-36(fp)

                addrbsb = (uint32)(ptr<<8) +  (s<<5) + 0x18;
   475e0:	e0bff78b 	ldhu	r2,-34(fp)
   475e4:	1004923a 	slli	r2,r2,8
   475e8:	1007883a 	mov	r3,r2
   475ec:	e0bffb03 	ldbu	r2,-20(fp)
   475f0:	1004917a 	slli	r2,r2,5
   475f4:	1885883a 	add	r2,r3,r2
   475f8:	10800604 	addi	r2,r2,24
   475fc:	e0bff815 	stw	r2,-32(fp)
                wiz_read_buf(addrbsb, buf, data_len);                
   47600:	e0bff70b 	ldhu	r2,-36(fp)
   47604:	100d883a 	mov	r6,r2
   47608:	e17ffc17 	ldw	r5,-16(fp)
   4760c:	e13ff817 	ldw	r4,-32(fp)
   47610:	0047f2c0 	call	47f2c <wiz_read_buf>
                ptr += data_len;
   47614:	e0fff78b 	ldhu	r3,-34(fp)
   47618:	e0bff70b 	ldhu	r2,-36(fp)
   4761c:	1885883a 	add	r2,r3,r2
   47620:	e0bff78d 	sth	r2,-34(fp)

                IINCHIP_WRITE( Sn_RX_RD0(s), (uint8)((ptr & 0xff00) >> 8));
   47624:	e0bffb03 	ldbu	r2,-20(fp)
   47628:	1004917a 	slli	r2,r2,5
   4762c:	108a0204 	addi	r2,r2,10248
   47630:	1007883a 	mov	r3,r2
   47634:	e0bff78b 	ldhu	r2,-34(fp)
   47638:	1004d23a 	srli	r2,r2,8
   4763c:	10803fcc 	andi	r2,r2,255
   47640:	100b883a 	mov	r5,r2
   47644:	1809883a 	mov	r4,r3
   47648:	0047d380 	call	47d38 <IINCHIP_WRITE>
                IINCHIP_WRITE( Sn_RX_RD1(s), (uint8)(ptr & 0x00ff));
   4764c:	e0bffb03 	ldbu	r2,-20(fp)
   47650:	1004917a 	slli	r2,r2,5
   47654:	108a4204 	addi	r2,r2,10504
   47658:	1007883a 	mov	r3,r2
   4765c:	e0bff78b 	ldhu	r2,-34(fp)
   47660:	10803fcc 	andi	r2,r2,255
   47664:	100b883a 	mov	r5,r2
   47668:	1809883a 	mov	r4,r3
   4766c:	0047d380 	call	47d38 <IINCHIP_WRITE>
                break;
   47670:	00008206 	br	4787c <recvfrom+0x438>

            case Sn_MR_IPRAW :
                wiz_read_buf(addrbsb, head, 0x06);        
   47674:	e0bff904 	addi	r2,fp,-28
   47678:	01800184 	movi	r6,6
   4767c:	100b883a 	mov	r5,r2
   47680:	e13ff817 	ldw	r4,-32(fp)
   47684:	0047f2c0 	call	47f2c <wiz_read_buf>
                ptr += 6;
   47688:	e0bff78b 	ldhu	r2,-34(fp)
   4768c:	10800184 	addi	r2,r2,6
   47690:	e0bff78d 	sth	r2,-34(fp)
                addr[0]  = head[0];
   47694:	e0fff903 	ldbu	r3,-28(fp)
   47698:	e0bffe17 	ldw	r2,-8(fp)
   4769c:	10c00005 	stb	r3,0(r2)
                addr[1]  = head[1];
   476a0:	e0bffe17 	ldw	r2,-8(fp)
   476a4:	10800044 	addi	r2,r2,1
   476a8:	e0fff943 	ldbu	r3,-27(fp)
   476ac:	10c00005 	stb	r3,0(r2)
                addr[2]  = head[2];
   476b0:	e0bffe17 	ldw	r2,-8(fp)
   476b4:	10800084 	addi	r2,r2,2
   476b8:	e0fff983 	ldbu	r3,-26(fp)
   476bc:	10c00005 	stb	r3,0(r2)
                addr[3]  = head[3];
   476c0:	e0bffe17 	ldw	r2,-8(fp)
   476c4:	108000c4 	addi	r2,r2,3
   476c8:	e0fff9c3 	ldbu	r3,-25(fp)
   476cc:	10c00005 	stb	r3,0(r2)
                data_len = head[4];
   476d0:	e0bffa03 	ldbu	r2,-24(fp)
   476d4:	10803fcc 	andi	r2,r2,255
   476d8:	e0bff70d 	sth	r2,-36(fp)
                data_len = (data_len << 8) + head[5];
   476dc:	e0bff70b 	ldhu	r2,-36(fp)
   476e0:	1004923a 	slli	r2,r2,8
   476e4:	1007883a 	mov	r3,r2
   476e8:	e0bffa43 	ldbu	r2,-23(fp)
   476ec:	10803fcc 	andi	r2,r2,255
   476f0:	1885883a 	add	r2,r3,r2
   476f4:	e0bff70d 	sth	r2,-36(fp)

                addrbsb  = (uint32)(ptr<<8) +  (s<<5) + 0x18;
   476f8:	e0bff78b 	ldhu	r2,-34(fp)
   476fc:	1004923a 	slli	r2,r2,8
   47700:	1007883a 	mov	r3,r2
   47704:	e0bffb03 	ldbu	r2,-20(fp)
   47708:	1004917a 	slli	r2,r2,5
   4770c:	1885883a 	add	r2,r3,r2
   47710:	10800604 	addi	r2,r2,24
   47714:	e0bff815 	stw	r2,-32(fp)
                wiz_read_buf(addrbsb, buf, data_len);        
   47718:	e0bff70b 	ldhu	r2,-36(fp)
   4771c:	100d883a 	mov	r6,r2
   47720:	e17ffc17 	ldw	r5,-16(fp)
   47724:	e13ff817 	ldw	r4,-32(fp)
   47728:	0047f2c0 	call	47f2c <wiz_read_buf>
                ptr += data_len;
   4772c:	e0fff78b 	ldhu	r3,-34(fp)
   47730:	e0bff70b 	ldhu	r2,-36(fp)
   47734:	1885883a 	add	r2,r3,r2
   47738:	e0bff78d 	sth	r2,-34(fp)

                IINCHIP_WRITE( Sn_RX_RD0(s), (uint8)((ptr & 0xff00) >> 8));
   4773c:	e0bffb03 	ldbu	r2,-20(fp)
   47740:	1004917a 	slli	r2,r2,5
   47744:	108a0204 	addi	r2,r2,10248
   47748:	1007883a 	mov	r3,r2
   4774c:	e0bff78b 	ldhu	r2,-34(fp)
   47750:	1004d23a 	srli	r2,r2,8
   47754:	10803fcc 	andi	r2,r2,255
   47758:	100b883a 	mov	r5,r2
   4775c:	1809883a 	mov	r4,r3
   47760:	0047d380 	call	47d38 <IINCHIP_WRITE>
                IINCHIP_WRITE( Sn_RX_RD1(s), (uint8)(ptr & 0x00ff));
   47764:	e0bffb03 	ldbu	r2,-20(fp)
   47768:	1004917a 	slli	r2,r2,5
   4776c:	108a4204 	addi	r2,r2,10504
   47770:	1007883a 	mov	r3,r2
   47774:	e0bff78b 	ldhu	r2,-34(fp)
   47778:	10803fcc 	andi	r2,r2,255
   4777c:	100b883a 	mov	r5,r2
   47780:	1809883a 	mov	r4,r3
   47784:	0047d380 	call	47d38 <IINCHIP_WRITE>
                break;
   47788:	00003c06 	br	4787c <recvfrom+0x438>

            case Sn_MR_MACRAW :
                wiz_read_buf(addrbsb, head, 0x02);
   4778c:	e0bff904 	addi	r2,fp,-28
   47790:	01800084 	movi	r6,2
   47794:	100b883a 	mov	r5,r2
   47798:	e13ff817 	ldw	r4,-32(fp)
   4779c:	0047f2c0 	call	47f2c <wiz_read_buf>
                ptr+=2;
   477a0:	e0bff78b 	ldhu	r2,-34(fp)
   477a4:	10800084 	addi	r2,r2,2
   477a8:	e0bff78d 	sth	r2,-34(fp)
                data_len = head[0];
   477ac:	e0bff903 	ldbu	r2,-28(fp)
   477b0:	10803fcc 	andi	r2,r2,255
   477b4:	e0bff70d 	sth	r2,-36(fp)
                data_len = (data_len<<8) + head[1] - 2;
   477b8:	e0bff70b 	ldhu	r2,-36(fp)
   477bc:	1004923a 	slli	r2,r2,8
   477c0:	1007883a 	mov	r3,r2
   477c4:	e0bff943 	ldbu	r2,-27(fp)
   477c8:	10803fcc 	andi	r2,r2,255
   477cc:	1885883a 	add	r2,r3,r2
   477d0:	10bfff84 	addi	r2,r2,-2
   477d4:	e0bff70d 	sth	r2,-36(fp)
                if(data_len > 1514)
   477d8:	e0bff70b 	ldhu	r2,-36(fp)
   477dc:	10817af0 	cmpltui	r2,r2,1515
   477e0:	1000011e 	bne	r2,zero,477e8 <recvfrom+0x3a4>
                {
                    while(1);
   477e4:	003fff06 	br	477e4 <__reset+0xfffc67e4>
                }

                addrbsb  = (uint32)(ptr<<8) +  (s<<5) + 0x18;
   477e8:	e0bff78b 	ldhu	r2,-34(fp)
   477ec:	1004923a 	slli	r2,r2,8
   477f0:	1007883a 	mov	r3,r2
   477f4:	e0bffb03 	ldbu	r2,-20(fp)
   477f8:	1004917a 	slli	r2,r2,5
   477fc:	1885883a 	add	r2,r3,r2
   47800:	10800604 	addi	r2,r2,24
   47804:	e0bff815 	stw	r2,-32(fp)
                wiz_read_buf(addrbsb, buf, data_len);
   47808:	e0bff70b 	ldhu	r2,-36(fp)
   4780c:	100d883a 	mov	r6,r2
   47810:	e17ffc17 	ldw	r5,-16(fp)
   47814:	e13ff817 	ldw	r4,-32(fp)
   47818:	0047f2c0 	call	47f2c <wiz_read_buf>
                ptr += data_len;
   4781c:	e0fff78b 	ldhu	r3,-34(fp)
   47820:	e0bff70b 	ldhu	r2,-36(fp)
   47824:	1885883a 	add	r2,r3,r2
   47828:	e0bff78d 	sth	r2,-34(fp)

                IINCHIP_WRITE( Sn_RX_RD0(s), (uint8)((ptr & 0xff00) >> 8));
   4782c:	e0bffb03 	ldbu	r2,-20(fp)
   47830:	1004917a 	slli	r2,r2,5
   47834:	108a0204 	addi	r2,r2,10248
   47838:	1007883a 	mov	r3,r2
   4783c:	e0bff78b 	ldhu	r2,-34(fp)
   47840:	1004d23a 	srli	r2,r2,8
   47844:	10803fcc 	andi	r2,r2,255
   47848:	100b883a 	mov	r5,r2
   4784c:	1809883a 	mov	r4,r3
   47850:	0047d380 	call	47d38 <IINCHIP_WRITE>
                IINCHIP_WRITE( Sn_RX_RD1(s), (uint8)(ptr & 0x00ff));
   47854:	e0bffb03 	ldbu	r2,-20(fp)
   47858:	1004917a 	slli	r2,r2,5
   4785c:	108a4204 	addi	r2,r2,10504
   47860:	1007883a 	mov	r3,r2
   47864:	e0bff78b 	ldhu	r2,-34(fp)
   47868:	10803fcc 	andi	r2,r2,255
   4786c:	100b883a 	mov	r5,r2
   47870:	1809883a 	mov	r4,r3
   47874:	0047d380 	call	47d38 <IINCHIP_WRITE>
                break;
   47878:	0001883a 	nop

            default :
                break;
        }
        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_RECV);
   4787c:	e0bffb03 	ldbu	r2,-20(fp)
   47880:	1004917a 	slli	r2,r2,5
   47884:	10804204 	addi	r2,r2,264
   47888:	01401004 	movi	r5,64
   4788c:	1009883a 	mov	r4,r2
   47890:	0047d380 	call	47d38 <IINCHIP_WRITE>

        /* wait to process the command... */
        while( IINCHIP_READ( Sn_CR(s)) ) ;
   47894:	0001883a 	nop
   47898:	e0bffb03 	ldbu	r2,-20(fp)
   4789c:	1004917a 	slli	r2,r2,5
   478a0:	10804204 	addi	r2,r2,264
   478a4:	1009883a 	mov	r4,r2
   478a8:	0047dc40 	call	47dc4 <IINCHIP_READ>
   478ac:	10803fcc 	andi	r2,r2,255
   478b0:	103ff91e 	bne	r2,zero,47898 <__reset+0xfffc6898>
        /* ------- */
    }
    return data_len;
   478b4:	e0bff70b 	ldhu	r2,-36(fp)
}
   478b8:	e6ffff04 	addi	sp,fp,-4
   478bc:	dfc00217 	ldw	ra,8(sp)
   478c0:	df000117 	ldw	fp,4(sp)
   478c4:	dc000017 	ldw	r16,0(sp)
   478c8:	dec00304 	addi	sp,sp,12
   478cc:	f800283a 	ret

000478d0 <find_index_old>:


// string
// return position
int find_index_old(char * str, char ** array, int length)
{
   478d0:	defffa04 	addi	sp,sp,-24
   478d4:	dfc00515 	stw	ra,20(sp)
   478d8:	df000415 	stw	fp,16(sp)
   478dc:	df000404 	addi	fp,sp,16
   478e0:	e13ffd15 	stw	r4,-12(fp)
   478e4:	e17ffe15 	stw	r5,-8(fp)
   478e8:	e1bfff15 	stw	r6,-4(fp)
    int i ;
    for (i = 0; i < length; i++)
   478ec:	e03ffc15 	stw	zero,-16(fp)
   478f0:	00001006 	br	47934 <find_index_old+0x64>
    {
        if (strcmp(str, array[i]) == 0)
   478f4:	e0bffc17 	ldw	r2,-16(fp)
   478f8:	1085883a 	add	r2,r2,r2
   478fc:	1085883a 	add	r2,r2,r2
   47900:	1007883a 	mov	r3,r2
   47904:	e0bffe17 	ldw	r2,-8(fp)
   47908:	10c5883a 	add	r2,r2,r3
   4790c:	10800017 	ldw	r2,0(r2)
   47910:	100b883a 	mov	r5,r2
   47914:	e13ffd17 	ldw	r4,-12(fp)
   47918:	00491f80 	call	491f8 <strcmp>
   4791c:	1000021e 	bne	r2,zero,47928 <find_index_old+0x58>
            return i;
   47920:	e0bffc17 	ldw	r2,-16(fp)
   47924:	00000706 	br	47944 <find_index_old+0x74>
// string
// return position
int find_index_old(char * str, char ** array, int length)
{
    int i ;
    for (i = 0; i < length; i++)
   47928:	e0bffc17 	ldw	r2,-16(fp)
   4792c:	10800044 	addi	r2,r2,1
   47930:	e0bffc15 	stw	r2,-16(fp)
   47934:	e0fffc17 	ldw	r3,-16(fp)
   47938:	e0bfff17 	ldw	r2,-4(fp)
   4793c:	18bfed16 	blt	r3,r2,478f4 <__reset+0xfffc68f4>
    {
        if (strcmp(str, array[i]) == 0)
            return i;
    }
    return -1;
   47940:	00bfffc4 	movi	r2,-1
}
   47944:	e037883a 	mov	sp,fp
   47948:	dfc00117 	ldw	ra,4(sp)
   4794c:	df000017 	ldw	fp,0(sp)
   47950:	dec00204 	addi	sp,sp,8
   47954:	f800283a 	ret

00047958 <timer_initial>:
#include "user_interrupt.h"

alt_u32 timer_isr_context;

void timer_initial(void)
{
   47958:	defffc04 	addi	sp,sp,-16
   4795c:	dfc00315 	stw	ra,12(sp)
   47960:	df000215 	stw	fp,8(sp)
   47964:	df000204 	addi	fp,sp,8
    // 1s/8-1
    // 100ms/8-1 = 0xbebc1f
    // 10ms/8-1 = 0x1312cf
    // 1ms/10-1 = 0xf4240
    void *isr_context_ptr = (void *)&timer_isr_context;
   47968:	d0a01a04 	addi	r2,gp,-32664
   4796c:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(LED_TIMER_BASE, 0x000f);
   47970:	00c003c4 	movi	r3,15
   47974:	00800234 	movhi	r2,8
   47978:	10882b04 	addi	r2,r2,8364
   4797c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(LED_TIMER_BASE, 0x4240);
   47980:	00d09004 	movi	r3,16960
   47984:	00800234 	movhi	r2,8
   47988:	10882a04 	addi	r2,r2,8360
   4798c:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(
   47990:	00c001c4 	movi	r3,7
   47994:	00800234 	movhi	r2,8
   47998:	10882904 	addi	r2,r2,8356
   4799c:	10c00035 	stwio	r3,0(r2)
        LED_TIMER_BASE,
        ALTERA_AVALON_TIMER_CONTROL_START_MSK |
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);

    alt_ic_isr_register(
   479a0:	d8000015 	stw	zero,0(sp)
   479a4:	e1ffff17 	ldw	r7,-4(fp)
   479a8:	01800134 	movhi	r6,4
   479ac:	319e7504 	addi	r6,r6,31188
   479b0:	01400084 	movi	r5,2
   479b4:	0009883a 	mov	r4,zero
   479b8:	00494f80 	call	494f8 <alt_ic_isr_register>
        LED_TIMER_IRQ_INTERRUPT_CONTROLLER_ID,
        LED_TIMER_IRQ,
        timer_isr_interrupt,
        isr_context_ptr,
        0x00);
}
   479bc:	0001883a 	nop
   479c0:	e037883a 	mov	sp,fp
   479c4:	dfc00117 	ldw	ra,4(sp)
   479c8:	df000017 	ldw	fp,0(sp)
   479cc:	dec00204 	addi	sp,sp,8
   479d0:	f800283a 	ret

000479d4 <timer_isr_interrupt>:

void timer_isr_interrupt(void *isr_context, alt_u32 id)
{
   479d4:	defffc04 	addi	sp,sp,-16
   479d8:	dfc00315 	stw	ra,12(sp)
   479dc:	df000215 	stw	fp,8(sp)
   479e0:	df000204 	addi	fp,sp,8
   479e4:	e13ffe15 	stw	r4,-8(fp)
   479e8:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(LED_TIMER_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK);
   479ec:	00ffff84 	movi	r3,-2
   479f0:	00800234 	movhi	r2,8
   479f4:	10882804 	addi	r2,r2,8352
   479f8:	10c00035 	stwio	r3,0(r2)

    if(led_time_flag.cnt_1s == 50)
   479fc:	d0a01603 	ldbu	r2,-32680(gp)
   47a00:	10803fcc 	andi	r2,r2,255
   47a04:	10800c98 	cmpnei	r2,r2,50
   47a08:	10000d1e 	bne	r2,zero,47a40 <timer_isr_interrupt+0x6c>
    {
        led_time_flag.cnt_1s             = 0;
   47a0c:	d0201605 	stb	zero,-32680(gp)
        led_time_flag.status_led_1s_flag = 0x01;
   47a10:	00800044 	movi	r2,1
   47a14:	d0a01645 	stb	r2,-32679(gp)

        led_time_flag.power_led_value = (~led_time_flag.power_led_value) & 0x01;
   47a18:	d0a01543 	ldbu	r2,-32683(gp)
   47a1c:	10803fcc 	andi	r2,r2,255
   47a20:	1080004c 	andi	r2,r2,1
   47a24:	1005003a 	cmpeq	r2,r2,zero
   47a28:	d0a01545 	stb	r2,-32683(gp)
        led_power_light(led_time_flag.power_led_value);
   47a2c:	d0a01543 	ldbu	r2,-32683(gp)
   47a30:	10803fcc 	andi	r2,r2,255
   47a34:	1009883a 	mov	r4,r2
   47a38:	00423bc0 	call	423bc <led_power_light>
   47a3c:	00000306 	br	47a4c <timer_isr_interrupt+0x78>
    }
    else
        led_time_flag.cnt_1s++;
   47a40:	d0a01603 	ldbu	r2,-32680(gp)
   47a44:	10800044 	addi	r2,r2,1
   47a48:	d0a01605 	stb	r2,-32680(gp)

    if(led_time_flag.cnt_300ms == 15)
   47a4c:	d0a016c3 	ldbu	r2,-32677(gp)
   47a50:	10803fcc 	andi	r2,r2,255
   47a54:	108003d8 	cmpnei	r2,r2,15
   47a58:	1000041e 	bne	r2,zero,47a6c <timer_isr_interrupt+0x98>
    {
        led_time_flag.cnt_300ms             = 0;
   47a5c:	d02016c5 	stb	zero,-32677(gp)
        led_time_flag.status_led_300ms_flag = 0x01;
   47a60:	00800044 	movi	r2,1
   47a64:	d0a01685 	stb	r2,-32678(gp)
   47a68:	00000306 	br	47a78 <timer_isr_interrupt+0xa4>
    }
    else
        led_time_flag.cnt_300ms++;
   47a6c:	d0a016c3 	ldbu	r2,-32677(gp)
   47a70:	10800044 	addi	r2,r2,1
   47a74:	d0a016c5 	stb	r2,-32677(gp)

    if(led_time_flag.cnt_30ms == 3)
   47a78:	d0a01703 	ldbu	r2,-32676(gp)
   47a7c:	10803fcc 	andi	r2,r2,255
   47a80:	108000d8 	cmpnei	r2,r2,3
   47a84:	1000201e 	bne	r2,zero,47b08 <timer_isr_interrupt+0x134>
    {
        alarm_region.last_io_value[0] = rd_switch_io_value();
   47a88:	0045bf00 	call	45bf0 <rd_switch_io_value>
   47a8c:	1007883a 	mov	r3,r2
   47a90:	008001b4 	movhi	r2,6
   47a94:	10a48a04 	addi	r2,r2,-28120
   47a98:	10c00005 	stb	r3,0(r2)
        if(alarm_region.last_io_value[0] != alarm_region.last_io_value[1])
   47a9c:	008001b4 	movhi	r2,6
   47aa0:	10a48a04 	addi	r2,r2,-28120
   47aa4:	10c00003 	ldbu	r3,0(r2)
   47aa8:	008001b4 	movhi	r2,6
   47aac:	10a48a04 	addi	r2,r2,-28120
   47ab0:	10800043 	ldbu	r2,1(r2)
   47ab4:	18c03fcc 	andi	r3,r3,255
   47ab8:	10803fcc 	andi	r2,r2,255
   47abc:	18800a26 	beq	r3,r2,47ae8 <timer_isr_interrupt+0x114>
        {
            alarm_region.change_region_flag  = 0x01;
   47ac0:	008001b4 	movhi	r2,6
   47ac4:	10a48a04 	addi	r2,r2,-28120
   47ac8:	00c00044 	movi	r3,1
   47acc:	10c00085 	stb	r3,2(r2)
            alarm_region.change_region_value = alarm_region.last_io_value[0];
   47ad0:	008001b4 	movhi	r2,6
   47ad4:	10a48a04 	addi	r2,r2,-28120
   47ad8:	10c00003 	ldbu	r3,0(r2)
   47adc:	008001b4 	movhi	r2,6
   47ae0:	10a48a04 	addi	r2,r2,-28120
   47ae4:	10c000c5 	stb	r3,3(r2)
        }
        alarm_region.last_io_value[1] = alarm_region.last_io_value[0];
   47ae8:	008001b4 	movhi	r2,6
   47aec:	10a48a04 	addi	r2,r2,-28120
   47af0:	10c00003 	ldbu	r3,0(r2)
   47af4:	008001b4 	movhi	r2,6
   47af8:	10a48a04 	addi	r2,r2,-28120
   47afc:	10c00045 	stb	r3,1(r2)
        led_time_flag.cnt_30ms        = 0;
   47b00:	d0201705 	stb	zero,-32676(gp)
    }
    else
        led_time_flag.cnt_30ms++;
}
   47b04:	00000306 	br	47b14 <timer_isr_interrupt+0x140>
        }
        alarm_region.last_io_value[1] = alarm_region.last_io_value[0];
        led_time_flag.cnt_30ms        = 0;
    }
    else
        led_time_flag.cnt_30ms++;
   47b08:	d0a01703 	ldbu	r2,-32676(gp)
   47b0c:	10800044 	addi	r2,r2,1
   47b10:	d0a01705 	stb	r2,-32676(gp)
}
   47b14:	0001883a 	nop
   47b18:	e037883a 	mov	sp,fp
   47b1c:	dfc00117 	ldw	ra,4(sp)
   47b20:	df000017 	ldw	fp,0(sp)
   47b24:	dec00204 	addi	sp,sp,8
   47b28:	f800283a 	ret

00047b2c <watchdog_init>:
////    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(ALARM_SELECT_BASE, 0x00);
//    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(ALARM_SELECT_BASE, 0xff);
//}

void watchdog_init(void)
{
   47b2c:	deffff04 	addi	sp,sp,-4
   47b30:	df000015 	stw	fp,0(sp)
   47b34:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_TIMER_CONTROL(WATCHDOG_BASE, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
   47b38:	00c00104 	movi	r3,4
   47b3c:	00800234 	movhi	r2,8
   47b40:	10882104 	addi	r2,r2,8324
   47b44:	10c00035 	stwio	r3,0(r2)
}
   47b48:	0001883a 	nop
   47b4c:	e037883a 	mov	sp,fp
   47b50:	df000017 	ldw	fp,0(sp)
   47b54:	dec00104 	addi	sp,sp,4
   47b58:	f800283a 	ret

00047b5c <watchdog_feed>:

void watchdog_feed(void)
{
   47b5c:	deffff04 	addi	sp,sp,-4
   47b60:	df000015 	stw	fp,0(sp)
   47b64:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_TIMER_PERIODL(WATCHDOG_BASE, 0x1234);
   47b68:	00c48d04 	movi	r3,4660
   47b6c:	00800234 	movhi	r2,8
   47b70:	10882204 	addi	r2,r2,8328
   47b74:	10c00035 	stwio	r3,0(r2)
}
   47b78:	0001883a 	nop
   47b7c:	e037883a 	mov	sp,fp
   47b80:	df000017 	ldw	fp,0(sp)
   47b84:	dec00104 	addi	sp,sp,4
   47b88:	f800283a 	ret

00047b8c <IINCHIP_CSoff>:

static uint16 SSIZE[MAX_SOCK_NUM]; /**< Max Tx buffer size by each channel */
static uint16 RSIZE[MAX_SOCK_NUM]; /**< Max Rx buffer size by each channel */

void IINCHIP_CSoff()
{
   47b8c:	deffff04 	addi	sp,sp,-4
   47b90:	df000015 	stw	fp,0(sp)
   47b94:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DATA(W5500_CS_BASE, 0);
   47b98:	0007883a 	mov	r3,zero
   47b9c:	00800234 	movhi	r2,8
   47ba0:	10886404 	addi	r2,r2,8592
   47ba4:	10c00035 	stwio	r3,0(r2)
}
   47ba8:	0001883a 	nop
   47bac:	e037883a 	mov	sp,fp
   47bb0:	df000017 	ldw	fp,0(sp)
   47bb4:	dec00104 	addi	sp,sp,4
   47bb8:	f800283a 	ret

00047bbc <IINCHIP_CSon>:

void IINCHIP_CSon()
{
   47bbc:	deffff04 	addi	sp,sp,-4
   47bc0:	df000015 	stw	fp,0(sp)
   47bc4:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DATA(W5500_CS_BASE, 1);
   47bc8:	00c00044 	movi	r3,1
   47bcc:	00800234 	movhi	r2,8
   47bd0:	10886404 	addi	r2,r2,8592
   47bd4:	10c00035 	stwio	r3,0(r2)
}
   47bd8:	0001883a 	nop
   47bdc:	e037883a 	mov	sp,fp
   47be0:	df000017 	ldw	fp,0(sp)
   47be4:	dec00104 	addi	sp,sp,4
   47be8:	f800283a 	ret

00047bec <getIINCHIP_RxMAX>:


uint16 getIINCHIP_RxMAX(uint8 s)
{
   47bec:	defffe04 	addi	sp,sp,-8
   47bf0:	df000115 	stw	fp,4(sp)
   47bf4:	df000104 	addi	fp,sp,4
   47bf8:	2005883a 	mov	r2,r4
   47bfc:	e0bfff05 	stb	r2,-4(fp)
    return RSIZE[s];
   47c00:	e0ffff03 	ldbu	r3,-4(fp)
   47c04:	008001b4 	movhi	r2,6
   47c08:	10b34904 	addi	r2,r2,-13020
   47c0c:	18c7883a 	add	r3,r3,r3
   47c10:	10c5883a 	add	r2,r2,r3
   47c14:	1080000b 	ldhu	r2,0(r2)
}
   47c18:	e037883a 	mov	sp,fp
   47c1c:	df000017 	ldw	fp,0(sp)
   47c20:	dec00104 	addi	sp,sp,4
   47c24:	f800283a 	ret

00047c28 <getIINCHIP_TxMAX>:
uint16 getIINCHIP_TxMAX(uint8 s)
{
   47c28:	defffe04 	addi	sp,sp,-8
   47c2c:	df000115 	stw	fp,4(sp)
   47c30:	df000104 	addi	fp,sp,4
   47c34:	2005883a 	mov	r2,r4
   47c38:	e0bfff05 	stb	r2,-4(fp)
    return SSIZE[s];
   47c3c:	e0ffff03 	ldbu	r3,-4(fp)
   47c40:	008001b4 	movhi	r2,6
   47c44:	10b34504 	addi	r2,r2,-13036
   47c48:	18c7883a 	add	r3,r3,r3
   47c4c:	10c5883a 	add	r2,r2,r3
   47c50:	1080000b 	ldhu	r2,0(r2)
}
   47c54:	e037883a 	mov	sp,fp
   47c58:	df000017 	ldw	fp,0(sp)
   47c5c:	dec00104 	addi	sp,sp,4
   47c60:	f800283a 	ret

00047c64 <IINCHIP_SpiSendData>:

unsigned char IINCHIP_SpiSendData(uint16 dat)
{
   47c64:	defffd04 	addi	sp,sp,-12
   47c68:	dfc00215 	stw	ra,8(sp)
   47c6c:	df000115 	stw	fp,4(sp)
   47c70:	df000104 	addi	fp,sp,4
   47c74:	2005883a 	mov	r2,r4
   47c78:	e0bfff0d 	sth	r2,-4(fp)
    // return(alt_avalon_spi_command(SPI_BASE, 0, 1, &dat, 0, NULL, 0));
    altera_avalon_fifo_write_fifo(SPIWR_FIFO_IN_BASE, SPIWR_FIFO_IN_CSR_BASE, (dat>>16) + (dat<<16));
   47c7c:	e0bfff0b 	ldhu	r2,-4(fp)
   47c80:	1007d43a 	srai	r3,r2,16
   47c84:	e0bfff0b 	ldhu	r2,-4(fp)
   47c88:	1004943a 	slli	r2,r2,16
   47c8c:	1885883a 	add	r2,r3,r2
   47c90:	100d883a 	mov	r6,r2
   47c94:	01400234 	movhi	r5,8
   47c98:	29483804 	addi	r5,r5,8416
   47c9c:	01000234 	movhi	r4,8
   47ca0:	21087804 	addi	r4,r4,8672
   47ca4:	004a8280 	call	4a828 <altera_avalon_fifo_write_fifo>
    return 0;
   47ca8:	0005883a 	mov	r2,zero
}
   47cac:	e037883a 	mov	sp,fp
   47cb0:	dfc00117 	ldw	ra,4(sp)
   47cb4:	df000017 	ldw	fp,0(sp)
   47cb8:	dec00204 	addi	sp,sp,8
   47cbc:	f800283a 	ret

00047cc0 <SPI_I2S_ReceiveData>:

unsigned char SPI_I2S_ReceiveData()
{
   47cc0:	defffb04 	addi	sp,sp,-20
   47cc4:	dfc00415 	stw	ra,16(sp)
   47cc8:	df000315 	stw	fp,12(sp)
   47ccc:	df000304 	addi	fp,sp,12
    //unsigned char rxbuf = 0;
    //alt_avalon_spi_command(SPI_BASE, 0, 0, NULL, 1, &rxbuf, 0);
    //return rxbuf;
	int num;
	unsigned int data;
	unsigned char rxbuf = 0;
   47cd0:	e03ffd05 	stb	zero,-12(fp)
	num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);
   47cd4:	01000234 	movhi	r4,8
   47cd8:	21083004 	addi	r4,r4,8384
   47cdc:	004a68c0 	call	4a68c <altera_avalon_fifo_read_level>
   47ce0:	e0bffe15 	stw	r2,-8(fp)
	if(num > 0)
   47ce4:	e0bffe17 	ldw	r2,-8(fp)
   47ce8:	0080090e 	bge	zero,r2,47d10 <SPI_I2S_ReceiveData+0x50>
	{
		data = altera_avalon_fifo_read_fifo(SPIRD_FIFO_OUT_BASE, SPIRD_FIFO_IN_CSR_BASE);
   47cec:	01400234 	movhi	r5,8
   47cf0:	29483004 	addi	r5,r5,8384
   47cf4:	01000234 	movhi	r4,8
   47cf8:	21087604 	addi	r4,r4,8664
   47cfc:	004a8ec0 	call	4a8ec <altera_avalon_fifo_read_fifo>
   47d00:	e0bfff15 	stw	r2,-4(fp)
		rxbuf = (unsigned char)( ((data>>16) + (data<<16))& 0xff);
   47d04:	e0bfff17 	ldw	r2,-4(fp)
   47d08:	1004d43a 	srli	r2,r2,16
   47d0c:	e0bffd05 	stb	r2,-12(fp)
	}

	num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);
   47d10:	01000234 	movhi	r4,8
   47d14:	21083004 	addi	r4,r4,8384
   47d18:	004a68c0 	call	4a68c <altera_avalon_fifo_read_level>
   47d1c:	e0bffe15 	stw	r2,-8(fp)
	return rxbuf;
   47d20:	e0bffd03 	ldbu	r2,-12(fp)
}
   47d24:	e037883a 	mov	sp,fp
   47d28:	dfc00117 	ldw	ra,4(sp)
   47d2c:	df000017 	ldw	fp,0(sp)
   47d30:	dec00204 	addi	sp,sp,8
   47d34:	f800283a 	ret

00047d38 <IINCHIP_WRITE>:

void IINCHIP_WRITE( uint32 addrbsb,  uint8 data)
{
   47d38:	defffc04 	addi	sp,sp,-16
   47d3c:	dfc00315 	stw	ra,12(sp)
   47d40:	df000215 	stw	fp,8(sp)
   47d44:	df000204 	addi	fp,sp,8
   47d48:	e13ffe15 	stw	r4,-8(fp)
   47d4c:	2805883a 	mov	r2,r5
   47d50:	e0bfff05 	stb	r2,-4(fp)
    IINCHIP_ISR_DISABLE();                        // Interrupt Service Routine Disable
    IINCHIP_CSoff();                              // CS=0, SPI start
   47d54:	0047b8c0 	call	47b8c <IINCHIP_CSoff>
    IINCHIP_SpiSendData( (addrbsb & 0x00FF0000)>>16);// Address byte 1
   47d58:	e0bffe17 	ldw	r2,-8(fp)
   47d5c:	10803fec 	andhi	r2,r2,255
   47d60:	1004d43a 	srli	r2,r2,16
   47d64:	1009883a 	mov	r4,r2
   47d68:	0047c640 	call	47c64 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x0000FF00)>> 8);// Address byte 2
   47d6c:	e0bffe17 	ldw	r2,-8(fp)
   47d70:	10bfc00c 	andi	r2,r2,65280
   47d74:	1004d23a 	srli	r2,r2,8
   47d78:	10bfffcc 	andi	r2,r2,65535
   47d7c:	1009883a 	mov	r4,r2
   47d80:	0047c640 	call	47c64 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x000000F8) + 4);    // Data write command and Write data length 1
   47d84:	e0bffe17 	ldw	r2,-8(fp)
   47d88:	10803e0c 	andi	r2,r2,248
   47d8c:	10800104 	addi	r2,r2,4
   47d90:	10bfffcc 	andi	r2,r2,65535
   47d94:	1009883a 	mov	r4,r2
   47d98:	0047c640 	call	47c64 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData(data);                    // Data write (write 1byte data)
   47d9c:	e0bfff03 	ldbu	r2,-4(fp)
   47da0:	1009883a 	mov	r4,r2
   47da4:	0047c640 	call	47c64 <IINCHIP_SpiSendData>
    IINCHIP_CSon();                               // CS=1,  SPI end
   47da8:	0047bbc0 	call	47bbc <IINCHIP_CSon>
    IINCHIP_ISR_ENABLE();                         // Interrupt Service Routine Enable
}
   47dac:	0001883a 	nop
   47db0:	e037883a 	mov	sp,fp
   47db4:	dfc00117 	ldw	ra,4(sp)
   47db8:	df000017 	ldw	fp,0(sp)
   47dbc:	dec00204 	addi	sp,sp,8
   47dc0:	f800283a 	ret

00047dc4 <IINCHIP_READ>:

uint8 IINCHIP_READ(uint32 addrbsb)
{
   47dc4:	defffc04 	addi	sp,sp,-16
   47dc8:	dfc00315 	stw	ra,12(sp)
   47dcc:	df000215 	stw	fp,8(sp)
   47dd0:	df000204 	addi	fp,sp,8
   47dd4:	e13fff15 	stw	r4,-4(fp)
	uint16 num;
    uint8 data = 0;
   47dd8:	e03ffe85 	stb	zero,-6(fp)
    IINCHIP_ISR_DISABLE();                        // Interrupt Service Routine Disable
    IINCHIP_CSoff();                              // CS=0, SPI start
   47ddc:	0047b8c0 	call	47b8c <IINCHIP_CSoff>
    IINCHIP_SpiSendData( (addrbsb & 0x00FF0000)>>16);// Address byte 1
   47de0:	e0bfff17 	ldw	r2,-4(fp)
   47de4:	10803fec 	andhi	r2,r2,255
   47de8:	1004d43a 	srli	r2,r2,16
   47dec:	1009883a 	mov	r4,r2
   47df0:	0047c640 	call	47c64 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x0000FF00)>> 8);// Address byte 2
   47df4:	e0bfff17 	ldw	r2,-4(fp)
   47df8:	10bfc00c 	andi	r2,r2,65280
   47dfc:	1004d23a 	srli	r2,r2,8
   47e00:	10bfffcc 	andi	r2,r2,65535
   47e04:	1009883a 	mov	r4,r2
   47e08:	0047c640 	call	47c64 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x000000F8))    ;// Data read command and Read data length 1
   47e0c:	e0bfff17 	ldw	r2,-4(fp)
   47e10:	10803e0c 	andi	r2,r2,248
   47e14:	1009883a 	mov	r4,r2
   47e18:	0047c640 	call	47c64 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData(1);
   47e1c:	01000044 	movi	r4,1
   47e20:	0047c640 	call	47c64 <IINCHIP_SpiSendData>
    for( num = 0; num < 2; num++ ) ;
   47e24:	e03ffe0d 	sth	zero,-8(fp)
   47e28:	00000306 	br	47e38 <IINCHIP_READ+0x74>
   47e2c:	e0bffe0b 	ldhu	r2,-8(fp)
   47e30:	10800044 	addi	r2,r2,1
   47e34:	e0bffe0d 	sth	r2,-8(fp)
   47e38:	e0bffe0b 	ldhu	r2,-8(fp)
   47e3c:	108000b0 	cmpltui	r2,r2,2
   47e40:	103ffa1e 	bne	r2,zero,47e2c <__reset+0xfffc6e2c>
    data = SPI_I2S_ReceiveData();
   47e44:	0047cc00 	call	47cc0 <SPI_I2S_ReceiveData>
   47e48:	e0bffe85 	stb	r2,-6(fp)
    IINCHIP_CSon();                               // CS=1,  SPI end
   47e4c:	0047bbc0 	call	47bbc <IINCHIP_CSon>
    IINCHIP_ISR_ENABLE();                         // Interrupt Service Routine Enable
    return data;
   47e50:	e0bffe83 	ldbu	r2,-6(fp)
}
   47e54:	e037883a 	mov	sp,fp
   47e58:	dfc00117 	ldw	ra,4(sp)
   47e5c:	df000017 	ldw	fp,0(sp)
   47e60:	dec00204 	addi	sp,sp,8
   47e64:	f800283a 	ret

00047e68 <wiz_write_buf>:

uint16 wiz_write_buf(uint32 addrbsb, uint8* buf,uint16 len)
{
   47e68:	defffa04 	addi	sp,sp,-24
   47e6c:	dfc00515 	stw	ra,20(sp)
   47e70:	df000415 	stw	fp,16(sp)
   47e74:	df000404 	addi	fp,sp,16
   47e78:	e13ffd15 	stw	r4,-12(fp)
   47e7c:	e17ffe15 	stw	r5,-8(fp)
   47e80:	3005883a 	mov	r2,r6
   47e84:	e0bfff0d 	sth	r2,-4(fp)
    uint16 idx = 0;
   47e88:	e03ffc0d 	sth	zero,-16(fp)
    // send_buf[0] = (addrbsb & 0x00FF0000)>>16;
    // send_buf[1] = (addrbsb & 0x0000FF00)>> 8;
    // send_buf[2] = (addrbsb & 0x000000F8) + 4;

    IINCHIP_ISR_DISABLE();
    IINCHIP_CSoff();
   47e8c:	0047b8c0 	call	47b8c <IINCHIP_CSoff>
                             // CS=0, SPI start
    IINCHIP_SpiSendData( (addrbsb & 0x00FF0000)>>16);// Address byte 1
   47e90:	e0bffd17 	ldw	r2,-12(fp)
   47e94:	10803fec 	andhi	r2,r2,255
   47e98:	1004d43a 	srli	r2,r2,16
   47e9c:	1009883a 	mov	r4,r2
   47ea0:	0047c640 	call	47c64 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x0000FF00)>> 8);// Address byte 2
   47ea4:	e0bffd17 	ldw	r2,-12(fp)
   47ea8:	10bfc00c 	andi	r2,r2,65280
   47eac:	1004d23a 	srli	r2,r2,8
   47eb0:	10bfffcc 	andi	r2,r2,65535
   47eb4:	1009883a 	mov	r4,r2
   47eb8:	0047c640 	call	47c64 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x000000F8) + 4);    // Data write command and Write data length 1
   47ebc:	e0bffd17 	ldw	r2,-12(fp)
   47ec0:	10803e0c 	andi	r2,r2,248
   47ec4:	10800104 	addi	r2,r2,4
   47ec8:	10bfffcc 	andi	r2,r2,65535
   47ecc:	1009883a 	mov	r4,r2
   47ed0:	0047c640 	call	47c64 <IINCHIP_SpiSendData>
    for(idx = 0; idx < len; idx++)                // Write data in loop
   47ed4:	e03ffc0d 	sth	zero,-16(fp)
   47ed8:	00000a06 	br	47f04 <wiz_write_buf+0x9c>
    {
        IINCHIP_SpiSendData(buf[idx]);
   47edc:	e0bffc0b 	ldhu	r2,-16(fp)
   47ee0:	e0fffe17 	ldw	r3,-8(fp)
   47ee4:	1885883a 	add	r2,r3,r2
   47ee8:	10800003 	ldbu	r2,0(r2)
   47eec:	10803fcc 	andi	r2,r2,255
   47ef0:	1009883a 	mov	r4,r2
   47ef4:	0047c640 	call	47c64 <IINCHIP_SpiSendData>
    IINCHIP_CSoff();
                             // CS=0, SPI start
    IINCHIP_SpiSendData( (addrbsb & 0x00FF0000)>>16);// Address byte 1
    IINCHIP_SpiSendData( (addrbsb & 0x0000FF00)>> 8);// Address byte 2
    IINCHIP_SpiSendData( (addrbsb & 0x000000F8) + 4);    // Data write command and Write data length 1
    for(idx = 0; idx < len; idx++)                // Write data in loop
   47ef8:	e0bffc0b 	ldhu	r2,-16(fp)
   47efc:	10800044 	addi	r2,r2,1
   47f00:	e0bffc0d 	sth	r2,-16(fp)
   47f04:	e0fffc0b 	ldhu	r3,-16(fp)
   47f08:	e0bfff0b 	ldhu	r2,-4(fp)
   47f0c:	18bff336 	bltu	r3,r2,47edc <__reset+0xfffc6edc>
//		alt_avalon_dma_tx_ioctl(tx, ALT_DMA_TX_ONLY_ON, (void*)(SPI_BASE+4));
//		idx = alt_avalon_dma_send(tx, buf, (len<<1), NULL, NULL);
//	}
    // alt_avalon_spi_command(SPI_BASE, 0, 3, send_buf, 0, NULL, 0);
    // alt_avalon_spi_command(SPI_BASE, 0, len, buf, 0, NULL, 0);
    IINCHIP_CSon();                               // CS=1, SPI end
   47f10:	0047bbc0 	call	47bbc <IINCHIP_CSon>
    IINCHIP_ISR_ENABLE();                         // Interrupt Service Routine Enable

    return len;
   47f14:	e0bfff0b 	ldhu	r2,-4(fp)
}
   47f18:	e037883a 	mov	sp,fp
   47f1c:	dfc00117 	ldw	ra,4(sp)
   47f20:	df000017 	ldw	fp,0(sp)
   47f24:	dec00204 	addi	sp,sp,8
   47f28:	f800283a 	ret

00047f2c <wiz_read_buf>:


uint16 wiz_read_buf(uint32 addrbsb, uint8* buf,uint16 len)
{
   47f2c:	defff904 	addi	sp,sp,-28
   47f30:	dfc00615 	stw	ra,24(sp)
   47f34:	df000515 	stw	fp,20(sp)
   47f38:	dc000415 	stw	r16,16(sp)
   47f3c:	df000504 	addi	fp,sp,20
   47f40:	e13ffc15 	stw	r4,-16(fp)
   47f44:	e17ffd15 	stw	r5,-12(fp)
   47f48:	3005883a 	mov	r2,r6
   47f4c:	e0bffe0d 	sth	r2,-8(fp)
    uint16 idx = 0;
   47f50:	e03ffb0d 	sth	zero,-20(fp)
    uint16 num = 0;
   47f54:	e03ffb8d 	sth	zero,-18(fp)
//    uint8 send_buf[3];
//    send_buf[0] = (addrbsb & 0x00FF0000)>>16;
//    send_buf[1] = (addrbsb & 0x0000FF00)>> 8;
//    send_buf[2] = (addrbsb & 0x000000F8);

    num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);  // 清空数据
   47f58:	01000234 	movhi	r4,8
   47f5c:	21083004 	addi	r4,r4,8384
   47f60:	004a68c0 	call	4a68c <altera_avalon_fifo_read_level>
   47f64:	e0bffb8d 	sth	r2,-18(fp)
    while(num > 0)
   47f68:	00000a06 	br	47f94 <wiz_read_buf+0x68>
    {
        num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);
   47f6c:	01000234 	movhi	r4,8
   47f70:	21083004 	addi	r4,r4,8384
   47f74:	004a68c0 	call	4a68c <altera_avalon_fifo_read_level>
   47f78:	e0bffb8d 	sth	r2,-18(fp)
        idx = altera_avalon_fifo_read_fifo(SPIRD_FIFO_OUT_BASE, SPIRD_FIFO_IN_CSR_BASE);
   47f7c:	01400234 	movhi	r5,8
   47f80:	29483004 	addi	r5,r5,8384
   47f84:	01000234 	movhi	r4,8
   47f88:	21087604 	addi	r4,r4,8664
   47f8c:	004a8ec0 	call	4a8ec <altera_avalon_fifo_read_fifo>
   47f90:	e0bffb0d 	sth	r2,-20(fp)
//    send_buf[0] = (addrbsb & 0x00FF0000)>>16;
//    send_buf[1] = (addrbsb & 0x0000FF00)>> 8;
//    send_buf[2] = (addrbsb & 0x000000F8);

    num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);  // 清空数据
    while(num > 0)
   47f94:	e0bffb8b 	ldhu	r2,-18(fp)
   47f98:	103ff41e 	bne	r2,zero,47f6c <__reset+0xfffc6f6c>
    {
        num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);
        idx = altera_avalon_fifo_read_fifo(SPIRD_FIFO_OUT_BASE, SPIRD_FIFO_IN_CSR_BASE);
    }

    IINCHIP_CSoff();                                      // CS=0, SPI开启
   47f9c:	0047b8c0 	call	47b8c <IINCHIP_CSoff>
//    alt_avalon_spi_command(SPI_BASE, 0, 3, send_buf, len, buf, 0);
    IINCHIP_SpiSendData( (addrbsb & 0x00FF0000)>>16);		// 通过SPI发送16位地址段给MCU
   47fa0:	e0bffc17 	ldw	r2,-16(fp)
   47fa4:	10803fec 	andhi	r2,r2,255
   47fa8:	1004d43a 	srli	r2,r2,16
   47fac:	1009883a 	mov	r4,r2
   47fb0:	0047c640 	call	47c64 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x0000FF00)>> 8);		//
   47fb4:	e0bffc17 	ldw	r2,-16(fp)
   47fb8:	10bfc00c 	andi	r2,r2,65280
   47fbc:	1004d23a 	srli	r2,r2,8
   47fc0:	10bfffcc 	andi	r2,r2,65535
   47fc4:	1009883a 	mov	r4,r2
   47fc8:	0047c640 	call	47c64 <IINCHIP_SpiSendData>
    IINCHIP_SpiSendData( (addrbsb & 0x000000F8));    		// 设置SPI为读操作
   47fcc:	e0bffc17 	ldw	r2,-16(fp)
   47fd0:	10803e0c 	andi	r2,r2,248
   47fd4:	1009883a 	mov	r4,r2
   47fd8:	0047c640 	call	47c64 <IINCHIP_SpiSendData>

    IINCHIP_SpiSendData(len);
   47fdc:	e0bffe0b 	ldhu	r2,-8(fp)
   47fe0:	1009883a 	mov	r4,r2
   47fe4:	0047c640 	call	47c64 <IINCHIP_SpiSendData>
    for( num = 0; num < 4; num++ )
   47fe8:	e03ffb8d 	sth	zero,-18(fp)
   47fec:	00000306 	br	47ffc <wiz_read_buf+0xd0>
   47ff0:	e0bffb8b 	ldhu	r2,-18(fp)
   47ff4:	10800044 	addi	r2,r2,1
   47ff8:	e0bffb8d 	sth	r2,-18(fp)
   47ffc:	e0bffb8b 	ldhu	r2,-18(fp)
   48000:	10800130 	cmpltui	r2,r2,4
   48004:	103ffa1e 	bne	r2,zero,47ff0 <__reset+0xfffc6ff0>
    {
        ;
    }
    for(idx = 0; idx < len; idx++)                    	// 将buf中的数据通过SPI发送给MCU
   48008:	e03ffb0d 	sth	zero,-20(fp)
   4800c:	00000806 	br	48030 <wiz_read_buf+0x104>
    {
        //buf[idx] = IINCHIP_SpiSendData(0x00);
        buf[idx] = SPI_I2S_ReceiveData();
   48010:	e0bffb0b 	ldhu	r2,-20(fp)
   48014:	e0fffd17 	ldw	r3,-12(fp)
   48018:	18a1883a 	add	r16,r3,r2
   4801c:	0047cc00 	call	47cc0 <SPI_I2S_ReceiveData>
   48020:	80800005 	stb	r2,0(r16)
    IINCHIP_SpiSendData(len);
    for( num = 0; num < 4; num++ )
    {
        ;
    }
    for(idx = 0; idx < len; idx++)                    	// 将buf中的数据通过SPI发送给MCU
   48024:	e0bffb0b 	ldhu	r2,-20(fp)
   48028:	10800044 	addi	r2,r2,1
   4802c:	e0bffb0d 	sth	r2,-20(fp)
   48030:	e0fffb0b 	ldhu	r3,-20(fp)
   48034:	e0bffe0b 	ldhu	r2,-8(fp)
   48038:	18bff536 	bltu	r3,r2,48010 <__reset+0xfffc7010>
    {
        //buf[idx] = IINCHIP_SpiSendData(0x00);
        buf[idx] = SPI_I2S_ReceiveData();
    }

    num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);  // 清空数据
   4803c:	01000234 	movhi	r4,8
   48040:	21083004 	addi	r4,r4,8384
   48044:	004a68c0 	call	4a68c <altera_avalon_fifo_read_level>
   48048:	e0bffb8d 	sth	r2,-18(fp)
    while(num > 0)
   4804c:	00000a06 	br	48078 <wiz_read_buf+0x14c>
    {
        num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);
   48050:	01000234 	movhi	r4,8
   48054:	21083004 	addi	r4,r4,8384
   48058:	004a68c0 	call	4a68c <altera_avalon_fifo_read_level>
   4805c:	e0bffb8d 	sth	r2,-18(fp)
        idx = altera_avalon_fifo_read_fifo(SPIRD_FIFO_OUT_BASE, SPIRD_FIFO_IN_CSR_BASE);
   48060:	01400234 	movhi	r5,8
   48064:	29483004 	addi	r5,r5,8384
   48068:	01000234 	movhi	r4,8
   4806c:	21087604 	addi	r4,r4,8664
   48070:	004a8ec0 	call	4a8ec <altera_avalon_fifo_read_fifo>
   48074:	e0bffb0d 	sth	r2,-20(fp)
        //buf[idx] = IINCHIP_SpiSendData(0x00);
        buf[idx] = SPI_I2S_ReceiveData();
    }

    num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);  // 清空数据
    while(num > 0)
   48078:	e0bffb8b 	ldhu	r2,-18(fp)
   4807c:	103ff41e 	bne	r2,zero,48050 <__reset+0xfffc7050>
    {
        num = altera_avalon_fifo_read_level(SPIRD_FIFO_IN_CSR_BASE);
        idx = altera_avalon_fifo_read_fifo(SPIRD_FIFO_OUT_BASE, SPIRD_FIFO_IN_CSR_BASE);
    }
    IINCHIP_CSon();                                       // CS=1, SPI关闭
   48080:	0047bbc0 	call	47bbc <IINCHIP_CSon>

    return len;                                                                                                                                                                   // 返回已接收数据的长度值
   48084:	e0bffe0b 	ldhu	r2,-8(fp)
}
   48088:	e6ffff04 	addi	sp,fp,-4
   4808c:	dfc00217 	ldw	ra,8(sp)
   48090:	df000117 	ldw	fp,4(sp)
   48094:	dc000017 	ldw	r16,0(sp)
   48098:	dec00304 	addi	sp,sp,12
   4809c:	f800283a 	ret

000480a0 <iinchip_init>:

/**
  @brief  This function is for resetting of the iinchip. Initializes the iinchip to work in whether DIRECT or INDIRECT mode
  */
void iinchip_init(void)
{
   480a0:	defffe04 	addi	sp,sp,-8
   480a4:	dfc00115 	stw	ra,4(sp)
   480a8:	df000015 	stw	fp,0(sp)
   480ac:	d839883a 	mov	fp,sp
    setMR( MR_RST );
   480b0:	01002004 	movi	r4,128
   480b4:	00486ec0 	call	486ec <setMR>
}
   480b8:	0001883a 	nop
   480bc:	e037883a 	mov	sp,fp
   480c0:	dfc00117 	ldw	ra,4(sp)
   480c4:	df000017 	ldw	fp,0(sp)
   480c8:	dec00204 	addi	sp,sp,8
   480cc:	f800283a 	ret

000480d0 <sysinit>:
  other 3 channels couldn't be used, for there's no available memory.\n
  If two 4KBytes memory are assigned to two each channels, \n
  other 2 channels couldn't be used, for there's no available memory.\n
  */
void sysinit( uint8 * tx_size, uint8 * rx_size  )
{
   480d0:	defff904 	addi	sp,sp,-28
   480d4:	dfc00615 	stw	ra,24(sp)
   480d8:	df000515 	stw	fp,20(sp)
   480dc:	df000504 	addi	fp,sp,20
   480e0:	e13ffe15 	stw	r4,-8(fp)
   480e4:	e17fff15 	stw	r5,-4(fp)
    int16 i;
    int16 ssum,rsum;

    ssum = 0;
   480e8:	e03ffc15 	stw	zero,-16(fp)
    rsum = 0;
   480ec:	e03ffd15 	stw	zero,-12(fp)

    for (i = 0 ; i < MAX_SOCK_NUM; i++)       // Set the size, masking and base address of Tx & Rx memory by each channel
   480f0:	e03ffb15 	stw	zero,-20(fp)
   480f4:	0000db06 	br	48464 <sysinit+0x394>
    {
        IINCHIP_WRITE( (Sn_TXMEM_SIZE(i)), tx_size[i]);
   480f8:	e0bffb17 	ldw	r2,-20(fp)
   480fc:	1004917a 	slli	r2,r2,5
   48100:	1087c204 	addi	r2,r2,7944
   48104:	1009883a 	mov	r4,r2
   48108:	e0bffb17 	ldw	r2,-20(fp)
   4810c:	e0fffe17 	ldw	r3,-8(fp)
   48110:	1885883a 	add	r2,r3,r2
   48114:	10800003 	ldbu	r2,0(r2)
   48118:	10803fcc 	andi	r2,r2,255
   4811c:	100b883a 	mov	r5,r2
   48120:	0047d380 	call	47d38 <IINCHIP_WRITE>
        IINCHIP_WRITE( (Sn_RXMEM_SIZE(i)), rx_size[i]);
   48124:	e0bffb17 	ldw	r2,-20(fp)
   48128:	1004917a 	slli	r2,r2,5
   4812c:	10878204 	addi	r2,r2,7688
   48130:	1009883a 	mov	r4,r2
   48134:	e0bffb17 	ldw	r2,-20(fp)
   48138:	e0ffff17 	ldw	r3,-4(fp)
   4813c:	1885883a 	add	r2,r3,r2
   48140:	10800003 	ldbu	r2,0(r2)
   48144:	10803fcc 	andi	r2,r2,255
   48148:	100b883a 	mov	r5,r2
   4814c:	0047d380 	call	47d38 <IINCHIP_WRITE>
        SSIZE[i] = (int16)(0);
   48150:	008001b4 	movhi	r2,6
   48154:	10b34504 	addi	r2,r2,-13036
   48158:	e0fffb17 	ldw	r3,-20(fp)
   4815c:	18c7883a 	add	r3,r3,r3
   48160:	10c5883a 	add	r2,r2,r3
   48164:	1000000d 	sth	zero,0(r2)
        RSIZE[i] = (int16)(0);
   48168:	008001b4 	movhi	r2,6
   4816c:	10b34904 	addi	r2,r2,-13020
   48170:	e0fffb17 	ldw	r3,-20(fp)
   48174:	18c7883a 	add	r3,r3,r3
   48178:	10c5883a 	add	r2,r2,r3
   4817c:	1000000d 	sth	zero,0(r2)

        // W5500有8个Socket，每个Socket有对应独立的收发缓存区。
        // 每个Socket的发送/接收缓存区都在一个16KB的物理发送内存中，初始化分配为2KB。
        // 无论给每个Socket分配多大的收/发缓存，都必须在16KB以内。

        if (ssum <= 16384)                                                                          // 设置Socket发送缓存空间的大小
   48180:	e0bffc17 	ldw	r2,-16(fp)
   48184:	10900048 	cmpgei	r2,r2,16385
   48188:	10004e1e 	bne	r2,zero,482c4 <sysinit+0x1f4>
        {
            switch( tx_size[i] )
   4818c:	e0bffb17 	ldw	r2,-20(fp)
   48190:	e0fffe17 	ldw	r3,-8(fp)
   48194:	1885883a 	add	r2,r3,r2
   48198:	10800003 	ldbu	r2,0(r2)
   4819c:	10803fcc 	andi	r2,r2,255
   481a0:	10c00468 	cmpgeui	r3,r2,17
   481a4:	18003f1e 	bne	r3,zero,482a4 <sysinit+0x1d4>
   481a8:	100690ba 	slli	r3,r2,2
   481ac:	00800174 	movhi	r2,5
   481b0:	10a07004 	addi	r2,r2,-32320
   481b4:	1885883a 	add	r2,r3,r2
   481b8:	10800017 	ldw	r2,0(r2)
   481bc:	1000683a 	jmp	r2
   481c0:	000482a4 	muli	zero,zero,4618
   481c4:	00048204 	movi	zero,4616
   481c8:	00048224 	muli	zero,zero,4616
   481cc:	000482a4 	muli	zero,zero,4618
   481d0:	00048244 	movi	zero,4617
   481d4:	000482a4 	muli	zero,zero,4618
   481d8:	000482a4 	muli	zero,zero,4618
   481dc:	000482a4 	muli	zero,zero,4618
   481e0:	00048264 	muli	zero,zero,4617
   481e4:	000482a4 	muli	zero,zero,4618
   481e8:	000482a4 	muli	zero,zero,4618
   481ec:	000482a4 	muli	zero,zero,4618
   481f0:	000482a4 	muli	zero,zero,4618
   481f4:	000482a4 	muli	zero,zero,4618
   481f8:	000482a4 	muli	zero,zero,4618
   481fc:	000482a4 	muli	zero,zero,4618
   48200:	00048284 	movi	zero,4618
            {
                case 1:
                    SSIZE[i] = (int16)(1024);                       // i=1，tx_size=1KB
   48204:	008001b4 	movhi	r2,6
   48208:	10b34504 	addi	r2,r2,-13036
   4820c:	e0fffb17 	ldw	r3,-20(fp)
   48210:	18c7883a 	add	r3,r3,r3
   48214:	10c5883a 	add	r2,r2,r3
   48218:	00c10004 	movi	r3,1024
   4821c:	10c0000d 	sth	r3,0(r2)
                    break;
   48220:	00002806 	br	482c4 <sysinit+0x1f4>
                case 2:
                    SSIZE[i] = (int16)(2048);                       // i=2，tx_size=2KB
   48224:	008001b4 	movhi	r2,6
   48228:	10b34504 	addi	r2,r2,-13036
   4822c:	e0fffb17 	ldw	r3,-20(fp)
   48230:	18c7883a 	add	r3,r3,r3
   48234:	10c5883a 	add	r2,r2,r3
   48238:	00c20004 	movi	r3,2048
   4823c:	10c0000d 	sth	r3,0(r2)
                    break;
   48240:	00002006 	br	482c4 <sysinit+0x1f4>
                case 4:
                    SSIZE[i] = (int16)(4096);                       // i=4，tx_size=4KB
   48244:	008001b4 	movhi	r2,6
   48248:	10b34504 	addi	r2,r2,-13036
   4824c:	e0fffb17 	ldw	r3,-20(fp)
   48250:	18c7883a 	add	r3,r3,r3
   48254:	10c5883a 	add	r2,r2,r3
   48258:	00c40004 	movi	r3,4096
   4825c:	10c0000d 	sth	r3,0(r2)
                    break;
   48260:	00001806 	br	482c4 <sysinit+0x1f4>
                case 8:
                    SSIZE[i] = (int16)(8192);                       // i=8，tx_size=8KB
   48264:	008001b4 	movhi	r2,6
   48268:	10b34504 	addi	r2,r2,-13036
   4826c:	e0fffb17 	ldw	r3,-20(fp)
   48270:	18c7883a 	add	r3,r3,r3
   48274:	10c5883a 	add	r2,r2,r3
   48278:	00c80004 	movi	r3,8192
   4827c:	10c0000d 	sth	r3,0(r2)
                    break;
   48280:	00001006 	br	482c4 <sysinit+0x1f4>
                case 16:
                    SSIZE[i] = (int16)(16384);              // i=16，tx_size=16KB
   48284:	008001b4 	movhi	r2,6
   48288:	10b34504 	addi	r2,r2,-13036
   4828c:	e0fffb17 	ldw	r3,-20(fp)
   48290:	18c7883a 	add	r3,r3,r3
   48294:	10c5883a 	add	r2,r2,r3
   48298:	00d00004 	movi	r3,16384
   4829c:	10c0000d 	sth	r3,0(r2)
                    break;
   482a0:	00000806 	br	482c4 <sysinit+0x1f4>
                default :
                    RSIZE[i] = (int16)(2048);                       // 默认i=2，tx_size=2KB
   482a4:	008001b4 	movhi	r2,6
   482a8:	10b34904 	addi	r2,r2,-13020
   482ac:	e0fffb17 	ldw	r3,-20(fp)
   482b0:	18c7883a 	add	r3,r3,r3
   482b4:	10c5883a 	add	r2,r2,r3
   482b8:	00c20004 	movi	r3,2048
   482bc:	10c0000d 	sth	r3,0(r2)
                    break;
   482c0:	0001883a 	nop
            }
        }

        if (rsum <= 16384)                                                                      // 设置Socket接收缓存空间的大小
   482c4:	e0bffd17 	ldw	r2,-12(fp)
   482c8:	10900048 	cmpgei	r2,r2,16385
   482cc:	10004e1e 	bne	r2,zero,48408 <sysinit+0x338>
        {
            switch( rx_size[i] )
   482d0:	e0bffb17 	ldw	r2,-20(fp)
   482d4:	e0ffff17 	ldw	r3,-4(fp)
   482d8:	1885883a 	add	r2,r3,r2
   482dc:	10800003 	ldbu	r2,0(r2)
   482e0:	10803fcc 	andi	r2,r2,255
   482e4:	10c00468 	cmpgeui	r3,r2,17
   482e8:	18003f1e 	bne	r3,zero,483e8 <sysinit+0x318>
   482ec:	100690ba 	slli	r3,r2,2
   482f0:	00800174 	movhi	r2,5
   482f4:	10a0c104 	addi	r2,r2,-31996
   482f8:	1885883a 	add	r2,r3,r2
   482fc:	10800017 	ldw	r2,0(r2)
   48300:	1000683a 	jmp	r2
   48304:	000483e8 	cmpgeui	zero,zero,4623
   48308:	00048348 	cmpgei	zero,zero,4621
   4830c:	00048368 	cmpgeui	zero,zero,4621
   48310:	000483e8 	cmpgeui	zero,zero,4623
   48314:	00048388 	cmpgei	zero,zero,4622
   48318:	000483e8 	cmpgeui	zero,zero,4623
   4831c:	000483e8 	cmpgeui	zero,zero,4623
   48320:	000483e8 	cmpgeui	zero,zero,4623
   48324:	000483a8 	cmpgeui	zero,zero,4622
   48328:	000483e8 	cmpgeui	zero,zero,4623
   4832c:	000483e8 	cmpgeui	zero,zero,4623
   48330:	000483e8 	cmpgeui	zero,zero,4623
   48334:	000483e8 	cmpgeui	zero,zero,4623
   48338:	000483e8 	cmpgeui	zero,zero,4623
   4833c:	000483e8 	cmpgeui	zero,zero,4623
   48340:	000483e8 	cmpgeui	zero,zero,4623
   48344:	000483c8 	cmpgei	zero,zero,4623
            {
                case 1:
                    RSIZE[i] = (int16)(1024);               // i=1，rx_size=1KB
   48348:	008001b4 	movhi	r2,6
   4834c:	10b34904 	addi	r2,r2,-13020
   48350:	e0fffb17 	ldw	r3,-20(fp)
   48354:	18c7883a 	add	r3,r3,r3
   48358:	10c5883a 	add	r2,r2,r3
   4835c:	00c10004 	movi	r3,1024
   48360:	10c0000d 	sth	r3,0(r2)
                    break;
   48364:	00002806 	br	48408 <sysinit+0x338>
                case 2:
                    RSIZE[i] = (int16)(2048);               // i=2，rx_size=2KB
   48368:	008001b4 	movhi	r2,6
   4836c:	10b34904 	addi	r2,r2,-13020
   48370:	e0fffb17 	ldw	r3,-20(fp)
   48374:	18c7883a 	add	r3,r3,r3
   48378:	10c5883a 	add	r2,r2,r3
   4837c:	00c20004 	movi	r3,2048
   48380:	10c0000d 	sth	r3,0(r2)
                    break;
   48384:	00002006 	br	48408 <sysinit+0x338>
                case 4:
                    RSIZE[i] = (int16)(4096);               // i=4，rx_size=4KB
   48388:	008001b4 	movhi	r2,6
   4838c:	10b34904 	addi	r2,r2,-13020
   48390:	e0fffb17 	ldw	r3,-20(fp)
   48394:	18c7883a 	add	r3,r3,r3
   48398:	10c5883a 	add	r2,r2,r3
   4839c:	00c40004 	movi	r3,4096
   483a0:	10c0000d 	sth	r3,0(r2)
                    break;
   483a4:	00001806 	br	48408 <sysinit+0x338>
                case 8:
                    RSIZE[i] = (int16)(8192);               // i=8，rx_size=8KB
   483a8:	008001b4 	movhi	r2,6
   483ac:	10b34904 	addi	r2,r2,-13020
   483b0:	e0fffb17 	ldw	r3,-20(fp)
   483b4:	18c7883a 	add	r3,r3,r3
   483b8:	10c5883a 	add	r2,r2,r3
   483bc:	00c80004 	movi	r3,8192
   483c0:	10c0000d 	sth	r3,0(r2)
                    break;
   483c4:	00001006 	br	48408 <sysinit+0x338>
                case 16:
                    RSIZE[i] = (int16)(16384);      // i=16，rx_size=16KB
   483c8:	008001b4 	movhi	r2,6
   483cc:	10b34904 	addi	r2,r2,-13020
   483d0:	e0fffb17 	ldw	r3,-20(fp)
   483d4:	18c7883a 	add	r3,r3,r3
   483d8:	10c5883a 	add	r2,r2,r3
   483dc:	00d00004 	movi	r3,16384
   483e0:	10c0000d 	sth	r3,0(r2)
                    break;
   483e4:	00000806 	br	48408 <sysinit+0x338>
                default :
                    RSIZE[i] = (int16)(2048);               // 默认i=2，rx_size=2K
   483e8:	008001b4 	movhi	r2,6
   483ec:	10b34904 	addi	r2,r2,-13020
   483f0:	e0fffb17 	ldw	r3,-20(fp)
   483f4:	18c7883a 	add	r3,r3,r3
   483f8:	10c5883a 	add	r2,r2,r3
   483fc:	00c20004 	movi	r3,2048
   48400:	10c0000d 	sth	r3,0(r2)
                    break;
   48404:	0001883a 	nop
            }
        }
        ssum += SSIZE[i];
   48408:	008001b4 	movhi	r2,6
   4840c:	10b34504 	addi	r2,r2,-13036
   48410:	e0fffb17 	ldw	r3,-20(fp)
   48414:	18c7883a 	add	r3,r3,r3
   48418:	10c5883a 	add	r2,r2,r3
   4841c:	1080000b 	ldhu	r2,0(r2)
   48420:	10bfffcc 	andi	r2,r2,65535
   48424:	e0fffc17 	ldw	r3,-16(fp)
   48428:	1885883a 	add	r2,r3,r2
   4842c:	e0bffc15 	stw	r2,-16(fp)
        rsum += RSIZE[i];
   48430:	008001b4 	movhi	r2,6
   48434:	10b34904 	addi	r2,r2,-13020
   48438:	e0fffb17 	ldw	r3,-20(fp)
   4843c:	18c7883a 	add	r3,r3,r3
   48440:	10c5883a 	add	r2,r2,r3
   48444:	1080000b 	ldhu	r2,0(r2)
   48448:	10bfffcc 	andi	r2,r2,65535
   4844c:	e0fffd17 	ldw	r3,-12(fp)
   48450:	1885883a 	add	r2,r3,r2
   48454:	e0bffd15 	stw	r2,-12(fp)
    int16 ssum,rsum;

    ssum = 0;
    rsum = 0;

    for (i = 0 ; i < MAX_SOCK_NUM; i++)       // Set the size, masking and base address of Tx & Rx memory by each channel
   48458:	e0bffb17 	ldw	r2,-20(fp)
   4845c:	10800044 	addi	r2,r2,1
   48460:	e0bffb15 	stw	r2,-20(fp)
   48464:	e0bffb17 	ldw	r2,-20(fp)
   48468:	10800210 	cmplti	r2,r2,8
   4846c:	103f221e 	bne	r2,zero,480f8 <__reset+0xfffc70f8>
            }
        }
        ssum += SSIZE[i];
        rsum += RSIZE[i];
    }
}
   48470:	0001883a 	nop
   48474:	e037883a 	mov	sp,fp
   48478:	dfc00117 	ldw	ra,4(sp)
   4847c:	df000017 	ldw	fp,0(sp)
   48480:	dec00204 	addi	sp,sp,8
   48484:	f800283a 	ret

00048488 <setGAR>:
  @brief  This function sets up gateway IP address.
  */
void setGAR(
        uint8 * addr  /**< a pointer to a 4 -byte array responsible to set the Gateway IP address. */
        )
{
   48488:	defffd04 	addi	sp,sp,-12
   4848c:	dfc00215 	stw	ra,8(sp)
   48490:	df000115 	stw	fp,4(sp)
   48494:	df000104 	addi	fp,sp,4
   48498:	e13fff15 	stw	r4,-4(fp)
    wiz_write_buf(GAR0, addr, 4);
   4849c:	01800104 	movi	r6,4
   484a0:	e17fff17 	ldw	r5,-4(fp)
   484a4:	01004004 	movi	r4,256
   484a8:	0047e680 	call	47e68 <wiz_write_buf>
}
   484ac:	0001883a 	nop
   484b0:	e037883a 	mov	sp,fp
   484b4:	dfc00117 	ldw	ra,4(sp)
   484b8:	df000017 	ldw	fp,0(sp)
   484bc:	dec00204 	addi	sp,sp,8
   484c0:	f800283a 	ret

000484c4 <getGWIP>:
void getGWIP(uint8 * addr)
{
   484c4:	defffd04 	addi	sp,sp,-12
   484c8:	dfc00215 	stw	ra,8(sp)
   484cc:	df000115 	stw	fp,4(sp)
   484d0:	df000104 	addi	fp,sp,4
   484d4:	e13fff15 	stw	r4,-4(fp)
    wiz_read_buf(GAR0, addr, 4);
   484d8:	01800104 	movi	r6,4
   484dc:	e17fff17 	ldw	r5,-4(fp)
   484e0:	01004004 	movi	r4,256
   484e4:	0047f2c0 	call	47f2c <wiz_read_buf>
}
   484e8:	0001883a 	nop
   484ec:	e037883a 	mov	sp,fp
   484f0:	dfc00117 	ldw	ra,4(sp)
   484f4:	df000017 	ldw	fp,0(sp)
   484f8:	dec00204 	addi	sp,sp,8
   484fc:	f800283a 	ret

00048500 <setSUBR>:

/**
  @brief  It sets up SubnetMask address
  */
void setSUBR(uint8 * addr)
{
   48500:	defffd04 	addi	sp,sp,-12
   48504:	dfc00215 	stw	ra,8(sp)
   48508:	df000115 	stw	fp,4(sp)
   4850c:	df000104 	addi	fp,sp,4
   48510:	e13fff15 	stw	r4,-4(fp)
    wiz_write_buf(SUBR0, addr, 4);
   48514:	01800104 	movi	r6,4
   48518:	e17fff17 	ldw	r5,-4(fp)
   4851c:	01014004 	movi	r4,1280
   48520:	0047e680 	call	47e68 <wiz_write_buf>
}
   48524:	0001883a 	nop
   48528:	e037883a 	mov	sp,fp
   4852c:	dfc00117 	ldw	ra,4(sp)
   48530:	df000017 	ldw	fp,0(sp)
   48534:	dec00204 	addi	sp,sp,8
   48538:	f800283a 	ret

0004853c <setSHAR>:
  @brief  This function sets up MAC address.
  */
void setSHAR(
        uint8 * addr  /**< a pointer to a 6 -byte array responsible to set the MAC address. */
        )
{
   4853c:	defffd04 	addi	sp,sp,-12
   48540:	dfc00215 	stw	ra,8(sp)
   48544:	df000115 	stw	fp,4(sp)
   48548:	df000104 	addi	fp,sp,4
   4854c:	e13fff15 	stw	r4,-4(fp)
    wiz_write_buf(SHAR0, addr, 6);
   48550:	01800184 	movi	r6,6
   48554:	e17fff17 	ldw	r5,-4(fp)
   48558:	01024004 	movi	r4,2304
   4855c:	0047e680 	call	47e68 <wiz_write_buf>
}
   48560:	0001883a 	nop
   48564:	e037883a 	mov	sp,fp
   48568:	dfc00117 	ldw	ra,4(sp)
   4856c:	df000017 	ldw	fp,0(sp)
   48570:	dec00204 	addi	sp,sp,8
   48574:	f800283a 	ret

00048578 <setSIPR>:
  @brief  This function sets up Source IP address.
  */
void setSIPR(
        uint8 * addr  /**< a pointer to a 4 -byte array responsible to set the Source IP address. */
        )
{
   48578:	defffd04 	addi	sp,sp,-12
   4857c:	dfc00215 	stw	ra,8(sp)
   48580:	df000115 	stw	fp,4(sp)
   48584:	df000104 	addi	fp,sp,4
   48588:	e13fff15 	stw	r4,-4(fp)
    wiz_write_buf(SIPR0, addr, 4);
   4858c:	01800104 	movi	r6,4
   48590:	e17fff17 	ldw	r5,-4(fp)
   48594:	0103c004 	movi	r4,3840
   48598:	0047e680 	call	47e68 <wiz_write_buf>
}
   4859c:	0001883a 	nop
   485a0:	e037883a 	mov	sp,fp
   485a4:	dfc00117 	ldw	ra,4(sp)
   485a8:	df000017 	ldw	fp,0(sp)
   485ac:	dec00204 	addi	sp,sp,8
   485b0:	f800283a 	ret

000485b4 <setkeepalive>:

/**
  @brief  W5500心跳检测程序，设置Socket在线时间寄存器Sn_KPALVTR，单位为5s
  */
void setkeepalive(SOCKET s)
{
   485b4:	defffd04 	addi	sp,sp,-12
   485b8:	dfc00215 	stw	ra,8(sp)
   485bc:	df000115 	stw	fp,4(sp)
   485c0:	df000104 	addi	fp,sp,4
   485c4:	2005883a 	mov	r2,r4
   485c8:	e0bfff05 	stb	r2,-4(fp)
    IINCHIP_WRITE(Sn_KPALVTR(s),0x02);
   485cc:	e0bfff03 	ldbu	r2,-4(fp)
   485d0:	1004917a 	slli	r2,r2,5
   485d4:	108bc204 	addi	r2,r2,12040
   485d8:	01400084 	movi	r5,2
   485dc:	1009883a 	mov	r4,r2
   485e0:	0047d380 	call	47d38 <IINCHIP_WRITE>
}
   485e4:	0001883a 	nop
   485e8:	e037883a 	mov	sp,fp
   485ec:	dfc00117 	ldw	ra,4(sp)
   485f0:	df000017 	ldw	fp,0(sp)
   485f4:	dec00204 	addi	sp,sp,8
   485f8:	f800283a 	ret

000485fc <getGAR>:

/**
  @brief  This function sets up Source IP address.
  */
void getGAR(uint8 * addr)
{
   485fc:	defffd04 	addi	sp,sp,-12
   48600:	dfc00215 	stw	ra,8(sp)
   48604:	df000115 	stw	fp,4(sp)
   48608:	df000104 	addi	fp,sp,4
   4860c:	e13fff15 	stw	r4,-4(fp)
    wiz_read_buf(GAR0, addr, 4);
   48610:	01800104 	movi	r6,4
   48614:	e17fff17 	ldw	r5,-4(fp)
   48618:	01004004 	movi	r4,256
   4861c:	0047f2c0 	call	47f2c <wiz_read_buf>
}
   48620:	0001883a 	nop
   48624:	e037883a 	mov	sp,fp
   48628:	dfc00117 	ldw	ra,4(sp)
   4862c:	df000017 	ldw	fp,0(sp)
   48630:	dec00204 	addi	sp,sp,8
   48634:	f800283a 	ret

00048638 <getSUBR>:
void getSUBR(uint8 * addr)
{
   48638:	defffd04 	addi	sp,sp,-12
   4863c:	dfc00215 	stw	ra,8(sp)
   48640:	df000115 	stw	fp,4(sp)
   48644:	df000104 	addi	fp,sp,4
   48648:	e13fff15 	stw	r4,-4(fp)
    wiz_read_buf(SUBR0, addr, 4);
   4864c:	01800104 	movi	r6,4
   48650:	e17fff17 	ldw	r5,-4(fp)
   48654:	01014004 	movi	r4,1280
   48658:	0047f2c0 	call	47f2c <wiz_read_buf>
}
   4865c:	0001883a 	nop
   48660:	e037883a 	mov	sp,fp
   48664:	dfc00117 	ldw	ra,4(sp)
   48668:	df000017 	ldw	fp,0(sp)
   4866c:	dec00204 	addi	sp,sp,8
   48670:	f800283a 	ret

00048674 <getSHAR>:
void getSHAR(uint8 * addr)
{
   48674:	defffd04 	addi	sp,sp,-12
   48678:	dfc00215 	stw	ra,8(sp)
   4867c:	df000115 	stw	fp,4(sp)
   48680:	df000104 	addi	fp,sp,4
   48684:	e13fff15 	stw	r4,-4(fp)
    wiz_read_buf(SHAR0, addr, 6);
   48688:	01800184 	movi	r6,6
   4868c:	e17fff17 	ldw	r5,-4(fp)
   48690:	01024004 	movi	r4,2304
   48694:	0047f2c0 	call	47f2c <wiz_read_buf>
}
   48698:	0001883a 	nop
   4869c:	e037883a 	mov	sp,fp
   486a0:	dfc00117 	ldw	ra,4(sp)
   486a4:	df000017 	ldw	fp,0(sp)
   486a8:	dec00204 	addi	sp,sp,8
   486ac:	f800283a 	ret

000486b0 <getSIPR>:
void getSIPR(uint8 * addr)
{
   486b0:	defffd04 	addi	sp,sp,-12
   486b4:	dfc00215 	stw	ra,8(sp)
   486b8:	df000115 	stw	fp,4(sp)
   486bc:	df000104 	addi	fp,sp,4
   486c0:	e13fff15 	stw	r4,-4(fp)
    wiz_read_buf(SIPR0, addr, 4);
   486c4:	01800104 	movi	r6,4
   486c8:	e17fff17 	ldw	r5,-4(fp)
   486cc:	0103c004 	movi	r4,3840
   486d0:	0047f2c0 	call	47f2c <wiz_read_buf>
}
   486d4:	0001883a 	nop
   486d8:	e037883a 	mov	sp,fp
   486dc:	dfc00117 	ldw	ra,4(sp)
   486e0:	df000017 	ldw	fp,0(sp)
   486e4:	dec00204 	addi	sp,sp,8
   486e8:	f800283a 	ret

000486ec <setMR>:

void setMR(uint8 val)
{
   486ec:	defffd04 	addi	sp,sp,-12
   486f0:	dfc00215 	stw	ra,8(sp)
   486f4:	df000115 	stw	fp,4(sp)
   486f8:	df000104 	addi	fp,sp,4
   486fc:	2005883a 	mov	r2,r4
   48700:	e0bfff05 	stb	r2,-4(fp)
    IINCHIP_WRITE(MR,val);
   48704:	e0bfff03 	ldbu	r2,-4(fp)
   48708:	100b883a 	mov	r5,r2
   4870c:	0009883a 	mov	r4,zero
   48710:	0047d380 	call	47d38 <IINCHIP_WRITE>
}
   48714:	0001883a 	nop
   48718:	e037883a 	mov	sp,fp
   4871c:	dfc00117 	ldw	ra,4(sp)
   48720:	df000017 	ldw	fp,0(sp)
   48724:	dec00204 	addi	sp,sp,8
   48728:	f800283a 	ret

0004872c <getIR>:

/**
  @brief  This function gets Interrupt register in common register.
  */
uint8 getIR( void )
{
   4872c:	defffe04 	addi	sp,sp,-8
   48730:	dfc00115 	stw	ra,4(sp)
   48734:	df000015 	stw	fp,0(sp)
   48738:	d839883a 	mov	fp,sp
    return IINCHIP_READ(IR);
   4873c:	01054004 	movi	r4,5376
   48740:	0047dc40 	call	47dc4 <IINCHIP_READ>
}
   48744:	e037883a 	mov	sp,fp
   48748:	dfc00117 	ldw	ra,4(sp)
   4874c:	df000017 	ldw	fp,0(sp)
   48750:	dec00204 	addi	sp,sp,8
   48754:	f800283a 	ret

00048758 <setRTR>:

  If there is no response from the peer or delay in response then retransmission
  will be there as per RTR (Retry Time-value Register)setting
  */
void setRTR(uint16 timeout)
{
   48758:	defffd04 	addi	sp,sp,-12
   4875c:	dfc00215 	stw	ra,8(sp)
   48760:	df000115 	stw	fp,4(sp)
   48764:	df000104 	addi	fp,sp,4
   48768:	2005883a 	mov	r2,r4
   4876c:	e0bfff0d 	sth	r2,-4(fp)
    IINCHIP_WRITE(RTR0,(uint8)((timeout & 0xff00) >> 8));
   48770:	e0bfff0b 	ldhu	r2,-4(fp)
   48774:	1004d23a 	srli	r2,r2,8
   48778:	10803fcc 	andi	r2,r2,255
   4877c:	100b883a 	mov	r5,r2
   48780:	01064004 	movi	r4,6400
   48784:	0047d380 	call	47d38 <IINCHIP_WRITE>
    IINCHIP_WRITE(RTR1,(uint8)(timeout & 0x00ff));
   48788:	e0bfff0b 	ldhu	r2,-4(fp)
   4878c:	10803fcc 	andi	r2,r2,255
   48790:	100b883a 	mov	r5,r2
   48794:	01068004 	movi	r4,6656
   48798:	0047d380 	call	47d38 <IINCHIP_WRITE>
}
   4879c:	0001883a 	nop
   487a0:	e037883a 	mov	sp,fp
   487a4:	dfc00117 	ldw	ra,4(sp)
   487a8:	df000017 	ldw	fp,0(sp)
   487ac:	dec00204 	addi	sp,sp,8
   487b0:	f800283a 	ret

000487b4 <setRCR>:

  If there is no response from the peer or delay in response then recorded time
  as per RTR & RCR register seeting then time out will occur.
  */
void setRCR(uint8 retry)
{
   487b4:	defffd04 	addi	sp,sp,-12
   487b8:	dfc00215 	stw	ra,8(sp)
   487bc:	df000115 	stw	fp,4(sp)
   487c0:	df000104 	addi	fp,sp,4
   487c4:	2005883a 	mov	r2,r4
   487c8:	e0bfff05 	stb	r2,-4(fp)
    IINCHIP_WRITE(WIZ_RCR,retry);
   487cc:	e0bfff03 	ldbu	r2,-4(fp)
   487d0:	100b883a 	mov	r5,r2
   487d4:	0106c004 	movi	r4,6912
   487d8:	0047d380 	call	47d38 <IINCHIP_WRITE>
}
   487dc:	0001883a 	nop
   487e0:	e037883a 	mov	sp,fp
   487e4:	dfc00117 	ldw	ra,4(sp)
   487e8:	df000017 	ldw	fp,0(sp)
   487ec:	dec00204 	addi	sp,sp,8
   487f0:	f800283a 	ret

000487f4 <clearIR>:

  If any bit in IMR is set as '0' then there is not interrupt signal though the bit is
  set in IR register.
  */
void clearIR(uint8 mask)
{
   487f4:	defffc04 	addi	sp,sp,-16
   487f8:	dfc00315 	stw	ra,12(sp)
   487fc:	df000215 	stw	fp,8(sp)
   48800:	dc000115 	stw	r16,4(sp)
   48804:	df000204 	addi	fp,sp,8
   48808:	2005883a 	mov	r2,r4
   4880c:	e0bffe05 	stb	r2,-8(fp)
    IINCHIP_WRITE(IR, ~mask | getIR() ); // must be setted 0x10.
   48810:	e0bffe03 	ldbu	r2,-8(fp)
   48814:	0084303a 	nor	r2,zero,r2
   48818:	1021883a 	mov	r16,r2
   4881c:	004872c0 	call	4872c <getIR>
   48820:	8084b03a 	or	r2,r16,r2
   48824:	10803fcc 	andi	r2,r2,255
   48828:	100b883a 	mov	r5,r2
   4882c:	01054004 	movi	r4,5376
   48830:	0047d380 	call	47d38 <IINCHIP_WRITE>
}
   48834:	0001883a 	nop
   48838:	e6ffff04 	addi	sp,fp,-4
   4883c:	dfc00217 	ldw	ra,8(sp)
   48840:	df000117 	ldw	fp,4(sp)
   48844:	dc000017 	ldw	r16,0(sp)
   48848:	dec00304 	addi	sp,sp,12
   4884c:	f800283a 	ret

00048850 <setSn_MSS>:

/**
  @brief  This sets the maximum segment size of TCP in Active Mode), while in Passive Mode this is set by peer
  */
void setSn_MSS(SOCKET s, uint16 Sn_MSSR)
{
   48850:	defffc04 	addi	sp,sp,-16
   48854:	dfc00315 	stw	ra,12(sp)
   48858:	df000215 	stw	fp,8(sp)
   4885c:	df000204 	addi	fp,sp,8
   48860:	2007883a 	mov	r3,r4
   48864:	2805883a 	mov	r2,r5
   48868:	e0fffe05 	stb	r3,-8(fp)
   4886c:	e0bfff0d 	sth	r2,-4(fp)
    IINCHIP_WRITE( Sn_MSSR0(s), (uint8)((Sn_MSSR & 0xff00) >> 8));
   48870:	e0bffe03 	ldbu	r2,-8(fp)
   48874:	1004917a 	slli	r2,r2,5
   48878:	10848204 	addi	r2,r2,4616
   4887c:	1007883a 	mov	r3,r2
   48880:	e0bfff0b 	ldhu	r2,-4(fp)
   48884:	1004d23a 	srli	r2,r2,8
   48888:	10803fcc 	andi	r2,r2,255
   4888c:	100b883a 	mov	r5,r2
   48890:	1809883a 	mov	r4,r3
   48894:	0047d380 	call	47d38 <IINCHIP_WRITE>
    IINCHIP_WRITE( Sn_MSSR1(s), (uint8)(Sn_MSSR & 0x00ff));
   48898:	e0bffe03 	ldbu	r2,-8(fp)
   4889c:	1004917a 	slli	r2,r2,5
   488a0:	1084c204 	addi	r2,r2,4872
   488a4:	1007883a 	mov	r3,r2
   488a8:	e0bfff0b 	ldhu	r2,-4(fp)
   488ac:	10803fcc 	andi	r2,r2,255
   488b0:	100b883a 	mov	r5,r2
   488b4:	1809883a 	mov	r4,r3
   488b8:	0047d380 	call	47d38 <IINCHIP_WRITE>
}
   488bc:	0001883a 	nop
   488c0:	e037883a 	mov	sp,fp
   488c4:	dfc00117 	ldw	ra,4(sp)
   488c8:	df000017 	ldw	fp,0(sp)
   488cc:	dec00204 	addi	sp,sp,8
   488d0:	f800283a 	ret

000488d4 <getSn_IR>:
  @brief  get socket interrupt status

  These below functions are used to read the Interrupt & Soket Status register
  */
uint8 getSn_IR(SOCKET s)
{
   488d4:	defffd04 	addi	sp,sp,-12
   488d8:	dfc00215 	stw	ra,8(sp)
   488dc:	df000115 	stw	fp,4(sp)
   488e0:	df000104 	addi	fp,sp,4
   488e4:	2005883a 	mov	r2,r4
   488e8:	e0bfff05 	stb	r2,-4(fp)
    return IINCHIP_READ(Sn_IR(s));
   488ec:	e0bfff03 	ldbu	r2,-4(fp)
   488f0:	1004917a 	slli	r2,r2,5
   488f4:	10808204 	addi	r2,r2,520
   488f8:	1009883a 	mov	r4,r2
   488fc:	0047dc40 	call	47dc4 <IINCHIP_READ>
}
   48900:	e037883a 	mov	sp,fp
   48904:	dfc00117 	ldw	ra,4(sp)
   48908:	df000017 	ldw	fp,0(sp)
   4890c:	dec00204 	addi	sp,sp,8
   48910:	f800283a 	ret

00048914 <getSn_SR>:

/**
  @brief   get socket status
  */
uint8 getSn_SR(SOCKET s)
{
   48914:	defffd04 	addi	sp,sp,-12
   48918:	dfc00215 	stw	ra,8(sp)
   4891c:	df000115 	stw	fp,4(sp)
   48920:	df000104 	addi	fp,sp,4
   48924:	2005883a 	mov	r2,r4
   48928:	e0bfff05 	stb	r2,-4(fp)
    return IINCHIP_READ(Sn_SR(s));
   4892c:	e0bfff03 	ldbu	r2,-4(fp)
   48930:	1004917a 	slli	r2,r2,5
   48934:	1080c204 	addi	r2,r2,776
   48938:	1009883a 	mov	r4,r2
   4893c:	0047dc40 	call	47dc4 <IINCHIP_READ>
}
   48940:	e037883a 	mov	sp,fp
   48944:	dfc00117 	ldw	ra,4(sp)
   48948:	df000017 	ldw	fp,0(sp)
   4894c:	dec00204 	addi	sp,sp,8
   48950:	f800283a 	ret

00048954 <getSn_TX_FSR>:

  This gives free buffer size of transmit buffer. This is the data size that user can transmit.
  User shuold check this value first and control the size of transmitting data
  */
uint16 getSn_TX_FSR(SOCKET s)
{
   48954:	defffb04 	addi	sp,sp,-20
   48958:	dfc00415 	stw	ra,16(sp)
   4895c:	df000315 	stw	fp,12(sp)
   48960:	dc000215 	stw	r16,8(sp)
   48964:	df000304 	addi	fp,sp,12
   48968:	2005883a 	mov	r2,r4
   4896c:	e0bffe05 	stb	r2,-8(fp)
    uint16 val=0,val1=0;
   48970:	e03ffd0d 	sth	zero,-12(fp)
   48974:	e03ffd8d 	sth	zero,-10(fp)
    do
    {
        val1 = IINCHIP_READ(Sn_TX_FSR0(s));
   48978:	e0bffe03 	ldbu	r2,-8(fp)
   4897c:	1004917a 	slli	r2,r2,5
   48980:	10880204 	addi	r2,r2,8200
   48984:	1009883a 	mov	r4,r2
   48988:	0047dc40 	call	47dc4 <IINCHIP_READ>
   4898c:	10803fcc 	andi	r2,r2,255
   48990:	e0bffd8d 	sth	r2,-10(fp)
        val1 = (val1 << 8) + IINCHIP_READ(Sn_TX_FSR1(s));
   48994:	e0bffd8b 	ldhu	r2,-10(fp)
   48998:	1004923a 	slli	r2,r2,8
   4899c:	1021883a 	mov	r16,r2
   489a0:	e0bffe03 	ldbu	r2,-8(fp)
   489a4:	1004917a 	slli	r2,r2,5
   489a8:	10884204 	addi	r2,r2,8456
   489ac:	1009883a 	mov	r4,r2
   489b0:	0047dc40 	call	47dc4 <IINCHIP_READ>
   489b4:	10803fcc 	andi	r2,r2,255
   489b8:	8085883a 	add	r2,r16,r2
   489bc:	e0bffd8d 	sth	r2,-10(fp)
        if (val1 != 0)
   489c0:	e0bffd8b 	ldhu	r2,-10(fp)
   489c4:	10001226 	beq	r2,zero,48a10 <getSn_TX_FSR+0xbc>
        {
            val = IINCHIP_READ(Sn_TX_FSR0(s));
   489c8:	e0bffe03 	ldbu	r2,-8(fp)
   489cc:	1004917a 	slli	r2,r2,5
   489d0:	10880204 	addi	r2,r2,8200
   489d4:	1009883a 	mov	r4,r2
   489d8:	0047dc40 	call	47dc4 <IINCHIP_READ>
   489dc:	10803fcc 	andi	r2,r2,255
   489e0:	e0bffd0d 	sth	r2,-12(fp)
            val = (val << 8) + IINCHIP_READ(Sn_TX_FSR1(s));
   489e4:	e0bffd0b 	ldhu	r2,-12(fp)
   489e8:	1004923a 	slli	r2,r2,8
   489ec:	1021883a 	mov	r16,r2
   489f0:	e0bffe03 	ldbu	r2,-8(fp)
   489f4:	1004917a 	slli	r2,r2,5
   489f8:	10884204 	addi	r2,r2,8456
   489fc:	1009883a 	mov	r4,r2
   48a00:	0047dc40 	call	47dc4 <IINCHIP_READ>
   48a04:	10803fcc 	andi	r2,r2,255
   48a08:	8085883a 	add	r2,r16,r2
   48a0c:	e0bffd0d 	sth	r2,-12(fp)
        }
    } while (val != val1);
   48a10:	e0fffd0b 	ldhu	r3,-12(fp)
   48a14:	e0bffd8b 	ldhu	r2,-10(fp)
   48a18:	18bfd71e 	bne	r3,r2,48978 <__reset+0xfffc7978>
    return val;
   48a1c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   48a20:	e6ffff04 	addi	sp,fp,-4
   48a24:	dfc00217 	ldw	ra,8(sp)
   48a28:	df000117 	ldw	fp,4(sp)
   48a2c:	dc000017 	ldw	r16,0(sp)
   48a30:	dec00304 	addi	sp,sp,12
   48a34:	f800283a 	ret

00048a38 <getSn_RX_RSR>:
  @brief   get socket RX recv buf size

  This gives size of received data in receive buffer.
  */
uint16 getSn_RX_RSR(SOCKET s)                                                                                                           // 获取空闲接收缓存寄存器的值
{
   48a38:	defffb04 	addi	sp,sp,-20
   48a3c:	dfc00415 	stw	ra,16(sp)
   48a40:	df000315 	stw	fp,12(sp)
   48a44:	dc000215 	stw	r16,8(sp)
   48a48:	df000304 	addi	fp,sp,12
   48a4c:	2005883a 	mov	r2,r4
   48a50:	e0bffe05 	stb	r2,-8(fp)
    uint16 val=0,val1=0;
   48a54:	e03ffd0d 	sth	zero,-12(fp)
   48a58:	e03ffd8d 	sth	zero,-10(fp)
    do
    {
        val1 = IINCHIP_READ(Sn_RX_RSR0(s));                                                                 // MCU读Sn_RX_RSR的低8位，并赋给val1
   48a5c:	e0bffe03 	ldbu	r2,-8(fp)
   48a60:	1004917a 	slli	r2,r2,5
   48a64:	10898204 	addi	r2,r2,9736
   48a68:	1009883a 	mov	r4,r2
   48a6c:	0047dc40 	call	47dc4 <IINCHIP_READ>
   48a70:	10803fcc 	andi	r2,r2,255
   48a74:	e0bffd8d 	sth	r2,-10(fp)
        val1 = (val1 << 8) + IINCHIP_READ(Sn_RX_RSR1(s));           // 读高8位，并与低8位相加赋给val1
   48a78:	e0bffd8b 	ldhu	r2,-10(fp)
   48a7c:	1004923a 	slli	r2,r2,8
   48a80:	1021883a 	mov	r16,r2
   48a84:	e0bffe03 	ldbu	r2,-8(fp)
   48a88:	1004917a 	slli	r2,r2,5
   48a8c:	1089c204 	addi	r2,r2,9992
   48a90:	1009883a 	mov	r4,r2
   48a94:	0047dc40 	call	47dc4 <IINCHIP_READ>
   48a98:	10803fcc 	andi	r2,r2,255
   48a9c:	8085883a 	add	r2,r16,r2
   48aa0:	e0bffd8d 	sth	r2,-10(fp)
        if(val1 != 0)                                                                                                                                                               // 若Sn_RX_RSR的值不为0，将其赋给val
   48aa4:	e0bffd8b 	ldhu	r2,-10(fp)
   48aa8:	10001226 	beq	r2,zero,48af4 <getSn_RX_RSR+0xbc>
        {
            val = IINCHIP_READ(Sn_RX_RSR0(s));
   48aac:	e0bffe03 	ldbu	r2,-8(fp)
   48ab0:	1004917a 	slli	r2,r2,5
   48ab4:	10898204 	addi	r2,r2,9736
   48ab8:	1009883a 	mov	r4,r2
   48abc:	0047dc40 	call	47dc4 <IINCHIP_READ>
   48ac0:	10803fcc 	andi	r2,r2,255
   48ac4:	e0bffd0d 	sth	r2,-12(fp)
            val = (val << 8) + IINCHIP_READ(Sn_RX_RSR1(s));
   48ac8:	e0bffd0b 	ldhu	r2,-12(fp)
   48acc:	1004923a 	slli	r2,r2,8
   48ad0:	1021883a 	mov	r16,r2
   48ad4:	e0bffe03 	ldbu	r2,-8(fp)
   48ad8:	1004917a 	slli	r2,r2,5
   48adc:	1089c204 	addi	r2,r2,9992
   48ae0:	1009883a 	mov	r4,r2
   48ae4:	0047dc40 	call	47dc4 <IINCHIP_READ>
   48ae8:	10803fcc 	andi	r2,r2,255
   48aec:	8085883a 	add	r2,r16,r2
   48af0:	e0bffd0d 	sth	r2,-12(fp)
        }
    } while (val != val1);                                                                                                                                // 判断val与val1是否相等，若不等，重新返回do循环，若相等，跳出循环
   48af4:	e0fffd0b 	ldhu	r3,-12(fp)
   48af8:	e0bffd8b 	ldhu	r2,-10(fp)
   48afc:	18bfd71e 	bne	r3,r2,48a5c <__reset+0xfffc7a5c>
    return val;                                                                                                                                                                  // 将val的值返回给getSn_RX_RSR
   48b00:	e0bffd0b 	ldhu	r2,-12(fp)
}
   48b04:	e6ffff04 	addi	sp,fp,-4
   48b08:	dfc00217 	ldw	ra,8(sp)
   48b0c:	df000117 	ldw	fp,4(sp)
   48b10:	dc000017 	ldw	r16,0(sp)
   48b14:	dec00304 	addi	sp,sp,12
   48b18:	f800283a 	ret

00048b1c <send_data_processing>:

  This function read the Tx write pointer register and after copy the data in buffer update the Tx write pointer
  register. User should read upper byte first and lower byte later to get proper value.
  */
void send_data_processing(SOCKET s, uint8 *data, uint16 len)
{
   48b1c:	defff804 	addi	sp,sp,-32
   48b20:	dfc00715 	stw	ra,28(sp)
   48b24:	df000615 	stw	fp,24(sp)
   48b28:	dc000515 	stw	r16,20(sp)
   48b2c:	df000604 	addi	fp,sp,24
   48b30:	2007883a 	mov	r3,r4
   48b34:	e17ffd15 	stw	r5,-12(fp)
   48b38:	3005883a 	mov	r2,r6
   48b3c:	e0fffc05 	stb	r3,-16(fp)
   48b40:	e0bffe0d 	sth	r2,-8(fp)
    uint16 ptr =0;
   48b44:	e03ffa0d 	sth	zero,-24(fp)
    uint32 addrbsb =0;
   48b48:	e03ffb15 	stw	zero,-20(fp)
    if(len == 0)
   48b4c:	e0bffe0b 	ldhu	r2,-8(fp)
   48b50:	10003726 	beq	r2,zero,48c30 <send_data_processing+0x114>
    {
        return;
    }


    ptr = IINCHIP_READ( Sn_TX_WR0(s) );
   48b54:	e0bffc03 	ldbu	r2,-16(fp)
   48b58:	1004917a 	slli	r2,r2,5
   48b5c:	10890204 	addi	r2,r2,9224
   48b60:	1009883a 	mov	r4,r2
   48b64:	0047dc40 	call	47dc4 <IINCHIP_READ>
   48b68:	10803fcc 	andi	r2,r2,255
   48b6c:	e0bffa0d 	sth	r2,-24(fp)
    ptr = ((ptr & 0x00ff) << 8) + IINCHIP_READ(Sn_TX_WR1(s));
   48b70:	e0bffa0b 	ldhu	r2,-24(fp)
   48b74:	1004923a 	slli	r2,r2,8
   48b78:	1021883a 	mov	r16,r2
   48b7c:	e0bffc03 	ldbu	r2,-16(fp)
   48b80:	1004917a 	slli	r2,r2,5
   48b84:	10894204 	addi	r2,r2,9480
   48b88:	1009883a 	mov	r4,r2
   48b8c:	0047dc40 	call	47dc4 <IINCHIP_READ>
   48b90:	10803fcc 	andi	r2,r2,255
   48b94:	8085883a 	add	r2,r16,r2
   48b98:	e0bffa0d 	sth	r2,-24(fp)

    addrbsb = (uint32)(ptr<<8) + (s<<5) + 0x10;
   48b9c:	e0bffa0b 	ldhu	r2,-24(fp)
   48ba0:	1004923a 	slli	r2,r2,8
   48ba4:	1007883a 	mov	r3,r2
   48ba8:	e0bffc03 	ldbu	r2,-16(fp)
   48bac:	1004917a 	slli	r2,r2,5
   48bb0:	1885883a 	add	r2,r3,r2
   48bb4:	10800404 	addi	r2,r2,16
   48bb8:	e0bffb15 	stw	r2,-20(fp)
    wiz_write_buf(addrbsb, data, len);
   48bbc:	e0bffe0b 	ldhu	r2,-8(fp)
   48bc0:	100d883a 	mov	r6,r2
   48bc4:	e17ffd17 	ldw	r5,-12(fp)
   48bc8:	e13ffb17 	ldw	r4,-20(fp)
   48bcc:	0047e680 	call	47e68 <wiz_write_buf>

    ptr += len;
   48bd0:	e0fffa0b 	ldhu	r3,-24(fp)
   48bd4:	e0bffe0b 	ldhu	r2,-8(fp)
   48bd8:	1885883a 	add	r2,r3,r2
   48bdc:	e0bffa0d 	sth	r2,-24(fp)
    IINCHIP_WRITE( Sn_TX_WR0(s) ,(uint8)((ptr & 0xff00) >> 8));
   48be0:	e0bffc03 	ldbu	r2,-16(fp)
   48be4:	1004917a 	slli	r2,r2,5
   48be8:	10890204 	addi	r2,r2,9224
   48bec:	1007883a 	mov	r3,r2
   48bf0:	e0bffa0b 	ldhu	r2,-24(fp)
   48bf4:	1004d23a 	srli	r2,r2,8
   48bf8:	10803fcc 	andi	r2,r2,255
   48bfc:	100b883a 	mov	r5,r2
   48c00:	1809883a 	mov	r4,r3
   48c04:	0047d380 	call	47d38 <IINCHIP_WRITE>
    IINCHIP_WRITE( Sn_TX_WR1(s),(uint8)(ptr & 0x00ff));
   48c08:	e0bffc03 	ldbu	r2,-16(fp)
   48c0c:	1004917a 	slli	r2,r2,5
   48c10:	10894204 	addi	r2,r2,9480
   48c14:	1007883a 	mov	r3,r2
   48c18:	e0bffa0b 	ldhu	r2,-24(fp)
   48c1c:	10803fcc 	andi	r2,r2,255
   48c20:	100b883a 	mov	r5,r2
   48c24:	1809883a 	mov	r4,r3
   48c28:	0047d380 	call	47d38 <IINCHIP_WRITE>
   48c2c:	00000106 	br	48c34 <send_data_processing+0x118>
{
    uint16 ptr =0;
    uint32 addrbsb =0;
    if(len == 0)
    {
        return;
   48c30:	0001883a 	nop
    wiz_write_buf(addrbsb, data, len);

    ptr += len;
    IINCHIP_WRITE( Sn_TX_WR0(s) ,(uint8)((ptr & 0xff00) >> 8));
    IINCHIP_WRITE( Sn_TX_WR1(s),(uint8)(ptr & 0x00ff));
}
   48c34:	e6ffff04 	addi	sp,fp,-4
   48c38:	dfc00217 	ldw	ra,8(sp)
   48c3c:	df000117 	ldw	fp,4(sp)
   48c40:	dc000017 	ldw	r16,0(sp)
   48c44:	dec00304 	addi	sp,sp,12
   48c48:	f800283a 	ret

00048c4c <recv_data_processing>:
  This function read the Rx read pointer register
  and after copy the data from receive buffer update the Rx write pointer register.
  User should read upper byte first and lower byte later to get proper value.
  */
void recv_data_processing(SOCKET s, uint8 *data, uint16 len)
{
   48c4c:	defff804 	addi	sp,sp,-32
   48c50:	dfc00715 	stw	ra,28(sp)
   48c54:	df000615 	stw	fp,24(sp)
   48c58:	dc000515 	stw	r16,20(sp)
   48c5c:	df000604 	addi	fp,sp,24
   48c60:	2007883a 	mov	r3,r4
   48c64:	e17ffd15 	stw	r5,-12(fp)
   48c68:	3005883a 	mov	r2,r6
   48c6c:	e0fffc05 	stb	r3,-16(fp)
   48c70:	e0bffe0d 	sth	r2,-8(fp)
    uint16 ptr = 0;
   48c74:	e03ffa0d 	sth	zero,-24(fp)
    uint32 addrbsb = 0;
   48c78:	e03ffb15 	stw	zero,-20(fp)

    if(len == 0)                                          // 若接收数据的长度为0，则串口打印“"CH: 0 Unexpected2 length 0”
   48c7c:	e0bffe0b 	ldhu	r2,-8(fp)
   48c80:	10003726 	beq	r2,zero,48d60 <recv_data_processing+0x114>
        return;
    }

    // MCU读取Sn_RX_RD接收写指针寄存器的值，并赋给ptr
    // Sn_RX_RD保存接收缓存中数据的首地址，若有数据接收，则接收完后该寄存器值要更新
    ptr = IINCHIP_READ( Sn_RX_RD0(s) );
   48c84:	e0bffc03 	ldbu	r2,-16(fp)
   48c88:	1004917a 	slli	r2,r2,5
   48c8c:	108a0204 	addi	r2,r2,10248
   48c90:	1009883a 	mov	r4,r2
   48c94:	0047dc40 	call	47dc4 <IINCHIP_READ>
   48c98:	10803fcc 	andi	r2,r2,255
   48c9c:	e0bffa0d 	sth	r2,-24(fp)
    ptr = ((ptr & 0x00ff) << 8) + IINCHIP_READ( Sn_RX_RD1(s) );
   48ca0:	e0bffa0b 	ldhu	r2,-24(fp)
   48ca4:	1004923a 	slli	r2,r2,8
   48ca8:	1021883a 	mov	r16,r2
   48cac:	e0bffc03 	ldbu	r2,-16(fp)
   48cb0:	1004917a 	slli	r2,r2,5
   48cb4:	108a4204 	addi	r2,r2,10504
   48cb8:	1009883a 	mov	r4,r2
   48cbc:	0047dc40 	call	47dc4 <IINCHIP_READ>
   48cc0:	10803fcc 	andi	r2,r2,255
   48cc4:	8085883a 	add	r2,r16,r2
   48cc8:	e0bffa0d 	sth	r2,-24(fp)

    addrbsb = (uint32)(ptr<<8) + (s<<5) + 0x18;           // 获取接收到的数据的绝对地址
   48ccc:	e0bffa0b 	ldhu	r2,-24(fp)
   48cd0:	1004923a 	slli	r2,r2,8
   48cd4:	1007883a 	mov	r3,r2
   48cd8:	e0bffc03 	ldbu	r2,-16(fp)
   48cdc:	1004917a 	slli	r2,r2,5
   48ce0:	1885883a 	add	r2,r3,r2
   48ce4:	10800604 	addi	r2,r2,24
   48ce8:	e0bffb15 	stw	r2,-20(fp)
    wiz_read_buf(addrbsb, data, len);                                                     // 通过绝对地址，将接收到的数据发给MCU
   48cec:	e0bffe0b 	ldhu	r2,-8(fp)
   48cf0:	100d883a 	mov	r6,r2
   48cf4:	e17ffd17 	ldw	r5,-12(fp)
   48cf8:	e13ffb17 	ldw	r4,-20(fp)
   48cfc:	0047f2c0 	call	47f2c <wiz_read_buf>

    // 更新Sn_RX_RD寄存器的值
    ptr += len;                                                                                                             //
   48d00:	e0fffa0b 	ldhu	r3,-24(fp)
   48d04:	e0bffe0b 	ldhu	r2,-8(fp)
   48d08:	1885883a 	add	r2,r3,r2
   48d0c:	e0bffa0d 	sth	r2,-24(fp)
    IINCHIP_WRITE( Sn_RX_RD0(s), (uint8)((ptr & 0xff00) >> 8));
   48d10:	e0bffc03 	ldbu	r2,-16(fp)
   48d14:	1004917a 	slli	r2,r2,5
   48d18:	108a0204 	addi	r2,r2,10248
   48d1c:	1007883a 	mov	r3,r2
   48d20:	e0bffa0b 	ldhu	r2,-24(fp)
   48d24:	1004d23a 	srli	r2,r2,8
   48d28:	10803fcc 	andi	r2,r2,255
   48d2c:	100b883a 	mov	r5,r2
   48d30:	1809883a 	mov	r4,r3
   48d34:	0047d380 	call	47d38 <IINCHIP_WRITE>
    IINCHIP_WRITE( Sn_RX_RD1(s), (uint8)(ptr & 0x00ff));
   48d38:	e0bffc03 	ldbu	r2,-16(fp)
   48d3c:	1004917a 	slli	r2,r2,5
   48d40:	108a4204 	addi	r2,r2,10504
   48d44:	1007883a 	mov	r3,r2
   48d48:	e0bffa0b 	ldhu	r2,-24(fp)
   48d4c:	10803fcc 	andi	r2,r2,255
   48d50:	100b883a 	mov	r5,r2
   48d54:	1809883a 	mov	r4,r3
   48d58:	0047d380 	call	47d38 <IINCHIP_WRITE>
   48d5c:	00000106 	br	48d64 <recv_data_processing+0x118>
    uint16 ptr = 0;
    uint32 addrbsb = 0;

    if(len == 0)                                          // 若接收数据的长度为0，则串口打印“"CH: 0 Unexpected2 length 0”
    {
        return;
   48d60:	0001883a 	nop

    // 更新Sn_RX_RD寄存器的值
    ptr += len;                                                                                                             //
    IINCHIP_WRITE( Sn_RX_RD0(s), (uint8)((ptr & 0xff00) >> 8));
    IINCHIP_WRITE( Sn_RX_RD1(s), (uint8)(ptr & 0x00ff));
}
   48d64:	e6ffff04 	addi	sp,fp,-4
   48d68:	dfc00217 	ldw	ra,8(sp)
   48d6c:	df000117 	ldw	fp,4(sp)
   48d70:	dc000017 	ldw	r16,0(sp)
   48d74:	dec00304 	addi	sp,sp,12
   48d78:	f800283a 	ret

00048d7c <setSn_IR>:

void setSn_IR(uint8 s, uint8 val)
{
   48d7c:	defffc04 	addi	sp,sp,-16
   48d80:	dfc00315 	stw	ra,12(sp)
   48d84:	df000215 	stw	fp,8(sp)
   48d88:	df000204 	addi	fp,sp,8
   48d8c:	2007883a 	mov	r3,r4
   48d90:	2805883a 	mov	r2,r5
   48d94:	e0fffe05 	stb	r3,-8(fp)
   48d98:	e0bfff05 	stb	r2,-4(fp)
    IINCHIP_WRITE(Sn_IR(s), val);
   48d9c:	e0bffe03 	ldbu	r2,-8(fp)
   48da0:	1004917a 	slli	r2,r2,5
   48da4:	10808204 	addi	r2,r2,520
   48da8:	1007883a 	mov	r3,r2
   48dac:	e0bfff03 	ldbu	r2,-4(fp)
   48db0:	100b883a 	mov	r5,r2
   48db4:	1809883a 	mov	r4,r3
   48db8:	0047d380 	call	47d38 <IINCHIP_WRITE>
}
   48dbc:	0001883a 	nop
   48dc0:	e037883a 	mov	sp,fp
   48dc4:	dfc00117 	ldw	ra,4(sp)
   48dc8:	df000017 	ldw	fp,0(sp)
   48dcc:	dec00204 	addi	sp,sp,8
   48dd0:	f800283a 	ret

00048dd4 <__divsi3>:
   48dd4:	20001b16 	blt	r4,zero,48e44 <__divsi3+0x70>
   48dd8:	000f883a 	mov	r7,zero
   48ddc:	28001616 	blt	r5,zero,48e38 <__divsi3+0x64>
   48de0:	200d883a 	mov	r6,r4
   48de4:	29001a2e 	bgeu	r5,r4,48e50 <__divsi3+0x7c>
   48de8:	00800804 	movi	r2,32
   48dec:	00c00044 	movi	r3,1
   48df0:	00000106 	br	48df8 <__divsi3+0x24>
   48df4:	10000d26 	beq	r2,zero,48e2c <__divsi3+0x58>
   48df8:	294b883a 	add	r5,r5,r5
   48dfc:	10bfffc4 	addi	r2,r2,-1
   48e00:	18c7883a 	add	r3,r3,r3
   48e04:	293ffb36 	bltu	r5,r4,48df4 <__reset+0xfffc7df4>
   48e08:	0005883a 	mov	r2,zero
   48e0c:	18000726 	beq	r3,zero,48e2c <__divsi3+0x58>
   48e10:	0005883a 	mov	r2,zero
   48e14:	31400236 	bltu	r6,r5,48e20 <__divsi3+0x4c>
   48e18:	314dc83a 	sub	r6,r6,r5
   48e1c:	10c4b03a 	or	r2,r2,r3
   48e20:	1806d07a 	srli	r3,r3,1
   48e24:	280ad07a 	srli	r5,r5,1
   48e28:	183ffa1e 	bne	r3,zero,48e14 <__reset+0xfffc7e14>
   48e2c:	38000126 	beq	r7,zero,48e34 <__divsi3+0x60>
   48e30:	0085c83a 	sub	r2,zero,r2
   48e34:	f800283a 	ret
   48e38:	014bc83a 	sub	r5,zero,r5
   48e3c:	39c0005c 	xori	r7,r7,1
   48e40:	003fe706 	br	48de0 <__reset+0xfffc7de0>
   48e44:	0109c83a 	sub	r4,zero,r4
   48e48:	01c00044 	movi	r7,1
   48e4c:	003fe306 	br	48ddc <__reset+0xfffc7ddc>
   48e50:	00c00044 	movi	r3,1
   48e54:	003fee06 	br	48e10 <__reset+0xfffc7e10>

00048e58 <__modsi3>:
   48e58:	20001716 	blt	r4,zero,48eb8 <__modsi3+0x60>
   48e5c:	000f883a 	mov	r7,zero
   48e60:	2005883a 	mov	r2,r4
   48e64:	28001216 	blt	r5,zero,48eb0 <__modsi3+0x58>
   48e68:	2900162e 	bgeu	r5,r4,48ec4 <__modsi3+0x6c>
   48e6c:	01800804 	movi	r6,32
   48e70:	00c00044 	movi	r3,1
   48e74:	00000106 	br	48e7c <__modsi3+0x24>
   48e78:	30000a26 	beq	r6,zero,48ea4 <__modsi3+0x4c>
   48e7c:	294b883a 	add	r5,r5,r5
   48e80:	31bfffc4 	addi	r6,r6,-1
   48e84:	18c7883a 	add	r3,r3,r3
   48e88:	293ffb36 	bltu	r5,r4,48e78 <__reset+0xfffc7e78>
   48e8c:	18000526 	beq	r3,zero,48ea4 <__modsi3+0x4c>
   48e90:	1806d07a 	srli	r3,r3,1
   48e94:	11400136 	bltu	r2,r5,48e9c <__modsi3+0x44>
   48e98:	1145c83a 	sub	r2,r2,r5
   48e9c:	280ad07a 	srli	r5,r5,1
   48ea0:	183ffb1e 	bne	r3,zero,48e90 <__reset+0xfffc7e90>
   48ea4:	38000126 	beq	r7,zero,48eac <__modsi3+0x54>
   48ea8:	0085c83a 	sub	r2,zero,r2
   48eac:	f800283a 	ret
   48eb0:	014bc83a 	sub	r5,zero,r5
   48eb4:	003fec06 	br	48e68 <__reset+0xfffc7e68>
   48eb8:	0109c83a 	sub	r4,zero,r4
   48ebc:	01c00044 	movi	r7,1
   48ec0:	003fe706 	br	48e60 <__reset+0xfffc7e60>
   48ec4:	00c00044 	movi	r3,1
   48ec8:	003ff106 	br	48e90 <__reset+0xfffc7e90>

00048ecc <__udivsi3>:
   48ecc:	200d883a 	mov	r6,r4
   48ed0:	2900152e 	bgeu	r5,r4,48f28 <__udivsi3+0x5c>
   48ed4:	28001416 	blt	r5,zero,48f28 <__udivsi3+0x5c>
   48ed8:	00800804 	movi	r2,32
   48edc:	00c00044 	movi	r3,1
   48ee0:	00000206 	br	48eec <__udivsi3+0x20>
   48ee4:	10000e26 	beq	r2,zero,48f20 <__udivsi3+0x54>
   48ee8:	28000516 	blt	r5,zero,48f00 <__udivsi3+0x34>
   48eec:	294b883a 	add	r5,r5,r5
   48ef0:	10bfffc4 	addi	r2,r2,-1
   48ef4:	18c7883a 	add	r3,r3,r3
   48ef8:	293ffa36 	bltu	r5,r4,48ee4 <__reset+0xfffc7ee4>
   48efc:	18000826 	beq	r3,zero,48f20 <__udivsi3+0x54>
   48f00:	0005883a 	mov	r2,zero
   48f04:	31400236 	bltu	r6,r5,48f10 <__udivsi3+0x44>
   48f08:	314dc83a 	sub	r6,r6,r5
   48f0c:	10c4b03a 	or	r2,r2,r3
   48f10:	1806d07a 	srli	r3,r3,1
   48f14:	280ad07a 	srli	r5,r5,1
   48f18:	183ffa1e 	bne	r3,zero,48f04 <__reset+0xfffc7f04>
   48f1c:	f800283a 	ret
   48f20:	0005883a 	mov	r2,zero
   48f24:	f800283a 	ret
   48f28:	00c00044 	movi	r3,1
   48f2c:	003ff406 	br	48f00 <__reset+0xfffc7f00>

00048f30 <__umodsi3>:
   48f30:	2005883a 	mov	r2,r4
   48f34:	2900122e 	bgeu	r5,r4,48f80 <__umodsi3+0x50>
   48f38:	28001116 	blt	r5,zero,48f80 <__umodsi3+0x50>
   48f3c:	01800804 	movi	r6,32
   48f40:	00c00044 	movi	r3,1
   48f44:	00000206 	br	48f50 <__umodsi3+0x20>
   48f48:	30000c26 	beq	r6,zero,48f7c <__umodsi3+0x4c>
   48f4c:	28000516 	blt	r5,zero,48f64 <__umodsi3+0x34>
   48f50:	294b883a 	add	r5,r5,r5
   48f54:	31bfffc4 	addi	r6,r6,-1
   48f58:	18c7883a 	add	r3,r3,r3
   48f5c:	293ffa36 	bltu	r5,r4,48f48 <__reset+0xfffc7f48>
   48f60:	18000626 	beq	r3,zero,48f7c <__umodsi3+0x4c>
   48f64:	1806d07a 	srli	r3,r3,1
   48f68:	11400136 	bltu	r2,r5,48f70 <__umodsi3+0x40>
   48f6c:	1145c83a 	sub	r2,r2,r5
   48f70:	280ad07a 	srli	r5,r5,1
   48f74:	183ffb1e 	bne	r3,zero,48f64 <__reset+0xfffc7f64>
   48f78:	f800283a 	ret
   48f7c:	f800283a 	ret
   48f80:	00c00044 	movi	r3,1
   48f84:	003ff706 	br	48f64 <__reset+0xfffc7f64>

00048f88 <memcpy>:
   48f88:	defffd04 	addi	sp,sp,-12
   48f8c:	dfc00215 	stw	ra,8(sp)
   48f90:	dc400115 	stw	r17,4(sp)
   48f94:	dc000015 	stw	r16,0(sp)
   48f98:	00c003c4 	movi	r3,15
   48f9c:	2005883a 	mov	r2,r4
   48fa0:	1980452e 	bgeu	r3,r6,490b8 <memcpy+0x130>
   48fa4:	2906b03a 	or	r3,r5,r4
   48fa8:	18c000cc 	andi	r3,r3,3
   48fac:	1800441e 	bne	r3,zero,490c0 <memcpy+0x138>
   48fb0:	347ffc04 	addi	r17,r6,-16
   48fb4:	8822d13a 	srli	r17,r17,4
   48fb8:	28c00104 	addi	r3,r5,4
   48fbc:	23400104 	addi	r13,r4,4
   48fc0:	8820913a 	slli	r16,r17,4
   48fc4:	2b000204 	addi	r12,r5,8
   48fc8:	22c00204 	addi	r11,r4,8
   48fcc:	84000504 	addi	r16,r16,20
   48fd0:	2a800304 	addi	r10,r5,12
   48fd4:	22400304 	addi	r9,r4,12
   48fd8:	2c21883a 	add	r16,r5,r16
   48fdc:	2811883a 	mov	r8,r5
   48fe0:	200f883a 	mov	r7,r4
   48fe4:	41000017 	ldw	r4,0(r8)
   48fe8:	1fc00017 	ldw	ra,0(r3)
   48fec:	63c00017 	ldw	r15,0(r12)
   48ff0:	39000015 	stw	r4,0(r7)
   48ff4:	53800017 	ldw	r14,0(r10)
   48ff8:	6fc00015 	stw	ra,0(r13)
   48ffc:	5bc00015 	stw	r15,0(r11)
   49000:	4b800015 	stw	r14,0(r9)
   49004:	18c00404 	addi	r3,r3,16
   49008:	39c00404 	addi	r7,r7,16
   4900c:	42000404 	addi	r8,r8,16
   49010:	6b400404 	addi	r13,r13,16
   49014:	63000404 	addi	r12,r12,16
   49018:	5ac00404 	addi	r11,r11,16
   4901c:	52800404 	addi	r10,r10,16
   49020:	4a400404 	addi	r9,r9,16
   49024:	1c3fef1e 	bne	r3,r16,48fe4 <__reset+0xfffc7fe4>
   49028:	89c00044 	addi	r7,r17,1
   4902c:	380e913a 	slli	r7,r7,4
   49030:	310003cc 	andi	r4,r6,15
   49034:	02c000c4 	movi	r11,3
   49038:	11c7883a 	add	r3,r2,r7
   4903c:	29cb883a 	add	r5,r5,r7
   49040:	5900212e 	bgeu	r11,r4,490c8 <memcpy+0x140>
   49044:	1813883a 	mov	r9,r3
   49048:	2811883a 	mov	r8,r5
   4904c:	200f883a 	mov	r7,r4
   49050:	42800017 	ldw	r10,0(r8)
   49054:	4a400104 	addi	r9,r9,4
   49058:	39ffff04 	addi	r7,r7,-4
   4905c:	4abfff15 	stw	r10,-4(r9)
   49060:	42000104 	addi	r8,r8,4
   49064:	59fffa36 	bltu	r11,r7,49050 <__reset+0xfffc8050>
   49068:	213fff04 	addi	r4,r4,-4
   4906c:	2008d0ba 	srli	r4,r4,2
   49070:	318000cc 	andi	r6,r6,3
   49074:	21000044 	addi	r4,r4,1
   49078:	2109883a 	add	r4,r4,r4
   4907c:	2109883a 	add	r4,r4,r4
   49080:	1907883a 	add	r3,r3,r4
   49084:	290b883a 	add	r5,r5,r4
   49088:	30000626 	beq	r6,zero,490a4 <memcpy+0x11c>
   4908c:	198d883a 	add	r6,r3,r6
   49090:	29c00003 	ldbu	r7,0(r5)
   49094:	18c00044 	addi	r3,r3,1
   49098:	29400044 	addi	r5,r5,1
   4909c:	19ffffc5 	stb	r7,-1(r3)
   490a0:	19bffb1e 	bne	r3,r6,49090 <__reset+0xfffc8090>
   490a4:	dfc00217 	ldw	ra,8(sp)
   490a8:	dc400117 	ldw	r17,4(sp)
   490ac:	dc000017 	ldw	r16,0(sp)
   490b0:	dec00304 	addi	sp,sp,12
   490b4:	f800283a 	ret
   490b8:	2007883a 	mov	r3,r4
   490bc:	003ff206 	br	49088 <__reset+0xfffc8088>
   490c0:	2007883a 	mov	r3,r4
   490c4:	003ff106 	br	4908c <__reset+0xfffc808c>
   490c8:	200d883a 	mov	r6,r4
   490cc:	003fee06 	br	49088 <__reset+0xfffc8088>

000490d0 <memset>:
   490d0:	20c000cc 	andi	r3,r4,3
   490d4:	2005883a 	mov	r2,r4
   490d8:	18004426 	beq	r3,zero,491ec <memset+0x11c>
   490dc:	31ffffc4 	addi	r7,r6,-1
   490e0:	30004026 	beq	r6,zero,491e4 <memset+0x114>
   490e4:	2813883a 	mov	r9,r5
   490e8:	200d883a 	mov	r6,r4
   490ec:	2007883a 	mov	r3,r4
   490f0:	00000406 	br	49104 <memset+0x34>
   490f4:	3a3fffc4 	addi	r8,r7,-1
   490f8:	31800044 	addi	r6,r6,1
   490fc:	38003926 	beq	r7,zero,491e4 <memset+0x114>
   49100:	400f883a 	mov	r7,r8
   49104:	18c00044 	addi	r3,r3,1
   49108:	32400005 	stb	r9,0(r6)
   4910c:	1a0000cc 	andi	r8,r3,3
   49110:	403ff81e 	bne	r8,zero,490f4 <__reset+0xfffc80f4>
   49114:	010000c4 	movi	r4,3
   49118:	21c02d2e 	bgeu	r4,r7,491d0 <memset+0x100>
   4911c:	29003fcc 	andi	r4,r5,255
   49120:	200c923a 	slli	r6,r4,8
   49124:	3108b03a 	or	r4,r6,r4
   49128:	200c943a 	slli	r6,r4,16
   4912c:	218cb03a 	or	r6,r4,r6
   49130:	010003c4 	movi	r4,15
   49134:	21c0182e 	bgeu	r4,r7,49198 <memset+0xc8>
   49138:	3b3ffc04 	addi	r12,r7,-16
   4913c:	6018d13a 	srli	r12,r12,4
   49140:	1a000104 	addi	r8,r3,4
   49144:	1ac00204 	addi	r11,r3,8
   49148:	6008913a 	slli	r4,r12,4
   4914c:	1a800304 	addi	r10,r3,12
   49150:	1813883a 	mov	r9,r3
   49154:	21000504 	addi	r4,r4,20
   49158:	1909883a 	add	r4,r3,r4
   4915c:	49800015 	stw	r6,0(r9)
   49160:	41800015 	stw	r6,0(r8)
   49164:	59800015 	stw	r6,0(r11)
   49168:	51800015 	stw	r6,0(r10)
   4916c:	42000404 	addi	r8,r8,16
   49170:	4a400404 	addi	r9,r9,16
   49174:	5ac00404 	addi	r11,r11,16
   49178:	52800404 	addi	r10,r10,16
   4917c:	413ff71e 	bne	r8,r4,4915c <__reset+0xfffc815c>
   49180:	63000044 	addi	r12,r12,1
   49184:	6018913a 	slli	r12,r12,4
   49188:	39c003cc 	andi	r7,r7,15
   4918c:	010000c4 	movi	r4,3
   49190:	1b07883a 	add	r3,r3,r12
   49194:	21c00e2e 	bgeu	r4,r7,491d0 <memset+0x100>
   49198:	1813883a 	mov	r9,r3
   4919c:	3811883a 	mov	r8,r7
   491a0:	010000c4 	movi	r4,3
   491a4:	49800015 	stw	r6,0(r9)
   491a8:	423fff04 	addi	r8,r8,-4
   491ac:	4a400104 	addi	r9,r9,4
   491b0:	223ffc36 	bltu	r4,r8,491a4 <__reset+0xfffc81a4>
   491b4:	393fff04 	addi	r4,r7,-4
   491b8:	2008d0ba 	srli	r4,r4,2
   491bc:	39c000cc 	andi	r7,r7,3
   491c0:	21000044 	addi	r4,r4,1
   491c4:	2109883a 	add	r4,r4,r4
   491c8:	2109883a 	add	r4,r4,r4
   491cc:	1907883a 	add	r3,r3,r4
   491d0:	38000526 	beq	r7,zero,491e8 <memset+0x118>
   491d4:	19cf883a 	add	r7,r3,r7
   491d8:	19400005 	stb	r5,0(r3)
   491dc:	18c00044 	addi	r3,r3,1
   491e0:	38fffd1e 	bne	r7,r3,491d8 <__reset+0xfffc81d8>
   491e4:	f800283a 	ret
   491e8:	f800283a 	ret
   491ec:	2007883a 	mov	r3,r4
   491f0:	300f883a 	mov	r7,r6
   491f4:	003fc706 	br	49114 <__reset+0xfffc8114>

000491f8 <strcmp>:
   491f8:	2144b03a 	or	r2,r4,r5
   491fc:	108000cc 	andi	r2,r2,3
   49200:	1000171e 	bne	r2,zero,49260 <strcmp+0x68>
   49204:	20800017 	ldw	r2,0(r4)
   49208:	28c00017 	ldw	r3,0(r5)
   4920c:	10c0141e 	bne	r2,r3,49260 <strcmp+0x68>
   49210:	027fbff4 	movhi	r9,65279
   49214:	4a7fbfc4 	addi	r9,r9,-257
   49218:	0086303a 	nor	r3,zero,r2
   4921c:	02202074 	movhi	r8,32897
   49220:	1245883a 	add	r2,r2,r9
   49224:	42202004 	addi	r8,r8,-32640
   49228:	10c4703a 	and	r2,r2,r3
   4922c:	1204703a 	and	r2,r2,r8
   49230:	10000226 	beq	r2,zero,4923c <strcmp+0x44>
   49234:	00002306 	br	492c4 <strcmp+0xcc>
   49238:	1000221e 	bne	r2,zero,492c4 <strcmp+0xcc>
   4923c:	21000104 	addi	r4,r4,4
   49240:	20c00017 	ldw	r3,0(r4)
   49244:	29400104 	addi	r5,r5,4
   49248:	29800017 	ldw	r6,0(r5)
   4924c:	1a4f883a 	add	r7,r3,r9
   49250:	00c4303a 	nor	r2,zero,r3
   49254:	3884703a 	and	r2,r7,r2
   49258:	1204703a 	and	r2,r2,r8
   4925c:	19bff626 	beq	r3,r6,49238 <__reset+0xfffc8238>
   49260:	20800003 	ldbu	r2,0(r4)
   49264:	10c03fcc 	andi	r3,r2,255
   49268:	18c0201c 	xori	r3,r3,128
   4926c:	18ffe004 	addi	r3,r3,-128
   49270:	18000c26 	beq	r3,zero,492a4 <strcmp+0xac>
   49274:	29800007 	ldb	r6,0(r5)
   49278:	19800326 	beq	r3,r6,49288 <strcmp+0x90>
   4927c:	00001306 	br	492cc <strcmp+0xd4>
   49280:	29800007 	ldb	r6,0(r5)
   49284:	11800b1e 	bne	r2,r6,492b4 <strcmp+0xbc>
   49288:	21000044 	addi	r4,r4,1
   4928c:	20c00003 	ldbu	r3,0(r4)
   49290:	29400044 	addi	r5,r5,1
   49294:	18803fcc 	andi	r2,r3,255
   49298:	1080201c 	xori	r2,r2,128
   4929c:	10bfe004 	addi	r2,r2,-128
   492a0:	103ff71e 	bne	r2,zero,49280 <__reset+0xfffc8280>
   492a4:	0007883a 	mov	r3,zero
   492a8:	28800003 	ldbu	r2,0(r5)
   492ac:	1885c83a 	sub	r2,r3,r2
   492b0:	f800283a 	ret
   492b4:	28800003 	ldbu	r2,0(r5)
   492b8:	18c03fcc 	andi	r3,r3,255
   492bc:	1885c83a 	sub	r2,r3,r2
   492c0:	f800283a 	ret
   492c4:	0005883a 	mov	r2,zero
   492c8:	f800283a 	ret
   492cc:	10c03fcc 	andi	r3,r2,255
   492d0:	003ff506 	br	492a8 <__reset+0xfffc82a8>

000492d4 <strlen>:
   492d4:	208000cc 	andi	r2,r4,3
   492d8:	10002026 	beq	r2,zero,4935c <strlen+0x88>
   492dc:	20800007 	ldb	r2,0(r4)
   492e0:	10002026 	beq	r2,zero,49364 <strlen+0x90>
   492e4:	2005883a 	mov	r2,r4
   492e8:	00000206 	br	492f4 <strlen+0x20>
   492ec:	10c00007 	ldb	r3,0(r2)
   492f0:	18001826 	beq	r3,zero,49354 <strlen+0x80>
   492f4:	10800044 	addi	r2,r2,1
   492f8:	10c000cc 	andi	r3,r2,3
   492fc:	183ffb1e 	bne	r3,zero,492ec <__reset+0xfffc82ec>
   49300:	10c00017 	ldw	r3,0(r2)
   49304:	01ffbff4 	movhi	r7,65279
   49308:	39ffbfc4 	addi	r7,r7,-257
   4930c:	00ca303a 	nor	r5,zero,r3
   49310:	01a02074 	movhi	r6,32897
   49314:	19c7883a 	add	r3,r3,r7
   49318:	31a02004 	addi	r6,r6,-32640
   4931c:	1946703a 	and	r3,r3,r5
   49320:	1986703a 	and	r3,r3,r6
   49324:	1800091e 	bne	r3,zero,4934c <strlen+0x78>
   49328:	10800104 	addi	r2,r2,4
   4932c:	10c00017 	ldw	r3,0(r2)
   49330:	19cb883a 	add	r5,r3,r7
   49334:	00c6303a 	nor	r3,zero,r3
   49338:	28c6703a 	and	r3,r5,r3
   4933c:	1986703a 	and	r3,r3,r6
   49340:	183ff926 	beq	r3,zero,49328 <__reset+0xfffc8328>
   49344:	00000106 	br	4934c <strlen+0x78>
   49348:	10800044 	addi	r2,r2,1
   4934c:	10c00007 	ldb	r3,0(r2)
   49350:	183ffd1e 	bne	r3,zero,49348 <__reset+0xfffc8348>
   49354:	1105c83a 	sub	r2,r2,r4
   49358:	f800283a 	ret
   4935c:	2005883a 	mov	r2,r4
   49360:	003fe706 	br	49300 <__reset+0xfffc8300>
   49364:	0005883a 	mov	r2,zero
   49368:	f800283a 	ret

0004936c <strncmp>:
   4936c:	30003126 	beq	r6,zero,49434 <strncmp+0xc8>
   49370:	2144b03a 	or	r2,r4,r5
   49374:	108000cc 	andi	r2,r2,3
   49378:	10001e1e 	bne	r2,zero,493f4 <strncmp+0x88>
   4937c:	024000c4 	movi	r9,3
   49380:	49801c2e 	bgeu	r9,r6,493f4 <strncmp+0x88>
   49384:	20800017 	ldw	r2,0(r4)
   49388:	28c00017 	ldw	r3,0(r5)
   4938c:	10c0191e 	bne	r2,r3,493f4 <strncmp+0x88>
   49390:	31bfff04 	addi	r6,r6,-4
   49394:	30002726 	beq	r6,zero,49434 <strncmp+0xc8>
   49398:	02ffbff4 	movhi	r11,65279
   4939c:	5affbfc4 	addi	r11,r11,-257
   493a0:	0086303a 	nor	r3,zero,r2
   493a4:	02a02074 	movhi	r10,32897
   493a8:	12c5883a 	add	r2,r2,r11
   493ac:	52a02004 	addi	r10,r10,-32640
   493b0:	10c4703a 	and	r2,r2,r3
   493b4:	1284703a 	and	r2,r2,r10
   493b8:	10000b26 	beq	r2,zero,493e8 <strncmp+0x7c>
   493bc:	00001d06 	br	49434 <strncmp+0xc8>
   493c0:	20c00017 	ldw	r3,0(r4)
   493c4:	29c00017 	ldw	r7,0(r5)
   493c8:	1ad1883a 	add	r8,r3,r11
   493cc:	00c4303a 	nor	r2,zero,r3
   493d0:	4084703a 	and	r2,r8,r2
   493d4:	1284703a 	and	r2,r2,r10
   493d8:	19c0061e 	bne	r3,r7,493f4 <strncmp+0x88>
   493dc:	31bfff04 	addi	r6,r6,-4
   493e0:	30001426 	beq	r6,zero,49434 <strncmp+0xc8>
   493e4:	1000131e 	bne	r2,zero,49434 <strncmp+0xc8>
   493e8:	21000104 	addi	r4,r4,4
   493ec:	29400104 	addi	r5,r5,4
   493f0:	49bff336 	bltu	r9,r6,493c0 <__reset+0xfffc83c0>
   493f4:	28800007 	ldb	r2,0(r5)
   493f8:	20c00007 	ldb	r3,0(r4)
   493fc:	31bfffc4 	addi	r6,r6,-1
   49400:	10c0081e 	bne	r2,r3,49424 <strncmp+0xb8>
   49404:	30000b26 	beq	r6,zero,49434 <strncmp+0xc8>
   49408:	10000a26 	beq	r2,zero,49434 <strncmp+0xc8>
   4940c:	21000044 	addi	r4,r4,1
   49410:	29400044 	addi	r5,r5,1
   49414:	20800007 	ldb	r2,0(r4)
   49418:	28c00007 	ldb	r3,0(r5)
   4941c:	31bfffc4 	addi	r6,r6,-1
   49420:	10fff826 	beq	r2,r3,49404 <__reset+0xfffc8404>
   49424:	20800003 	ldbu	r2,0(r4)
   49428:	28c00003 	ldbu	r3,0(r5)
   4942c:	10c5c83a 	sub	r2,r2,r3
   49430:	f800283a 	ret
   49434:	0005883a 	mov	r2,zero
   49438:	f800283a 	ret

0004943c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   4943c:	defffc04 	addi	sp,sp,-16
   49440:	dfc00315 	stw	ra,12(sp)
   49444:	df000215 	stw	fp,8(sp)
   49448:	df000204 	addi	fp,sp,8
   4944c:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   49450:	d1600604 	addi	r5,gp,-32744
   49454:	e13fff17 	ldw	r4,-4(fp)
   49458:	004bfa80 	call	4bfa8 <alt_find_dev>
   4945c:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
   49460:	e0bffe17 	ldw	r2,-8(fp)
   49464:	10000926 	beq	r2,zero,4948c <alt_flash_open_dev+0x50>
   49468:	e0bffe17 	ldw	r2,-8(fp)
   4946c:	10800317 	ldw	r2,12(r2)
   49470:	10000626 	beq	r2,zero,4948c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
   49474:	e0bffe17 	ldw	r2,-8(fp)
   49478:	10800317 	ldw	r2,12(r2)
   4947c:	e17fff17 	ldw	r5,-4(fp)
   49480:	e13ffe17 	ldw	r4,-8(fp)
   49484:	103ee83a 	callr	r2
   49488:	00000106 	br	49490 <alt_flash_open_dev+0x54>
  }

  return dev;
   4948c:	e0bffe17 	ldw	r2,-8(fp)
}
   49490:	e037883a 	mov	sp,fp
   49494:	dfc00117 	ldw	ra,4(sp)
   49498:	df000017 	ldw	fp,0(sp)
   4949c:	dec00204 	addi	sp,sp,8
   494a0:	f800283a 	ret

000494a4 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   494a4:	defffd04 	addi	sp,sp,-12
   494a8:	dfc00215 	stw	ra,8(sp)
   494ac:	df000115 	stw	fp,4(sp)
   494b0:	df000104 	addi	fp,sp,4
   494b4:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   494b8:	e0bfff17 	ldw	r2,-4(fp)
   494bc:	10000826 	beq	r2,zero,494e0 <alt_flash_close_dev+0x3c>
   494c0:	e0bfff17 	ldw	r2,-4(fp)
   494c4:	10800417 	ldw	r2,16(r2)
   494c8:	10000526 	beq	r2,zero,494e0 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
   494cc:	e0bfff17 	ldw	r2,-4(fp)
   494d0:	10800417 	ldw	r2,16(r2)
   494d4:	e13fff17 	ldw	r4,-4(fp)
   494d8:	103ee83a 	callr	r2
  }
  return;
   494dc:	0001883a 	nop
   494e0:	0001883a 	nop
}
   494e4:	e037883a 	mov	sp,fp
   494e8:	dfc00117 	ldw	ra,4(sp)
   494ec:	df000017 	ldw	fp,0(sp)
   494f0:	dec00204 	addi	sp,sp,8
   494f4:	f800283a 	ret

000494f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   494f8:	defff904 	addi	sp,sp,-28
   494fc:	dfc00615 	stw	ra,24(sp)
   49500:	df000515 	stw	fp,20(sp)
   49504:	df000504 	addi	fp,sp,20
   49508:	e13ffc15 	stw	r4,-16(fp)
   4950c:	e17ffd15 	stw	r5,-12(fp)
   49510:	e1bffe15 	stw	r6,-8(fp)
   49514:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   49518:	e0800217 	ldw	r2,8(fp)
   4951c:	d8800015 	stw	r2,0(sp)
   49520:	e1ffff17 	ldw	r7,-4(fp)
   49524:	e1bffe17 	ldw	r6,-8(fp)
   49528:	e17ffd17 	ldw	r5,-12(fp)
   4952c:	e13ffc17 	ldw	r4,-16(fp)
   49530:	00496a80 	call	496a8 <alt_iic_isr_register>
}  
   49534:	e037883a 	mov	sp,fp
   49538:	dfc00117 	ldw	ra,4(sp)
   4953c:	df000017 	ldw	fp,0(sp)
   49540:	dec00204 	addi	sp,sp,8
   49544:	f800283a 	ret

00049548 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   49548:	defff904 	addi	sp,sp,-28
   4954c:	df000615 	stw	fp,24(sp)
   49550:	df000604 	addi	fp,sp,24
   49554:	e13ffe15 	stw	r4,-8(fp)
   49558:	e17fff15 	stw	r5,-4(fp)
   4955c:	e0bfff17 	ldw	r2,-4(fp)
   49560:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49564:	0005303a 	rdctl	r2,status
   49568:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4956c:	e0fffb17 	ldw	r3,-20(fp)
   49570:	00bfff84 	movi	r2,-2
   49574:	1884703a 	and	r2,r3,r2
   49578:	1001703a 	wrctl	status,r2
  
  return context;
   4957c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   49580:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   49584:	00c00044 	movi	r3,1
   49588:	e0bffa17 	ldw	r2,-24(fp)
   4958c:	1884983a 	sll	r2,r3,r2
   49590:	1007883a 	mov	r3,r2
   49594:	d0a01b17 	ldw	r2,-32660(gp)
   49598:	1884b03a 	or	r2,r3,r2
   4959c:	d0a01b15 	stw	r2,-32660(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   495a0:	d0a01b17 	ldw	r2,-32660(gp)
   495a4:	100170fa 	wrctl	ienable,r2
   495a8:	e0bffc17 	ldw	r2,-16(fp)
   495ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   495b0:	e0bffd17 	ldw	r2,-12(fp)
   495b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   495b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   495bc:	0001883a 	nop
}
   495c0:	e037883a 	mov	sp,fp
   495c4:	df000017 	ldw	fp,0(sp)
   495c8:	dec00104 	addi	sp,sp,4
   495cc:	f800283a 	ret

000495d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   495d0:	defff904 	addi	sp,sp,-28
   495d4:	df000615 	stw	fp,24(sp)
   495d8:	df000604 	addi	fp,sp,24
   495dc:	e13ffe15 	stw	r4,-8(fp)
   495e0:	e17fff15 	stw	r5,-4(fp)
   495e4:	e0bfff17 	ldw	r2,-4(fp)
   495e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   495ec:	0005303a 	rdctl	r2,status
   495f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   495f4:	e0fffb17 	ldw	r3,-20(fp)
   495f8:	00bfff84 	movi	r2,-2
   495fc:	1884703a 	and	r2,r3,r2
   49600:	1001703a 	wrctl	status,r2
  
  return context;
   49604:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   49608:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4960c:	00c00044 	movi	r3,1
   49610:	e0bffa17 	ldw	r2,-24(fp)
   49614:	1884983a 	sll	r2,r3,r2
   49618:	0084303a 	nor	r2,zero,r2
   4961c:	1007883a 	mov	r3,r2
   49620:	d0a01b17 	ldw	r2,-32660(gp)
   49624:	1884703a 	and	r2,r3,r2
   49628:	d0a01b15 	stw	r2,-32660(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4962c:	d0a01b17 	ldw	r2,-32660(gp)
   49630:	100170fa 	wrctl	ienable,r2
   49634:	e0bffc17 	ldw	r2,-16(fp)
   49638:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4963c:	e0bffd17 	ldw	r2,-12(fp)
   49640:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   49644:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   49648:	0001883a 	nop
}
   4964c:	e037883a 	mov	sp,fp
   49650:	df000017 	ldw	fp,0(sp)
   49654:	dec00104 	addi	sp,sp,4
   49658:	f800283a 	ret

0004965c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4965c:	defffc04 	addi	sp,sp,-16
   49660:	df000315 	stw	fp,12(sp)
   49664:	df000304 	addi	fp,sp,12
   49668:	e13ffe15 	stw	r4,-8(fp)
   4966c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   49670:	000530fa 	rdctl	r2,ienable
   49674:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   49678:	00c00044 	movi	r3,1
   4967c:	e0bfff17 	ldw	r2,-4(fp)
   49680:	1884983a 	sll	r2,r3,r2
   49684:	1007883a 	mov	r3,r2
   49688:	e0bffd17 	ldw	r2,-12(fp)
   4968c:	1884703a 	and	r2,r3,r2
   49690:	1004c03a 	cmpne	r2,r2,zero
   49694:	10803fcc 	andi	r2,r2,255
}
   49698:	e037883a 	mov	sp,fp
   4969c:	df000017 	ldw	fp,0(sp)
   496a0:	dec00104 	addi	sp,sp,4
   496a4:	f800283a 	ret

000496a8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   496a8:	defff504 	addi	sp,sp,-44
   496ac:	dfc00a15 	stw	ra,40(sp)
   496b0:	df000915 	stw	fp,36(sp)
   496b4:	df000904 	addi	fp,sp,36
   496b8:	e13ffc15 	stw	r4,-16(fp)
   496bc:	e17ffd15 	stw	r5,-12(fp)
   496c0:	e1bffe15 	stw	r6,-8(fp)
   496c4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   496c8:	00bffa84 	movi	r2,-22
   496cc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   496d0:	e0bffd17 	ldw	r2,-12(fp)
   496d4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   496d8:	e0bff817 	ldw	r2,-32(fp)
   496dc:	10800808 	cmpgei	r2,r2,32
   496e0:	1000271e 	bne	r2,zero,49780 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   496e4:	0005303a 	rdctl	r2,status
   496e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   496ec:	e0fffb17 	ldw	r3,-20(fp)
   496f0:	00bfff84 	movi	r2,-2
   496f4:	1884703a 	and	r2,r3,r2
   496f8:	1001703a 	wrctl	status,r2
  
  return context;
   496fc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   49700:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   49704:	008001b4 	movhi	r2,6
   49708:	108f5704 	addi	r2,r2,15708
   4970c:	e0fff817 	ldw	r3,-32(fp)
   49710:	180690fa 	slli	r3,r3,3
   49714:	10c5883a 	add	r2,r2,r3
   49718:	e0fffe17 	ldw	r3,-8(fp)
   4971c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   49720:	008001b4 	movhi	r2,6
   49724:	108f5704 	addi	r2,r2,15708
   49728:	e0fff817 	ldw	r3,-32(fp)
   4972c:	180690fa 	slli	r3,r3,3
   49730:	10c5883a 	add	r2,r2,r3
   49734:	10800104 	addi	r2,r2,4
   49738:	e0ffff17 	ldw	r3,-4(fp)
   4973c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   49740:	e0bffe17 	ldw	r2,-8(fp)
   49744:	10000526 	beq	r2,zero,4975c <alt_iic_isr_register+0xb4>
   49748:	e0bff817 	ldw	r2,-32(fp)
   4974c:	100b883a 	mov	r5,r2
   49750:	e13ffc17 	ldw	r4,-16(fp)
   49754:	00495480 	call	49548 <alt_ic_irq_enable>
   49758:	00000406 	br	4976c <alt_iic_isr_register+0xc4>
   4975c:	e0bff817 	ldw	r2,-32(fp)
   49760:	100b883a 	mov	r5,r2
   49764:	e13ffc17 	ldw	r4,-16(fp)
   49768:	00495d00 	call	495d0 <alt_ic_irq_disable>
   4976c:	e0bff715 	stw	r2,-36(fp)
   49770:	e0bffa17 	ldw	r2,-24(fp)
   49774:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49778:	e0bff917 	ldw	r2,-28(fp)
   4977c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   49780:	e0bff717 	ldw	r2,-36(fp)
}
   49784:	e037883a 	mov	sp,fp
   49788:	dfc00117 	ldw	ra,4(sp)
   4978c:	df000017 	ldw	fp,0(sp)
   49790:	dec00204 	addi	sp,sp,8
   49794:	f800283a 	ret

00049798 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   49798:	defffc04 	addi	sp,sp,-16
   4979c:	df000315 	stw	fp,12(sp)
   497a0:	df000304 	addi	fp,sp,12
   497a4:	e13ffd15 	stw	r4,-12(fp)
   497a8:	e17ffe15 	stw	r5,-8(fp)
   497ac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   497b0:	e0fffe17 	ldw	r3,-8(fp)
   497b4:	e0bffd17 	ldw	r2,-12(fp)
   497b8:	18800c26 	beq	r3,r2,497ec <alt_load_section+0x54>
  {
    while( to != end )
   497bc:	00000806 	br	497e0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   497c0:	e0bffe17 	ldw	r2,-8(fp)
   497c4:	10c00104 	addi	r3,r2,4
   497c8:	e0fffe15 	stw	r3,-8(fp)
   497cc:	e0fffd17 	ldw	r3,-12(fp)
   497d0:	19000104 	addi	r4,r3,4
   497d4:	e13ffd15 	stw	r4,-12(fp)
   497d8:	18c00017 	ldw	r3,0(r3)
   497dc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   497e0:	e0fffe17 	ldw	r3,-8(fp)
   497e4:	e0bfff17 	ldw	r2,-4(fp)
   497e8:	18bff51e 	bne	r3,r2,497c0 <__reset+0xfffc87c0>
    {
      *to++ = *from++;
    }
  }
}
   497ec:	0001883a 	nop
   497f0:	e037883a 	mov	sp,fp
   497f4:	df000017 	ldw	fp,0(sp)
   497f8:	dec00104 	addi	sp,sp,4
   497fc:	f800283a 	ret

00049800 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   49800:	defffe04 	addi	sp,sp,-8
   49804:	dfc00115 	stw	ra,4(sp)
   49808:	df000015 	stw	fp,0(sp)
   4980c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   49810:	018001b4 	movhi	r6,6
   49814:	31b31b04 	addi	r6,r6,-13204
   49818:	014001b4 	movhi	r5,6
   4981c:	29643504 	addi	r5,r5,-28460
   49820:	010001b4 	movhi	r4,6
   49824:	21243504 	addi	r4,r4,-28460
   49828:	00497980 	call	49798 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4982c:	01800134 	movhi	r6,4
   49830:	31809104 	addi	r6,r6,580
   49834:	01400134 	movhi	r5,4
   49838:	29400804 	addi	r5,r5,32
   4983c:	01000134 	movhi	r4,4
   49840:	21000804 	addi	r4,r4,32
   49844:	00497980 	call	49798 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   49848:	018001b4 	movhi	r6,6
   4984c:	31a43504 	addi	r6,r6,-28460
   49850:	01400174 	movhi	r5,5
   49854:	2973a504 	addi	r5,r5,-12652
   49858:	01000174 	movhi	r4,5
   4985c:	2133a504 	addi	r4,r4,-12652
   49860:	00497980 	call	49798 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   49864:	004bdbc0 	call	4bdbc <alt_dcache_flush_all>
  alt_icache_flush_all();
   49868:	004c0380 	call	4c038 <alt_icache_flush_all>
}
   4986c:	0001883a 	nop
   49870:	e037883a 	mov	sp,fp
   49874:	dfc00117 	ldw	ra,4(sp)
   49878:	df000017 	ldw	fp,0(sp)
   4987c:	dec00204 	addi	sp,sp,8
   49880:	f800283a 	ret

00049884 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   49884:	defffd04 	addi	sp,sp,-12
   49888:	dfc00215 	stw	ra,8(sp)
   4988c:	df000115 	stw	fp,4(sp)
   49890:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   49894:	0009883a 	mov	r4,zero
   49898:	00499340 	call	49934 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4989c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   498a0:	004996c0 	call	4996c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   498a4:	018001b4 	movhi	r6,6
   498a8:	31a42504 	addi	r6,r6,-28524
   498ac:	014001b4 	movhi	r5,6
   498b0:	29642504 	addi	r5,r5,-28524
   498b4:	010001b4 	movhi	r4,6
   498b8:	21242504 	addi	r4,r4,-28524
   498bc:	004c1cc0 	call	4c1cc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   498c0:	004bee80 	call	4bee8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   498c4:	01000174 	movhi	r4,5
   498c8:	212fd204 	addi	r4,r4,-16568
   498cc:	004cb000 	call	4cb00 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   498d0:	d0a01c17 	ldw	r2,-32656(gp)
   498d4:	d0e01d17 	ldw	r3,-32652(gp)
   498d8:	d1201e17 	ldw	r4,-32648(gp)
   498dc:	200d883a 	mov	r6,r4
   498e0:	180b883a 	mov	r5,r3
   498e4:	1009883a 	mov	r4,r2
   498e8:	00424b40 	call	424b4 <main>
   498ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   498f0:	01000044 	movi	r4,1
   498f4:	004bcec0 	call	4bcec <close>
  exit (result);
   498f8:	e13fff17 	ldw	r4,-4(fp)
   498fc:	004cb140 	call	4cb14 <exit>

00049900 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   49900:	defffd04 	addi	sp,sp,-12
   49904:	dfc00215 	stw	ra,8(sp)
   49908:	df000115 	stw	fp,4(sp)
   4990c:	df000104 	addi	fp,sp,4
   49910:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   49914:	d1600b04 	addi	r5,gp,-32724
   49918:	e13fff17 	ldw	r4,-4(fp)
   4991c:	004be440 	call	4be44 <alt_dev_llist_insert>
}
   49920:	e037883a 	mov	sp,fp
   49924:	dfc00117 	ldw	ra,4(sp)
   49928:	df000017 	ldw	fp,0(sp)
   4992c:	dec00204 	addi	sp,sp,8
   49930:	f800283a 	ret

00049934 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   49934:	defffd04 	addi	sp,sp,-12
   49938:	dfc00215 	stw	ra,8(sp)
   4993c:	df000115 	stw	fp,4(sp)
   49940:	df000104 	addi	fp,sp,4
   49944:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   49948:	004c6a40 	call	4c6a4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4994c:	00800044 	movi	r2,1
   49950:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   49954:	0001883a 	nop
   49958:	e037883a 	mov	sp,fp
   4995c:	dfc00117 	ldw	ra,4(sp)
   49960:	df000017 	ldw	fp,0(sp)
   49964:	dec00204 	addi	sp,sp,8
   49968:	f800283a 	ret

0004996c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4996c:	defffe04 	addi	sp,sp,-8
   49970:	dfc00115 	stw	ra,4(sp)
   49974:	df000015 	stw	fp,0(sp)
   49978:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( LED_TIMER, led_timer);
   4997c:	01c0fa04 	movi	r7,1000
   49980:	01800084 	movi	r6,2
   49984:	000b883a 	mov	r5,zero
   49988:	01000234 	movhi	r4,8
   4998c:	21082804 	addi	r4,r4,8352
   49990:	004b4cc0 	call	4b4cc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( WATCHDOG, watchdog);
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH, epcs_flash);
   49994:	010001b4 	movhi	r4,6
   49998:	212d4a04 	addi	r4,r4,-19160
   4999c:	0049a200 	call	49a20 <alt_epcs_flash_init>
    ALTERA_AVALON_FIFO_INIT ( LASER_FIFO, laser_fifo);
   499a0:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( PROTOCOL_FIFO, protocol_fifo);
   499a4:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( SPIRD_FIFO, spird_fifo);
   499a8:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( SPIWR_FIFO, spiwr_fifo);
   499ac:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   499b0:	000d883a 	mov	r6,zero
   499b4:	000b883a 	mov	r5,zero
   499b8:	010001b4 	movhi	r4,6
   499bc:	212d8704 	addi	r4,r4,-18916
   499c0:	004ab500 	call	4ab50 <altera_avalon_jtag_uart_init>
   499c4:	010001b4 	movhi	r4,6
   499c8:	212d7d04 	addi	r4,r4,-18956
   499cc:	00499000 	call	49900 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   499d0:	0001883a 	nop
}
   499d4:	0001883a 	nop
   499d8:	e037883a 	mov	sp,fp
   499dc:	dfc00117 	ldw	ra,4(sp)
   499e0:	df000017 	ldw	fp,0(sp)
   499e4:	dec00204 	addi	sp,sp,8
   499e8:	f800283a 	ret

000499ec <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
   499ec:	defffd04 	addi	sp,sp,-12
   499f0:	dfc00215 	stw	ra,8(sp)
   499f4:	df000115 	stw	fp,4(sp)
   499f8:	df000104 	addi	fp,sp,4
   499fc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
   49a00:	d1600604 	addi	r5,gp,-32744
   49a04:	e13fff17 	ldw	r4,-4(fp)
   49a08:	004be440 	call	4be44 <alt_dev_llist_insert>
}
   49a0c:	e037883a 	mov	sp,fp
   49a10:	dfc00117 	ldw	ra,4(sp)
   49a14:	df000017 	ldw	fp,0(sp)
   49a18:	dec00204 	addi	sp,sp,8
   49a1c:	f800283a 	ret

00049a20 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
   49a20:	defffc04 	addi	sp,sp,-16
   49a24:	dfc00315 	stw	ra,12(sp)
   49a28:	df000215 	stw	fp,8(sp)
   49a2c:	df000204 	addi	fp,sp,8
   49a30:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
   49a34:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
   49a38:	e13fff17 	ldw	r4,-4(fp)
   49a3c:	0049a740 	call	49a74 <alt_epcs_flash_query>
   49a40:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
   49a44:	e0bffe17 	ldw	r2,-8(fp)
   49a48:	1000041e 	bne	r2,zero,49a5c <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
   49a4c:	e0bfff17 	ldw	r2,-4(fp)
   49a50:	1009883a 	mov	r4,r2
   49a54:	00499ec0 	call	499ec <alt_flash_device_register>
   49a58:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
   49a5c:	e0bffe17 	ldw	r2,-8(fp)
}
   49a60:	e037883a 	mov	sp,fp
   49a64:	dfc00117 	ldw	ra,4(sp)
   49a68:	df000017 	ldw	fp,0(sp)
   49a6c:	dec00204 	addi	sp,sp,8
   49a70:	f800283a 	ret

00049a74 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
   49a74:	defffc04 	addi	sp,sp,-16
   49a78:	dfc00315 	stw	ra,12(sp)
   49a7c:	df000215 	stw	fp,8(sp)
   49a80:	df000204 	addi	fp,sp,8
   49a84:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
   49a88:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
   49a8c:	e0bfff17 	ldw	r2,-4(fp)
   49a90:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
   49a94:	e0bfff17 	ldw	r2,-4(fp)
   49a98:	10802e17 	ldw	r2,184(r2)
   49a9c:	1009883a 	mov	r4,r2
   49aa0:	004b9e40 	call	4b9e4 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
   49aa4:	10c03fcc 	andi	r3,r2,255
   49aa8:	e0bfff17 	ldw	r2,-4(fp)
   49aac:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
   49ab0:	e0bfff17 	ldw	r2,-4(fp)
   49ab4:	10803017 	ldw	r2,192(r2)
   49ab8:	10800598 	cmpnei	r2,r2,22
   49abc:	10000a1e 	bne	r2,zero,49ae8 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
   49ac0:	e0bfff17 	ldw	r2,-4(fp)
   49ac4:	00c02034 	movhi	r3,128
   49ac8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
   49acc:	e0bfff17 	ldw	r2,-4(fp)
   49ad0:	00c02004 	movi	r3,128
   49ad4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   49ad8:	e0bfff17 	ldw	r2,-4(fp)
   49adc:	00c00074 	movhi	r3,1
   49ae0:	10c01015 	stw	r3,64(r2)
   49ae4:	0000ce06 	br	49e20 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
   49ae8:	e0bfff17 	ldw	r2,-4(fp)
   49aec:	10803017 	ldw	r2,192(r2)
   49af0:	10800518 	cmpnei	r2,r2,20
   49af4:	10000a1e 	bne	r2,zero,49b20 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
   49af8:	e0bfff17 	ldw	r2,-4(fp)
   49afc:	00c00834 	movhi	r3,32
   49b00:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
   49b04:	e0bfff17 	ldw	r2,-4(fp)
   49b08:	00c00804 	movi	r3,32
   49b0c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   49b10:	e0bfff17 	ldw	r2,-4(fp)
   49b14:	00c00074 	movhi	r3,1
   49b18:	10c01015 	stw	r3,64(r2)
   49b1c:	0000c006 	br	49e20 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
   49b20:	e0bfff17 	ldw	r2,-4(fp)
   49b24:	10803017 	ldw	r2,192(r2)
   49b28:	108004d8 	cmpnei	r2,r2,19
   49b2c:	10000a1e 	bne	r2,zero,49b58 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
   49b30:	e0bfff17 	ldw	r2,-4(fp)
   49b34:	00c00434 	movhi	r3,16
   49b38:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
   49b3c:	e0bfff17 	ldw	r2,-4(fp)
   49b40:	00c00404 	movi	r3,16
   49b44:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   49b48:	e0bfff17 	ldw	r2,-4(fp)
   49b4c:	00c00074 	movhi	r3,1
   49b50:	10c01015 	stw	r3,64(r2)
   49b54:	0000b206 	br	49e20 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
   49b58:	e0bfff17 	ldw	r2,-4(fp)
   49b5c:	10803017 	ldw	r2,192(r2)
   49b60:	10800498 	cmpnei	r2,r2,18
   49b64:	10000a1e 	bne	r2,zero,49b90 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
   49b68:	e0bfff17 	ldw	r2,-4(fp)
   49b6c:	00c00234 	movhi	r3,8
   49b70:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
   49b74:	e0bfff17 	ldw	r2,-4(fp)
   49b78:	00c00204 	movi	r3,8
   49b7c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   49b80:	e0bfff17 	ldw	r2,-4(fp)
   49b84:	00c00074 	movhi	r3,1
   49b88:	10c01015 	stw	r3,64(r2)
   49b8c:	0000a406 	br	49e20 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
   49b90:	e0bfff17 	ldw	r2,-4(fp)
   49b94:	10803017 	ldw	r2,192(r2)
   49b98:	10800418 	cmpnei	r2,r2,16
   49b9c:	10000a1e 	bne	r2,zero,49bc8 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
   49ba0:	e0bfff17 	ldw	r2,-4(fp)
   49ba4:	00c000b4 	movhi	r3,2
   49ba8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
   49bac:	e0bfff17 	ldw	r2,-4(fp)
   49bb0:	00c00104 	movi	r3,4
   49bb4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
   49bb8:	e0bfff17 	ldw	r2,-4(fp)
   49bbc:	00e00014 	movui	r3,32768
   49bc0:	10c01015 	stw	r3,64(r2)
   49bc4:	00009606 	br	49e20 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
   49bc8:	e0bfff17 	ldw	r2,-4(fp)
   49bcc:	10802e17 	ldw	r2,184(r2)
   49bd0:	1009883a 	mov	r4,r2
   49bd4:	004ba4c0 	call	4ba4c <epcs_read_device_id>
   49bd8:	1007883a 	mov	r3,r2
   49bdc:	e0bfff17 	ldw	r2,-4(fp)
   49be0:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
   49be4:	e0bfff17 	ldw	r2,-4(fp)
   49be8:	10c03017 	ldw	r3,192(r2)
   49bec:	00804034 	movhi	r2,256
   49bf0:	10bfffc4 	addi	r2,r2,-1
   49bf4:	1886703a 	and	r3,r3,r2
   49bf8:	00800874 	movhi	r2,33
   49bfc:	10ae8544 	addi	r2,r2,-17899
   49c00:	18800a1e 	bne	r3,r2,49c2c <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
   49c04:	e0bfff17 	ldw	r2,-4(fp)
   49c08:	00c00834 	movhi	r3,32
   49c0c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
   49c10:	e0bfff17 	ldw	r2,-4(fp)
   49c14:	00c00804 	movi	r3,32
   49c18:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49c1c:	e0bfff17 	ldw	r2,-4(fp)
   49c20:	00c00074 	movhi	r3,1
   49c24:	10c01015 	stw	r3,64(r2)
   49c28:	00007d06 	br	49e20 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
   49c2c:	e0bfff17 	ldw	r2,-4(fp)
   49c30:	10c03017 	ldw	r3,192(r2)
   49c34:	00804034 	movhi	r2,256
   49c38:	10bfffc4 	addi	r2,r2,-1
   49c3c:	1886703a 	and	r3,r3,r2
   49c40:	00800874 	movhi	r2,33
   49c44:	10ae8584 	addi	r2,r2,-17898
   49c48:	18800a1e 	bne	r3,r2,49c74 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
   49c4c:	e0bfff17 	ldw	r2,-4(fp)
   49c50:	00c01034 	movhi	r3,64
   49c54:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
   49c58:	e0bfff17 	ldw	r2,-4(fp)
   49c5c:	00c01004 	movi	r3,64
   49c60:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49c64:	e0bfff17 	ldw	r2,-4(fp)
   49c68:	00c00074 	movhi	r3,1
   49c6c:	10c01015 	stw	r3,64(r2)
   49c70:	00006b06 	br	49e20 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
   49c74:	e0bfff17 	ldw	r2,-4(fp)
   49c78:	10c03017 	ldw	r3,192(r2)
   49c7c:	00804034 	movhi	r2,256
   49c80:	10bfffc4 	addi	r2,r2,-1
   49c84:	1886703a 	and	r3,r3,r2
   49c88:	00800874 	movhi	r2,33
   49c8c:	10ae85c4 	addi	r2,r2,-17897
   49c90:	18800a1e 	bne	r3,r2,49cbc <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
   49c94:	e0bfff17 	ldw	r2,-4(fp)
   49c98:	00c02034 	movhi	r3,128
   49c9c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
   49ca0:	e0bfff17 	ldw	r2,-4(fp)
   49ca4:	00c02004 	movi	r3,128
   49ca8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49cac:	e0bfff17 	ldw	r2,-4(fp)
   49cb0:	00c00074 	movhi	r3,1
   49cb4:	10c01015 	stw	r3,64(r2)
   49cb8:	00005906 	br	49e20 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
   49cbc:	e0bfff17 	ldw	r2,-4(fp)
   49cc0:	10c03017 	ldw	r3,192(r2)
   49cc4:	00804034 	movhi	r2,256
   49cc8:	10bfffc4 	addi	r2,r2,-1
   49ccc:	1886703a 	and	r3,r3,r2
   49cd0:	00800874 	movhi	r2,33
   49cd4:	10ae8604 	addi	r2,r2,-17896
   49cd8:	18800a1e 	bne	r3,r2,49d04 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   49cdc:	e0bfff17 	ldw	r2,-4(fp)
   49ce0:	00c04034 	movhi	r3,256
   49ce4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
   49ce8:	e0bfff17 	ldw	r2,-4(fp)
   49cec:	00c04004 	movi	r3,256
   49cf0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49cf4:	e0bfff17 	ldw	r2,-4(fp)
   49cf8:	00c00074 	movhi	r3,1
   49cfc:	10c01015 	stw	r3,64(r2)
   49d00:	00004706 	br	49e20 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
   49d04:	e0bfff17 	ldw	r2,-4(fp)
   49d08:	10803017 	ldw	r2,192(r2)
   49d0c:	10803fcc 	andi	r2,r2,255
   49d10:	10800618 	cmpnei	r2,r2,24
   49d14:	10000a1e 	bne	r2,zero,49d40 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   49d18:	e0bfff17 	ldw	r2,-4(fp)
   49d1c:	00c04034 	movhi	r3,256
   49d20:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
   49d24:	e0bfff17 	ldw	r2,-4(fp)
   49d28:	00c01004 	movi	r3,64
   49d2c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
   49d30:	e0bfff17 	ldw	r2,-4(fp)
   49d34:	00c00134 	movhi	r3,4
   49d38:	10c01015 	stw	r3,64(r2)
   49d3c:	00003806 	br	49e20 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
   49d40:	e0bfff17 	ldw	r2,-4(fp)
   49d44:	10803017 	ldw	r2,192(r2)
   49d48:	10803fcc 	andi	r2,r2,255
   49d4c:	10800658 	cmpnei	r2,r2,25
   49d50:	10000d1e 	bne	r2,zero,49d88 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
   49d54:	e0bfff17 	ldw	r2,-4(fp)
   49d58:	00c08034 	movhi	r3,512
   49d5c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
   49d60:	e0bfff17 	ldw	r2,-4(fp)
   49d64:	00c08004 	movi	r3,512
   49d68:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49d6c:	e0bfff17 	ldw	r2,-4(fp)
   49d70:	00c00074 	movhi	r3,1
   49d74:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
   49d78:	e0bfff17 	ldw	r2,-4(fp)
   49d7c:	00c00044 	movi	r3,1
   49d80:	10c03215 	stw	r3,200(r2)
   49d84:	00002606 	br	49e20 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
   49d88:	e0bfff17 	ldw	r2,-4(fp)
   49d8c:	10803017 	ldw	r2,192(r2)
   49d90:	10803fcc 	andi	r2,r2,255
   49d94:	10800818 	cmpnei	r2,r2,32
   49d98:	10000d1e 	bne	r2,zero,49dd0 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
   49d9c:	e0bfff17 	ldw	r2,-4(fp)
   49da0:	00c10034 	movhi	r3,1024
   49da4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
   49da8:	e0bfff17 	ldw	r2,-4(fp)
   49dac:	00c10004 	movi	r3,1024
   49db0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49db4:	e0bfff17 	ldw	r2,-4(fp)
   49db8:	00c00074 	movhi	r3,1
   49dbc:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
   49dc0:	e0bfff17 	ldw	r2,-4(fp)
   49dc4:	00c00044 	movi	r3,1
   49dc8:	10c03215 	stw	r3,200(r2)
   49dcc:	00001406 	br	49e20 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
   49dd0:	e0bfff17 	ldw	r2,-4(fp)
   49dd4:	10803017 	ldw	r2,192(r2)
   49dd8:	10803fcc 	andi	r2,r2,255
   49ddc:	10800858 	cmpnei	r2,r2,33
   49de0:	10000d1e 	bne	r2,zero,49e18 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
   49de4:	e0bfff17 	ldw	r2,-4(fp)
   49de8:	00c20034 	movhi	r3,2048
   49dec:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
   49df0:	e0bfff17 	ldw	r2,-4(fp)
   49df4:	00c20004 	movi	r3,2048
   49df8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49dfc:	e0bfff17 	ldw	r2,-4(fp)
   49e00:	00c00074 	movhi	r3,1
   49e04:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
   49e08:	e0bfff17 	ldw	r2,-4(fp)
   49e0c:	00c00044 	movi	r3,1
   49e10:	10c03215 	stw	r3,200(r2)
   49e14:	00000206 	br	49e20 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
   49e18:	00bffb44 	movi	r2,-19
   49e1c:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
   49e20:	e0bfff17 	ldw	r2,-4(fp)
   49e24:	10800e17 	ldw	r2,56(r2)
   49e28:	1007883a 	mov	r3,r2
   49e2c:	e0bfff17 	ldw	r2,-4(fp)
   49e30:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
   49e34:	e0bfff17 	ldw	r2,-4(fp)
   49e38:	00c00044 	movi	r3,1
   49e3c:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
   49e40:	e0bfff17 	ldw	r2,-4(fp)
   49e44:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
   49e48:	e0bfff17 	ldw	r2,-4(fp)
   49e4c:	00c04004 	movi	r3,256
   49e50:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
   49e54:	e0bffe17 	ldw	r2,-8(fp)
}
   49e58:	e037883a 	mov	sp,fp
   49e5c:	dfc00117 	ldw	ra,4(sp)
   49e60:	df000017 	ldw	fp,0(sp)
   49e64:	dec00204 	addi	sp,sp,8
   49e68:	f800283a 	ret

00049e6c <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
   49e6c:	deffee04 	addi	sp,sp,-72
   49e70:	dfc01115 	stw	ra,68(sp)
   49e74:	df001015 	stw	fp,64(sp)
   49e78:	df001004 	addi	fp,sp,64
   49e7c:	e13ffc15 	stw	r4,-16(fp)
   49e80:	e17ffd15 	stw	r5,-12(fp)
   49e84:	e1bffe15 	stw	r6,-8(fp)
   49e88:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
   49e8c:	00800804 	movi	r2,32
   49e90:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
   49e94:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
   49e98:	00002706 	br	49f38 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
   49e9c:	e0fff117 	ldw	r3,-60(fp)
   49ea0:	e0bfff17 	ldw	r2,-4(fp)
   49ea4:	1880012e 	bgeu	r3,r2,49eac <alt_epcs_flash_memcmp+0x40>
   49ea8:	1805883a 	mov	r2,r3
   49eac:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
   49eb0:	e0fffe17 	ldw	r3,-8(fp)
   49eb4:	e0bff017 	ldw	r2,-64(fp)
   49eb8:	1885883a 	add	r2,r3,r2
   49ebc:	e0fff404 	addi	r3,fp,-48
   49ec0:	e1fff217 	ldw	r7,-56(fp)
   49ec4:	180d883a 	mov	r6,r3
   49ec8:	100b883a 	mov	r5,r2
   49ecc:	e13ffc17 	ldw	r4,-16(fp)
   49ed0:	004a4500 	call	4a450 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
   49ed4:	1000020e 	bge	r2,zero,49ee0 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
   49ed8:	00bfffc4 	movi	r2,-1
   49edc:	00001906 	br	49f44 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
   49ee0:	e0bff017 	ldw	r2,-64(fp)
   49ee4:	e0fffd17 	ldw	r3,-12(fp)
   49ee8:	1885883a 	add	r2,r3,r2
   49eec:	e13ff217 	ldw	r4,-56(fp)
   49ef0:	e0fff404 	addi	r3,fp,-48
   49ef4:	200d883a 	mov	r6,r4
   49ef8:	180b883a 	mov	r5,r3
   49efc:	1009883a 	mov	r4,r2
   49f00:	004cb4c0 	call	4cb4c <memcmp>
   49f04:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
   49f08:	e0bff317 	ldw	r2,-52(fp)
   49f0c:	10000226 	beq	r2,zero,49f18 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
   49f10:	e0bff317 	ldw	r2,-52(fp)
   49f14:	00000b06 	br	49f44 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
   49f18:	e0bff217 	ldw	r2,-56(fp)
   49f1c:	e0ffff17 	ldw	r3,-4(fp)
   49f20:	1885c83a 	sub	r2,r3,r2
   49f24:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
   49f28:	e0fff017 	ldw	r3,-64(fp)
   49f2c:	e0bff217 	ldw	r2,-56(fp)
   49f30:	1885883a 	add	r2,r3,r2
   49f34:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
   49f38:	e0bfff17 	ldw	r2,-4(fp)
   49f3c:	103fd71e 	bne	r2,zero,49e9c <__reset+0xfffc8e9c>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
   49f40:	0005883a 	mov	r2,zero
}
   49f44:	e037883a 	mov	sp,fp
   49f48:	dfc00117 	ldw	ra,4(sp)
   49f4c:	df000017 	ldw	fp,0(sp)
   49f50:	dec00204 	addi	sp,sp,8
   49f54:	f800283a 	ret

00049f58 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
   49f58:	defff404 	addi	sp,sp,-48
   49f5c:	dfc00b15 	stw	ra,44(sp)
   49f60:	df000a15 	stw	fp,40(sp)
   49f64:	df000a04 	addi	fp,sp,40
   49f68:	e13ffc15 	stw	r4,-16(fp)
   49f6c:	e17ffd15 	stw	r5,-12(fp)
   49f70:	e1bffe15 	stw	r6,-8(fp)
   49f74:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
   49f78:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
   49f7c:	e03ff815 	stw	zero,-32(fp)
   49f80:	00008306 	br	4a190 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
   49f84:	e0fffc17 	ldw	r3,-16(fp)
   49f88:	e0bff817 	ldw	r2,-32(fp)
   49f8c:	1004913a 	slli	r2,r2,4
   49f90:	1885883a 	add	r2,r3,r2
   49f94:	10800d04 	addi	r2,r2,52
   49f98:	10800017 	ldw	r2,0(r2)
   49f9c:	e0fffd17 	ldw	r3,-12(fp)
   49fa0:	18807816 	blt	r3,r2,4a184 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
   49fa4:	e0fffc17 	ldw	r3,-16(fp)
   49fa8:	e0bff817 	ldw	r2,-32(fp)
   49fac:	1004913a 	slli	r2,r2,4
   49fb0:	1885883a 	add	r2,r3,r2
   49fb4:	10800d04 	addi	r2,r2,52
   49fb8:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
   49fbc:	e13ffc17 	ldw	r4,-16(fp)
   49fc0:	e0bff817 	ldw	r2,-32(fp)
   49fc4:	1004913a 	slli	r2,r2,4
   49fc8:	2085883a 	add	r2,r4,r2
   49fcc:	10800e04 	addi	r2,r2,56
   49fd0:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
   49fd4:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
   49fd8:	e0fffd17 	ldw	r3,-12(fp)
   49fdc:	1880690e 	bge	r3,r2,4a184 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
   49fe0:	e0fffc17 	ldw	r3,-16(fp)
   49fe4:	e0bff817 	ldw	r2,-32(fp)
   49fe8:	1004913a 	slli	r2,r2,4
   49fec:	1885883a 	add	r2,r3,r2
   49ff0:	10800d04 	addi	r2,r2,52
   49ff4:	10800017 	ldw	r2,0(r2)
   49ff8:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   49ffc:	e03ff915 	stw	zero,-28(fp)
   4a000:	00005806 	br	4a164 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
   4a004:	e0fffd17 	ldw	r3,-12(fp)
   4a008:	e0bffa17 	ldw	r2,-24(fp)
   4a00c:	18804916 	blt	r3,r2,4a134 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
   4a010:	e0fffc17 	ldw	r3,-16(fp)
   4a014:	e0bff817 	ldw	r2,-32(fp)
   4a018:	10800104 	addi	r2,r2,4
   4a01c:	1004913a 	slli	r2,r2,4
   4a020:	1885883a 	add	r2,r3,r2
   4a024:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
   4a028:	e0bffa17 	ldw	r2,-24(fp)
   4a02c:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
   4a030:	e0fffd17 	ldw	r3,-12(fp)
   4a034:	18803f0e 	bge	r3,r2,4a134 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
   4a038:	e0fffc17 	ldw	r3,-16(fp)
   4a03c:	e0bff817 	ldw	r2,-32(fp)
   4a040:	10800104 	addi	r2,r2,4
   4a044:	1004913a 	slli	r2,r2,4
   4a048:	1885883a 	add	r2,r3,r2
   4a04c:	10c00017 	ldw	r3,0(r2)
   4a050:	e0bffa17 	ldw	r2,-24(fp)
   4a054:	1887883a 	add	r3,r3,r2
   4a058:	e0bffd17 	ldw	r2,-12(fp)
   4a05c:	1885c83a 	sub	r2,r3,r2
   4a060:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
   4a064:	e0fffb17 	ldw	r3,-20(fp)
   4a068:	e0bfff17 	ldw	r2,-4(fp)
   4a06c:	1880010e 	bge	r3,r2,4a074 <alt_epcs_flash_write+0x11c>
   4a070:	1805883a 	mov	r2,r3
   4a074:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
   4a078:	e0bffb17 	ldw	r2,-20(fp)
   4a07c:	100f883a 	mov	r7,r2
   4a080:	e1bffd17 	ldw	r6,-12(fp)
   4a084:	e17ffe17 	ldw	r5,-8(fp)
   4a088:	e13ffc17 	ldw	r4,-16(fp)
   4a08c:	0049e6c0 	call	49e6c <alt_epcs_flash_memcmp>
   4a090:	10001226 	beq	r2,zero,4a0dc <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
   4a094:	e0bffc17 	ldw	r2,-16(fp)
   4a098:	10800817 	ldw	r2,32(r2)
   4a09c:	e17ffa17 	ldw	r5,-24(fp)
   4a0a0:	e13ffc17 	ldw	r4,-16(fp)
   4a0a4:	103ee83a 	callr	r2
   4a0a8:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
   4a0ac:	e0bff717 	ldw	r2,-36(fp)
   4a0b0:	10000a1e 	bne	r2,zero,4a0dc <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
   4a0b4:	e0bffc17 	ldw	r2,-16(fp)
   4a0b8:	10800917 	ldw	r2,36(r2)
   4a0bc:	e0fffb17 	ldw	r3,-20(fp)
   4a0c0:	d8c00015 	stw	r3,0(sp)
   4a0c4:	e1fffe17 	ldw	r7,-8(fp)
   4a0c8:	e1bffd17 	ldw	r6,-12(fp)
   4a0cc:	e17ffa17 	ldw	r5,-24(fp)
   4a0d0:	e13ffc17 	ldw	r4,-16(fp)
   4a0d4:	103ee83a 	callr	r2
   4a0d8:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
   4a0dc:	e0ffff17 	ldw	r3,-4(fp)
   4a0e0:	e0bffb17 	ldw	r2,-20(fp)
   4a0e4:	18802e26 	beq	r3,r2,4a1a0 <alt_epcs_flash_write+0x248>
   4a0e8:	e0bff717 	ldw	r2,-36(fp)
   4a0ec:	10002c1e 	bne	r2,zero,4a1a0 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
   4a0f0:	e0ffff17 	ldw	r3,-4(fp)
   4a0f4:	e0bffb17 	ldw	r2,-20(fp)
   4a0f8:	1885c83a 	sub	r2,r3,r2
   4a0fc:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
   4a100:	e0fffc17 	ldw	r3,-16(fp)
   4a104:	e0bff817 	ldw	r2,-32(fp)
   4a108:	10800104 	addi	r2,r2,4
   4a10c:	1004913a 	slli	r2,r2,4
   4a110:	1885883a 	add	r2,r3,r2
   4a114:	10c00017 	ldw	r3,0(r2)
   4a118:	e0bffa17 	ldw	r2,-24(fp)
   4a11c:	1885883a 	add	r2,r3,r2
   4a120:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
   4a124:	e0bffb17 	ldw	r2,-20(fp)
   4a128:	e0fffe17 	ldw	r3,-8(fp)
   4a12c:	1885883a 	add	r2,r3,r2
   4a130:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
   4a134:	e0fffc17 	ldw	r3,-16(fp)
   4a138:	e0bff817 	ldw	r2,-32(fp)
   4a13c:	10800104 	addi	r2,r2,4
   4a140:	1004913a 	slli	r2,r2,4
   4a144:	1885883a 	add	r2,r3,r2
   4a148:	10800017 	ldw	r2,0(r2)
   4a14c:	e0fffa17 	ldw	r3,-24(fp)
   4a150:	1885883a 	add	r2,r3,r2
   4a154:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   4a158:	e0bff917 	ldw	r2,-28(fp)
   4a15c:	10800044 	addi	r2,r2,1
   4a160:	e0bff915 	stw	r2,-28(fp)
   4a164:	e0fffc17 	ldw	r3,-16(fp)
   4a168:	e0bff817 	ldw	r2,-32(fp)
   4a16c:	1004913a 	slli	r2,r2,4
   4a170:	1885883a 	add	r2,r3,r2
   4a174:	10800f04 	addi	r2,r2,60
   4a178:	10800017 	ldw	r2,0(r2)
   4a17c:	e0fff917 	ldw	r3,-28(fp)
   4a180:	18bfa016 	blt	r3,r2,4a004 <__reset+0xfffc9004>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
   4a184:	e0bff817 	ldw	r2,-32(fp)
   4a188:	10800044 	addi	r2,r2,1
   4a18c:	e0bff815 	stw	r2,-32(fp)
   4a190:	e0bffc17 	ldw	r2,-16(fp)
   4a194:	10800c17 	ldw	r2,48(r2)
   4a198:	e0fff817 	ldw	r3,-32(fp)
   4a19c:	18bf7916 	blt	r3,r2,49f84 <__reset+0xfffc8f84>
      }
    }
  }

finished:
  return ret_code;
   4a1a0:	e0bff717 	ldw	r2,-36(fp)
}
   4a1a4:	e037883a 	mov	sp,fp
   4a1a8:	dfc00117 	ldw	ra,4(sp)
   4a1ac:	df000017 	ldw	fp,0(sp)
   4a1b0:	dec00204 	addi	sp,sp,8
   4a1b4:	f800283a 	ret

0004a1b8 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
   4a1b8:	defffa04 	addi	sp,sp,-24
   4a1bc:	df000515 	stw	fp,20(sp)
   4a1c0:	df000504 	addi	fp,sp,20
   4a1c4:	e13ffd15 	stw	r4,-12(fp)
   4a1c8:	e17ffe15 	stw	r5,-8(fp)
   4a1cc:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
   4a1d0:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
   4a1d4:	e0bffd17 	ldw	r2,-12(fp)
   4a1d8:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
   4a1dc:	e0bffc17 	ldw	r2,-16(fp)
   4a1e0:	10c00c17 	ldw	r3,48(r2)
   4a1e4:	e0bfff17 	ldw	r2,-4(fp)
   4a1e8:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
   4a1ec:	e0bffc17 	ldw	r2,-16(fp)
   4a1f0:	10800c17 	ldw	r2,48(r2)
   4a1f4:	1000031e 	bne	r2,zero,4a204 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
   4a1f8:	00bffec4 	movi	r2,-5
   4a1fc:	e0bffb15 	stw	r2,-20(fp)
   4a200:	00000b06 	br	4a230 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
   4a204:	e0bffc17 	ldw	r2,-16(fp)
   4a208:	10800c17 	ldw	r2,48(r2)
   4a20c:	10800250 	cmplti	r2,r2,9
   4a210:	1000031e 	bne	r2,zero,4a220 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
   4a214:	00bffd04 	movi	r2,-12
   4a218:	e0bffb15 	stw	r2,-20(fp)
   4a21c:	00000406 	br	4a230 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
   4a220:	e0bffc17 	ldw	r2,-16(fp)
   4a224:	10c00d04 	addi	r3,r2,52
   4a228:	e0bffe17 	ldw	r2,-8(fp)
   4a22c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
   4a230:	e0bffb17 	ldw	r2,-20(fp)
}
   4a234:	e037883a 	mov	sp,fp
   4a238:	df000017 	ldw	fp,0(sp)
   4a23c:	dec00104 	addi	sp,sp,4
   4a240:	f800283a 	ret

0004a244 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
   4a244:	defff904 	addi	sp,sp,-28
   4a248:	df000615 	stw	fp,24(sp)
   4a24c:	df000604 	addi	fp,sp,24
   4a250:	e13ffe15 	stw	r4,-8(fp)
   4a254:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
   4a258:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   4a25c:	e0bffe17 	ldw	r2,-8(fp)
   4a260:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
   4a264:	e0bffb17 	ldw	r2,-20(fp)
   4a268:	10800c17 	ldw	r2,48(r2)
   4a26c:	10bfffc4 	addi	r2,r2,-1
   4a270:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
   4a274:	e0fffb17 	ldw	r3,-20(fp)
   4a278:	e0bffc17 	ldw	r2,-16(fp)
   4a27c:	1004913a 	slli	r2,r2,4
   4a280:	1885883a 	add	r2,r3,r2
   4a284:	10800d04 	addi	r2,r2,52
   4a288:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
   4a28c:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
   4a290:	e13ffb17 	ldw	r4,-20(fp)
   4a294:	e0bffc17 	ldw	r2,-16(fp)
   4a298:	1004913a 	slli	r2,r2,4
   4a29c:	2085883a 	add	r2,r4,r2
   4a2a0:	10800e04 	addi	r2,r2,56
   4a2a4:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
   4a2a8:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
   4a2ac:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
   4a2b0:	e0bfff17 	ldw	r2,-4(fp)
   4a2b4:	e0fffd17 	ldw	r3,-12(fp)
   4a2b8:	1880022e 	bgeu	r3,r2,4a2c4 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
   4a2bc:	00bffec4 	movi	r2,-5
   4a2c0:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
   4a2c4:	e0bffa17 	ldw	r2,-24(fp)
}
   4a2c8:	e037883a 	mov	sp,fp
   4a2cc:	df000017 	ldw	fp,0(sp)
   4a2d0:	dec00104 	addi	sp,sp,4
   4a2d4:	f800283a 	ret

0004a2d8 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
   4a2d8:	defffa04 	addi	sp,sp,-24
   4a2dc:	dfc00515 	stw	ra,20(sp)
   4a2e0:	df000415 	stw	fp,16(sp)
   4a2e4:	df000404 	addi	fp,sp,16
   4a2e8:	e13ffe15 	stw	r4,-8(fp)
   4a2ec:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
   4a2f0:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   4a2f4:	e0bffe17 	ldw	r2,-8(fp)
   4a2f8:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
   4a2fc:	e17fff17 	ldw	r5,-4(fp)
   4a300:	e13ffe17 	ldw	r4,-8(fp)
   4a304:	004a2440 	call	4a244 <alt_epcs_test_address>
   4a308:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
   4a30c:	e0bffc17 	ldw	r2,-16(fp)
   4a310:	10000916 	blt	r2,zero,4a338 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
   4a314:	e0bffd17 	ldw	r2,-12(fp)
   4a318:	10c02e17 	ldw	r3,184(r2)
   4a31c:	e13fff17 	ldw	r4,-4(fp)
   4a320:	e0bffd17 	ldw	r2,-12(fp)
   4a324:	10803217 	ldw	r2,200(r2)
   4a328:	100d883a 	mov	r6,r2
   4a32c:	200b883a 	mov	r5,r4
   4a330:	1809883a 	mov	r4,r3
   4a334:	004b6180 	call	4b618 <epcs_sector_erase>
  }
  return ret_code;
   4a338:	e0bffc17 	ldw	r2,-16(fp)
}
   4a33c:	e037883a 	mov	sp,fp
   4a340:	dfc00117 	ldw	ra,4(sp)
   4a344:	df000017 	ldw	fp,0(sp)
   4a348:	dec00204 	addi	sp,sp,8
   4a34c:	f800283a 	ret

0004a350 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
   4a350:	defff404 	addi	sp,sp,-48
   4a354:	dfc00b15 	stw	ra,44(sp)
   4a358:	df000a15 	stw	fp,40(sp)
   4a35c:	df000a04 	addi	fp,sp,40
   4a360:	e13ffc15 	stw	r4,-16(fp)
   4a364:	e17ffd15 	stw	r5,-12(fp)
   4a368:	e1bffe15 	stw	r6,-8(fp)
   4a36c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   4a370:	e0bffc17 	ldw	r2,-16(fp)
   4a374:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
   4a378:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
   4a37c:	e17ffe17 	ldw	r5,-8(fp)
   4a380:	e13ffc17 	ldw	r4,-16(fp)
   4a384:	004a2440 	call	4a244 <alt_epcs_test_address>
   4a388:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
   4a38c:	e0bff917 	ldw	r2,-28(fp)
   4a390:	10002916 	blt	r2,zero,4a438 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
   4a394:	00002606 	br	4a430 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
   4a398:	e0bff817 	ldw	r2,-32(fp)
   4a39c:	10c03117 	ldw	r3,196(r2)
   4a3a0:	e0bffe17 	ldw	r2,-8(fp)
   4a3a4:	1887883a 	add	r3,r3,r2
   4a3a8:	e0bff817 	ldw	r2,-32(fp)
   4a3ac:	10803117 	ldw	r2,196(r2)
   4a3b0:	0085c83a 	sub	r2,zero,r2
   4a3b4:	1884703a 	and	r2,r3,r2
   4a3b8:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
   4a3bc:	e0fffa17 	ldw	r3,-24(fp)
   4a3c0:	e0bffe17 	ldw	r2,-8(fp)
   4a3c4:	1885c83a 	sub	r2,r3,r2
   4a3c8:	e0c00217 	ldw	r3,8(fp)
   4a3cc:	1880010e 	bge	r3,r2,4a3d4 <alt_epcs_flash_write_block+0x84>
   4a3d0:	1805883a 	mov	r2,r3
   4a3d4:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
   4a3d8:	e0bff817 	ldw	r2,-32(fp)
   4a3dc:	11002e17 	ldw	r4,184(r2)
   4a3e0:	e0bff717 	ldw	r2,-36(fp)
   4a3e4:	e0ffff17 	ldw	r3,-4(fp)
   4a3e8:	1887883a 	add	r3,r3,r2
   4a3ec:	e0bff817 	ldw	r2,-32(fp)
   4a3f0:	10803217 	ldw	r2,200(r2)
   4a3f4:	d8800015 	stw	r2,0(sp)
   4a3f8:	e1fffb17 	ldw	r7,-20(fp)
   4a3fc:	180d883a 	mov	r6,r3
   4a400:	e17ffe17 	ldw	r5,-8(fp)
   4a404:	004b8c80 	call	4b8c8 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
   4a408:	e0c00217 	ldw	r3,8(fp)
   4a40c:	e0bffb17 	ldw	r2,-20(fp)
   4a410:	1885c83a 	sub	r2,r3,r2
   4a414:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
   4a418:	e0fff717 	ldw	r3,-36(fp)
   4a41c:	e0bffb17 	ldw	r2,-20(fp)
   4a420:	1885883a 	add	r2,r3,r2
   4a424:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
   4a428:	e0bffa17 	ldw	r2,-24(fp)
   4a42c:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
   4a430:	e0800217 	ldw	r2,8(fp)
   4a434:	103fd81e 	bne	r2,zero,4a398 <__reset+0xfffc9398>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
   4a438:	e0bff917 	ldw	r2,-28(fp)
}
   4a43c:	e037883a 	mov	sp,fp
   4a440:	dfc00117 	ldw	ra,4(sp)
   4a444:	df000017 	ldw	fp,0(sp)
   4a448:	dec00204 	addi	sp,sp,8
   4a44c:	f800283a 	ret

0004a450 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
   4a450:	defff704 	addi	sp,sp,-36
   4a454:	dfc00815 	stw	ra,32(sp)
   4a458:	df000715 	stw	fp,28(sp)
   4a45c:	df000704 	addi	fp,sp,28
   4a460:	e13ffc15 	stw	r4,-16(fp)
   4a464:	e17ffd15 	stw	r5,-12(fp)
   4a468:	e1bffe15 	stw	r6,-8(fp)
   4a46c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
   4a470:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   4a474:	e0bffc17 	ldw	r2,-16(fp)
   4a478:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
   4a47c:	e17ffd17 	ldw	r5,-12(fp)
   4a480:	e13ffc17 	ldw	r4,-16(fp)
   4a484:	004a2440 	call	4a244 <alt_epcs_test_address>
   4a488:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
   4a48c:	e0bffa17 	ldw	r2,-24(fp)
   4a490:	10000f16 	blt	r2,zero,4a4d0 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
   4a494:	e0bffb17 	ldw	r2,-20(fp)
   4a498:	10c02e17 	ldw	r3,184(r2)
   4a49c:	e0bffb17 	ldw	r2,-20(fp)
   4a4a0:	10803217 	ldw	r2,200(r2)
   4a4a4:	d8800015 	stw	r2,0(sp)
   4a4a8:	e1ffff17 	ldw	r7,-4(fp)
   4a4ac:	e1bffe17 	ldw	r6,-8(fp)
   4a4b0:	e17ffd17 	ldw	r5,-12(fp)
   4a4b4:	1809883a 	mov	r4,r3
   4a4b8:	004b7140 	call	4b714 <epcs_read_buffer>
   4a4bc:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
   4a4c0:	e0fffa17 	ldw	r3,-24(fp)
   4a4c4:	e0bfff17 	ldw	r2,-4(fp)
   4a4c8:	1880011e 	bne	r3,r2,4a4d0 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
   4a4cc:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
   4a4d0:	e0bffa17 	ldw	r2,-24(fp)
}
   4a4d4:	e037883a 	mov	sp,fp
   4a4d8:	dfc00117 	ldw	ra,4(sp)
   4a4dc:	df000017 	ldw	fp,0(sp)
   4a4e0:	dec00204 	addi	sp,sp,8
   4a4e4:	f800283a 	ret

0004a4e8 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   4a4e8:	defffa04 	addi	sp,sp,-24
   4a4ec:	dfc00515 	stw	ra,20(sp)
   4a4f0:	df000415 	stw	fp,16(sp)
   4a4f4:	df000404 	addi	fp,sp,16
   4a4f8:	e13ffc15 	stw	r4,-16(fp)
   4a4fc:	e17ffd15 	stw	r5,-12(fp)
   4a500:	e1bffe15 	stw	r6,-8(fp)
   4a504:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   4a508:	01400fc4 	movi	r5,63
   4a50c:	e13ffc17 	ldw	r4,-16(fp)
   4a510:	004a6b40 	call	4a6b4 <altera_avalon_fifo_clear_event>
   4a514:	10000226 	beq	r2,zero,4a520 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4a518:	00bfffc4 	movi	r2,-1
   4a51c:	00001306 	br	4a56c <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   4a520:	e17ffd17 	ldw	r5,-12(fp)
   4a524:	e13ffc17 	ldw	r4,-16(fp)
   4a528:	004a7140 	call	4a714 <altera_avalon_fifo_write_ienable>
   4a52c:	10000226 	beq	r2,zero,4a538 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4a530:	00bfff84 	movi	r2,-2
   4a534:	00000d06 	br	4a56c <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   4a538:	e17fff17 	ldw	r5,-4(fp)
   4a53c:	e13ffc17 	ldw	r4,-16(fp)
   4a540:	004a7700 	call	4a770 <altera_avalon_fifo_write_almostfull>
   4a544:	10000226 	beq	r2,zero,4a550 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4a548:	00bfff44 	movi	r2,-3
   4a54c:	00000706 	br	4a56c <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   4a550:	e17ffe17 	ldw	r5,-8(fp)
   4a554:	e13ffc17 	ldw	r4,-16(fp)
   4a558:	004a7cc0 	call	4a7cc <altera_avalon_fifo_write_almostempty>
   4a55c:	10000226 	beq	r2,zero,4a568 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4a560:	00bfff44 	movi	r2,-3
   4a564:	00000106 	br	4a56c <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   4a568:	0005883a 	mov	r2,zero
}
   4a56c:	e037883a 	mov	sp,fp
   4a570:	dfc00117 	ldw	ra,4(sp)
   4a574:	df000017 	ldw	fp,0(sp)
   4a578:	dec00204 	addi	sp,sp,8
   4a57c:	f800283a 	ret

0004a580 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   4a580:	defffd04 	addi	sp,sp,-12
   4a584:	df000215 	stw	fp,8(sp)
   4a588:	df000204 	addi	fp,sp,8
   4a58c:	e13ffe15 	stw	r4,-8(fp)
   4a590:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   4a594:	e0bffe17 	ldw	r2,-8(fp)
   4a598:	10800104 	addi	r2,r2,4
   4a59c:	10800037 	ldwio	r2,0(r2)
   4a5a0:	1007883a 	mov	r3,r2
   4a5a4:	e0bfff17 	ldw	r2,-4(fp)
   4a5a8:	1884703a 	and	r2,r3,r2
}
   4a5ac:	e037883a 	mov	sp,fp
   4a5b0:	df000017 	ldw	fp,0(sp)
   4a5b4:	dec00104 	addi	sp,sp,4
   4a5b8:	f800283a 	ret

0004a5bc <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   4a5bc:	defffd04 	addi	sp,sp,-12
   4a5c0:	df000215 	stw	fp,8(sp)
   4a5c4:	df000204 	addi	fp,sp,8
   4a5c8:	e13ffe15 	stw	r4,-8(fp)
   4a5cc:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   4a5d0:	e0bffe17 	ldw	r2,-8(fp)
   4a5d4:	10800304 	addi	r2,r2,12
   4a5d8:	10800037 	ldwio	r2,0(r2)
   4a5dc:	1007883a 	mov	r3,r2
   4a5e0:	e0bfff17 	ldw	r2,-4(fp)
   4a5e4:	1884703a 	and	r2,r3,r2
}
   4a5e8:	e037883a 	mov	sp,fp
   4a5ec:	df000017 	ldw	fp,0(sp)
   4a5f0:	dec00104 	addi	sp,sp,4
   4a5f4:	f800283a 	ret

0004a5f8 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   4a5f8:	defffe04 	addi	sp,sp,-8
   4a5fc:	df000115 	stw	fp,4(sp)
   4a600:	df000104 	addi	fp,sp,4
   4a604:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   4a608:	e0bfff17 	ldw	r2,-4(fp)
   4a60c:	10800404 	addi	r2,r2,16
   4a610:	10800037 	ldwio	r2,0(r2)
}
   4a614:	e037883a 	mov	sp,fp
   4a618:	df000017 	ldw	fp,0(sp)
   4a61c:	dec00104 	addi	sp,sp,4
   4a620:	f800283a 	ret

0004a624 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   4a624:	defffe04 	addi	sp,sp,-8
   4a628:	df000115 	stw	fp,4(sp)
   4a62c:	df000104 	addi	fp,sp,4
   4a630:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   4a634:	e0bfff17 	ldw	r2,-4(fp)
   4a638:	10800504 	addi	r2,r2,20
   4a63c:	10800037 	ldwio	r2,0(r2)
}
   4a640:	e037883a 	mov	sp,fp
   4a644:	df000017 	ldw	fp,0(sp)
   4a648:	dec00104 	addi	sp,sp,4
   4a64c:	f800283a 	ret

0004a650 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   4a650:	defffd04 	addi	sp,sp,-12
   4a654:	df000215 	stw	fp,8(sp)
   4a658:	df000204 	addi	fp,sp,8
   4a65c:	e13ffe15 	stw	r4,-8(fp)
   4a660:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   4a664:	e0bffe17 	ldw	r2,-8(fp)
   4a668:	10800204 	addi	r2,r2,8
   4a66c:	10800037 	ldwio	r2,0(r2)
   4a670:	1007883a 	mov	r3,r2
   4a674:	e0bfff17 	ldw	r2,-4(fp)
   4a678:	1884703a 	and	r2,r3,r2
}
   4a67c:	e037883a 	mov	sp,fp
   4a680:	df000017 	ldw	fp,0(sp)
   4a684:	dec00104 	addi	sp,sp,4
   4a688:	f800283a 	ret

0004a68c <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   4a68c:	defffe04 	addi	sp,sp,-8
   4a690:	df000115 	stw	fp,4(sp)
   4a694:	df000104 	addi	fp,sp,4
   4a698:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   4a69c:	e0bfff17 	ldw	r2,-4(fp)
   4a6a0:	10800037 	ldwio	r2,0(r2)
}
   4a6a4:	e037883a 	mov	sp,fp
   4a6a8:	df000017 	ldw	fp,0(sp)
   4a6ac:	dec00104 	addi	sp,sp,4
   4a6b0:	f800283a 	ret

0004a6b4 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   4a6b4:	defffd04 	addi	sp,sp,-12
   4a6b8:	df000215 	stw	fp,8(sp)
   4a6bc:	df000204 	addi	fp,sp,8
   4a6c0:	e13ffe15 	stw	r4,-8(fp)
   4a6c4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   4a6c8:	e0bffe17 	ldw	r2,-8(fp)
   4a6cc:	10800204 	addi	r2,r2,8
   4a6d0:	1007883a 	mov	r3,r2
   4a6d4:	e0bfff17 	ldw	r2,-4(fp)
   4a6d8:	18800035 	stwio	r2,0(r3)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   4a6dc:	e0bffe17 	ldw	r2,-8(fp)
   4a6e0:	10800204 	addi	r2,r2,8
   4a6e4:	10800037 	ldwio	r2,0(r2)
   4a6e8:	1007883a 	mov	r3,r2
   4a6ec:	e0bfff17 	ldw	r2,-4(fp)
   4a6f0:	1884703a 	and	r2,r3,r2
   4a6f4:	1000021e 	bne	r2,zero,4a700 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
   4a6f8:	0005883a 	mov	r2,zero
   4a6fc:	00000106 	br	4a704 <altera_avalon_fifo_clear_event+0x50>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4a700:	00bfffc4 	movi	r2,-1
}
   4a704:	e037883a 	mov	sp,fp
   4a708:	df000017 	ldw	fp,0(sp)
   4a70c:	dec00104 	addi	sp,sp,4
   4a710:	f800283a 	ret

0004a714 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   4a714:	defffd04 	addi	sp,sp,-12
   4a718:	df000215 	stw	fp,8(sp)
   4a71c:	df000204 	addi	fp,sp,8
   4a720:	e13ffe15 	stw	r4,-8(fp)
   4a724:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   4a728:	e0bffe17 	ldw	r2,-8(fp)
   4a72c:	10800304 	addi	r2,r2,12
   4a730:	1007883a 	mov	r3,r2
   4a734:	e0bfff17 	ldw	r2,-4(fp)
   4a738:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   4a73c:	e0bffe17 	ldw	r2,-8(fp)
   4a740:	10800304 	addi	r2,r2,12
   4a744:	10800037 	ldwio	r2,0(r2)
   4a748:	1007883a 	mov	r3,r2
   4a74c:	e0bfff17 	ldw	r2,-4(fp)
   4a750:	1880021e 	bne	r3,r2,4a75c <altera_avalon_fifo_write_ienable+0x48>
        return ALTERA_AVALON_FIFO_OK;
   4a754:	0005883a 	mov	r2,zero
   4a758:	00000106 	br	4a760 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4a75c:	00bfff84 	movi	r2,-2
}
   4a760:	e037883a 	mov	sp,fp
   4a764:	df000017 	ldw	fp,0(sp)
   4a768:	dec00104 	addi	sp,sp,4
   4a76c:	f800283a 	ret

0004a770 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   4a770:	defffd04 	addi	sp,sp,-12
   4a774:	df000215 	stw	fp,8(sp)
   4a778:	df000204 	addi	fp,sp,8
   4a77c:	e13ffe15 	stw	r4,-8(fp)
   4a780:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   4a784:	e0bffe17 	ldw	r2,-8(fp)
   4a788:	10800404 	addi	r2,r2,16
   4a78c:	1007883a 	mov	r3,r2
   4a790:	e0bfff17 	ldw	r2,-4(fp)
   4a794:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   4a798:	e0bffe17 	ldw	r2,-8(fp)
   4a79c:	10800404 	addi	r2,r2,16
   4a7a0:	10800037 	ldwio	r2,0(r2)
   4a7a4:	1007883a 	mov	r3,r2
   4a7a8:	e0bfff17 	ldw	r2,-4(fp)
   4a7ac:	1880021e 	bne	r3,r2,4a7b8 <altera_avalon_fifo_write_almostfull+0x48>
        return ALTERA_AVALON_FIFO_OK;
   4a7b0:	0005883a 	mov	r2,zero
   4a7b4:	00000106 	br	4a7bc <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4a7b8:	00bfff44 	movi	r2,-3
}
   4a7bc:	e037883a 	mov	sp,fp
   4a7c0:	df000017 	ldw	fp,0(sp)
   4a7c4:	dec00104 	addi	sp,sp,4
   4a7c8:	f800283a 	ret

0004a7cc <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   4a7cc:	defffd04 	addi	sp,sp,-12
   4a7d0:	df000215 	stw	fp,8(sp)
   4a7d4:	df000204 	addi	fp,sp,8
   4a7d8:	e13ffe15 	stw	r4,-8(fp)
   4a7dc:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   4a7e0:	e0bffe17 	ldw	r2,-8(fp)
   4a7e4:	10800504 	addi	r2,r2,20
   4a7e8:	1007883a 	mov	r3,r2
   4a7ec:	e0bfff17 	ldw	r2,-4(fp)
   4a7f0:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   4a7f4:	e0bffe17 	ldw	r2,-8(fp)
   4a7f8:	10800504 	addi	r2,r2,20
   4a7fc:	10800037 	ldwio	r2,0(r2)
   4a800:	1007883a 	mov	r3,r2
   4a804:	e0bfff17 	ldw	r2,-4(fp)
   4a808:	1880021e 	bne	r3,r2,4a814 <altera_avalon_fifo_write_almostempty+0x48>
        return ALTERA_AVALON_FIFO_OK;
   4a80c:	0005883a 	mov	r2,zero
   4a810:	00000106 	br	4a818 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4a814:	00bfff44 	movi	r2,-3
}
   4a818:	e037883a 	mov	sp,fp
   4a81c:	df000017 	ldw	fp,0(sp)
   4a820:	dec00104 	addi	sp,sp,4
   4a824:	f800283a 	ret

0004a828 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   4a828:	defffb04 	addi	sp,sp,-20
   4a82c:	dfc00415 	stw	ra,16(sp)
   4a830:	df000315 	stw	fp,12(sp)
   4a834:	df000304 	addi	fp,sp,12
   4a838:	e13ffd15 	stw	r4,-12(fp)
   4a83c:	e17ffe15 	stw	r5,-8(fp)
   4a840:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4a844:	01400044 	movi	r5,1
   4a848:	e13ffe17 	ldw	r4,-8(fp)
   4a84c:	004a5800 	call	4a580 <altera_avalon_fifo_read_status>
   4a850:	1000051e 	bne	r2,zero,4a868 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   4a854:	e0bffd17 	ldw	r2,-12(fp)
   4a858:	e0ffff17 	ldw	r3,-4(fp)
   4a85c:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   4a860:	0005883a 	mov	r2,zero
   4a864:	00000106 	br	4a86c <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   4a868:	00bfff04 	movi	r2,-4
    }
}
   4a86c:	e037883a 	mov	sp,fp
   4a870:	dfc00117 	ldw	ra,4(sp)
   4a874:	df000017 	ldw	fp,0(sp)
   4a878:	dec00204 	addi	sp,sp,8
   4a87c:	f800283a 	ret

0004a880 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   4a880:	defffa04 	addi	sp,sp,-24
   4a884:	dfc00515 	stw	ra,20(sp)
   4a888:	df000415 	stw	fp,16(sp)
   4a88c:	df000404 	addi	fp,sp,16
   4a890:	e13ffd15 	stw	r4,-12(fp)
   4a894:	e17ffe15 	stw	r5,-8(fp)
   4a898:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   4a89c:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   4a8a0:	e0bfff17 	ldw	r2,-4(fp)
   4a8a4:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4a8a8:	01400084 	movi	r5,2
   4a8ac:	e13ffe17 	ldw	r4,-8(fp)
   4a8b0:	004a5800 	call	4a580 <altera_avalon_fifo_read_status>
   4a8b4:	1000071e 	bne	r2,zero,4a8d4 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   4a8b8:	e13ffe17 	ldw	r4,-8(fp)
   4a8bc:	004a68c0 	call	4a68c <altera_avalon_fifo_read_level>
   4a8c0:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4a8c4:	e0bffd17 	ldw	r2,-12(fp)
   4a8c8:	10c00037 	ldwio	r3,0(r2)
   4a8cc:	e0bfff17 	ldw	r2,-4(fp)
   4a8d0:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   4a8d4:	e0bffc17 	ldw	r2,-16(fp)
}
   4a8d8:	e037883a 	mov	sp,fp
   4a8dc:	dfc00117 	ldw	ra,4(sp)
   4a8e0:	df000017 	ldw	fp,0(sp)
   4a8e4:	dec00204 	addi	sp,sp,8
   4a8e8:	f800283a 	ret

0004a8ec <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   4a8ec:	defffc04 	addi	sp,sp,-16
   4a8f0:	dfc00315 	stw	ra,12(sp)
   4a8f4:	df000215 	stw	fp,8(sp)
   4a8f8:	df000204 	addi	fp,sp,8
   4a8fc:	e13ffe15 	stw	r4,-8(fp)
   4a900:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4a904:	01400084 	movi	r5,2
   4a908:	e13fff17 	ldw	r4,-4(fp)
   4a90c:	004a5800 	call	4a580 <altera_avalon_fifo_read_status>
   4a910:	1000031e 	bne	r2,zero,4a920 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4a914:	e0bffe17 	ldw	r2,-8(fp)
   4a918:	10800037 	ldwio	r2,0(r2)
   4a91c:	00000106 	br	4a924 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   4a920:	0005883a 	mov	r2,zero
}
   4a924:	e037883a 	mov	sp,fp
   4a928:	dfc00117 	ldw	ra,4(sp)
   4a92c:	df000017 	ldw	fp,0(sp)
   4a930:	dec00204 	addi	sp,sp,8
   4a934:	f800283a 	ret

0004a938 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   4a938:	defffb04 	addi	sp,sp,-20
   4a93c:	dfc00415 	stw	ra,16(sp)
   4a940:	df000315 	stw	fp,12(sp)
   4a944:	df000304 	addi	fp,sp,12
   4a948:	e13ffd15 	stw	r4,-12(fp)
   4a94c:	e17ffe15 	stw	r5,-8(fp)
   4a950:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4a954:	01400044 	movi	r5,1
   4a958:	e13ffe17 	ldw	r4,-8(fp)
   4a95c:	004a5800 	call	4a580 <altera_avalon_fifo_read_status>
   4a960:	1000071e 	bne	r2,zero,4a980 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   4a964:	e0bffd17 	ldw	r2,-12(fp)
   4a968:	10800104 	addi	r2,r2,4
   4a96c:	1007883a 	mov	r3,r2
   4a970:	e0bfff17 	ldw	r2,-4(fp)
   4a974:	18800035 	stwio	r2,0(r3)
	return ALTERA_AVALON_FIFO_OK;
   4a978:	0005883a 	mov	r2,zero
   4a97c:	00000106 	br	4a984 <altera_avalon_fifo_write_other_info+0x4c>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   4a980:	00bfff04 	movi	r2,-4
    }
}
   4a984:	e037883a 	mov	sp,fp
   4a988:	dfc00117 	ldw	ra,4(sp)
   4a98c:	df000017 	ldw	fp,0(sp)
   4a990:	dec00204 	addi	sp,sp,8
   4a994:	f800283a 	ret

0004a998 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   4a998:	defffe04 	addi	sp,sp,-8
   4a99c:	df000115 	stw	fp,4(sp)
   4a9a0:	df000104 	addi	fp,sp,4
   4a9a4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   4a9a8:	e0bfff17 	ldw	r2,-4(fp)
   4a9ac:	10800104 	addi	r2,r2,4
   4a9b0:	10800037 	ldwio	r2,0(r2)
}
   4a9b4:	e037883a 	mov	sp,fp
   4a9b8:	df000017 	ldw	fp,0(sp)
   4a9bc:	dec00104 	addi	sp,sp,4
   4a9c0:	f800283a 	ret

0004a9c4 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   4a9c4:	defffe04 	addi	sp,sp,-8
   4a9c8:	df000115 	stw	fp,4(sp)
   4a9cc:	df000104 	addi	fp,sp,4
   4a9d0:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   4a9d4:	e0bfff17 	ldw	r2,-4(fp)
   4a9d8:	10800037 	ldwio	r2,0(r2)
}
   4a9dc:	e037883a 	mov	sp,fp
   4a9e0:	df000017 	ldw	fp,0(sp)
   4a9e4:	dec00104 	addi	sp,sp,4
   4a9e8:	f800283a 	ret

0004a9ec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4a9ec:	defffa04 	addi	sp,sp,-24
   4a9f0:	dfc00515 	stw	ra,20(sp)
   4a9f4:	df000415 	stw	fp,16(sp)
   4a9f8:	df000404 	addi	fp,sp,16
   4a9fc:	e13ffd15 	stw	r4,-12(fp)
   4aa00:	e17ffe15 	stw	r5,-8(fp)
   4aa04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4aa08:	e0bffd17 	ldw	r2,-12(fp)
   4aa0c:	10800017 	ldw	r2,0(r2)
   4aa10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4aa14:	e0bffc17 	ldw	r2,-16(fp)
   4aa18:	10c00a04 	addi	r3,r2,40
   4aa1c:	e0bffd17 	ldw	r2,-12(fp)
   4aa20:	10800217 	ldw	r2,8(r2)
   4aa24:	100f883a 	mov	r7,r2
   4aa28:	e1bfff17 	ldw	r6,-4(fp)
   4aa2c:	e17ffe17 	ldw	r5,-8(fp)
   4aa30:	1809883a 	mov	r4,r3
   4aa34:	004b0140 	call	4b014 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4aa38:	e037883a 	mov	sp,fp
   4aa3c:	dfc00117 	ldw	ra,4(sp)
   4aa40:	df000017 	ldw	fp,0(sp)
   4aa44:	dec00204 	addi	sp,sp,8
   4aa48:	f800283a 	ret

0004aa4c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4aa4c:	defffa04 	addi	sp,sp,-24
   4aa50:	dfc00515 	stw	ra,20(sp)
   4aa54:	df000415 	stw	fp,16(sp)
   4aa58:	df000404 	addi	fp,sp,16
   4aa5c:	e13ffd15 	stw	r4,-12(fp)
   4aa60:	e17ffe15 	stw	r5,-8(fp)
   4aa64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4aa68:	e0bffd17 	ldw	r2,-12(fp)
   4aa6c:	10800017 	ldw	r2,0(r2)
   4aa70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4aa74:	e0bffc17 	ldw	r2,-16(fp)
   4aa78:	10c00a04 	addi	r3,r2,40
   4aa7c:	e0bffd17 	ldw	r2,-12(fp)
   4aa80:	10800217 	ldw	r2,8(r2)
   4aa84:	100f883a 	mov	r7,r2
   4aa88:	e1bfff17 	ldw	r6,-4(fp)
   4aa8c:	e17ffe17 	ldw	r5,-8(fp)
   4aa90:	1809883a 	mov	r4,r3
   4aa94:	004b2300 	call	4b230 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4aa98:	e037883a 	mov	sp,fp
   4aa9c:	dfc00117 	ldw	ra,4(sp)
   4aaa0:	df000017 	ldw	fp,0(sp)
   4aaa4:	dec00204 	addi	sp,sp,8
   4aaa8:	f800283a 	ret

0004aaac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4aaac:	defffc04 	addi	sp,sp,-16
   4aab0:	dfc00315 	stw	ra,12(sp)
   4aab4:	df000215 	stw	fp,8(sp)
   4aab8:	df000204 	addi	fp,sp,8
   4aabc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4aac0:	e0bfff17 	ldw	r2,-4(fp)
   4aac4:	10800017 	ldw	r2,0(r2)
   4aac8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4aacc:	e0bffe17 	ldw	r2,-8(fp)
   4aad0:	10c00a04 	addi	r3,r2,40
   4aad4:	e0bfff17 	ldw	r2,-4(fp)
   4aad8:	10800217 	ldw	r2,8(r2)
   4aadc:	100b883a 	mov	r5,r2
   4aae0:	1809883a 	mov	r4,r3
   4aae4:	004aebc0 	call	4aebc <altera_avalon_jtag_uart_close>
}
   4aae8:	e037883a 	mov	sp,fp
   4aaec:	dfc00117 	ldw	ra,4(sp)
   4aaf0:	df000017 	ldw	fp,0(sp)
   4aaf4:	dec00204 	addi	sp,sp,8
   4aaf8:	f800283a 	ret

0004aafc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4aafc:	defffa04 	addi	sp,sp,-24
   4ab00:	dfc00515 	stw	ra,20(sp)
   4ab04:	df000415 	stw	fp,16(sp)
   4ab08:	df000404 	addi	fp,sp,16
   4ab0c:	e13ffd15 	stw	r4,-12(fp)
   4ab10:	e17ffe15 	stw	r5,-8(fp)
   4ab14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4ab18:	e0bffd17 	ldw	r2,-12(fp)
   4ab1c:	10800017 	ldw	r2,0(r2)
   4ab20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4ab24:	e0bffc17 	ldw	r2,-16(fp)
   4ab28:	10800a04 	addi	r2,r2,40
   4ab2c:	e1bfff17 	ldw	r6,-4(fp)
   4ab30:	e17ffe17 	ldw	r5,-8(fp)
   4ab34:	1009883a 	mov	r4,r2
   4ab38:	004af240 	call	4af24 <altera_avalon_jtag_uart_ioctl>
}
   4ab3c:	e037883a 	mov	sp,fp
   4ab40:	dfc00117 	ldw	ra,4(sp)
   4ab44:	df000017 	ldw	fp,0(sp)
   4ab48:	dec00204 	addi	sp,sp,8
   4ab4c:	f800283a 	ret

0004ab50 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4ab50:	defffa04 	addi	sp,sp,-24
   4ab54:	dfc00515 	stw	ra,20(sp)
   4ab58:	df000415 	stw	fp,16(sp)
   4ab5c:	df000404 	addi	fp,sp,16
   4ab60:	e13ffd15 	stw	r4,-12(fp)
   4ab64:	e17ffe15 	stw	r5,-8(fp)
   4ab68:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4ab6c:	e0bffd17 	ldw	r2,-12(fp)
   4ab70:	00c00044 	movi	r3,1
   4ab74:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4ab78:	e0bffd17 	ldw	r2,-12(fp)
   4ab7c:	10800017 	ldw	r2,0(r2)
   4ab80:	10800104 	addi	r2,r2,4
   4ab84:	1007883a 	mov	r3,r2
   4ab88:	e0bffd17 	ldw	r2,-12(fp)
   4ab8c:	10800817 	ldw	r2,32(r2)
   4ab90:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4ab94:	e0bffe17 	ldw	r2,-8(fp)
   4ab98:	e0ffff17 	ldw	r3,-4(fp)
   4ab9c:	d8000015 	stw	zero,0(sp)
   4aba0:	e1fffd17 	ldw	r7,-12(fp)
   4aba4:	01800174 	movhi	r6,5
   4aba8:	31ab0404 	addi	r6,r6,-21488
   4abac:	180b883a 	mov	r5,r3
   4abb0:	1009883a 	mov	r4,r2
   4abb4:	00494f80 	call	494f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4abb8:	e0bffd17 	ldw	r2,-12(fp)
   4abbc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4abc0:	e0bffd17 	ldw	r2,-12(fp)
   4abc4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4abc8:	d0e02017 	ldw	r3,-32640(gp)
   4abcc:	e1fffd17 	ldw	r7,-12(fp)
   4abd0:	01800174 	movhi	r6,5
   4abd4:	31ab8704 	addi	r6,r6,-20964
   4abd8:	180b883a 	mov	r5,r3
   4abdc:	1009883a 	mov	r4,r2
   4abe0:	004bb840 	call	4bb84 <alt_alarm_start>
   4abe4:	1000040e 	bge	r2,zero,4abf8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4abe8:	e0fffd17 	ldw	r3,-12(fp)
   4abec:	00a00034 	movhi	r2,32768
   4abf0:	10bfffc4 	addi	r2,r2,-1
   4abf4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4abf8:	0001883a 	nop
   4abfc:	e037883a 	mov	sp,fp
   4ac00:	dfc00117 	ldw	ra,4(sp)
   4ac04:	df000017 	ldw	fp,0(sp)
   4ac08:	dec00204 	addi	sp,sp,8
   4ac0c:	f800283a 	ret

0004ac10 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4ac10:	defff804 	addi	sp,sp,-32
   4ac14:	df000715 	stw	fp,28(sp)
   4ac18:	df000704 	addi	fp,sp,28
   4ac1c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4ac20:	e0bfff17 	ldw	r2,-4(fp)
   4ac24:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4ac28:	e0bffb17 	ldw	r2,-20(fp)
   4ac2c:	10800017 	ldw	r2,0(r2)
   4ac30:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4ac34:	e0bffc17 	ldw	r2,-16(fp)
   4ac38:	10800104 	addi	r2,r2,4
   4ac3c:	10800037 	ldwio	r2,0(r2)
   4ac40:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4ac44:	e0bffd17 	ldw	r2,-12(fp)
   4ac48:	1080c00c 	andi	r2,r2,768
   4ac4c:	10006d26 	beq	r2,zero,4ae04 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4ac50:	e0bffd17 	ldw	r2,-12(fp)
   4ac54:	1080400c 	andi	r2,r2,256
   4ac58:	10003526 	beq	r2,zero,4ad30 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4ac5c:	00800074 	movhi	r2,1
   4ac60:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ac64:	e0bffb17 	ldw	r2,-20(fp)
   4ac68:	10800a17 	ldw	r2,40(r2)
   4ac6c:	10800044 	addi	r2,r2,1
   4ac70:	1081ffcc 	andi	r2,r2,2047
   4ac74:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4ac78:	e0bffb17 	ldw	r2,-20(fp)
   4ac7c:	10c00b17 	ldw	r3,44(r2)
   4ac80:	e0bffe17 	ldw	r2,-8(fp)
   4ac84:	18801526 	beq	r3,r2,4acdc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4ac88:	e0bffc17 	ldw	r2,-16(fp)
   4ac8c:	10800037 	ldwio	r2,0(r2)
   4ac90:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4ac94:	e0bff917 	ldw	r2,-28(fp)
   4ac98:	10a0000c 	andi	r2,r2,32768
   4ac9c:	10001126 	beq	r2,zero,4ace4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4aca0:	e0bffb17 	ldw	r2,-20(fp)
   4aca4:	10800a17 	ldw	r2,40(r2)
   4aca8:	e0fff917 	ldw	r3,-28(fp)
   4acac:	1809883a 	mov	r4,r3
   4acb0:	e0fffb17 	ldw	r3,-20(fp)
   4acb4:	1885883a 	add	r2,r3,r2
   4acb8:	10800e04 	addi	r2,r2,56
   4acbc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4acc0:	e0bffb17 	ldw	r2,-20(fp)
   4acc4:	10800a17 	ldw	r2,40(r2)
   4acc8:	10800044 	addi	r2,r2,1
   4accc:	10c1ffcc 	andi	r3,r2,2047
   4acd0:	e0bffb17 	ldw	r2,-20(fp)
   4acd4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4acd8:	003fe206 	br	4ac64 <__reset+0xfffc9c64>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4acdc:	0001883a 	nop
   4ace0:	00000106 	br	4ace8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4ace4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4ace8:	e0bff917 	ldw	r2,-28(fp)
   4acec:	10bfffec 	andhi	r2,r2,65535
   4acf0:	10000f26 	beq	r2,zero,4ad30 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4acf4:	e0bffb17 	ldw	r2,-20(fp)
   4acf8:	10c00817 	ldw	r3,32(r2)
   4acfc:	00bfff84 	movi	r2,-2
   4ad00:	1886703a 	and	r3,r3,r2
   4ad04:	e0bffb17 	ldw	r2,-20(fp)
   4ad08:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4ad0c:	e0bffc17 	ldw	r2,-16(fp)
   4ad10:	10800104 	addi	r2,r2,4
   4ad14:	1007883a 	mov	r3,r2
   4ad18:	e0bffb17 	ldw	r2,-20(fp)
   4ad1c:	10800817 	ldw	r2,32(r2)
   4ad20:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4ad24:	e0bffc17 	ldw	r2,-16(fp)
   4ad28:	10800104 	addi	r2,r2,4
   4ad2c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4ad30:	e0bffd17 	ldw	r2,-12(fp)
   4ad34:	1080800c 	andi	r2,r2,512
   4ad38:	103fbe26 	beq	r2,zero,4ac34 <__reset+0xfffc9c34>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4ad3c:	e0bffd17 	ldw	r2,-12(fp)
   4ad40:	1004d43a 	srli	r2,r2,16
   4ad44:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4ad48:	00001406 	br	4ad9c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4ad4c:	e0bffc17 	ldw	r2,-16(fp)
   4ad50:	e0fffb17 	ldw	r3,-20(fp)
   4ad54:	18c00d17 	ldw	r3,52(r3)
   4ad58:	e13ffb17 	ldw	r4,-20(fp)
   4ad5c:	20c7883a 	add	r3,r4,r3
   4ad60:	18c20e04 	addi	r3,r3,2104
   4ad64:	18c00003 	ldbu	r3,0(r3)
   4ad68:	18c03fcc 	andi	r3,r3,255
   4ad6c:	18c0201c 	xori	r3,r3,128
   4ad70:	18ffe004 	addi	r3,r3,-128
   4ad74:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ad78:	e0bffb17 	ldw	r2,-20(fp)
   4ad7c:	10800d17 	ldw	r2,52(r2)
   4ad80:	10800044 	addi	r2,r2,1
   4ad84:	10c1ffcc 	andi	r3,r2,2047
   4ad88:	e0bffb17 	ldw	r2,-20(fp)
   4ad8c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4ad90:	e0bffa17 	ldw	r2,-24(fp)
   4ad94:	10bfffc4 	addi	r2,r2,-1
   4ad98:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4ad9c:	e0bffa17 	ldw	r2,-24(fp)
   4ada0:	10000526 	beq	r2,zero,4adb8 <altera_avalon_jtag_uart_irq+0x1a8>
   4ada4:	e0bffb17 	ldw	r2,-20(fp)
   4ada8:	10c00d17 	ldw	r3,52(r2)
   4adac:	e0bffb17 	ldw	r2,-20(fp)
   4adb0:	10800c17 	ldw	r2,48(r2)
   4adb4:	18bfe51e 	bne	r3,r2,4ad4c <__reset+0xfffc9d4c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4adb8:	e0bffa17 	ldw	r2,-24(fp)
   4adbc:	103f9d26 	beq	r2,zero,4ac34 <__reset+0xfffc9c34>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4adc0:	e0bffb17 	ldw	r2,-20(fp)
   4adc4:	10c00817 	ldw	r3,32(r2)
   4adc8:	00bfff44 	movi	r2,-3
   4adcc:	1886703a 	and	r3,r3,r2
   4add0:	e0bffb17 	ldw	r2,-20(fp)
   4add4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4add8:	e0bffb17 	ldw	r2,-20(fp)
   4addc:	10800017 	ldw	r2,0(r2)
   4ade0:	10800104 	addi	r2,r2,4
   4ade4:	1007883a 	mov	r3,r2
   4ade8:	e0bffb17 	ldw	r2,-20(fp)
   4adec:	10800817 	ldw	r2,32(r2)
   4adf0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4adf4:	e0bffc17 	ldw	r2,-16(fp)
   4adf8:	10800104 	addi	r2,r2,4
   4adfc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4ae00:	003f8c06 	br	4ac34 <__reset+0xfffc9c34>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4ae04:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4ae08:	0001883a 	nop
   4ae0c:	e037883a 	mov	sp,fp
   4ae10:	df000017 	ldw	fp,0(sp)
   4ae14:	dec00104 	addi	sp,sp,4
   4ae18:	f800283a 	ret

0004ae1c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4ae1c:	defff804 	addi	sp,sp,-32
   4ae20:	df000715 	stw	fp,28(sp)
   4ae24:	df000704 	addi	fp,sp,28
   4ae28:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4ae2c:	e0bffb17 	ldw	r2,-20(fp)
   4ae30:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4ae34:	e0bff917 	ldw	r2,-28(fp)
   4ae38:	10800017 	ldw	r2,0(r2)
   4ae3c:	10800104 	addi	r2,r2,4
   4ae40:	10800037 	ldwio	r2,0(r2)
   4ae44:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4ae48:	e0bffa17 	ldw	r2,-24(fp)
   4ae4c:	1081000c 	andi	r2,r2,1024
   4ae50:	10000b26 	beq	r2,zero,4ae80 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4ae54:	e0bff917 	ldw	r2,-28(fp)
   4ae58:	10800017 	ldw	r2,0(r2)
   4ae5c:	10800104 	addi	r2,r2,4
   4ae60:	1007883a 	mov	r3,r2
   4ae64:	e0bff917 	ldw	r2,-28(fp)
   4ae68:	10800817 	ldw	r2,32(r2)
   4ae6c:	10810014 	ori	r2,r2,1024
   4ae70:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4ae74:	e0bff917 	ldw	r2,-28(fp)
   4ae78:	10000915 	stw	zero,36(r2)
   4ae7c:	00000a06 	br	4aea8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4ae80:	e0bff917 	ldw	r2,-28(fp)
   4ae84:	10c00917 	ldw	r3,36(r2)
   4ae88:	00a00034 	movhi	r2,32768
   4ae8c:	10bfff04 	addi	r2,r2,-4
   4ae90:	10c00536 	bltu	r2,r3,4aea8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   4ae94:	e0bff917 	ldw	r2,-28(fp)
   4ae98:	10800917 	ldw	r2,36(r2)
   4ae9c:	10c00044 	addi	r3,r2,1
   4aea0:	e0bff917 	ldw	r2,-28(fp)
   4aea4:	10c00915 	stw	r3,36(r2)
   4aea8:	d0a02017 	ldw	r2,-32640(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4aeac:	e037883a 	mov	sp,fp
   4aeb0:	df000017 	ldw	fp,0(sp)
   4aeb4:	dec00104 	addi	sp,sp,4
   4aeb8:	f800283a 	ret

0004aebc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4aebc:	defffd04 	addi	sp,sp,-12
   4aec0:	df000215 	stw	fp,8(sp)
   4aec4:	df000204 	addi	fp,sp,8
   4aec8:	e13ffe15 	stw	r4,-8(fp)
   4aecc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4aed0:	00000506 	br	4aee8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4aed4:	e0bfff17 	ldw	r2,-4(fp)
   4aed8:	1090000c 	andi	r2,r2,16384
   4aedc:	10000226 	beq	r2,zero,4aee8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4aee0:	00bffd44 	movi	r2,-11
   4aee4:	00000b06 	br	4af14 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4aee8:	e0bffe17 	ldw	r2,-8(fp)
   4aeec:	10c00d17 	ldw	r3,52(r2)
   4aef0:	e0bffe17 	ldw	r2,-8(fp)
   4aef4:	10800c17 	ldw	r2,48(r2)
   4aef8:	18800526 	beq	r3,r2,4af10 <altera_avalon_jtag_uart_close+0x54>
   4aefc:	e0bffe17 	ldw	r2,-8(fp)
   4af00:	10c00917 	ldw	r3,36(r2)
   4af04:	e0bffe17 	ldw	r2,-8(fp)
   4af08:	10800117 	ldw	r2,4(r2)
   4af0c:	18bff136 	bltu	r3,r2,4aed4 <__reset+0xfffc9ed4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4af10:	0005883a 	mov	r2,zero
}
   4af14:	e037883a 	mov	sp,fp
   4af18:	df000017 	ldw	fp,0(sp)
   4af1c:	dec00104 	addi	sp,sp,4
   4af20:	f800283a 	ret

0004af24 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4af24:	defffa04 	addi	sp,sp,-24
   4af28:	df000515 	stw	fp,20(sp)
   4af2c:	df000504 	addi	fp,sp,20
   4af30:	e13ffd15 	stw	r4,-12(fp)
   4af34:	e17ffe15 	stw	r5,-8(fp)
   4af38:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4af3c:	00bff9c4 	movi	r2,-25
   4af40:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4af44:	e0bffe17 	ldw	r2,-8(fp)
   4af48:	10da8060 	cmpeqi	r3,r2,27137
   4af4c:	1800031e 	bne	r3,zero,4af5c <altera_avalon_jtag_uart_ioctl+0x38>
   4af50:	109a80a0 	cmpeqi	r2,r2,27138
   4af54:	1000181e 	bne	r2,zero,4afb8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   4af58:	00002906 	br	4b000 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4af5c:	e0bffd17 	ldw	r2,-12(fp)
   4af60:	10c00117 	ldw	r3,4(r2)
   4af64:	00a00034 	movhi	r2,32768
   4af68:	10bfffc4 	addi	r2,r2,-1
   4af6c:	18802126 	beq	r3,r2,4aff4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   4af70:	e0bfff17 	ldw	r2,-4(fp)
   4af74:	10800017 	ldw	r2,0(r2)
   4af78:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4af7c:	e0bffc17 	ldw	r2,-16(fp)
   4af80:	10800090 	cmplti	r2,r2,2
   4af84:	1000061e 	bne	r2,zero,4afa0 <altera_avalon_jtag_uart_ioctl+0x7c>
   4af88:	e0fffc17 	ldw	r3,-16(fp)
   4af8c:	00a00034 	movhi	r2,32768
   4af90:	10bfffc4 	addi	r2,r2,-1
   4af94:	18800226 	beq	r3,r2,4afa0 <altera_avalon_jtag_uart_ioctl+0x7c>
   4af98:	e0bffc17 	ldw	r2,-16(fp)
   4af9c:	00000206 	br	4afa8 <altera_avalon_jtag_uart_ioctl+0x84>
   4afa0:	00a00034 	movhi	r2,32768
   4afa4:	10bfff84 	addi	r2,r2,-2
   4afa8:	e0fffd17 	ldw	r3,-12(fp)
   4afac:	18800115 	stw	r2,4(r3)
      rc = 0;
   4afb0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4afb4:	00000f06 	br	4aff4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4afb8:	e0bffd17 	ldw	r2,-12(fp)
   4afbc:	10c00117 	ldw	r3,4(r2)
   4afc0:	00a00034 	movhi	r2,32768
   4afc4:	10bfffc4 	addi	r2,r2,-1
   4afc8:	18800c26 	beq	r3,r2,4affc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4afcc:	e0bffd17 	ldw	r2,-12(fp)
   4afd0:	10c00917 	ldw	r3,36(r2)
   4afd4:	e0bffd17 	ldw	r2,-12(fp)
   4afd8:	10800117 	ldw	r2,4(r2)
   4afdc:	1885803a 	cmpltu	r2,r3,r2
   4afe0:	10c03fcc 	andi	r3,r2,255
   4afe4:	e0bfff17 	ldw	r2,-4(fp)
   4afe8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4afec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4aff0:	00000206 	br	4affc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4aff4:	0001883a 	nop
   4aff8:	00000106 	br	4b000 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4affc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4b000:	e0bffb17 	ldw	r2,-20(fp)
}
   4b004:	e037883a 	mov	sp,fp
   4b008:	df000017 	ldw	fp,0(sp)
   4b00c:	dec00104 	addi	sp,sp,4
   4b010:	f800283a 	ret

0004b014 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4b014:	defff304 	addi	sp,sp,-52
   4b018:	dfc00c15 	stw	ra,48(sp)
   4b01c:	df000b15 	stw	fp,44(sp)
   4b020:	df000b04 	addi	fp,sp,44
   4b024:	e13ffc15 	stw	r4,-16(fp)
   4b028:	e17ffd15 	stw	r5,-12(fp)
   4b02c:	e1bffe15 	stw	r6,-8(fp)
   4b030:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4b034:	e0bffd17 	ldw	r2,-12(fp)
   4b038:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4b03c:	00004706 	br	4b15c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4b040:	e0bffc17 	ldw	r2,-16(fp)
   4b044:	10800a17 	ldw	r2,40(r2)
   4b048:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4b04c:	e0bffc17 	ldw	r2,-16(fp)
   4b050:	10800b17 	ldw	r2,44(r2)
   4b054:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4b058:	e0fff717 	ldw	r3,-36(fp)
   4b05c:	e0bff817 	ldw	r2,-32(fp)
   4b060:	18800536 	bltu	r3,r2,4b078 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4b064:	e0fff717 	ldw	r3,-36(fp)
   4b068:	e0bff817 	ldw	r2,-32(fp)
   4b06c:	1885c83a 	sub	r2,r3,r2
   4b070:	e0bff615 	stw	r2,-40(fp)
   4b074:	00000406 	br	4b088 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4b078:	00c20004 	movi	r3,2048
   4b07c:	e0bff817 	ldw	r2,-32(fp)
   4b080:	1885c83a 	sub	r2,r3,r2
   4b084:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4b088:	e0bff617 	ldw	r2,-40(fp)
   4b08c:	10001e26 	beq	r2,zero,4b108 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4b090:	e0fffe17 	ldw	r3,-8(fp)
   4b094:	e0bff617 	ldw	r2,-40(fp)
   4b098:	1880022e 	bgeu	r3,r2,4b0a4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4b09c:	e0bffe17 	ldw	r2,-8(fp)
   4b0a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4b0a4:	e0bffc17 	ldw	r2,-16(fp)
   4b0a8:	10c00e04 	addi	r3,r2,56
   4b0ac:	e0bff817 	ldw	r2,-32(fp)
   4b0b0:	1885883a 	add	r2,r3,r2
   4b0b4:	e1bff617 	ldw	r6,-40(fp)
   4b0b8:	100b883a 	mov	r5,r2
   4b0bc:	e13ff517 	ldw	r4,-44(fp)
   4b0c0:	0048f880 	call	48f88 <memcpy>
      ptr   += n;
   4b0c4:	e0fff517 	ldw	r3,-44(fp)
   4b0c8:	e0bff617 	ldw	r2,-40(fp)
   4b0cc:	1885883a 	add	r2,r3,r2
   4b0d0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4b0d4:	e0fffe17 	ldw	r3,-8(fp)
   4b0d8:	e0bff617 	ldw	r2,-40(fp)
   4b0dc:	1885c83a 	sub	r2,r3,r2
   4b0e0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b0e4:	e0fff817 	ldw	r3,-32(fp)
   4b0e8:	e0bff617 	ldw	r2,-40(fp)
   4b0ec:	1885883a 	add	r2,r3,r2
   4b0f0:	10c1ffcc 	andi	r3,r2,2047
   4b0f4:	e0bffc17 	ldw	r2,-16(fp)
   4b0f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4b0fc:	e0bffe17 	ldw	r2,-8(fp)
   4b100:	00bfcf16 	blt	zero,r2,4b040 <__reset+0xfffca040>
   4b104:	00000106 	br	4b10c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4b108:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4b10c:	e0fff517 	ldw	r3,-44(fp)
   4b110:	e0bffd17 	ldw	r2,-12(fp)
   4b114:	1880141e 	bne	r3,r2,4b168 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4b118:	e0bfff17 	ldw	r2,-4(fp)
   4b11c:	1090000c 	andi	r2,r2,16384
   4b120:	1000131e 	bne	r2,zero,4b170 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4b124:	0001883a 	nop
   4b128:	e0bffc17 	ldw	r2,-16(fp)
   4b12c:	10c00a17 	ldw	r3,40(r2)
   4b130:	e0bff717 	ldw	r2,-36(fp)
   4b134:	1880051e 	bne	r3,r2,4b14c <altera_avalon_jtag_uart_read+0x138>
   4b138:	e0bffc17 	ldw	r2,-16(fp)
   4b13c:	10c00917 	ldw	r3,36(r2)
   4b140:	e0bffc17 	ldw	r2,-16(fp)
   4b144:	10800117 	ldw	r2,4(r2)
   4b148:	18bff736 	bltu	r3,r2,4b128 <__reset+0xfffca128>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4b14c:	e0bffc17 	ldw	r2,-16(fp)
   4b150:	10c00a17 	ldw	r3,40(r2)
   4b154:	e0bff717 	ldw	r2,-36(fp)
   4b158:	18800726 	beq	r3,r2,4b178 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4b15c:	e0bffe17 	ldw	r2,-8(fp)
   4b160:	00bfb716 	blt	zero,r2,4b040 <__reset+0xfffca040>
   4b164:	00000506 	br	4b17c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4b168:	0001883a 	nop
   4b16c:	00000306 	br	4b17c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4b170:	0001883a 	nop
   4b174:	00000106 	br	4b17c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4b178:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4b17c:	e0fff517 	ldw	r3,-44(fp)
   4b180:	e0bffd17 	ldw	r2,-12(fp)
   4b184:	18801826 	beq	r3,r2,4b1e8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b188:	0005303a 	rdctl	r2,status
   4b18c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b190:	e0fffb17 	ldw	r3,-20(fp)
   4b194:	00bfff84 	movi	r2,-2
   4b198:	1884703a 	and	r2,r3,r2
   4b19c:	1001703a 	wrctl	status,r2
  
  return context;
   4b1a0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4b1a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4b1a8:	e0bffc17 	ldw	r2,-16(fp)
   4b1ac:	10800817 	ldw	r2,32(r2)
   4b1b0:	10c00054 	ori	r3,r2,1
   4b1b4:	e0bffc17 	ldw	r2,-16(fp)
   4b1b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b1bc:	e0bffc17 	ldw	r2,-16(fp)
   4b1c0:	10800017 	ldw	r2,0(r2)
   4b1c4:	10800104 	addi	r2,r2,4
   4b1c8:	1007883a 	mov	r3,r2
   4b1cc:	e0bffc17 	ldw	r2,-16(fp)
   4b1d0:	10800817 	ldw	r2,32(r2)
   4b1d4:	18800035 	stwio	r2,0(r3)
   4b1d8:	e0bffa17 	ldw	r2,-24(fp)
   4b1dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b1e0:	e0bff917 	ldw	r2,-28(fp)
   4b1e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4b1e8:	e0fff517 	ldw	r3,-44(fp)
   4b1ec:	e0bffd17 	ldw	r2,-12(fp)
   4b1f0:	18800426 	beq	r3,r2,4b204 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   4b1f4:	e0fff517 	ldw	r3,-44(fp)
   4b1f8:	e0bffd17 	ldw	r2,-12(fp)
   4b1fc:	1885c83a 	sub	r2,r3,r2
   4b200:	00000606 	br	4b21c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   4b204:	e0bfff17 	ldw	r2,-4(fp)
   4b208:	1090000c 	andi	r2,r2,16384
   4b20c:	10000226 	beq	r2,zero,4b218 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4b210:	00bffd44 	movi	r2,-11
   4b214:	00000106 	br	4b21c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   4b218:	00bffec4 	movi	r2,-5
}
   4b21c:	e037883a 	mov	sp,fp
   4b220:	dfc00117 	ldw	ra,4(sp)
   4b224:	df000017 	ldw	fp,0(sp)
   4b228:	dec00204 	addi	sp,sp,8
   4b22c:	f800283a 	ret

0004b230 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4b230:	defff304 	addi	sp,sp,-52
   4b234:	dfc00c15 	stw	ra,48(sp)
   4b238:	df000b15 	stw	fp,44(sp)
   4b23c:	df000b04 	addi	fp,sp,44
   4b240:	e13ffc15 	stw	r4,-16(fp)
   4b244:	e17ffd15 	stw	r5,-12(fp)
   4b248:	e1bffe15 	stw	r6,-8(fp)
   4b24c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4b250:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4b254:	e0bffd17 	ldw	r2,-12(fp)
   4b258:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4b25c:	00003706 	br	4b33c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4b260:	e0bffc17 	ldw	r2,-16(fp)
   4b264:	10800c17 	ldw	r2,48(r2)
   4b268:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   4b26c:	e0bffc17 	ldw	r2,-16(fp)
   4b270:	10800d17 	ldw	r2,52(r2)
   4b274:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4b278:	e0fff917 	ldw	r3,-28(fp)
   4b27c:	e0bff517 	ldw	r2,-44(fp)
   4b280:	1880062e 	bgeu	r3,r2,4b29c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4b284:	e0fff517 	ldw	r3,-44(fp)
   4b288:	e0bff917 	ldw	r2,-28(fp)
   4b28c:	1885c83a 	sub	r2,r3,r2
   4b290:	10bfffc4 	addi	r2,r2,-1
   4b294:	e0bff615 	stw	r2,-40(fp)
   4b298:	00000b06 	br	4b2c8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4b29c:	e0bff517 	ldw	r2,-44(fp)
   4b2a0:	10000526 	beq	r2,zero,4b2b8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4b2a4:	00c20004 	movi	r3,2048
   4b2a8:	e0bff917 	ldw	r2,-28(fp)
   4b2ac:	1885c83a 	sub	r2,r3,r2
   4b2b0:	e0bff615 	stw	r2,-40(fp)
   4b2b4:	00000406 	br	4b2c8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4b2b8:	00c1ffc4 	movi	r3,2047
   4b2bc:	e0bff917 	ldw	r2,-28(fp)
   4b2c0:	1885c83a 	sub	r2,r3,r2
   4b2c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4b2c8:	e0bff617 	ldw	r2,-40(fp)
   4b2cc:	10001e26 	beq	r2,zero,4b348 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4b2d0:	e0fffe17 	ldw	r3,-8(fp)
   4b2d4:	e0bff617 	ldw	r2,-40(fp)
   4b2d8:	1880022e 	bgeu	r3,r2,4b2e4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4b2dc:	e0bffe17 	ldw	r2,-8(fp)
   4b2e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4b2e4:	e0bffc17 	ldw	r2,-16(fp)
   4b2e8:	10c20e04 	addi	r3,r2,2104
   4b2ec:	e0bff917 	ldw	r2,-28(fp)
   4b2f0:	1885883a 	add	r2,r3,r2
   4b2f4:	e1bff617 	ldw	r6,-40(fp)
   4b2f8:	e17ffd17 	ldw	r5,-12(fp)
   4b2fc:	1009883a 	mov	r4,r2
   4b300:	0048f880 	call	48f88 <memcpy>
      ptr   += n;
   4b304:	e0fffd17 	ldw	r3,-12(fp)
   4b308:	e0bff617 	ldw	r2,-40(fp)
   4b30c:	1885883a 	add	r2,r3,r2
   4b310:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4b314:	e0fffe17 	ldw	r3,-8(fp)
   4b318:	e0bff617 	ldw	r2,-40(fp)
   4b31c:	1885c83a 	sub	r2,r3,r2
   4b320:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b324:	e0fff917 	ldw	r3,-28(fp)
   4b328:	e0bff617 	ldw	r2,-40(fp)
   4b32c:	1885883a 	add	r2,r3,r2
   4b330:	10c1ffcc 	andi	r3,r2,2047
   4b334:	e0bffc17 	ldw	r2,-16(fp)
   4b338:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4b33c:	e0bffe17 	ldw	r2,-8(fp)
   4b340:	00bfc716 	blt	zero,r2,4b260 <__reset+0xfffca260>
   4b344:	00000106 	br	4b34c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4b348:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b34c:	0005303a 	rdctl	r2,status
   4b350:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b354:	e0fffb17 	ldw	r3,-20(fp)
   4b358:	00bfff84 	movi	r2,-2
   4b35c:	1884703a 	and	r2,r3,r2
   4b360:	1001703a 	wrctl	status,r2
  
  return context;
   4b364:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4b368:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4b36c:	e0bffc17 	ldw	r2,-16(fp)
   4b370:	10800817 	ldw	r2,32(r2)
   4b374:	10c00094 	ori	r3,r2,2
   4b378:	e0bffc17 	ldw	r2,-16(fp)
   4b37c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b380:	e0bffc17 	ldw	r2,-16(fp)
   4b384:	10800017 	ldw	r2,0(r2)
   4b388:	10800104 	addi	r2,r2,4
   4b38c:	1007883a 	mov	r3,r2
   4b390:	e0bffc17 	ldw	r2,-16(fp)
   4b394:	10800817 	ldw	r2,32(r2)
   4b398:	18800035 	stwio	r2,0(r3)
   4b39c:	e0bffa17 	ldw	r2,-24(fp)
   4b3a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b3a4:	e0bff817 	ldw	r2,-32(fp)
   4b3a8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4b3ac:	e0bffe17 	ldw	r2,-8(fp)
   4b3b0:	0080100e 	bge	zero,r2,4b3f4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4b3b4:	e0bfff17 	ldw	r2,-4(fp)
   4b3b8:	1090000c 	andi	r2,r2,16384
   4b3bc:	1000101e 	bne	r2,zero,4b400 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4b3c0:	0001883a 	nop
   4b3c4:	e0bffc17 	ldw	r2,-16(fp)
   4b3c8:	10c00d17 	ldw	r3,52(r2)
   4b3cc:	e0bff517 	ldw	r2,-44(fp)
   4b3d0:	1880051e 	bne	r3,r2,4b3e8 <altera_avalon_jtag_uart_write+0x1b8>
   4b3d4:	e0bffc17 	ldw	r2,-16(fp)
   4b3d8:	10c00917 	ldw	r3,36(r2)
   4b3dc:	e0bffc17 	ldw	r2,-16(fp)
   4b3e0:	10800117 	ldw	r2,4(r2)
   4b3e4:	18bff736 	bltu	r3,r2,4b3c4 <__reset+0xfffca3c4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   4b3e8:	e0bffc17 	ldw	r2,-16(fp)
   4b3ec:	10800917 	ldw	r2,36(r2)
   4b3f0:	1000051e 	bne	r2,zero,4b408 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4b3f4:	e0bffe17 	ldw	r2,-8(fp)
   4b3f8:	00bfd016 	blt	zero,r2,4b33c <__reset+0xfffca33c>
   4b3fc:	00000306 	br	4b40c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4b400:	0001883a 	nop
   4b404:	00000106 	br	4b40c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   4b408:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4b40c:	e0fffd17 	ldw	r3,-12(fp)
   4b410:	e0bff717 	ldw	r2,-36(fp)
   4b414:	18800426 	beq	r3,r2,4b428 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4b418:	e0fffd17 	ldw	r3,-12(fp)
   4b41c:	e0bff717 	ldw	r2,-36(fp)
   4b420:	1885c83a 	sub	r2,r3,r2
   4b424:	00000606 	br	4b440 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4b428:	e0bfff17 	ldw	r2,-4(fp)
   4b42c:	1090000c 	andi	r2,r2,16384
   4b430:	10000226 	beq	r2,zero,4b43c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4b434:	00bffd44 	movi	r2,-11
   4b438:	00000106 	br	4b440 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4b43c:	00bffec4 	movi	r2,-5
}
   4b440:	e037883a 	mov	sp,fp
   4b444:	dfc00117 	ldw	ra,4(sp)
   4b448:	df000017 	ldw	fp,0(sp)
   4b44c:	dec00204 	addi	sp,sp,8
   4b450:	f800283a 	ret

0004b454 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4b454:	defffa04 	addi	sp,sp,-24
   4b458:	dfc00515 	stw	ra,20(sp)
   4b45c:	df000415 	stw	fp,16(sp)
   4b460:	df000404 	addi	fp,sp,16
   4b464:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4b468:	0007883a 	mov	r3,zero
   4b46c:	e0bfff17 	ldw	r2,-4(fp)
   4b470:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4b474:	e0bfff17 	ldw	r2,-4(fp)
   4b478:	10800104 	addi	r2,r2,4
   4b47c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b480:	0005303a 	rdctl	r2,status
   4b484:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b488:	e0fffd17 	ldw	r3,-12(fp)
   4b48c:	00bfff84 	movi	r2,-2
   4b490:	1884703a 	and	r2,r3,r2
   4b494:	1001703a 	wrctl	status,r2
  
  return context;
   4b498:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4b49c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4b4a0:	004c59c0 	call	4c59c <alt_tick>
   4b4a4:	e0bffc17 	ldw	r2,-16(fp)
   4b4a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b4ac:	e0bffe17 	ldw	r2,-8(fp)
   4b4b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4b4b4:	0001883a 	nop
   4b4b8:	e037883a 	mov	sp,fp
   4b4bc:	dfc00117 	ldw	ra,4(sp)
   4b4c0:	df000017 	ldw	fp,0(sp)
   4b4c4:	dec00204 	addi	sp,sp,8
   4b4c8:	f800283a 	ret

0004b4cc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4b4cc:	defff804 	addi	sp,sp,-32
   4b4d0:	dfc00715 	stw	ra,28(sp)
   4b4d4:	df000615 	stw	fp,24(sp)
   4b4d8:	df000604 	addi	fp,sp,24
   4b4dc:	e13ffc15 	stw	r4,-16(fp)
   4b4e0:	e17ffd15 	stw	r5,-12(fp)
   4b4e4:	e1bffe15 	stw	r6,-8(fp)
   4b4e8:	e1ffff15 	stw	r7,-4(fp)
   4b4ec:	e0bfff17 	ldw	r2,-4(fp)
   4b4f0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4b4f4:	d0a02017 	ldw	r2,-32640(gp)
   4b4f8:	1000021e 	bne	r2,zero,4b504 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   4b4fc:	e0bffb17 	ldw	r2,-20(fp)
   4b500:	d0a02015 	stw	r2,-32640(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4b504:	e0bffc17 	ldw	r2,-16(fp)
   4b508:	10800104 	addi	r2,r2,4
   4b50c:	00c001c4 	movi	r3,7
   4b510:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4b514:	d8000015 	stw	zero,0(sp)
   4b518:	e1fffc17 	ldw	r7,-16(fp)
   4b51c:	01800174 	movhi	r6,5
   4b520:	31ad1504 	addi	r6,r6,-19372
   4b524:	e17ffe17 	ldw	r5,-8(fp)
   4b528:	e13ffd17 	ldw	r4,-12(fp)
   4b52c:	00494f80 	call	494f8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4b530:	0001883a 	nop
   4b534:	e037883a 	mov	sp,fp
   4b538:	dfc00117 	ldw	ra,4(sp)
   4b53c:	df000017 	ldw	fp,0(sp)
   4b540:	dec00204 	addi	sp,sp,8
   4b544:	f800283a 	ret

0004b548 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
   4b548:	defff904 	addi	sp,sp,-28
   4b54c:	dfc00615 	stw	ra,24(sp)
   4b550:	df000515 	stw	fp,20(sp)
   4b554:	df000504 	addi	fp,sp,20
   4b558:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
   4b55c:	00800144 	movi	r2,5
   4b560:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
   4b564:	d8000215 	stw	zero,8(sp)
   4b568:	e0bffe44 	addi	r2,fp,-7
   4b56c:	d8800115 	stw	r2,4(sp)
   4b570:	00800044 	movi	r2,1
   4b574:	d8800015 	stw	r2,0(sp)
   4b578:	e1fffe04 	addi	r7,fp,-8
   4b57c:	01800044 	movi	r6,1
   4b580:	000b883a 	mov	r5,zero
   4b584:	e13fff17 	ldw	r4,-4(fp)
   4b588:	004c6c80 	call	4c6c8 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
   4b58c:	e0bffe43 	ldbu	r2,-7(fp)
}
   4b590:	e037883a 	mov	sp,fp
   4b594:	dfc00117 	ldw	ra,4(sp)
   4b598:	df000017 	ldw	fp,0(sp)
   4b59c:	dec00204 	addi	sp,sp,8
   4b5a0:	f800283a 	ret

0004b5a4 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
   4b5a4:	defffd04 	addi	sp,sp,-12
   4b5a8:	dfc00215 	stw	ra,8(sp)
   4b5ac:	df000115 	stw	fp,4(sp)
   4b5b0:	df000104 	addi	fp,sp,4
   4b5b4:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
   4b5b8:	e13fff17 	ldw	r4,-4(fp)
   4b5bc:	004b5480 	call	4b548 <epcs_read_status_register>
   4b5c0:	10803fcc 	andi	r2,r2,255
   4b5c4:	1080004c 	andi	r2,r2,1
}
   4b5c8:	e037883a 	mov	sp,fp
   4b5cc:	dfc00117 	ldw	ra,4(sp)
   4b5d0:	df000017 	ldw	fp,0(sp)
   4b5d4:	dec00204 	addi	sp,sp,8
   4b5d8:	f800283a 	ret

0004b5dc <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
   4b5dc:	defffd04 	addi	sp,sp,-12
   4b5e0:	dfc00215 	stw	ra,8(sp)
   4b5e4:	df000115 	stw	fp,4(sp)
   4b5e8:	df000104 	addi	fp,sp,4
   4b5ec:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
   4b5f0:	0001883a 	nop
   4b5f4:	e13fff17 	ldw	r4,-4(fp)
   4b5f8:	004b5a40 	call	4b5a4 <epcs_test_wip>
   4b5fc:	103ffd1e 	bne	r2,zero,4b5f4 <__reset+0xfffca5f4>
  {
  }
}
   4b600:	0001883a 	nop
   4b604:	e037883a 	mov	sp,fp
   4b608:	dfc00117 	ldw	ra,4(sp)
   4b60c:	df000017 	ldw	fp,0(sp)
   4b610:	dec00204 	addi	sp,sp,8
   4b614:	f800283a 	ret

0004b618 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
   4b618:	defff604 	addi	sp,sp,-40
   4b61c:	dfc00915 	stw	ra,36(sp)
   4b620:	df000815 	stw	fp,32(sp)
   4b624:	df000804 	addi	fp,sp,32
   4b628:	e13ffd15 	stw	r4,-12(fp)
   4b62c:	e17ffe15 	stw	r5,-8(fp)
   4b630:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
   4b634:	e0bfff17 	ldw	r2,-4(fp)
   4b638:	10001226 	beq	r2,zero,4b684 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
   4b63c:	00bff604 	movi	r2,-40
   4b640:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
   4b644:	e0bffe17 	ldw	r2,-8(fp)
   4b648:	1004d63a 	srli	r2,r2,24
   4b64c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
   4b650:	e0bffe17 	ldw	r2,-8(fp)
   4b654:	1004d43a 	srli	r2,r2,16
   4b658:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
   4b65c:	e0bffe17 	ldw	r2,-8(fp)
   4b660:	1004d23a 	srli	r2,r2,8
   4b664:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
   4b668:	e0bffe17 	ldw	r2,-8(fp)
   4b66c:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
   4b670:	00800144 	movi	r2,5
   4b674:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
   4b678:	e13ffd17 	ldw	r4,-12(fp)
   4b67c:	004bacc0 	call	4bacc <epcs_enter_4_bytes_mode>
   4b680:	00000c06 	br	4b6b4 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
   4b684:	00bff604 	movi	r2,-40
   4b688:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
   4b68c:	e0bffe17 	ldw	r2,-8(fp)
   4b690:	1004d43a 	srli	r2,r2,16
   4b694:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
   4b698:	e0bffe17 	ldw	r2,-8(fp)
   4b69c:	1004d23a 	srli	r2,r2,8
   4b6a0:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
   4b6a4:	e0bffe17 	ldw	r2,-8(fp)
   4b6a8:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
   4b6ac:	00800104 	movi	r2,4
   4b6b0:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
   4b6b4:	e13ffd17 	ldw	r4,-12(fp)
   4b6b8:	004b8080 	call	4b808 <epcs_write_enable>

  alt_avalon_spi_command(
   4b6bc:	e0bffb03 	ldbu	r2,-20(fp)
   4b6c0:	e0fffb44 	addi	r3,fp,-19
   4b6c4:	d8000215 	stw	zero,8(sp)
   4b6c8:	d8000115 	stw	zero,4(sp)
   4b6cc:	d8000015 	stw	zero,0(sp)
   4b6d0:	180f883a 	mov	r7,r3
   4b6d4:	100d883a 	mov	r6,r2
   4b6d8:	000b883a 	mov	r5,zero
   4b6dc:	e13ffd17 	ldw	r4,-12(fp)
   4b6e0:	004c6c80 	call	4c6c8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   4b6e4:	e13ffd17 	ldw	r4,-12(fp)
   4b6e8:	004b5dc0 	call	4b5dc <epcs_await_wip_released>

  if(four_bytes_mode)
   4b6ec:	e0bfff17 	ldw	r2,-4(fp)
   4b6f0:	10000226 	beq	r2,zero,4b6fc <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
   4b6f4:	e13ffd17 	ldw	r4,-12(fp)
   4b6f8:	004bb280 	call	4bb28 <epcs_exit_4_bytes_mode>
  }
}
   4b6fc:	0001883a 	nop
   4b700:	e037883a 	mov	sp,fp
   4b704:	dfc00117 	ldw	ra,4(sp)
   4b708:	df000017 	ldw	fp,0(sp)
   4b70c:	dec00204 	addi	sp,sp,8
   4b710:	f800283a 	ret

0004b714 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
   4b714:	defff404 	addi	sp,sp,-48
   4b718:	dfc00b15 	stw	ra,44(sp)
   4b71c:	df000a15 	stw	fp,40(sp)
   4b720:	df000a04 	addi	fp,sp,40
   4b724:	e13ffc15 	stw	r4,-16(fp)
   4b728:	e17ffd15 	stw	r5,-12(fp)
   4b72c:	e1bffe15 	stw	r6,-8(fp)
   4b730:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
   4b734:	008000c4 	movi	r2,3
   4b738:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   4b73c:	e0800217 	ldw	r2,8(fp)
   4b740:	10001026 	beq	r2,zero,4b784 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
   4b744:	e0bffd17 	ldw	r2,-12(fp)
   4b748:	1004d63a 	srli	r2,r2,24
   4b74c:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
   4b750:	e0bffd17 	ldw	r2,-12(fp)
   4b754:	1005d43a 	srai	r2,r2,16
   4b758:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
   4b75c:	e0bffd17 	ldw	r2,-12(fp)
   4b760:	1005d23a 	srai	r2,r2,8
   4b764:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
   4b768:	e0bffd17 	ldw	r2,-12(fp)
   4b76c:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
   4b770:	00800144 	movi	r2,5
   4b774:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
   4b778:	e13ffc17 	ldw	r4,-16(fp)
   4b77c:	004bacc0 	call	4bacc <epcs_enter_4_bytes_mode>
   4b780:	00000a06 	br	4b7ac <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
   4b784:	e0bffd17 	ldw	r2,-12(fp)
   4b788:	1005d43a 	srai	r2,r2,16
   4b78c:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
   4b790:	e0bffd17 	ldw	r2,-12(fp)
   4b794:	1005d23a 	srai	r2,r2,8
   4b798:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
   4b79c:	e0bffd17 	ldw	r2,-12(fp)
   4b7a0:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
   4b7a4:	00800104 	movi	r2,4
   4b7a8:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
   4b7ac:	e13ffc17 	ldw	r4,-16(fp)
   4b7b0:	004b5dc0 	call	4b5dc <epcs_await_wip_released>

  alt_avalon_spi_command(
   4b7b4:	e0bfff17 	ldw	r2,-4(fp)
   4b7b8:	e13ffa04 	addi	r4,fp,-24
   4b7bc:	d8000215 	stw	zero,8(sp)
   4b7c0:	e0fffe17 	ldw	r3,-8(fp)
   4b7c4:	d8c00115 	stw	r3,4(sp)
   4b7c8:	d8800015 	stw	r2,0(sp)
   4b7cc:	200f883a 	mov	r7,r4
   4b7d0:	e1bff917 	ldw	r6,-28(fp)
   4b7d4:	000b883a 	mov	r5,zero
   4b7d8:	e13ffc17 	ldw	r4,-16(fp)
   4b7dc:	004c6c80 	call	4c6c8 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
   4b7e0:	e0800217 	ldw	r2,8(fp)
   4b7e4:	10000226 	beq	r2,zero,4b7f0 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
   4b7e8:	e13ffc17 	ldw	r4,-16(fp)
   4b7ec:	004bb280 	call	4bb28 <epcs_exit_4_bytes_mode>
  }

  return length;
   4b7f0:	e0bfff17 	ldw	r2,-4(fp)
}
   4b7f4:	e037883a 	mov	sp,fp
   4b7f8:	dfc00117 	ldw	ra,4(sp)
   4b7fc:	df000017 	ldw	fp,0(sp)
   4b800:	dec00204 	addi	sp,sp,8
   4b804:	f800283a 	ret

0004b808 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
   4b808:	defff904 	addi	sp,sp,-28
   4b80c:	dfc00615 	stw	ra,24(sp)
   4b810:	df000515 	stw	fp,20(sp)
   4b814:	df000504 	addi	fp,sp,20
   4b818:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
   4b81c:	00800184 	movi	r2,6
   4b820:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
   4b824:	d8000215 	stw	zero,8(sp)
   4b828:	d8000115 	stw	zero,4(sp)
   4b82c:	d8000015 	stw	zero,0(sp)
   4b830:	e1fffe04 	addi	r7,fp,-8
   4b834:	01800044 	movi	r6,1
   4b838:	000b883a 	mov	r5,zero
   4b83c:	e13fff17 	ldw	r4,-4(fp)
   4b840:	004c6c80 	call	4c6c8 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
   4b844:	0001883a 	nop
   4b848:	e037883a 	mov	sp,fp
   4b84c:	dfc00117 	ldw	ra,4(sp)
   4b850:	df000017 	ldw	fp,0(sp)
   4b854:	dec00204 	addi	sp,sp,8
   4b858:	f800283a 	ret

0004b85c <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
   4b85c:	defff804 	addi	sp,sp,-32
   4b860:	dfc00715 	stw	ra,28(sp)
   4b864:	df000615 	stw	fp,24(sp)
   4b868:	df000604 	addi	fp,sp,24
   4b86c:	e13ffe15 	stw	r4,-8(fp)
   4b870:	2805883a 	mov	r2,r5
   4b874:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
   4b878:	00800044 	movi	r2,1
   4b87c:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
   4b880:	e0bfff03 	ldbu	r2,-4(fp)
   4b884:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
   4b888:	d8000215 	stw	zero,8(sp)
   4b88c:	d8000115 	stw	zero,4(sp)
   4b890:	d8000015 	stw	zero,0(sp)
   4b894:	e1fffd04 	addi	r7,fp,-12
   4b898:	01800084 	movi	r6,2
   4b89c:	000b883a 	mov	r5,zero
   4b8a0:	e13ffe17 	ldw	r4,-8(fp)
   4b8a4:	004c6c80 	call	4c6c8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   4b8a8:	e13ffe17 	ldw	r4,-8(fp)
   4b8ac:	004b5dc0 	call	4b5dc <epcs_await_wip_released>
}
   4b8b0:	0001883a 	nop
   4b8b4:	e037883a 	mov	sp,fp
   4b8b8:	dfc00117 	ldw	ra,4(sp)
   4b8bc:	df000017 	ldw	fp,0(sp)
   4b8c0:	dec00204 	addi	sp,sp,8
   4b8c4:	f800283a 	ret

0004b8c8 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
   4b8c8:	defff404 	addi	sp,sp,-48
   4b8cc:	dfc00b15 	stw	ra,44(sp)
   4b8d0:	df000a15 	stw	fp,40(sp)
   4b8d4:	df000a04 	addi	fp,sp,40
   4b8d8:	e13ffc15 	stw	r4,-16(fp)
   4b8dc:	e17ffd15 	stw	r5,-12(fp)
   4b8e0:	e1bffe15 	stw	r6,-8(fp)
   4b8e4:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
   4b8e8:	00800084 	movi	r2,2
   4b8ec:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   4b8f0:	e0800217 	ldw	r2,8(fp)
   4b8f4:	10001026 	beq	r2,zero,4b938 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
   4b8f8:	e0bffd17 	ldw	r2,-12(fp)
   4b8fc:	1004d63a 	srli	r2,r2,24
   4b900:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
   4b904:	e0bffd17 	ldw	r2,-12(fp)
   4b908:	1005d43a 	srai	r2,r2,16
   4b90c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
   4b910:	e0bffd17 	ldw	r2,-12(fp)
   4b914:	1005d23a 	srai	r2,r2,8
   4b918:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
   4b91c:	e0bffd17 	ldw	r2,-12(fp)
   4b920:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
   4b924:	00800144 	movi	r2,5
   4b928:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
   4b92c:	e13ffc17 	ldw	r4,-16(fp)
   4b930:	004bacc0 	call	4bacc <epcs_enter_4_bytes_mode>
   4b934:	00000a06 	br	4b960 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
   4b938:	e0bffd17 	ldw	r2,-12(fp)
   4b93c:	1005d43a 	srai	r2,r2,16
   4b940:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
   4b944:	e0bffd17 	ldw	r2,-12(fp)
   4b948:	1005d23a 	srai	r2,r2,8
   4b94c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
   4b950:	e0bffd17 	ldw	r2,-12(fp)
   4b954:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
   4b958:	00800104 	movi	r2,4
   4b95c:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
   4b960:	e13ffc17 	ldw	r4,-16(fp)
   4b964:	004b8080 	call	4b808 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
   4b968:	e0fffa04 	addi	r3,fp,-24
   4b96c:	00800044 	movi	r2,1
   4b970:	d8800215 	stw	r2,8(sp)
   4b974:	d8000115 	stw	zero,4(sp)
   4b978:	d8000015 	stw	zero,0(sp)
   4b97c:	180f883a 	mov	r7,r3
   4b980:	e1bff917 	ldw	r6,-28(fp)
   4b984:	000b883a 	mov	r5,zero
   4b988:	e13ffc17 	ldw	r4,-16(fp)
   4b98c:	004c6c80 	call	4c6c8 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
   4b990:	e0bfff17 	ldw	r2,-4(fp)
   4b994:	d8000215 	stw	zero,8(sp)
   4b998:	d8000115 	stw	zero,4(sp)
   4b99c:	d8000015 	stw	zero,0(sp)
   4b9a0:	e1fffe17 	ldw	r7,-8(fp)
   4b9a4:	100d883a 	mov	r6,r2
   4b9a8:	000b883a 	mov	r5,zero
   4b9ac:	e13ffc17 	ldw	r4,-16(fp)
   4b9b0:	004c6c80 	call	4c6c8 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
   4b9b4:	e13ffc17 	ldw	r4,-16(fp)
   4b9b8:	004b5dc0 	call	4b5dc <epcs_await_wip_released>

  if(four_bytes_mode)
   4b9bc:	e0800217 	ldw	r2,8(fp)
   4b9c0:	10000226 	beq	r2,zero,4b9cc <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
   4b9c4:	e13ffc17 	ldw	r4,-16(fp)
   4b9c8:	004bb280 	call	4bb28 <epcs_exit_4_bytes_mode>
  }

  return length;
   4b9cc:	e0bfff17 	ldw	r2,-4(fp)
}
   4b9d0:	e037883a 	mov	sp,fp
   4b9d4:	dfc00117 	ldw	ra,4(sp)
   4b9d8:	df000017 	ldw	fp,0(sp)
   4b9dc:	dec00204 	addi	sp,sp,8
   4b9e0:	f800283a 	ret

0004b9e4 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
   4b9e4:	defff804 	addi	sp,sp,-32
   4b9e8:	dfc00715 	stw	ra,28(sp)
   4b9ec:	df000615 	stw	fp,24(sp)
   4b9f0:	df000604 	addi	fp,sp,24
   4b9f4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
   4b9f8:	00bfeac4 	movi	r2,-85
   4b9fc:	e0bffd05 	stb	r2,-12(fp)
   4ba00:	e03ffd45 	stb	zero,-11(fp)
   4ba04:	e03ffd85 	stb	zero,-10(fp)
   4ba08:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
   4ba0c:	d8000215 	stw	zero,8(sp)
   4ba10:	e0bffe04 	addi	r2,fp,-8
   4ba14:	d8800115 	stw	r2,4(sp)
   4ba18:	00800044 	movi	r2,1
   4ba1c:	d8800015 	stw	r2,0(sp)
   4ba20:	e1fffd04 	addi	r7,fp,-12
   4ba24:	01800104 	movi	r6,4
   4ba28:	000b883a 	mov	r5,zero
   4ba2c:	e13fff17 	ldw	r4,-4(fp)
   4ba30:	004c6c80 	call	4c6c8 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
   4ba34:	e0bffe03 	ldbu	r2,-8(fp)
}
   4ba38:	e037883a 	mov	sp,fp
   4ba3c:	dfc00117 	ldw	ra,4(sp)
   4ba40:	df000017 	ldw	fp,0(sp)
   4ba44:	dec00204 	addi	sp,sp,8
   4ba48:	f800283a 	ret

0004ba4c <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
   4ba4c:	defff904 	addi	sp,sp,-28
   4ba50:	dfc00615 	stw	ra,24(sp)
   4ba54:	df000515 	stw	fp,20(sp)
   4ba58:	df000504 	addi	fp,sp,20
   4ba5c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
   4ba60:	00bfe7c4 	movi	r2,-97
   4ba64:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
   4ba68:	d8000215 	stw	zero,8(sp)
   4ba6c:	e0bffe44 	addi	r2,fp,-7
   4ba70:	d8800115 	stw	r2,4(sp)
   4ba74:	008000c4 	movi	r2,3
   4ba78:	d8800015 	stw	r2,0(sp)
   4ba7c:	e1fffe04 	addi	r7,fp,-8
   4ba80:	01800044 	movi	r6,1
   4ba84:	000b883a 	mov	r5,zero
   4ba88:	e13fff17 	ldw	r4,-4(fp)
   4ba8c:	004c6c80 	call	4c6c8 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
   4ba90:	e0bffe43 	ldbu	r2,-7(fp)
   4ba94:	10803fcc 	andi	r2,r2,255
   4ba98:	1006943a 	slli	r3,r2,16
   4ba9c:	e0bffe83 	ldbu	r2,-6(fp)
   4baa0:	10803fcc 	andi	r2,r2,255
   4baa4:	1004923a 	slli	r2,r2,8
   4baa8:	1886b03a 	or	r3,r3,r2
   4baac:	e0bffec3 	ldbu	r2,-5(fp)
   4bab0:	10803fcc 	andi	r2,r2,255
   4bab4:	1884b03a 	or	r2,r3,r2
}
   4bab8:	e037883a 	mov	sp,fp
   4babc:	dfc00117 	ldw	ra,4(sp)
   4bac0:	df000017 	ldw	fp,0(sp)
   4bac4:	dec00204 	addi	sp,sp,8
   4bac8:	f800283a 	ret

0004bacc <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
   4bacc:	defff904 	addi	sp,sp,-28
   4bad0:	dfc00615 	stw	ra,24(sp)
   4bad4:	df000515 	stw	fp,20(sp)
   4bad8:	df000504 	addi	fp,sp,20
   4badc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
   4bae0:	00bfedc4 	movi	r2,-73
   4bae4:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   4bae8:	e13fff17 	ldw	r4,-4(fp)
   4baec:	004b8080 	call	4b808 <epcs_write_enable>

  alt_avalon_spi_command(
   4baf0:	d8000215 	stw	zero,8(sp)
   4baf4:	d8000115 	stw	zero,4(sp)
   4baf8:	d8000015 	stw	zero,0(sp)
   4bafc:	e1fffe04 	addi	r7,fp,-8
   4bb00:	01800044 	movi	r6,1
   4bb04:	000b883a 	mov	r5,zero
   4bb08:	e13fff17 	ldw	r4,-4(fp)
   4bb0c:	004c6c80 	call	4c6c8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   4bb10:	0001883a 	nop
}
   4bb14:	e037883a 	mov	sp,fp
   4bb18:	dfc00117 	ldw	ra,4(sp)
   4bb1c:	df000017 	ldw	fp,0(sp)
   4bb20:	dec00204 	addi	sp,sp,8
   4bb24:	f800283a 	ret

0004bb28 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
   4bb28:	defff904 	addi	sp,sp,-28
   4bb2c:	dfc00615 	stw	ra,24(sp)
   4bb30:	df000515 	stw	fp,20(sp)
   4bb34:	df000504 	addi	fp,sp,20
   4bb38:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
   4bb3c:	00bffa44 	movi	r2,-23
   4bb40:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   4bb44:	e13fff17 	ldw	r4,-4(fp)
   4bb48:	004b8080 	call	4b808 <epcs_write_enable>

  alt_avalon_spi_command(
   4bb4c:	d8000215 	stw	zero,8(sp)
   4bb50:	d8000115 	stw	zero,4(sp)
   4bb54:	d8000015 	stw	zero,0(sp)
   4bb58:	e1fffe04 	addi	r7,fp,-8
   4bb5c:	01800044 	movi	r6,1
   4bb60:	000b883a 	mov	r5,zero
   4bb64:	e13fff17 	ldw	r4,-4(fp)
   4bb68:	004c6c80 	call	4c6c8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   4bb6c:	0001883a 	nop
}
   4bb70:	e037883a 	mov	sp,fp
   4bb74:	dfc00117 	ldw	ra,4(sp)
   4bb78:	df000017 	ldw	fp,0(sp)
   4bb7c:	dec00204 	addi	sp,sp,8
   4bb80:	f800283a 	ret

0004bb84 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4bb84:	defff504 	addi	sp,sp,-44
   4bb88:	df000a15 	stw	fp,40(sp)
   4bb8c:	df000a04 	addi	fp,sp,40
   4bb90:	e13ffc15 	stw	r4,-16(fp)
   4bb94:	e17ffd15 	stw	r5,-12(fp)
   4bb98:	e1bffe15 	stw	r6,-8(fp)
   4bb9c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4bba0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4bba4:	d0a02017 	ldw	r2,-32640(gp)
  
  if (alt_ticks_per_second ())
   4bba8:	10003c26 	beq	r2,zero,4bc9c <alt_alarm_start+0x118>
  {
    if (alarm)
   4bbac:	e0bffc17 	ldw	r2,-16(fp)
   4bbb0:	10003826 	beq	r2,zero,4bc94 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   4bbb4:	e0bffc17 	ldw	r2,-16(fp)
   4bbb8:	e0fffe17 	ldw	r3,-8(fp)
   4bbbc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4bbc0:	e0bffc17 	ldw	r2,-16(fp)
   4bbc4:	e0ffff17 	ldw	r3,-4(fp)
   4bbc8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bbcc:	0005303a 	rdctl	r2,status
   4bbd0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bbd4:	e0fff917 	ldw	r3,-28(fp)
   4bbd8:	00bfff84 	movi	r2,-2
   4bbdc:	1884703a 	and	r2,r3,r2
   4bbe0:	1001703a 	wrctl	status,r2
  
  return context;
   4bbe4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   4bbe8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4bbec:	d0a02117 	ldw	r2,-32636(gp)
      
      current_nticks = alt_nticks();
   4bbf0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4bbf4:	e0fffd17 	ldw	r3,-12(fp)
   4bbf8:	e0bff617 	ldw	r2,-40(fp)
   4bbfc:	1885883a 	add	r2,r3,r2
   4bc00:	10c00044 	addi	r3,r2,1
   4bc04:	e0bffc17 	ldw	r2,-16(fp)
   4bc08:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4bc0c:	e0bffc17 	ldw	r2,-16(fp)
   4bc10:	10c00217 	ldw	r3,8(r2)
   4bc14:	e0bff617 	ldw	r2,-40(fp)
   4bc18:	1880042e 	bgeu	r3,r2,4bc2c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   4bc1c:	e0bffc17 	ldw	r2,-16(fp)
   4bc20:	00c00044 	movi	r3,1
   4bc24:	10c00405 	stb	r3,16(r2)
   4bc28:	00000206 	br	4bc34 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   4bc2c:	e0bffc17 	ldw	r2,-16(fp)
   4bc30:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4bc34:	e0bffc17 	ldw	r2,-16(fp)
   4bc38:	d0e00f04 	addi	r3,gp,-32708
   4bc3c:	e0fffa15 	stw	r3,-24(fp)
   4bc40:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4bc44:	e0bffb17 	ldw	r2,-20(fp)
   4bc48:	e0fffa17 	ldw	r3,-24(fp)
   4bc4c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4bc50:	e0bffa17 	ldw	r2,-24(fp)
   4bc54:	10c00017 	ldw	r3,0(r2)
   4bc58:	e0bffb17 	ldw	r2,-20(fp)
   4bc5c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4bc60:	e0bffa17 	ldw	r2,-24(fp)
   4bc64:	10800017 	ldw	r2,0(r2)
   4bc68:	e0fffb17 	ldw	r3,-20(fp)
   4bc6c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4bc70:	e0bffa17 	ldw	r2,-24(fp)
   4bc74:	e0fffb17 	ldw	r3,-20(fp)
   4bc78:	10c00015 	stw	r3,0(r2)
   4bc7c:	e0bff817 	ldw	r2,-32(fp)
   4bc80:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bc84:	e0bff717 	ldw	r2,-36(fp)
   4bc88:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4bc8c:	0005883a 	mov	r2,zero
   4bc90:	00000306 	br	4bca0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   4bc94:	00bffa84 	movi	r2,-22
   4bc98:	00000106 	br	4bca0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   4bc9c:	00bfde84 	movi	r2,-134
  }
}
   4bca0:	e037883a 	mov	sp,fp
   4bca4:	df000017 	ldw	fp,0(sp)
   4bca8:	dec00104 	addi	sp,sp,4
   4bcac:	f800283a 	ret

0004bcb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4bcb0:	defffe04 	addi	sp,sp,-8
   4bcb4:	dfc00115 	stw	ra,4(sp)
   4bcb8:	df000015 	stw	fp,0(sp)
   4bcbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4bcc0:	d0a00e17 	ldw	r2,-32712(gp)
   4bcc4:	10000326 	beq	r2,zero,4bcd4 <alt_get_errno+0x24>
   4bcc8:	d0a00e17 	ldw	r2,-32712(gp)
   4bccc:	103ee83a 	callr	r2
   4bcd0:	00000106 	br	4bcd8 <alt_get_errno+0x28>
   4bcd4:	d0a02204 	addi	r2,gp,-32632
}
   4bcd8:	e037883a 	mov	sp,fp
   4bcdc:	dfc00117 	ldw	ra,4(sp)
   4bce0:	df000017 	ldw	fp,0(sp)
   4bce4:	dec00204 	addi	sp,sp,8
   4bce8:	f800283a 	ret

0004bcec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4bcec:	defffb04 	addi	sp,sp,-20
   4bcf0:	dfc00415 	stw	ra,16(sp)
   4bcf4:	df000315 	stw	fp,12(sp)
   4bcf8:	df000304 	addi	fp,sp,12
   4bcfc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4bd00:	e0bfff17 	ldw	r2,-4(fp)
   4bd04:	10000616 	blt	r2,zero,4bd20 <close+0x34>
   4bd08:	e0bfff17 	ldw	r2,-4(fp)
   4bd0c:	10c00324 	muli	r3,r2,12
   4bd10:	008001b4 	movhi	r2,6
   4bd14:	10b19f04 	addi	r2,r2,-14724
   4bd18:	1885883a 	add	r2,r3,r2
   4bd1c:	00000106 	br	4bd24 <close+0x38>
   4bd20:	0005883a 	mov	r2,zero
   4bd24:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4bd28:	e0bffd17 	ldw	r2,-12(fp)
   4bd2c:	10001926 	beq	r2,zero,4bd94 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4bd30:	e0bffd17 	ldw	r2,-12(fp)
   4bd34:	10800017 	ldw	r2,0(r2)
   4bd38:	10800417 	ldw	r2,16(r2)
   4bd3c:	10000626 	beq	r2,zero,4bd58 <close+0x6c>
   4bd40:	e0bffd17 	ldw	r2,-12(fp)
   4bd44:	10800017 	ldw	r2,0(r2)
   4bd48:	10800417 	ldw	r2,16(r2)
   4bd4c:	e13ffd17 	ldw	r4,-12(fp)
   4bd50:	103ee83a 	callr	r2
   4bd54:	00000106 	br	4bd5c <close+0x70>
   4bd58:	0005883a 	mov	r2,zero
   4bd5c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4bd60:	e13fff17 	ldw	r4,-4(fp)
   4bd64:	004c49c0 	call	4c49c <alt_release_fd>
    if (rval < 0)
   4bd68:	e0bffe17 	ldw	r2,-8(fp)
   4bd6c:	1000070e 	bge	r2,zero,4bd8c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4bd70:	004bcb00 	call	4bcb0 <alt_get_errno>
   4bd74:	1007883a 	mov	r3,r2
   4bd78:	e0bffe17 	ldw	r2,-8(fp)
   4bd7c:	0085c83a 	sub	r2,zero,r2
   4bd80:	18800015 	stw	r2,0(r3)
      return -1;
   4bd84:	00bfffc4 	movi	r2,-1
   4bd88:	00000706 	br	4bda8 <close+0xbc>
    }
    return 0;
   4bd8c:	0005883a 	mov	r2,zero
   4bd90:	00000506 	br	4bda8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4bd94:	004bcb00 	call	4bcb0 <alt_get_errno>
   4bd98:	1007883a 	mov	r3,r2
   4bd9c:	00801444 	movi	r2,81
   4bda0:	18800015 	stw	r2,0(r3)
    return -1;
   4bda4:	00bfffc4 	movi	r2,-1
  }
}
   4bda8:	e037883a 	mov	sp,fp
   4bdac:	dfc00117 	ldw	ra,4(sp)
   4bdb0:	df000017 	ldw	fp,0(sp)
   4bdb4:	dec00204 	addi	sp,sp,8
   4bdb8:	f800283a 	ret

0004bdbc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4bdbc:	deffff04 	addi	sp,sp,-4
   4bdc0:	df000015 	stw	fp,0(sp)
   4bdc4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4bdc8:	0001883a 	nop
   4bdcc:	e037883a 	mov	sp,fp
   4bdd0:	df000017 	ldw	fp,0(sp)
   4bdd4:	dec00104 	addi	sp,sp,4
   4bdd8:	f800283a 	ret

0004bddc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4bddc:	defffc04 	addi	sp,sp,-16
   4bde0:	df000315 	stw	fp,12(sp)
   4bde4:	df000304 	addi	fp,sp,12
   4bde8:	e13ffd15 	stw	r4,-12(fp)
   4bdec:	e17ffe15 	stw	r5,-8(fp)
   4bdf0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4bdf4:	e0bfff17 	ldw	r2,-4(fp)
}
   4bdf8:	e037883a 	mov	sp,fp
   4bdfc:	df000017 	ldw	fp,0(sp)
   4be00:	dec00104 	addi	sp,sp,4
   4be04:	f800283a 	ret

0004be08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4be08:	defffe04 	addi	sp,sp,-8
   4be0c:	dfc00115 	stw	ra,4(sp)
   4be10:	df000015 	stw	fp,0(sp)
   4be14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4be18:	d0a00e17 	ldw	r2,-32712(gp)
   4be1c:	10000326 	beq	r2,zero,4be2c <alt_get_errno+0x24>
   4be20:	d0a00e17 	ldw	r2,-32712(gp)
   4be24:	103ee83a 	callr	r2
   4be28:	00000106 	br	4be30 <alt_get_errno+0x28>
   4be2c:	d0a02204 	addi	r2,gp,-32632
}
   4be30:	e037883a 	mov	sp,fp
   4be34:	dfc00117 	ldw	ra,4(sp)
   4be38:	df000017 	ldw	fp,0(sp)
   4be3c:	dec00204 	addi	sp,sp,8
   4be40:	f800283a 	ret

0004be44 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4be44:	defffa04 	addi	sp,sp,-24
   4be48:	dfc00515 	stw	ra,20(sp)
   4be4c:	df000415 	stw	fp,16(sp)
   4be50:	df000404 	addi	fp,sp,16
   4be54:	e13ffe15 	stw	r4,-8(fp)
   4be58:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4be5c:	e0bffe17 	ldw	r2,-8(fp)
   4be60:	10000326 	beq	r2,zero,4be70 <alt_dev_llist_insert+0x2c>
   4be64:	e0bffe17 	ldw	r2,-8(fp)
   4be68:	10800217 	ldw	r2,8(r2)
   4be6c:	1000061e 	bne	r2,zero,4be88 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   4be70:	004be080 	call	4be08 <alt_get_errno>
   4be74:	1007883a 	mov	r3,r2
   4be78:	00800584 	movi	r2,22
   4be7c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4be80:	00bffa84 	movi	r2,-22
   4be84:	00001306 	br	4bed4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4be88:	e0bffe17 	ldw	r2,-8(fp)
   4be8c:	e0ffff17 	ldw	r3,-4(fp)
   4be90:	e0fffc15 	stw	r3,-16(fp)
   4be94:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4be98:	e0bffd17 	ldw	r2,-12(fp)
   4be9c:	e0fffc17 	ldw	r3,-16(fp)
   4bea0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4bea4:	e0bffc17 	ldw	r2,-16(fp)
   4bea8:	10c00017 	ldw	r3,0(r2)
   4beac:	e0bffd17 	ldw	r2,-12(fp)
   4beb0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4beb4:	e0bffc17 	ldw	r2,-16(fp)
   4beb8:	10800017 	ldw	r2,0(r2)
   4bebc:	e0fffd17 	ldw	r3,-12(fp)
   4bec0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4bec4:	e0bffc17 	ldw	r2,-16(fp)
   4bec8:	e0fffd17 	ldw	r3,-12(fp)
   4becc:	10c00015 	stw	r3,0(r2)

  return 0;  
   4bed0:	0005883a 	mov	r2,zero
}
   4bed4:	e037883a 	mov	sp,fp
   4bed8:	dfc00117 	ldw	ra,4(sp)
   4bedc:	df000017 	ldw	fp,0(sp)
   4bee0:	dec00204 	addi	sp,sp,8
   4bee4:	f800283a 	ret

0004bee8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4bee8:	defffd04 	addi	sp,sp,-12
   4beec:	dfc00215 	stw	ra,8(sp)
   4bef0:	df000115 	stw	fp,4(sp)
   4bef4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4bef8:	00800174 	movhi	r2,5
   4befc:	10b3a404 	addi	r2,r2,-12656
   4bf00:	e0bfff15 	stw	r2,-4(fp)
   4bf04:	00000606 	br	4bf20 <_do_ctors+0x38>
        (*ctor) (); 
   4bf08:	e0bfff17 	ldw	r2,-4(fp)
   4bf0c:	10800017 	ldw	r2,0(r2)
   4bf10:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4bf14:	e0bfff17 	ldw	r2,-4(fp)
   4bf18:	10bfff04 	addi	r2,r2,-4
   4bf1c:	e0bfff15 	stw	r2,-4(fp)
   4bf20:	e0ffff17 	ldw	r3,-4(fp)
   4bf24:	00800174 	movhi	r2,5
   4bf28:	10b3a504 	addi	r2,r2,-12652
   4bf2c:	18bff62e 	bgeu	r3,r2,4bf08 <__reset+0xfffcaf08>
        (*ctor) (); 
}
   4bf30:	0001883a 	nop
   4bf34:	e037883a 	mov	sp,fp
   4bf38:	dfc00117 	ldw	ra,4(sp)
   4bf3c:	df000017 	ldw	fp,0(sp)
   4bf40:	dec00204 	addi	sp,sp,8
   4bf44:	f800283a 	ret

0004bf48 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4bf48:	defffd04 	addi	sp,sp,-12
   4bf4c:	dfc00215 	stw	ra,8(sp)
   4bf50:	df000115 	stw	fp,4(sp)
   4bf54:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4bf58:	00800174 	movhi	r2,5
   4bf5c:	10b3a404 	addi	r2,r2,-12656
   4bf60:	e0bfff15 	stw	r2,-4(fp)
   4bf64:	00000606 	br	4bf80 <_do_dtors+0x38>
        (*dtor) (); 
   4bf68:	e0bfff17 	ldw	r2,-4(fp)
   4bf6c:	10800017 	ldw	r2,0(r2)
   4bf70:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4bf74:	e0bfff17 	ldw	r2,-4(fp)
   4bf78:	10bfff04 	addi	r2,r2,-4
   4bf7c:	e0bfff15 	stw	r2,-4(fp)
   4bf80:	e0ffff17 	ldw	r3,-4(fp)
   4bf84:	00800174 	movhi	r2,5
   4bf88:	10b3a504 	addi	r2,r2,-12652
   4bf8c:	18bff62e 	bgeu	r3,r2,4bf68 <__reset+0xfffcaf68>
        (*dtor) (); 
}
   4bf90:	0001883a 	nop
   4bf94:	e037883a 	mov	sp,fp
   4bf98:	dfc00117 	ldw	ra,4(sp)
   4bf9c:	df000017 	ldw	fp,0(sp)
   4bfa0:	dec00204 	addi	sp,sp,8
   4bfa4:	f800283a 	ret

0004bfa8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4bfa8:	defffa04 	addi	sp,sp,-24
   4bfac:	dfc00515 	stw	ra,20(sp)
   4bfb0:	df000415 	stw	fp,16(sp)
   4bfb4:	df000404 	addi	fp,sp,16
   4bfb8:	e13ffe15 	stw	r4,-8(fp)
   4bfbc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4bfc0:	e0bfff17 	ldw	r2,-4(fp)
   4bfc4:	10800017 	ldw	r2,0(r2)
   4bfc8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4bfcc:	e13ffe17 	ldw	r4,-8(fp)
   4bfd0:	00492d40 	call	492d4 <strlen>
   4bfd4:	10800044 	addi	r2,r2,1
   4bfd8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4bfdc:	00000d06 	br	4c014 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4bfe0:	e0bffc17 	ldw	r2,-16(fp)
   4bfe4:	10800217 	ldw	r2,8(r2)
   4bfe8:	e0fffd17 	ldw	r3,-12(fp)
   4bfec:	180d883a 	mov	r6,r3
   4bff0:	e17ffe17 	ldw	r5,-8(fp)
   4bff4:	1009883a 	mov	r4,r2
   4bff8:	004cb4c0 	call	4cb4c <memcmp>
   4bffc:	1000021e 	bne	r2,zero,4c008 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4c000:	e0bffc17 	ldw	r2,-16(fp)
   4c004:	00000706 	br	4c024 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4c008:	e0bffc17 	ldw	r2,-16(fp)
   4c00c:	10800017 	ldw	r2,0(r2)
   4c010:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4c014:	e0fffc17 	ldw	r3,-16(fp)
   4c018:	e0bfff17 	ldw	r2,-4(fp)
   4c01c:	18bff01e 	bne	r3,r2,4bfe0 <__reset+0xfffcafe0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4c020:	0005883a 	mov	r2,zero
}
   4c024:	e037883a 	mov	sp,fp
   4c028:	dfc00117 	ldw	ra,4(sp)
   4c02c:	df000017 	ldw	fp,0(sp)
   4c030:	dec00204 	addi	sp,sp,8
   4c034:	f800283a 	ret

0004c038 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4c038:	defffe04 	addi	sp,sp,-8
   4c03c:	dfc00115 	stw	ra,4(sp)
   4c040:	df000015 	stw	fp,0(sp)
   4c044:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4c048:	01440004 	movi	r5,4096
   4c04c:	0009883a 	mov	r4,zero
   4c050:	004ca700 	call	4ca70 <alt_icache_flush>
#endif
}
   4c054:	0001883a 	nop
   4c058:	e037883a 	mov	sp,fp
   4c05c:	dfc00117 	ldw	ra,4(sp)
   4c060:	df000017 	ldw	fp,0(sp)
   4c064:	dec00204 	addi	sp,sp,8
   4c068:	f800283a 	ret

0004c06c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   4c06c:	defffe04 	addi	sp,sp,-8
   4c070:	df000115 	stw	fp,4(sp)
   4c074:	df000104 	addi	fp,sp,4
   4c078:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   4c07c:	e0bfff17 	ldw	r2,-4(fp)
   4c080:	10bffe84 	addi	r2,r2,-6
   4c084:	10c00428 	cmpgeui	r3,r2,16
   4c088:	18001a1e 	bne	r3,zero,4c0f4 <alt_exception_cause_generated_bad_addr+0x88>
   4c08c:	100690ba 	slli	r3,r2,2
   4c090:	00800174 	movhi	r2,5
   4c094:	10b02904 	addi	r2,r2,-16220
   4c098:	1885883a 	add	r2,r3,r2
   4c09c:	10800017 	ldw	r2,0(r2)
   4c0a0:	1000683a 	jmp	r2
   4c0a4:	0004c0e4 	muli	zero,zero,4867
   4c0a8:	0004c0e4 	muli	zero,zero,4867
   4c0ac:	0004c0f4 	movhi	zero,4867
   4c0b0:	0004c0f4 	movhi	zero,4867
   4c0b4:	0004c0f4 	movhi	zero,4867
   4c0b8:	0004c0e4 	muli	zero,zero,4867
   4c0bc:	0004c0ec 	andhi	zero,zero,4867
   4c0c0:	0004c0f4 	movhi	zero,4867
   4c0c4:	0004c0e4 	muli	zero,zero,4867
   4c0c8:	0004c0e4 	muli	zero,zero,4867
   4c0cc:	0004c0f4 	movhi	zero,4867
   4c0d0:	0004c0e4 	muli	zero,zero,4867
   4c0d4:	0004c0ec 	andhi	zero,zero,4867
   4c0d8:	0004c0f4 	movhi	zero,4867
   4c0dc:	0004c0f4 	movhi	zero,4867
   4c0e0:	0004c0e4 	muli	zero,zero,4867
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   4c0e4:	00800044 	movi	r2,1
   4c0e8:	00000306 	br	4c0f8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   4c0ec:	0005883a 	mov	r2,zero
   4c0f0:	00000106 	br	4c0f8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   4c0f4:	0005883a 	mov	r2,zero
  }
}
   4c0f8:	e037883a 	mov	sp,fp
   4c0fc:	df000017 	ldw	fp,0(sp)
   4c100:	dec00104 	addi	sp,sp,4
   4c104:	f800283a 	ret

0004c108 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4c108:	defff904 	addi	sp,sp,-28
   4c10c:	dfc00615 	stw	ra,24(sp)
   4c110:	df000515 	stw	fp,20(sp)
   4c114:	df000504 	addi	fp,sp,20
   4c118:	e13ffc15 	stw	r4,-16(fp)
   4c11c:	e17ffd15 	stw	r5,-12(fp)
   4c120:	e1bffe15 	stw	r6,-8(fp)
   4c124:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4c128:	e1bfff17 	ldw	r6,-4(fp)
   4c12c:	e17ffe17 	ldw	r5,-8(fp)
   4c130:	e13ffd17 	ldw	r4,-12(fp)
   4c134:	004c3480 	call	4c348 <open>
   4c138:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4c13c:	e0bffb17 	ldw	r2,-20(fp)
   4c140:	10001c16 	blt	r2,zero,4c1b4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   4c144:	008001b4 	movhi	r2,6
   4c148:	10b19f04 	addi	r2,r2,-14724
   4c14c:	e0fffb17 	ldw	r3,-20(fp)
   4c150:	18c00324 	muli	r3,r3,12
   4c154:	10c5883a 	add	r2,r2,r3
   4c158:	10c00017 	ldw	r3,0(r2)
   4c15c:	e0bffc17 	ldw	r2,-16(fp)
   4c160:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4c164:	008001b4 	movhi	r2,6
   4c168:	10b19f04 	addi	r2,r2,-14724
   4c16c:	e0fffb17 	ldw	r3,-20(fp)
   4c170:	18c00324 	muli	r3,r3,12
   4c174:	10c5883a 	add	r2,r2,r3
   4c178:	10800104 	addi	r2,r2,4
   4c17c:	10c00017 	ldw	r3,0(r2)
   4c180:	e0bffc17 	ldw	r2,-16(fp)
   4c184:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4c188:	008001b4 	movhi	r2,6
   4c18c:	10b19f04 	addi	r2,r2,-14724
   4c190:	e0fffb17 	ldw	r3,-20(fp)
   4c194:	18c00324 	muli	r3,r3,12
   4c198:	10c5883a 	add	r2,r2,r3
   4c19c:	10800204 	addi	r2,r2,8
   4c1a0:	10c00017 	ldw	r3,0(r2)
   4c1a4:	e0bffc17 	ldw	r2,-16(fp)
   4c1a8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4c1ac:	e13ffb17 	ldw	r4,-20(fp)
   4c1b0:	004c49c0 	call	4c49c <alt_release_fd>
  }
} 
   4c1b4:	0001883a 	nop
   4c1b8:	e037883a 	mov	sp,fp
   4c1bc:	dfc00117 	ldw	ra,4(sp)
   4c1c0:	df000017 	ldw	fp,0(sp)
   4c1c4:	dec00204 	addi	sp,sp,8
   4c1c8:	f800283a 	ret

0004c1cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4c1cc:	defffb04 	addi	sp,sp,-20
   4c1d0:	dfc00415 	stw	ra,16(sp)
   4c1d4:	df000315 	stw	fp,12(sp)
   4c1d8:	df000304 	addi	fp,sp,12
   4c1dc:	e13ffd15 	stw	r4,-12(fp)
   4c1e0:	e17ffe15 	stw	r5,-8(fp)
   4c1e4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4c1e8:	01c07fc4 	movi	r7,511
   4c1ec:	01800044 	movi	r6,1
   4c1f0:	e17ffd17 	ldw	r5,-12(fp)
   4c1f4:	010001b4 	movhi	r4,6
   4c1f8:	2131a204 	addi	r4,r4,-14712
   4c1fc:	004c1080 	call	4c108 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4c200:	01c07fc4 	movi	r7,511
   4c204:	000d883a 	mov	r6,zero
   4c208:	e17ffe17 	ldw	r5,-8(fp)
   4c20c:	010001b4 	movhi	r4,6
   4c210:	21319f04 	addi	r4,r4,-14724
   4c214:	004c1080 	call	4c108 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4c218:	01c07fc4 	movi	r7,511
   4c21c:	01800044 	movi	r6,1
   4c220:	e17fff17 	ldw	r5,-4(fp)
   4c224:	010001b4 	movhi	r4,6
   4c228:	2131a504 	addi	r4,r4,-14700
   4c22c:	004c1080 	call	4c108 <alt_open_fd>
}  
   4c230:	0001883a 	nop
   4c234:	e037883a 	mov	sp,fp
   4c238:	dfc00117 	ldw	ra,4(sp)
   4c23c:	df000017 	ldw	fp,0(sp)
   4c240:	dec00204 	addi	sp,sp,8
   4c244:	f800283a 	ret

0004c248 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4c248:	defffe04 	addi	sp,sp,-8
   4c24c:	dfc00115 	stw	ra,4(sp)
   4c250:	df000015 	stw	fp,0(sp)
   4c254:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4c258:	d0a00e17 	ldw	r2,-32712(gp)
   4c25c:	10000326 	beq	r2,zero,4c26c <alt_get_errno+0x24>
   4c260:	d0a00e17 	ldw	r2,-32712(gp)
   4c264:	103ee83a 	callr	r2
   4c268:	00000106 	br	4c270 <alt_get_errno+0x28>
   4c26c:	d0a02204 	addi	r2,gp,-32632
}
   4c270:	e037883a 	mov	sp,fp
   4c274:	dfc00117 	ldw	ra,4(sp)
   4c278:	df000017 	ldw	fp,0(sp)
   4c27c:	dec00204 	addi	sp,sp,8
   4c280:	f800283a 	ret

0004c284 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4c284:	defffd04 	addi	sp,sp,-12
   4c288:	df000215 	stw	fp,8(sp)
   4c28c:	df000204 	addi	fp,sp,8
   4c290:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4c294:	e0bfff17 	ldw	r2,-4(fp)
   4c298:	10800217 	ldw	r2,8(r2)
   4c29c:	10d00034 	orhi	r3,r2,16384
   4c2a0:	e0bfff17 	ldw	r2,-4(fp)
   4c2a4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c2a8:	e03ffe15 	stw	zero,-8(fp)
   4c2ac:	00001d06 	br	4c324 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4c2b0:	008001b4 	movhi	r2,6
   4c2b4:	10b19f04 	addi	r2,r2,-14724
   4c2b8:	e0fffe17 	ldw	r3,-8(fp)
   4c2bc:	18c00324 	muli	r3,r3,12
   4c2c0:	10c5883a 	add	r2,r2,r3
   4c2c4:	10c00017 	ldw	r3,0(r2)
   4c2c8:	e0bfff17 	ldw	r2,-4(fp)
   4c2cc:	10800017 	ldw	r2,0(r2)
   4c2d0:	1880111e 	bne	r3,r2,4c318 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4c2d4:	008001b4 	movhi	r2,6
   4c2d8:	10b19f04 	addi	r2,r2,-14724
   4c2dc:	e0fffe17 	ldw	r3,-8(fp)
   4c2e0:	18c00324 	muli	r3,r3,12
   4c2e4:	10c5883a 	add	r2,r2,r3
   4c2e8:	10800204 	addi	r2,r2,8
   4c2ec:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4c2f0:	1000090e 	bge	r2,zero,4c318 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4c2f4:	e0bffe17 	ldw	r2,-8(fp)
   4c2f8:	10c00324 	muli	r3,r2,12
   4c2fc:	008001b4 	movhi	r2,6
   4c300:	10b19f04 	addi	r2,r2,-14724
   4c304:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4c308:	e0bfff17 	ldw	r2,-4(fp)
   4c30c:	18800226 	beq	r3,r2,4c318 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4c310:	00bffcc4 	movi	r2,-13
   4c314:	00000806 	br	4c338 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c318:	e0bffe17 	ldw	r2,-8(fp)
   4c31c:	10800044 	addi	r2,r2,1
   4c320:	e0bffe15 	stw	r2,-8(fp)
   4c324:	d0a00d17 	ldw	r2,-32716(gp)
   4c328:	1007883a 	mov	r3,r2
   4c32c:	e0bffe17 	ldw	r2,-8(fp)
   4c330:	18bfdf2e 	bgeu	r3,r2,4c2b0 <__reset+0xfffcb2b0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4c334:	0005883a 	mov	r2,zero
}
   4c338:	e037883a 	mov	sp,fp
   4c33c:	df000017 	ldw	fp,0(sp)
   4c340:	dec00104 	addi	sp,sp,4
   4c344:	f800283a 	ret

0004c348 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4c348:	defff604 	addi	sp,sp,-40
   4c34c:	dfc00915 	stw	ra,36(sp)
   4c350:	df000815 	stw	fp,32(sp)
   4c354:	df000804 	addi	fp,sp,32
   4c358:	e13ffd15 	stw	r4,-12(fp)
   4c35c:	e17ffe15 	stw	r5,-8(fp)
   4c360:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4c364:	00bfffc4 	movi	r2,-1
   4c368:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4c36c:	00bffb44 	movi	r2,-19
   4c370:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4c374:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4c378:	d1600b04 	addi	r5,gp,-32724
   4c37c:	e13ffd17 	ldw	r4,-12(fp)
   4c380:	004bfa80 	call	4bfa8 <alt_find_dev>
   4c384:	e0bff815 	stw	r2,-32(fp)
   4c388:	e0bff817 	ldw	r2,-32(fp)
   4c38c:	1000051e 	bne	r2,zero,4c3a4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4c390:	e13ffd17 	ldw	r4,-12(fp)
   4c394:	004c8c40 	call	4c8c4 <alt_find_file>
   4c398:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4c39c:	00800044 	movi	r2,1
   4c3a0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4c3a4:	e0bff817 	ldw	r2,-32(fp)
   4c3a8:	10002926 	beq	r2,zero,4c450 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4c3ac:	e13ff817 	ldw	r4,-32(fp)
   4c3b0:	004c9cc0 	call	4c9cc <alt_get_fd>
   4c3b4:	e0bff915 	stw	r2,-28(fp)
   4c3b8:	e0bff917 	ldw	r2,-28(fp)
   4c3bc:	1000030e 	bge	r2,zero,4c3cc <open+0x84>
    {
      status = index;
   4c3c0:	e0bff917 	ldw	r2,-28(fp)
   4c3c4:	e0bffa15 	stw	r2,-24(fp)
   4c3c8:	00002306 	br	4c458 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   4c3cc:	e0bff917 	ldw	r2,-28(fp)
   4c3d0:	10c00324 	muli	r3,r2,12
   4c3d4:	008001b4 	movhi	r2,6
   4c3d8:	10b19f04 	addi	r2,r2,-14724
   4c3dc:	1885883a 	add	r2,r3,r2
   4c3e0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4c3e4:	e0fffe17 	ldw	r3,-8(fp)
   4c3e8:	00900034 	movhi	r2,16384
   4c3ec:	10bfffc4 	addi	r2,r2,-1
   4c3f0:	1886703a 	and	r3,r3,r2
   4c3f4:	e0bffc17 	ldw	r2,-16(fp)
   4c3f8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4c3fc:	e0bffb17 	ldw	r2,-20(fp)
   4c400:	1000051e 	bne	r2,zero,4c418 <open+0xd0>
   4c404:	e13ffc17 	ldw	r4,-16(fp)
   4c408:	004c2840 	call	4c284 <alt_file_locked>
   4c40c:	e0bffa15 	stw	r2,-24(fp)
   4c410:	e0bffa17 	ldw	r2,-24(fp)
   4c414:	10001016 	blt	r2,zero,4c458 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4c418:	e0bff817 	ldw	r2,-32(fp)
   4c41c:	10800317 	ldw	r2,12(r2)
   4c420:	10000826 	beq	r2,zero,4c444 <open+0xfc>
   4c424:	e0bff817 	ldw	r2,-32(fp)
   4c428:	10800317 	ldw	r2,12(r2)
   4c42c:	e1ffff17 	ldw	r7,-4(fp)
   4c430:	e1bffe17 	ldw	r6,-8(fp)
   4c434:	e17ffd17 	ldw	r5,-12(fp)
   4c438:	e13ffc17 	ldw	r4,-16(fp)
   4c43c:	103ee83a 	callr	r2
   4c440:	00000106 	br	4c448 <open+0x100>
   4c444:	0005883a 	mov	r2,zero
   4c448:	e0bffa15 	stw	r2,-24(fp)
   4c44c:	00000206 	br	4c458 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4c450:	00bffb44 	movi	r2,-19
   4c454:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4c458:	e0bffa17 	ldw	r2,-24(fp)
   4c45c:	1000090e 	bge	r2,zero,4c484 <open+0x13c>
  {
    alt_release_fd (index);  
   4c460:	e13ff917 	ldw	r4,-28(fp)
   4c464:	004c49c0 	call	4c49c <alt_release_fd>
    ALT_ERRNO = -status;
   4c468:	004c2480 	call	4c248 <alt_get_errno>
   4c46c:	1007883a 	mov	r3,r2
   4c470:	e0bffa17 	ldw	r2,-24(fp)
   4c474:	0085c83a 	sub	r2,zero,r2
   4c478:	18800015 	stw	r2,0(r3)
    return -1;
   4c47c:	00bfffc4 	movi	r2,-1
   4c480:	00000106 	br	4c488 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   4c484:	e0bff917 	ldw	r2,-28(fp)
}
   4c488:	e037883a 	mov	sp,fp
   4c48c:	dfc00117 	ldw	ra,4(sp)
   4c490:	df000017 	ldw	fp,0(sp)
   4c494:	dec00204 	addi	sp,sp,8
   4c498:	f800283a 	ret

0004c49c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4c49c:	defffe04 	addi	sp,sp,-8
   4c4a0:	df000115 	stw	fp,4(sp)
   4c4a4:	df000104 	addi	fp,sp,4
   4c4a8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4c4ac:	e0bfff17 	ldw	r2,-4(fp)
   4c4b0:	108000d0 	cmplti	r2,r2,3
   4c4b4:	10000d1e 	bne	r2,zero,4c4ec <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4c4b8:	008001b4 	movhi	r2,6
   4c4bc:	10b19f04 	addi	r2,r2,-14724
   4c4c0:	e0ffff17 	ldw	r3,-4(fp)
   4c4c4:	18c00324 	muli	r3,r3,12
   4c4c8:	10c5883a 	add	r2,r2,r3
   4c4cc:	10800204 	addi	r2,r2,8
   4c4d0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4c4d4:	008001b4 	movhi	r2,6
   4c4d8:	10b19f04 	addi	r2,r2,-14724
   4c4dc:	e0ffff17 	ldw	r3,-4(fp)
   4c4e0:	18c00324 	muli	r3,r3,12
   4c4e4:	10c5883a 	add	r2,r2,r3
   4c4e8:	10000015 	stw	zero,0(r2)
  }
}
   4c4ec:	0001883a 	nop
   4c4f0:	e037883a 	mov	sp,fp
   4c4f4:	df000017 	ldw	fp,0(sp)
   4c4f8:	dec00104 	addi	sp,sp,4
   4c4fc:	f800283a 	ret

0004c500 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4c500:	defffa04 	addi	sp,sp,-24
   4c504:	df000515 	stw	fp,20(sp)
   4c508:	df000504 	addi	fp,sp,20
   4c50c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c510:	0005303a 	rdctl	r2,status
   4c514:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c518:	e0fffc17 	ldw	r3,-16(fp)
   4c51c:	00bfff84 	movi	r2,-2
   4c520:	1884703a 	and	r2,r3,r2
   4c524:	1001703a 	wrctl	status,r2
  
  return context;
   4c528:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4c52c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4c530:	e0bfff17 	ldw	r2,-4(fp)
   4c534:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4c538:	e0bffd17 	ldw	r2,-12(fp)
   4c53c:	10800017 	ldw	r2,0(r2)
   4c540:	e0fffd17 	ldw	r3,-12(fp)
   4c544:	18c00117 	ldw	r3,4(r3)
   4c548:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4c54c:	e0bffd17 	ldw	r2,-12(fp)
   4c550:	10800117 	ldw	r2,4(r2)
   4c554:	e0fffd17 	ldw	r3,-12(fp)
   4c558:	18c00017 	ldw	r3,0(r3)
   4c55c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4c560:	e0bffd17 	ldw	r2,-12(fp)
   4c564:	e0fffd17 	ldw	r3,-12(fp)
   4c568:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4c56c:	e0bffd17 	ldw	r2,-12(fp)
   4c570:	e0fffd17 	ldw	r3,-12(fp)
   4c574:	10c00015 	stw	r3,0(r2)
   4c578:	e0bffb17 	ldw	r2,-20(fp)
   4c57c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c580:	e0bffe17 	ldw	r2,-8(fp)
   4c584:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4c588:	0001883a 	nop
   4c58c:	e037883a 	mov	sp,fp
   4c590:	df000017 	ldw	fp,0(sp)
   4c594:	dec00104 	addi	sp,sp,4
   4c598:	f800283a 	ret

0004c59c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4c59c:	defffb04 	addi	sp,sp,-20
   4c5a0:	dfc00415 	stw	ra,16(sp)
   4c5a4:	df000315 	stw	fp,12(sp)
   4c5a8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4c5ac:	d0a00f17 	ldw	r2,-32708(gp)
   4c5b0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4c5b4:	d0a02117 	ldw	r2,-32636(gp)
   4c5b8:	10800044 	addi	r2,r2,1
   4c5bc:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4c5c0:	00002e06 	br	4c67c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4c5c4:	e0bffd17 	ldw	r2,-12(fp)
   4c5c8:	10800017 	ldw	r2,0(r2)
   4c5cc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4c5d0:	e0bffd17 	ldw	r2,-12(fp)
   4c5d4:	10800403 	ldbu	r2,16(r2)
   4c5d8:	10803fcc 	andi	r2,r2,255
   4c5dc:	10000426 	beq	r2,zero,4c5f0 <alt_tick+0x54>
   4c5e0:	d0a02117 	ldw	r2,-32636(gp)
   4c5e4:	1000021e 	bne	r2,zero,4c5f0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4c5e8:	e0bffd17 	ldw	r2,-12(fp)
   4c5ec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4c5f0:	e0bffd17 	ldw	r2,-12(fp)
   4c5f4:	10800217 	ldw	r2,8(r2)
   4c5f8:	d0e02117 	ldw	r3,-32636(gp)
   4c5fc:	18801d36 	bltu	r3,r2,4c674 <alt_tick+0xd8>
   4c600:	e0bffd17 	ldw	r2,-12(fp)
   4c604:	10800403 	ldbu	r2,16(r2)
   4c608:	10803fcc 	andi	r2,r2,255
   4c60c:	1000191e 	bne	r2,zero,4c674 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4c610:	e0bffd17 	ldw	r2,-12(fp)
   4c614:	10800317 	ldw	r2,12(r2)
   4c618:	e0fffd17 	ldw	r3,-12(fp)
   4c61c:	18c00517 	ldw	r3,20(r3)
   4c620:	1809883a 	mov	r4,r3
   4c624:	103ee83a 	callr	r2
   4c628:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4c62c:	e0bfff17 	ldw	r2,-4(fp)
   4c630:	1000031e 	bne	r2,zero,4c640 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4c634:	e13ffd17 	ldw	r4,-12(fp)
   4c638:	004c5000 	call	4c500 <alt_alarm_stop>
   4c63c:	00000d06 	br	4c674 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4c640:	e0bffd17 	ldw	r2,-12(fp)
   4c644:	10c00217 	ldw	r3,8(r2)
   4c648:	e0bfff17 	ldw	r2,-4(fp)
   4c64c:	1887883a 	add	r3,r3,r2
   4c650:	e0bffd17 	ldw	r2,-12(fp)
   4c654:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4c658:	e0bffd17 	ldw	r2,-12(fp)
   4c65c:	10c00217 	ldw	r3,8(r2)
   4c660:	d0a02117 	ldw	r2,-32636(gp)
   4c664:	1880032e 	bgeu	r3,r2,4c674 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4c668:	e0bffd17 	ldw	r2,-12(fp)
   4c66c:	00c00044 	movi	r3,1
   4c670:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4c674:	e0bffe17 	ldw	r2,-8(fp)
   4c678:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4c67c:	e0fffd17 	ldw	r3,-12(fp)
   4c680:	d0a00f04 	addi	r2,gp,-32708
   4c684:	18bfcf1e 	bne	r3,r2,4c5c4 <__reset+0xfffcb5c4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4c688:	0001883a 	nop
}
   4c68c:	0001883a 	nop
   4c690:	e037883a 	mov	sp,fp
   4c694:	dfc00117 	ldw	ra,4(sp)
   4c698:	df000017 	ldw	fp,0(sp)
   4c69c:	dec00204 	addi	sp,sp,8
   4c6a0:	f800283a 	ret

0004c6a4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4c6a4:	deffff04 	addi	sp,sp,-4
   4c6a8:	df000015 	stw	fp,0(sp)
   4c6ac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4c6b0:	000170fa 	wrctl	ienable,zero
}
   4c6b4:	0001883a 	nop
   4c6b8:	e037883a 	mov	sp,fp
   4c6bc:	df000017 	ldw	fp,0(sp)
   4c6c0:	dec00104 	addi	sp,sp,4
   4c6c4:	f800283a 	ret

0004c6c8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   4c6c8:	defff404 	addi	sp,sp,-48
   4c6cc:	df000b15 	stw	fp,44(sp)
   4c6d0:	df000b04 	addi	fp,sp,44
   4c6d4:	e13ffc15 	stw	r4,-16(fp)
   4c6d8:	e17ffd15 	stw	r5,-12(fp)
   4c6dc:	e1bffe15 	stw	r6,-8(fp)
   4c6e0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   4c6e4:	e0ffff17 	ldw	r3,-4(fp)
   4c6e8:	e0bffe17 	ldw	r2,-8(fp)
   4c6ec:	1885883a 	add	r2,r3,r2
   4c6f0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   4c6f4:	e0c00217 	ldw	r3,8(fp)
   4c6f8:	e0800117 	ldw	r2,4(fp)
   4c6fc:	1885883a 	add	r2,r3,r2
   4c700:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   4c704:	e0800117 	ldw	r2,4(fp)
   4c708:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   4c70c:	e0bffe17 	ldw	r2,-8(fp)
   4c710:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   4c714:	00800044 	movi	r2,1
   4c718:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   4c71c:	e0bffc17 	ldw	r2,-16(fp)
   4c720:	10800504 	addi	r2,r2,20
   4c724:	1009883a 	mov	r4,r2
   4c728:	00c00044 	movi	r3,1
   4c72c:	e0bffd17 	ldw	r2,-12(fp)
   4c730:	1884983a 	sll	r2,r3,r2
   4c734:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   4c738:	e0800317 	ldw	r2,12(fp)
   4c73c:	1080008c 	andi	r2,r2,2
   4c740:	1000051e 	bne	r2,zero,4c758 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   4c744:	e0bffc17 	ldw	r2,-16(fp)
   4c748:	10800304 	addi	r2,r2,12
   4c74c:	1007883a 	mov	r3,r2
   4c750:	00810004 	movi	r2,1024
   4c754:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   4c758:	e0bffc17 	ldw	r2,-16(fp)
   4c75c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   4c760:	e0bffc17 	ldw	r2,-16(fp)
   4c764:	10800204 	addi	r2,r2,8
   4c768:	10800037 	ldwio	r2,0(r2)
   4c76c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   4c770:	e0bffa17 	ldw	r2,-24(fp)
   4c774:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   4c778:	10000226 	beq	r2,zero,4c784 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   4c77c:	e0bff717 	ldw	r2,-36(fp)
   4c780:	1000031e 	bne	r2,zero,4c790 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   4c784:	e0bffa17 	ldw	r2,-24(fp)
   4c788:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   4c78c:	103ff426 	beq	r2,zero,4c760 <__reset+0xfffcb760>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   4c790:	e0bffa17 	ldw	r2,-24(fp)
   4c794:	1080100c 	andi	r2,r2,64
   4c798:	10001e26 	beq	r2,zero,4c814 <alt_avalon_spi_command+0x14c>
   4c79c:	e0bff717 	ldw	r2,-36(fp)
   4c7a0:	00801c0e 	bge	zero,r2,4c814 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   4c7a4:	e0bff717 	ldw	r2,-36(fp)
   4c7a8:	10bfffc4 	addi	r2,r2,-1
   4c7ac:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   4c7b0:	e0ffff17 	ldw	r3,-4(fp)
   4c7b4:	e0bff817 	ldw	r2,-32(fp)
   4c7b8:	18800a2e 	bgeu	r3,r2,4c7e4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   4c7bc:	e0bffc17 	ldw	r2,-16(fp)
   4c7c0:	10800104 	addi	r2,r2,4
   4c7c4:	1009883a 	mov	r4,r2
   4c7c8:	e0bfff17 	ldw	r2,-4(fp)
   4c7cc:	10c00044 	addi	r3,r2,1
   4c7d0:	e0ffff15 	stw	r3,-4(fp)
   4c7d4:	10800003 	ldbu	r2,0(r2)
   4c7d8:	10803fcc 	andi	r2,r2,255
   4c7dc:	20800035 	stwio	r2,0(r4)
   4c7e0:	00000c06 	br	4c814 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   4c7e4:	e0bff517 	ldw	r2,-44(fp)
   4c7e8:	10000826 	beq	r2,zero,4c80c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   4c7ec:	e0bff517 	ldw	r2,-44(fp)
   4c7f0:	10bfffc4 	addi	r2,r2,-1
   4c7f4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   4c7f8:	e0bffc17 	ldw	r2,-16(fp)
   4c7fc:	10800104 	addi	r2,r2,4
   4c800:	0007883a 	mov	r3,zero
   4c804:	10c00035 	stwio	r3,0(r2)
   4c808:	00000206 	br	4c814 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   4c80c:	00bf0004 	movi	r2,-1024
   4c810:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   4c814:	e0bffa17 	ldw	r2,-24(fp)
   4c818:	1080200c 	andi	r2,r2,128
   4c81c:	103fd026 	beq	r2,zero,4c760 <__reset+0xfffcb760>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   4c820:	e0bffc17 	ldw	r2,-16(fp)
   4c824:	10800037 	ldwio	r2,0(r2)
   4c828:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   4c82c:	e0bff617 	ldw	r2,-40(fp)
   4c830:	10000426 	beq	r2,zero,4c844 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   4c834:	e0bff617 	ldw	r2,-40(fp)
   4c838:	10bfffc4 	addi	r2,r2,-1
   4c83c:	e0bff615 	stw	r2,-40(fp)
   4c840:	00000506 	br	4c858 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   4c844:	e0800217 	ldw	r2,8(fp)
   4c848:	10c00044 	addi	r3,r2,1
   4c84c:	e0c00215 	stw	r3,8(fp)
   4c850:	e0fffb17 	ldw	r3,-20(fp)
   4c854:	10c00005 	stb	r3,0(r2)
      credits++;
   4c858:	e0bff717 	ldw	r2,-36(fp)
   4c85c:	10800044 	addi	r2,r2,1
   4c860:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   4c864:	e0bff617 	ldw	r2,-40(fp)
   4c868:	103fbd1e 	bne	r2,zero,4c760 <__reset+0xfffcb760>
   4c86c:	e0c00217 	ldw	r3,8(fp)
   4c870:	e0bff917 	ldw	r2,-28(fp)
   4c874:	18bfba1e 	bne	r3,r2,4c760 <__reset+0xfffcb760>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   4c878:	e0bffc17 	ldw	r2,-16(fp)
   4c87c:	10800204 	addi	r2,r2,8
   4c880:	10800037 	ldwio	r2,0(r2)
   4c884:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   4c888:	e0bffa17 	ldw	r2,-24(fp)
   4c88c:	1080080c 	andi	r2,r2,32
   4c890:	103ff926 	beq	r2,zero,4c878 <__reset+0xfffcb878>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   4c894:	e0800317 	ldw	r2,12(fp)
   4c898:	1080004c 	andi	r2,r2,1
   4c89c:	1000041e 	bne	r2,zero,4c8b0 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   4c8a0:	e0bffc17 	ldw	r2,-16(fp)
   4c8a4:	10800304 	addi	r2,r2,12
   4c8a8:	0007883a 	mov	r3,zero
   4c8ac:	10c00035 	stwio	r3,0(r2)

  return read_length;
   4c8b0:	e0800117 	ldw	r2,4(fp)
}
   4c8b4:	e037883a 	mov	sp,fp
   4c8b8:	df000017 	ldw	fp,0(sp)
   4c8bc:	dec00104 	addi	sp,sp,4
   4c8c0:	f800283a 	ret

0004c8c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4c8c4:	defffb04 	addi	sp,sp,-20
   4c8c8:	dfc00415 	stw	ra,16(sp)
   4c8cc:	df000315 	stw	fp,12(sp)
   4c8d0:	df000304 	addi	fp,sp,12
   4c8d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4c8d8:	d0a00917 	ldw	r2,-32732(gp)
   4c8dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4c8e0:	00003106 	br	4c9a8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   4c8e4:	e0bffd17 	ldw	r2,-12(fp)
   4c8e8:	10800217 	ldw	r2,8(r2)
   4c8ec:	1009883a 	mov	r4,r2
   4c8f0:	00492d40 	call	492d4 <strlen>
   4c8f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4c8f8:	e0bffd17 	ldw	r2,-12(fp)
   4c8fc:	10c00217 	ldw	r3,8(r2)
   4c900:	e0bffe17 	ldw	r2,-8(fp)
   4c904:	10bfffc4 	addi	r2,r2,-1
   4c908:	1885883a 	add	r2,r3,r2
   4c90c:	10800003 	ldbu	r2,0(r2)
   4c910:	10803fcc 	andi	r2,r2,255
   4c914:	1080201c 	xori	r2,r2,128
   4c918:	10bfe004 	addi	r2,r2,-128
   4c91c:	10800bd8 	cmpnei	r2,r2,47
   4c920:	1000031e 	bne	r2,zero,4c930 <alt_find_file+0x6c>
    {
      len -= 1;
   4c924:	e0bffe17 	ldw	r2,-8(fp)
   4c928:	10bfffc4 	addi	r2,r2,-1
   4c92c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4c930:	e0bffe17 	ldw	r2,-8(fp)
   4c934:	e0ffff17 	ldw	r3,-4(fp)
   4c938:	1885883a 	add	r2,r3,r2
   4c93c:	10800003 	ldbu	r2,0(r2)
   4c940:	10803fcc 	andi	r2,r2,255
   4c944:	1080201c 	xori	r2,r2,128
   4c948:	10bfe004 	addi	r2,r2,-128
   4c94c:	10800be0 	cmpeqi	r2,r2,47
   4c950:	1000081e 	bne	r2,zero,4c974 <alt_find_file+0xb0>
   4c954:	e0bffe17 	ldw	r2,-8(fp)
   4c958:	e0ffff17 	ldw	r3,-4(fp)
   4c95c:	1885883a 	add	r2,r3,r2
   4c960:	10800003 	ldbu	r2,0(r2)
   4c964:	10803fcc 	andi	r2,r2,255
   4c968:	1080201c 	xori	r2,r2,128
   4c96c:	10bfe004 	addi	r2,r2,-128
   4c970:	10000a1e 	bne	r2,zero,4c99c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   4c974:	e0bffd17 	ldw	r2,-12(fp)
   4c978:	10800217 	ldw	r2,8(r2)
   4c97c:	e0fffe17 	ldw	r3,-8(fp)
   4c980:	180d883a 	mov	r6,r3
   4c984:	e17fff17 	ldw	r5,-4(fp)
   4c988:	1009883a 	mov	r4,r2
   4c98c:	004cb4c0 	call	4cb4c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4c990:	1000021e 	bne	r2,zero,4c99c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4c994:	e0bffd17 	ldw	r2,-12(fp)
   4c998:	00000706 	br	4c9b8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   4c99c:	e0bffd17 	ldw	r2,-12(fp)
   4c9a0:	10800017 	ldw	r2,0(r2)
   4c9a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4c9a8:	e0fffd17 	ldw	r3,-12(fp)
   4c9ac:	d0a00904 	addi	r2,gp,-32732
   4c9b0:	18bfcc1e 	bne	r3,r2,4c8e4 <__reset+0xfffcb8e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4c9b4:	0005883a 	mov	r2,zero
}
   4c9b8:	e037883a 	mov	sp,fp
   4c9bc:	dfc00117 	ldw	ra,4(sp)
   4c9c0:	df000017 	ldw	fp,0(sp)
   4c9c4:	dec00204 	addi	sp,sp,8
   4c9c8:	f800283a 	ret

0004c9cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4c9cc:	defffc04 	addi	sp,sp,-16
   4c9d0:	df000315 	stw	fp,12(sp)
   4c9d4:	df000304 	addi	fp,sp,12
   4c9d8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4c9dc:	00bffa04 	movi	r2,-24
   4c9e0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4c9e4:	e03ffd15 	stw	zero,-12(fp)
   4c9e8:	00001906 	br	4ca50 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   4c9ec:	008001b4 	movhi	r2,6
   4c9f0:	10b19f04 	addi	r2,r2,-14724
   4c9f4:	e0fffd17 	ldw	r3,-12(fp)
   4c9f8:	18c00324 	muli	r3,r3,12
   4c9fc:	10c5883a 	add	r2,r2,r3
   4ca00:	10800017 	ldw	r2,0(r2)
   4ca04:	10000f1e 	bne	r2,zero,4ca44 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   4ca08:	008001b4 	movhi	r2,6
   4ca0c:	10b19f04 	addi	r2,r2,-14724
   4ca10:	e0fffd17 	ldw	r3,-12(fp)
   4ca14:	18c00324 	muli	r3,r3,12
   4ca18:	10c5883a 	add	r2,r2,r3
   4ca1c:	e0ffff17 	ldw	r3,-4(fp)
   4ca20:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4ca24:	d0e00d17 	ldw	r3,-32716(gp)
   4ca28:	e0bffd17 	ldw	r2,-12(fp)
   4ca2c:	1880020e 	bge	r3,r2,4ca38 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   4ca30:	e0bffd17 	ldw	r2,-12(fp)
   4ca34:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
   4ca38:	e0bffd17 	ldw	r2,-12(fp)
   4ca3c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   4ca40:	00000606 	br	4ca5c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4ca44:	e0bffd17 	ldw	r2,-12(fp)
   4ca48:	10800044 	addi	r2,r2,1
   4ca4c:	e0bffd15 	stw	r2,-12(fp)
   4ca50:	e0bffd17 	ldw	r2,-12(fp)
   4ca54:	10800810 	cmplti	r2,r2,32
   4ca58:	103fe41e 	bne	r2,zero,4c9ec <__reset+0xfffcb9ec>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4ca5c:	e0bffe17 	ldw	r2,-8(fp)
}
   4ca60:	e037883a 	mov	sp,fp
   4ca64:	df000017 	ldw	fp,0(sp)
   4ca68:	dec00104 	addi	sp,sp,4
   4ca6c:	f800283a 	ret

0004ca70 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4ca70:	defffb04 	addi	sp,sp,-20
   4ca74:	df000415 	stw	fp,16(sp)
   4ca78:	df000404 	addi	fp,sp,16
   4ca7c:	e13ffe15 	stw	r4,-8(fp)
   4ca80:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4ca84:	e0bfff17 	ldw	r2,-4(fp)
   4ca88:	10840070 	cmpltui	r2,r2,4097
   4ca8c:	1000021e 	bne	r2,zero,4ca98 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4ca90:	00840004 	movi	r2,4096
   4ca94:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4ca98:	e0fffe17 	ldw	r3,-8(fp)
   4ca9c:	e0bfff17 	ldw	r2,-4(fp)
   4caa0:	1885883a 	add	r2,r3,r2
   4caa4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4caa8:	e0bffe17 	ldw	r2,-8(fp)
   4caac:	e0bffc15 	stw	r2,-16(fp)
   4cab0:	00000506 	br	4cac8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4cab4:	e0bffc17 	ldw	r2,-16(fp)
   4cab8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4cabc:	e0bffc17 	ldw	r2,-16(fp)
   4cac0:	10800804 	addi	r2,r2,32
   4cac4:	e0bffc15 	stw	r2,-16(fp)
   4cac8:	e0fffc17 	ldw	r3,-16(fp)
   4cacc:	e0bffd17 	ldw	r2,-12(fp)
   4cad0:	18bff836 	bltu	r3,r2,4cab4 <__reset+0xfffcbab4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4cad4:	e0bffe17 	ldw	r2,-8(fp)
   4cad8:	108007cc 	andi	r2,r2,31
   4cadc:	10000226 	beq	r2,zero,4cae8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4cae0:	e0bffc17 	ldw	r2,-16(fp)
   4cae4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4cae8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4caec:	0001883a 	nop
   4caf0:	e037883a 	mov	sp,fp
   4caf4:	df000017 	ldw	fp,0(sp)
   4caf8:	dec00104 	addi	sp,sp,4
   4cafc:	f800283a 	ret

0004cb00 <atexit>:
   4cb00:	200b883a 	mov	r5,r4
   4cb04:	000f883a 	mov	r7,zero
   4cb08:	000d883a 	mov	r6,zero
   4cb0c:	0009883a 	mov	r4,zero
   4cb10:	004cbc81 	jmpi	4cbc8 <__register_exitproc>

0004cb14 <exit>:
   4cb14:	defffe04 	addi	sp,sp,-8
   4cb18:	000b883a 	mov	r5,zero
   4cb1c:	dc000015 	stw	r16,0(sp)
   4cb20:	dfc00115 	stw	ra,4(sp)
   4cb24:	2021883a 	mov	r16,r4
   4cb28:	004cce00 	call	4cce0 <__call_exitprocs>
   4cb2c:	008001b4 	movhi	r2,6
   4cb30:	10b31904 	addi	r2,r2,-13212
   4cb34:	11000017 	ldw	r4,0(r2)
   4cb38:	20800f17 	ldw	r2,60(r4)
   4cb3c:	10000126 	beq	r2,zero,4cb44 <exit+0x30>
   4cb40:	103ee83a 	callr	r2
   4cb44:	8009883a 	mov	r4,r16
   4cb48:	004ce600 	call	4ce60 <_exit>

0004cb4c <memcmp>:
   4cb4c:	01c000c4 	movi	r7,3
   4cb50:	3980192e 	bgeu	r7,r6,4cbb8 <memcmp+0x6c>
   4cb54:	2144b03a 	or	r2,r4,r5
   4cb58:	11c4703a 	and	r2,r2,r7
   4cb5c:	10000f26 	beq	r2,zero,4cb9c <memcmp+0x50>
   4cb60:	20800003 	ldbu	r2,0(r4)
   4cb64:	28c00003 	ldbu	r3,0(r5)
   4cb68:	10c0151e 	bne	r2,r3,4cbc0 <memcmp+0x74>
   4cb6c:	31bfff84 	addi	r6,r6,-2
   4cb70:	01ffffc4 	movi	r7,-1
   4cb74:	00000406 	br	4cb88 <memcmp+0x3c>
   4cb78:	20800003 	ldbu	r2,0(r4)
   4cb7c:	28c00003 	ldbu	r3,0(r5)
   4cb80:	31bfffc4 	addi	r6,r6,-1
   4cb84:	10c00e1e 	bne	r2,r3,4cbc0 <memcmp+0x74>
   4cb88:	21000044 	addi	r4,r4,1
   4cb8c:	29400044 	addi	r5,r5,1
   4cb90:	31fff91e 	bne	r6,r7,4cb78 <__reset+0xfffcbb78>
   4cb94:	0005883a 	mov	r2,zero
   4cb98:	f800283a 	ret
   4cb9c:	20c00017 	ldw	r3,0(r4)
   4cba0:	28800017 	ldw	r2,0(r5)
   4cba4:	18bfee1e 	bne	r3,r2,4cb60 <__reset+0xfffcbb60>
   4cba8:	31bfff04 	addi	r6,r6,-4
   4cbac:	21000104 	addi	r4,r4,4
   4cbb0:	29400104 	addi	r5,r5,4
   4cbb4:	39bff936 	bltu	r7,r6,4cb9c <__reset+0xfffcbb9c>
   4cbb8:	303fe91e 	bne	r6,zero,4cb60 <__reset+0xfffcbb60>
   4cbbc:	003ff506 	br	4cb94 <__reset+0xfffcbb94>
   4cbc0:	10c5c83a 	sub	r2,r2,r3
   4cbc4:	f800283a 	ret

0004cbc8 <__register_exitproc>:
   4cbc8:	defffa04 	addi	sp,sp,-24
   4cbcc:	dc000315 	stw	r16,12(sp)
   4cbd0:	040001b4 	movhi	r16,6
   4cbd4:	84331904 	addi	r16,r16,-13212
   4cbd8:	80c00017 	ldw	r3,0(r16)
   4cbdc:	dc400415 	stw	r17,16(sp)
   4cbe0:	dfc00515 	stw	ra,20(sp)
   4cbe4:	18805217 	ldw	r2,328(r3)
   4cbe8:	2023883a 	mov	r17,r4
   4cbec:	10003726 	beq	r2,zero,4cccc <__register_exitproc+0x104>
   4cbf0:	10c00117 	ldw	r3,4(r2)
   4cbf4:	010007c4 	movi	r4,31
   4cbf8:	20c00e16 	blt	r4,r3,4cc34 <__register_exitproc+0x6c>
   4cbfc:	1a000044 	addi	r8,r3,1
   4cc00:	8800221e 	bne	r17,zero,4cc8c <__register_exitproc+0xc4>
   4cc04:	18c00084 	addi	r3,r3,2
   4cc08:	18c7883a 	add	r3,r3,r3
   4cc0c:	18c7883a 	add	r3,r3,r3
   4cc10:	12000115 	stw	r8,4(r2)
   4cc14:	10c7883a 	add	r3,r2,r3
   4cc18:	19400015 	stw	r5,0(r3)
   4cc1c:	0005883a 	mov	r2,zero
   4cc20:	dfc00517 	ldw	ra,20(sp)
   4cc24:	dc400417 	ldw	r17,16(sp)
   4cc28:	dc000317 	ldw	r16,12(sp)
   4cc2c:	dec00604 	addi	sp,sp,24
   4cc30:	f800283a 	ret
   4cc34:	00800034 	movhi	r2,0
   4cc38:	10800004 	addi	r2,r2,0
   4cc3c:	10002626 	beq	r2,zero,4ccd8 <__register_exitproc+0x110>
   4cc40:	01006404 	movi	r4,400
   4cc44:	d9400015 	stw	r5,0(sp)
   4cc48:	d9800115 	stw	r6,4(sp)
   4cc4c:	d9c00215 	stw	r7,8(sp)
   4cc50:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   4cc54:	d9400017 	ldw	r5,0(sp)
   4cc58:	d9800117 	ldw	r6,4(sp)
   4cc5c:	d9c00217 	ldw	r7,8(sp)
   4cc60:	10001d26 	beq	r2,zero,4ccd8 <__register_exitproc+0x110>
   4cc64:	81000017 	ldw	r4,0(r16)
   4cc68:	10000115 	stw	zero,4(r2)
   4cc6c:	02000044 	movi	r8,1
   4cc70:	22405217 	ldw	r9,328(r4)
   4cc74:	0007883a 	mov	r3,zero
   4cc78:	12400015 	stw	r9,0(r2)
   4cc7c:	20805215 	stw	r2,328(r4)
   4cc80:	10006215 	stw	zero,392(r2)
   4cc84:	10006315 	stw	zero,396(r2)
   4cc88:	883fde26 	beq	r17,zero,4cc04 <__reset+0xfffcbc04>
   4cc8c:	18c9883a 	add	r4,r3,r3
   4cc90:	2109883a 	add	r4,r4,r4
   4cc94:	1109883a 	add	r4,r2,r4
   4cc98:	21802215 	stw	r6,136(r4)
   4cc9c:	01800044 	movi	r6,1
   4cca0:	12406217 	ldw	r9,392(r2)
   4cca4:	30cc983a 	sll	r6,r6,r3
   4cca8:	4992b03a 	or	r9,r9,r6
   4ccac:	12406215 	stw	r9,392(r2)
   4ccb0:	21c04215 	stw	r7,264(r4)
   4ccb4:	01000084 	movi	r4,2
   4ccb8:	893fd21e 	bne	r17,r4,4cc04 <__reset+0xfffcbc04>
   4ccbc:	11006317 	ldw	r4,396(r2)
   4ccc0:	218cb03a 	or	r6,r4,r6
   4ccc4:	11806315 	stw	r6,396(r2)
   4ccc8:	003fce06 	br	4cc04 <__reset+0xfffcbc04>
   4cccc:	18805304 	addi	r2,r3,332
   4ccd0:	18805215 	stw	r2,328(r3)
   4ccd4:	003fc606 	br	4cbf0 <__reset+0xfffcbbf0>
   4ccd8:	00bfffc4 	movi	r2,-1
   4ccdc:	003fd006 	br	4cc20 <__reset+0xfffcbc20>

0004cce0 <__call_exitprocs>:
   4cce0:	defff504 	addi	sp,sp,-44
   4cce4:	df000915 	stw	fp,36(sp)
   4cce8:	dd400615 	stw	r21,24(sp)
   4ccec:	dc800315 	stw	r18,12(sp)
   4ccf0:	dfc00a15 	stw	ra,40(sp)
   4ccf4:	ddc00815 	stw	r23,32(sp)
   4ccf8:	dd800715 	stw	r22,28(sp)
   4ccfc:	dd000515 	stw	r20,20(sp)
   4cd00:	dcc00415 	stw	r19,16(sp)
   4cd04:	dc400215 	stw	r17,8(sp)
   4cd08:	dc000115 	stw	r16,4(sp)
   4cd0c:	d9000015 	stw	r4,0(sp)
   4cd10:	2839883a 	mov	fp,r5
   4cd14:	04800044 	movi	r18,1
   4cd18:	057fffc4 	movi	r21,-1
   4cd1c:	008001b4 	movhi	r2,6
   4cd20:	10b31904 	addi	r2,r2,-13212
   4cd24:	12000017 	ldw	r8,0(r2)
   4cd28:	45005217 	ldw	r20,328(r8)
   4cd2c:	44c05204 	addi	r19,r8,328
   4cd30:	a0001c26 	beq	r20,zero,4cda4 <__call_exitprocs+0xc4>
   4cd34:	a0800117 	ldw	r2,4(r20)
   4cd38:	15ffffc4 	addi	r23,r2,-1
   4cd3c:	b8000d16 	blt	r23,zero,4cd74 <__call_exitprocs+0x94>
   4cd40:	14000044 	addi	r16,r2,1
   4cd44:	8421883a 	add	r16,r16,r16
   4cd48:	8421883a 	add	r16,r16,r16
   4cd4c:	84402004 	addi	r17,r16,128
   4cd50:	a463883a 	add	r17,r20,r17
   4cd54:	a421883a 	add	r16,r20,r16
   4cd58:	e0001e26 	beq	fp,zero,4cdd4 <__call_exitprocs+0xf4>
   4cd5c:	80804017 	ldw	r2,256(r16)
   4cd60:	e0801c26 	beq	fp,r2,4cdd4 <__call_exitprocs+0xf4>
   4cd64:	bdffffc4 	addi	r23,r23,-1
   4cd68:	843fff04 	addi	r16,r16,-4
   4cd6c:	8c7fff04 	addi	r17,r17,-4
   4cd70:	bd7ff91e 	bne	r23,r21,4cd58 <__reset+0xfffcbd58>
   4cd74:	00800034 	movhi	r2,0
   4cd78:	10800004 	addi	r2,r2,0
   4cd7c:	10000926 	beq	r2,zero,4cda4 <__call_exitprocs+0xc4>
   4cd80:	a0800117 	ldw	r2,4(r20)
   4cd84:	1000301e 	bne	r2,zero,4ce48 <__call_exitprocs+0x168>
   4cd88:	a0800017 	ldw	r2,0(r20)
   4cd8c:	10003226 	beq	r2,zero,4ce58 <__call_exitprocs+0x178>
   4cd90:	a009883a 	mov	r4,r20
   4cd94:	98800015 	stw	r2,0(r19)
   4cd98:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   4cd9c:	9d000017 	ldw	r20,0(r19)
   4cda0:	a03fe41e 	bne	r20,zero,4cd34 <__reset+0xfffcbd34>
   4cda4:	dfc00a17 	ldw	ra,40(sp)
   4cda8:	df000917 	ldw	fp,36(sp)
   4cdac:	ddc00817 	ldw	r23,32(sp)
   4cdb0:	dd800717 	ldw	r22,28(sp)
   4cdb4:	dd400617 	ldw	r21,24(sp)
   4cdb8:	dd000517 	ldw	r20,20(sp)
   4cdbc:	dcc00417 	ldw	r19,16(sp)
   4cdc0:	dc800317 	ldw	r18,12(sp)
   4cdc4:	dc400217 	ldw	r17,8(sp)
   4cdc8:	dc000117 	ldw	r16,4(sp)
   4cdcc:	dec00b04 	addi	sp,sp,44
   4cdd0:	f800283a 	ret
   4cdd4:	a0800117 	ldw	r2,4(r20)
   4cdd8:	80c00017 	ldw	r3,0(r16)
   4cddc:	10bfffc4 	addi	r2,r2,-1
   4cde0:	15c01426 	beq	r2,r23,4ce34 <__call_exitprocs+0x154>
   4cde4:	80000015 	stw	zero,0(r16)
   4cde8:	183fde26 	beq	r3,zero,4cd64 <__reset+0xfffcbd64>
   4cdec:	95c8983a 	sll	r4,r18,r23
   4cdf0:	a0806217 	ldw	r2,392(r20)
   4cdf4:	a5800117 	ldw	r22,4(r20)
   4cdf8:	2084703a 	and	r2,r4,r2
   4cdfc:	10000b26 	beq	r2,zero,4ce2c <__call_exitprocs+0x14c>
   4ce00:	a0806317 	ldw	r2,396(r20)
   4ce04:	2088703a 	and	r4,r4,r2
   4ce08:	20000c1e 	bne	r4,zero,4ce3c <__call_exitprocs+0x15c>
   4ce0c:	89400017 	ldw	r5,0(r17)
   4ce10:	d9000017 	ldw	r4,0(sp)
   4ce14:	183ee83a 	callr	r3
   4ce18:	a0800117 	ldw	r2,4(r20)
   4ce1c:	15bfbf1e 	bne	r2,r22,4cd1c <__reset+0xfffcbd1c>
   4ce20:	98800017 	ldw	r2,0(r19)
   4ce24:	153fcf26 	beq	r2,r20,4cd64 <__reset+0xfffcbd64>
   4ce28:	003fbc06 	br	4cd1c <__reset+0xfffcbd1c>
   4ce2c:	183ee83a 	callr	r3
   4ce30:	003ff906 	br	4ce18 <__reset+0xfffcbe18>
   4ce34:	a5c00115 	stw	r23,4(r20)
   4ce38:	003feb06 	br	4cde8 <__reset+0xfffcbde8>
   4ce3c:	89000017 	ldw	r4,0(r17)
   4ce40:	183ee83a 	callr	r3
   4ce44:	003ff406 	br	4ce18 <__reset+0xfffcbe18>
   4ce48:	a0800017 	ldw	r2,0(r20)
   4ce4c:	a027883a 	mov	r19,r20
   4ce50:	1029883a 	mov	r20,r2
   4ce54:	003fb606 	br	4cd30 <__reset+0xfffcbd30>
   4ce58:	0005883a 	mov	r2,zero
   4ce5c:	003ffb06 	br	4ce4c <__reset+0xfffcbe4c>

0004ce60 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4ce60:	defffd04 	addi	sp,sp,-12
   4ce64:	df000215 	stw	fp,8(sp)
   4ce68:	df000204 	addi	fp,sp,8
   4ce6c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4ce70:	0001883a 	nop
   4ce74:	e0bfff17 	ldw	r2,-4(fp)
   4ce78:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   4ce7c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4ce80:	10000226 	beq	r2,zero,4ce8c <_exit+0x2c>
    ALT_SIM_FAIL();
   4ce84:	002af070 	cmpltui	zero,zero,43969
   4ce88:	00000106 	br	4ce90 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   4ce8c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4ce90:	003fff06 	br	4ce90 <__reset+0xfffcbe90>
